//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 1.1.4322.573.
// 
namespace RssBandit.DasBlog {
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ConfigEditingServiceSoap", Namespace="urn:schemas-newtelligence-com:dasblog:config-services")]
    public class ConfigEditingService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        public authenticationHeader authenticationHeaderValue;
        
        /// <remarks/>
        public ConfigEditingService() {
            this.Url = "http://localhost/dasBlog/ConfigEditingService.asmx";
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("authenticationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-newtelligence-com:dasblog:config-services/GetSiteConfig", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("siteConfig", Namespace="urn:schemas-newtelligence-com:dasblog:config-services")]
        public SiteConfig GetSiteConfig() {
            object[] results = this.Invoke("GetSiteConfig", new object[0]);
            return ((SiteConfig)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSiteConfig(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSiteConfig", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public SiteConfig EndGetSiteConfig(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SiteConfig)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("authenticationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-newtelligence-com:dasblog:config-services/UpdateSiteConfig", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        public void UpdateSiteConfig([System.Xml.Serialization.XmlElementAttribute(Namespace="urn:newtelligence-com:dasblog:config", IsNullable=true)] SiteConfig siteConfig) {
            this.Invoke("UpdateSiteConfig", new object[] {
                        siteConfig});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateSiteConfig(SiteConfig siteConfig, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateSiteConfig", new object[] {
                        siteConfig}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateSiteConfig(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("authenticationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-newtelligence-com:dasblog:config-services/EnumBlogrolls", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlArrayAttribute(Namespace="urn:schemas-newtelligence-com:dasblog:config-services")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="urn:schemas-newtelligence-com:dasblog:config-services")]
        public string[] EnumBlogrolls() {
            object[] results = this.Invoke("EnumBlogrolls", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEnumBlogrolls(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EnumBlogrolls", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndEnumBlogrolls(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("authenticationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-newtelligence-com:dasblog:config-services/GetBlogroll", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute(Namespace="urn:schemas-newtelligence-com:dasblog:config-services")]
        public System.Xml.XmlElement GetBlogroll([System.Xml.Serialization.XmlElementAttribute(Namespace="urn:schemas-newtelligence-com:dasblog:config-services")] string blogRollName) {
            object[] results = this.Invoke("GetBlogroll", new object[] {
                        blogRollName});
            return ((System.Xml.XmlElement)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetBlogroll(string blogRollName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetBlogroll", new object[] {
                        blogRollName}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Xml.XmlElement EndGetBlogroll(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Xml.XmlElement)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("authenticationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-newtelligence-com:dasblog:config-services/PostBlogroll", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        public void PostBlogroll([System.Xml.Serialization.XmlElementAttribute(Namespace="urn:schemas-newtelligence-com:dasblog:config-services")] string blogRollName, [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:schemas-newtelligence-com:dasblog:config-services")] System.Xml.XmlElement blogRoll) {
            this.Invoke("PostBlogroll", new object[] {
                        blogRollName,
                        blogRoll});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPostBlogroll(string blogRollName, System.Xml.XmlElement blogRoll, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PostBlogroll", new object[] {
                        blogRollName,
                        blogRoll}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndPostBlogroll(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-newtelligence-com:dasblog:config-services:auth-temp")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="urn:schemas-newtelligence-com:dasblog:config-services:auth-temp", IsNullable=false)]
    public class authenticationHeader : System.Web.Services.Protocols.SoapHeader {
        
        /// <remarks/>
        public string userName;
        
        /// <remarks/>
        public string password;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:newtelligence-com:dasblog:config")]
    public class CrosspostSite {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public System.Xml.XmlElement[] Any;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string profileName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string hostName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int port;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string endpoint;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string username;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string password;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string blogid;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string blogname;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string apitype;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:newtelligence-com:dasblog:config")]
    public class ContentFilter {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public System.Xml.XmlElement[] Any;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string find;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string replace;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool isregex;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:newtelligence-com:dasblog:config")]
    public class SiteConfig {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public System.Xml.XmlElement[] Any;
        
        /// <remarks/>
        public string Title;
        
        /// <remarks/>
        public string Subtitle;
        
        /// <remarks/>
        public string Theme;
        
        /// <remarks/>
        public string Description;
        
        /// <remarks/>
        public string Contact;
        
        /// <remarks/>
        public string Root;
        
        /// <remarks/>
        public string Copyright;
        
        /// <remarks/>
        public int RssDayCount;
        
        /// <remarks/>
        public int RssMainEntryCount;
        
        /// <remarks/>
        public int RssEntryCount;
        
        /// <remarks/>
        public bool EnableRssItemFooters;
        
        /// <remarks/>
        public string RssItemFooter;
        
        /// <remarks/>
        public int FrontPageDayCount;
        
        /// <remarks/>
        public int FrontPageEntryCount;
        
        /// <remarks/>
        public bool CategoryAllEntries;
        
        /// <remarks/>
        public string FrontPageCategory;
        
        /// <remarks/>
        public bool AlwaysIncludeContentInRSS;
        
        /// <remarks/>
        public bool EntryTitleAsLink;
        
        /// <remarks/>
        public bool NotifyWebLogsDotCom;
        
        /// <remarks/>
        public bool NotifyBloGs;
        
        /// <remarks/>
        public bool ObfuscateEmail;
        
        /// <remarks/>
        public string NotificationEMailAddress;
        
        /// <remarks/>
        public bool SendCommentsByEmail;
        
        /// <remarks/>
        public bool SendReferralsByEmail;
        
        /// <remarks/>
        public bool SendTrackbacksByEmail;
        
        /// <remarks/>
        public bool SendPingbacksByEmail;
        
        /// <remarks/>
        public bool EnableBloggerApi;
        
        /// <remarks/>
        public bool EnableComments;
        
        /// <remarks/>
        public bool EnableCommentApi;
        
        /// <remarks/>
        public bool EnableConfigEditService;
        
        /// <remarks/>
        public bool EnableEditService;
        
        /// <remarks/>
        public bool EnableAutoPingback;
        
        /// <remarks/>
        public bool ShowCommentCount;
        
        /// <remarks/>
        public bool EnableTrackbackService;
        
        /// <remarks/>
        public bool EnablePingbackService;
        
        /// <remarks/>
        public bool EnableStartPageCaching;
        
        /// <remarks/>
        public bool EnableBlogrollDescription;
        
        /// <remarks/>
        public bool EnableUrlRewriting;
        
        /// <remarks/>
        public bool EnableFtb;
        
        /// <remarks/>
        public bool EnableCrossposts;
        
        /// <remarks/>
        public bool UseUserCulture;
        
        /// <remarks/>
        public bool ShowItemDescriptionInAggregatedViews;
        
        /// <remarks/>
        public bool EnableClickThrough;
        
        /// <remarks/>
        public bool EnableAggregatorBugging;
        
        /// <remarks/>
        public int DisplayTimeZoneIndex;
        
        /// <remarks/>
        public bool AdjustDisplayTimeZone;
        
        /// <remarks/>
        public string EditPassword;
        
        /// <remarks/>
        public string ContentDir;
        
        /// <remarks/>
        public string LogDir;
        
        /// <remarks/>
        public string BinariesDir;
        
        /// <remarks/>
        public string SmtpServer;
        
        /// <remarks/>
        public bool EnablePop3;
        
        /// <remarks/>
        public string Pop3Server;
        
        /// <remarks/>
        public string Pop3Username;
        
        /// <remarks/>
        public string Pop3Password;
        
        /// <remarks/>
        public string Pop3SubjectPrefix;
        
        /// <remarks/>
        public int Pop3Interval;
        
        /// <remarks/>
        public bool Pop3InlineAttachedPictures;
        
        /// <remarks/>
        public int Pop3InlinedAttachedPicturesThumbHeight;
        
        /// <remarks/>
        public bool ApplyContentFiltersToWeb;
        
        /// <remarks/>
        public bool ApplyContentFiltersToRSS;
        
        /// <remarks/>
        public bool EnableXSSUpstream;
        
        /// <remarks/>
        public string XSSUpstreamEndpoint;
        
        /// <remarks/>
        public string XSSUpstreamUsername;
        
        /// <remarks/>
        public string XSSUpstreamPassword;
        
        /// <remarks/>
        public string XSSRSSFilename;
        
        /// <remarks/>
        public int XSSUpstreamInterval;
        
        /// <remarks/>
        public ContentFilter[] ContentFilters;
        
        /// <remarks/>
        public CrosspostSite[] CrosspostSites;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr;
    }
}
