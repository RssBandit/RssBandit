//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.832
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.832.
// 
#pragma warning disable 1591

namespace RssBandit.DasBlog_1_3 {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ConfigEditingServiceSoap", Namespace="urn:schemas-newtelligence-com:dasblog:config-services")]
    public partial class ConfigEditingService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReadFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReadNavigationOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateNavigationOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ConfigEditingService() {
            this.Url = "http://localhost/dasBlog1.3/ConfigEditingService.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetFilesCompletedEventHandler GetFilesCompleted;
        
        /// <remarks/>
        public event ReadFileCompletedEventHandler ReadFileCompleted;
        
        /// <remarks/>
        public event UpdateFileCompletedEventHandler UpdateFileCompleted;
        
        /// <remarks/>
        public event ReadNavigationCompletedEventHandler ReadNavigationCompleted;
        
        /// <remarks/>
        public event UpdateNavigationCompletedEventHandler UpdateNavigationCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-newtelligence-com:dasblog:config-services/GetFiles", RequestNamespace="urn:schemas-newtelligence-com:dasblog:config-services", ResponseNamespace="urn:schemas-newtelligence-com:dasblog:config-services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetFiles(string username, string password) {
            object[] results = this.Invoke("GetFiles", new object[] {
                        username,
                        password});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetFiles(string username, string password, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetFiles", new object[] {
                        username,
                        password}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGetFiles(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFilesAsync(string username, string password) {
            this.GetFilesAsync(username, password, null);
        }
        
        /// <remarks/>
        public void GetFilesAsync(string username, string password, object userState) {
            if ((this.GetFilesOperationCompleted == null)) {
                this.GetFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFilesOperationCompleted);
            }
            this.InvokeAsync("GetFiles", new object[] {
                        username,
                        password}, this.GetFilesOperationCompleted, userState);
        }
        
        private void OnGetFilesOperationCompleted(object arg) {
            if ((this.GetFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFilesCompleted(this, new GetFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-newtelligence-com:dasblog:config-services/ReadFile", RequestNamespace="urn:schemas-newtelligence-com:dasblog:config-services", ResponseNamespace="urn:schemas-newtelligence-com:dasblog:config-services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] ReadFile(string fileName, string username, string password) {
            object[] results = this.Invoke("ReadFile", new object[] {
                        fileName,
                        username,
                        password});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginReadFile(string fileName, string username, string password, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ReadFile", new object[] {
                        fileName,
                        username,
                        password}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndReadFile(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void ReadFileAsync(string fileName, string username, string password) {
            this.ReadFileAsync(fileName, username, password, null);
        }
        
        /// <remarks/>
        public void ReadFileAsync(string fileName, string username, string password, object userState) {
            if ((this.ReadFileOperationCompleted == null)) {
                this.ReadFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReadFileOperationCompleted);
            }
            this.InvokeAsync("ReadFile", new object[] {
                        fileName,
                        username,
                        password}, this.ReadFileOperationCompleted, userState);
        }
        
        private void OnReadFileOperationCompleted(object arg) {
            if ((this.ReadFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReadFileCompleted(this, new ReadFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-newtelligence-com:dasblog:config-services/UpdateFile", RequestNamespace="urn:schemas-newtelligence-com:dasblog:config-services", ResponseNamespace="urn:schemas-newtelligence-com:dasblog:config-services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateFile(string fileName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] content, string username, string password) {
            this.Invoke("UpdateFile", new object[] {
                        fileName,
                        content,
                        username,
                        password});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateFile(string fileName, byte[] content, string username, string password, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateFile", new object[] {
                        fileName,
                        content,
                        username,
                        password}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateFile(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateFileAsync(string fileName, byte[] content, string username, string password) {
            this.UpdateFileAsync(fileName, content, username, password, null);
        }
        
        /// <remarks/>
        public void UpdateFileAsync(string fileName, byte[] content, string username, string password, object userState) {
            if ((this.UpdateFileOperationCompleted == null)) {
                this.UpdateFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateFileOperationCompleted);
            }
            this.InvokeAsync("UpdateFile", new object[] {
                        fileName,
                        content,
                        username,
                        password}, this.UpdateFileOperationCompleted, userState);
        }
        
        private void OnUpdateFileOperationCompleted(object arg) {
            if ((this.UpdateFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-newtelligence-com:dasblog:config-services/ReadNavigation", RequestNamespace="urn:schemas-newtelligence-com:dasblog:config-services", ResponseNamespace="urn:schemas-newtelligence-com:dasblog:config-services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("links", IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("link", IsNullable=false)]
        public NavigationLink[] ReadNavigation(string username, string password) {
            object[] results = this.Invoke("ReadNavigation", new object[] {
                        username,
                        password});
            return ((NavigationLink[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginReadNavigation(string username, string password, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ReadNavigation", new object[] {
                        username,
                        password}, callback, asyncState);
        }
        
        /// <remarks/>
        public NavigationLink[] EndReadNavigation(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((NavigationLink[])(results[0]));
        }
        
        /// <remarks/>
        public void ReadNavigationAsync(string username, string password) {
            this.ReadNavigationAsync(username, password, null);
        }
        
        /// <remarks/>
        public void ReadNavigationAsync(string username, string password, object userState) {
            if ((this.ReadNavigationOperationCompleted == null)) {
                this.ReadNavigationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReadNavigationOperationCompleted);
            }
            this.InvokeAsync("ReadNavigation", new object[] {
                        username,
                        password}, this.ReadNavigationOperationCompleted, userState);
        }
        
        private void OnReadNavigationOperationCompleted(object arg) {
            if ((this.ReadNavigationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReadNavigationCompleted(this, new ReadNavigationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-newtelligence-com:dasblog:config-services/UpdateNavigation", RequestNamespace="urn:schemas-newtelligence-com:dasblog:config-services", ResponseNamespace="urn:schemas-newtelligence-com:dasblog:config-services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateNavigation([System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute("link", IsNullable=false)] NavigationLink[] links, string username, string password) {
            this.Invoke("UpdateNavigation", new object[] {
                        links,
                        username,
                        password});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateNavigation(NavigationLink[] links, string username, string password, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateNavigation", new object[] {
                        links,
                        username,
                        password}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateNavigation(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateNavigationAsync(NavigationLink[] links, string username, string password) {
            this.UpdateNavigationAsync(links, username, password, null);
        }
        
        /// <remarks/>
        public void UpdateNavigationAsync(NavigationLink[] links, string username, string password, object userState) {
            if ((this.UpdateNavigationOperationCompleted == null)) {
                this.UpdateNavigationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateNavigationOperationCompleted);
            }
            this.InvokeAsync("UpdateNavigation", new object[] {
                        links,
                        username,
                        password}, this.UpdateNavigationOperationCompleted, userState);
        }
        
        private void OnUpdateNavigationOperationCompleted(object arg) {
            if ((this.UpdateNavigationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateNavigationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.832")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-newtelligence-com:dasblog:config-services")]
    public partial class NavigationLink {
        
        private string nameField;
        
        private string urlField;
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string url {
            get {
                return this.urlField;
            }
            set {
                this.urlField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void GetFilesCompletedEventHandler(object sender, GetFilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void ReadFileCompletedEventHandler(object sender, ReadFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReadFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReadFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void UpdateFileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void ReadNavigationCompletedEventHandler(object sender, ReadNavigationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReadNavigationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReadNavigationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NavigationLink[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NavigationLink[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void UpdateNavigationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591