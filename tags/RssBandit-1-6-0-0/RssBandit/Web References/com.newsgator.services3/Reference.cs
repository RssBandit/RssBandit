//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.832
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.832.
// 
#pragma warning disable 1591

namespace RssBandit.com.newsgator.services3 {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SubscriptionWebServiceSoap", Namespace="http://services.newsgator.com/svc/Subscription.asmx")]
    public partial class SubscriptionWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private NGAPIToken nGAPITokenValueField;
        
        private System.Threading.SendOrPostCallback AddSubscriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteSubscriptionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReplaceSubscriptionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback MergeSubscriptionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveSubscriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback RenameSubscriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSubscriptionCountsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSubscriptionListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUpdatesOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SubscriptionWebService() {
            this.Url = "http://services.newsgator.com/ngws/svc/Subscription.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public NGAPIToken NGAPITokenValue {
            get {
                return this.nGAPITokenValueField;
            }
            set {
                this.nGAPITokenValueField = value;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event AddSubscriptionCompletedEventHandler AddSubscriptionCompleted;
        
        /// <remarks/>
        public event DeleteSubscriptionsCompletedEventHandler DeleteSubscriptionsCompleted;
        
        /// <remarks/>
        public event ReplaceSubscriptionsCompletedEventHandler ReplaceSubscriptionsCompleted;
        
        /// <remarks/>
        public event MergeSubscriptionsCompletedEventHandler MergeSubscriptionsCompleted;
        
        /// <remarks/>
        public event MoveSubscriptionCompletedEventHandler MoveSubscriptionCompleted;
        
        /// <remarks/>
        public event RenameSubscriptionCompletedEventHandler RenameSubscriptionCompleted;
        
        /// <remarks/>
        public event GetSubscriptionCountsCompletedEventHandler GetSubscriptionCountsCompleted;
        
        /// <remarks/>
        public event GetSubscriptionListCompletedEventHandler GetSubscriptionListCompleted;
        
        /// <remarks/>
        public event GetUpdatesCompletedEventHandler GetUpdatesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("NGAPITokenValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.newsgator.com/svc/Subscription.asmx/AddSubscription", RequestNamespace="http://services.newsgator.com/svc/Subscription.asmx", ResponseNamespace="http://services.newsgator.com/svc/Subscription.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddSubscription(string xmlUrl, int folderId, NGOSCredential cred) {
            object[] results = this.Invoke("AddSubscription", new object[] {
                        xmlUrl,
                        folderId,
                        cred});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddSubscription(string xmlUrl, int folderId, NGOSCredential cred, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddSubscription", new object[] {
                        xmlUrl,
                        folderId,
                        cred}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndAddSubscription(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddSubscriptionAsync(string xmlUrl, int folderId, NGOSCredential cred) {
            this.AddSubscriptionAsync(xmlUrl, folderId, cred, null);
        }
        
        /// <remarks/>
        public void AddSubscriptionAsync(string xmlUrl, int folderId, NGOSCredential cred, object userState) {
            if ((this.AddSubscriptionOperationCompleted == null)) {
                this.AddSubscriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSubscriptionOperationCompleted);
            }
            this.InvokeAsync("AddSubscription", new object[] {
                        xmlUrl,
                        folderId,
                        cred}, this.AddSubscriptionOperationCompleted, userState);
        }
        
        private void OnAddSubscriptionOperationCompleted(object arg) {
            if ((this.AddSubscriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddSubscriptionCompleted(this, new AddSubscriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("NGAPITokenValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.newsgator.com/svc/Subscription.asmx/DeleteSubscriptions", RequestNamespace="http://services.newsgator.com/svc/Subscription.asmx", ResponseNamespace="http://services.newsgator.com/svc/Subscription.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteSubscriptions(int[] subscriptionList) {
            this.Invoke("DeleteSubscriptions", new object[] {
                        subscriptionList});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteSubscriptions(int[] subscriptionList, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteSubscriptions", new object[] {
                        subscriptionList}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteSubscriptions(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteSubscriptionsAsync(int[] subscriptionList) {
            this.DeleteSubscriptionsAsync(subscriptionList, null);
        }
        
        /// <remarks/>
        public void DeleteSubscriptionsAsync(int[] subscriptionList, object userState) {
            if ((this.DeleteSubscriptionsOperationCompleted == null)) {
                this.DeleteSubscriptionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSubscriptionsOperationCompleted);
            }
            this.InvokeAsync("DeleteSubscriptions", new object[] {
                        subscriptionList}, this.DeleteSubscriptionsOperationCompleted, userState);
        }
        
        private void OnDeleteSubscriptionsOperationCompleted(object arg) {
            if ((this.DeleteSubscriptionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteSubscriptionsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("NGAPITokenValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.newsgator.com/svc/Subscription.asmx/ReplaceSubscriptions", RequestNamespace="http://services.newsgator.com/svc/Subscription.asmx", ResponseNamespace="http://services.newsgator.com/svc/Subscription.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ReplaceSubscriptions(string locationName, System.Xml.XmlElement opmlDocument) {
            this.Invoke("ReplaceSubscriptions", new object[] {
                        locationName,
                        opmlDocument});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginReplaceSubscriptions(string locationName, System.Xml.XmlElement opmlDocument, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ReplaceSubscriptions", new object[] {
                        locationName,
                        opmlDocument}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndReplaceSubscriptions(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ReplaceSubscriptionsAsync(string locationName, System.Xml.XmlElement opmlDocument) {
            this.ReplaceSubscriptionsAsync(locationName, opmlDocument, null);
        }
        
        /// <remarks/>
        public void ReplaceSubscriptionsAsync(string locationName, System.Xml.XmlElement opmlDocument, object userState) {
            if ((this.ReplaceSubscriptionsOperationCompleted == null)) {
                this.ReplaceSubscriptionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReplaceSubscriptionsOperationCompleted);
            }
            this.InvokeAsync("ReplaceSubscriptions", new object[] {
                        locationName,
                        opmlDocument}, this.ReplaceSubscriptionsOperationCompleted, userState);
        }
        
        private void OnReplaceSubscriptionsOperationCompleted(object arg) {
            if ((this.ReplaceSubscriptionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReplaceSubscriptionsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("NGAPITokenValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.newsgator.com/svc/Subscription.asmx/MergeSubscriptions", RequestNamespace="http://services.newsgator.com/svc/Subscription.asmx", ResponseNamespace="http://services.newsgator.com/svc/Subscription.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlElement MergeSubscriptions(string locationName, System.Xml.XmlElement opmlDocument) {
            object[] results = this.Invoke("MergeSubscriptions", new object[] {
                        locationName,
                        opmlDocument});
            return ((System.Xml.XmlElement)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginMergeSubscriptions(string locationName, System.Xml.XmlElement opmlDocument, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("MergeSubscriptions", new object[] {
                        locationName,
                        opmlDocument}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Xml.XmlElement EndMergeSubscriptions(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Xml.XmlElement)(results[0]));
        }
        
        /// <remarks/>
        public void MergeSubscriptionsAsync(string locationName, System.Xml.XmlElement opmlDocument) {
            this.MergeSubscriptionsAsync(locationName, opmlDocument, null);
        }
        
        /// <remarks/>
        public void MergeSubscriptionsAsync(string locationName, System.Xml.XmlElement opmlDocument, object userState) {
            if ((this.MergeSubscriptionsOperationCompleted == null)) {
                this.MergeSubscriptionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMergeSubscriptionsOperationCompleted);
            }
            this.InvokeAsync("MergeSubscriptions", new object[] {
                        locationName,
                        opmlDocument}, this.MergeSubscriptionsOperationCompleted, userState);
        }
        
        private void OnMergeSubscriptionsOperationCompleted(object arg) {
            if ((this.MergeSubscriptionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MergeSubscriptionsCompleted(this, new MergeSubscriptionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("NGAPITokenValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.newsgator.com/svc/Subscription.asmx/MoveSubscription", RequestNamespace="http://services.newsgator.com/svc/Subscription.asmx", ResponseNamespace="http://services.newsgator.com/svc/Subscription.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MoveSubscription(int subscriptionId, int toFolderId) {
            this.Invoke("MoveSubscription", new object[] {
                        subscriptionId,
                        toFolderId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginMoveSubscription(int subscriptionId, int toFolderId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("MoveSubscription", new object[] {
                        subscriptionId,
                        toFolderId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndMoveSubscription(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void MoveSubscriptionAsync(int subscriptionId, int toFolderId) {
            this.MoveSubscriptionAsync(subscriptionId, toFolderId, null);
        }
        
        /// <remarks/>
        public void MoveSubscriptionAsync(int subscriptionId, int toFolderId, object userState) {
            if ((this.MoveSubscriptionOperationCompleted == null)) {
                this.MoveSubscriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveSubscriptionOperationCompleted);
            }
            this.InvokeAsync("MoveSubscription", new object[] {
                        subscriptionId,
                        toFolderId}, this.MoveSubscriptionOperationCompleted, userState);
        }
        
        private void OnMoveSubscriptionOperationCompleted(object arg) {
            if ((this.MoveSubscriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveSubscriptionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("NGAPITokenValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.newsgator.com/svc/Subscription.asmx/RenameSubscription", RequestNamespace="http://services.newsgator.com/svc/Subscription.asmx", ResponseNamespace="http://services.newsgator.com/svc/Subscription.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RenameSubscription(int subscriptionId, string newName) {
            this.Invoke("RenameSubscription", new object[] {
                        subscriptionId,
                        newName});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRenameSubscription(int subscriptionId, string newName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RenameSubscription", new object[] {
                        subscriptionId,
                        newName}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRenameSubscription(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void RenameSubscriptionAsync(int subscriptionId, string newName) {
            this.RenameSubscriptionAsync(subscriptionId, newName, null);
        }
        
        /// <remarks/>
        public void RenameSubscriptionAsync(int subscriptionId, string newName, object userState) {
            if ((this.RenameSubscriptionOperationCompleted == null)) {
                this.RenameSubscriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRenameSubscriptionOperationCompleted);
            }
            this.InvokeAsync("RenameSubscription", new object[] {
                        subscriptionId,
                        newName}, this.RenameSubscriptionOperationCompleted, userState);
        }
        
        private void OnRenameSubscriptionOperationCompleted(object arg) {
            if ((this.RenameSubscriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RenameSubscriptionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("NGAPITokenValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.newsgator.com/svc/Subscription.asmx/GetSubscriptionCounts", RequestNamespace="http://services.newsgator.com/svc/Subscription.asmx", ResponseNamespace="http://services.newsgator.com/svc/Subscription.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlElement GetSubscriptionCounts(string location) {
            object[] results = this.Invoke("GetSubscriptionCounts", new object[] {
                        location});
            return ((System.Xml.XmlElement)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSubscriptionCounts(string location, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSubscriptionCounts", new object[] {
                        location}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Xml.XmlElement EndGetSubscriptionCounts(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Xml.XmlElement)(results[0]));
        }
        
        /// <remarks/>
        public void GetSubscriptionCountsAsync(string location) {
            this.GetSubscriptionCountsAsync(location, null);
        }
        
        /// <remarks/>
        public void GetSubscriptionCountsAsync(string location, object userState) {
            if ((this.GetSubscriptionCountsOperationCompleted == null)) {
                this.GetSubscriptionCountsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSubscriptionCountsOperationCompleted);
            }
            this.InvokeAsync("GetSubscriptionCounts", new object[] {
                        location}, this.GetSubscriptionCountsOperationCompleted, userState);
        }
        
        private void OnGetSubscriptionCountsOperationCompleted(object arg) {
            if ((this.GetSubscriptionCountsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSubscriptionCountsCompleted(this, new GetSubscriptionCountsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("NGAPITokenValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.newsgator.com/svc/Subscription.asmx/GetSubscriptionList", RequestNamespace="http://services.newsgator.com/svc/Subscription.asmx", ResponseNamespace="http://services.newsgator.com/svc/Subscription.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlElement GetSubscriptionList(string location, string syncToken) {
            object[] results = this.Invoke("GetSubscriptionList", new object[] {
                        location,
                        syncToken});
            return ((System.Xml.XmlElement)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSubscriptionList(string location, string syncToken, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSubscriptionList", new object[] {
                        location,
                        syncToken}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Xml.XmlElement EndGetSubscriptionList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Xml.XmlElement)(results[0]));
        }
        
        /// <remarks/>
        public void GetSubscriptionListAsync(string location, string syncToken) {
            this.GetSubscriptionListAsync(location, syncToken, null);
        }
        
        /// <remarks/>
        public void GetSubscriptionListAsync(string location, string syncToken, object userState) {
            if ((this.GetSubscriptionListOperationCompleted == null)) {
                this.GetSubscriptionListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSubscriptionListOperationCompleted);
            }
            this.InvokeAsync("GetSubscriptionList", new object[] {
                        location,
                        syncToken}, this.GetSubscriptionListOperationCompleted, userState);
        }
        
        private void OnGetSubscriptionListOperationCompleted(object arg) {
            if ((this.GetSubscriptionListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSubscriptionListCompleted(this, new GetSubscriptionListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.newsgator.com/svc/Subscription.asmx/GetUpdates", RequestNamespace="http://services.newsgator.com/svc/Subscription.asmx", ResponseNamespace="http://services.newsgator.com/svc/Subscription.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetUpdates(string locationName, string syncToken, out string newToken) {
            object[] results = this.Invoke("GetUpdates", new object[] {
                        locationName,
                        syncToken});
            newToken = ((string)(results[1]));
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetUpdates(string locationName, string syncToken, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetUpdates", new object[] {
                        locationName,
                        syncToken}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGetUpdates(System.IAsyncResult asyncResult, out string newToken) {
            object[] results = this.EndInvoke(asyncResult);
            newToken = ((string)(results[1]));
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUpdatesAsync(string locationName, string syncToken) {
            this.GetUpdatesAsync(locationName, syncToken, null);
        }
        
        /// <remarks/>
        public void GetUpdatesAsync(string locationName, string syncToken, object userState) {
            if ((this.GetUpdatesOperationCompleted == null)) {
                this.GetUpdatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUpdatesOperationCompleted);
            }
            this.InvokeAsync("GetUpdates", new object[] {
                        locationName,
                        syncToken}, this.GetUpdatesOperationCompleted, userState);
        }
        
        private void OnGetUpdatesOperationCompleted(object arg) {
            if ((this.GetUpdatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUpdatesCompleted(this, new GetUpdatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.832")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://services.newsgator.com/svc/Subscription.asmx")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://services.newsgator.com/svc/Subscription.asmx", IsNullable=false)]
    public partial class NGAPIToken : System.Web.Services.Protocols.SoapHeader {
        
        private string tokenField;
        
        /// <remarks/>
        public string Token {
            get {
                return this.tokenField;
            }
            set {
                this.tokenField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.832")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://services.newsgator.com/svc/Subscription.asmx")]
    public partial class Credential {
        
        private string usernameField;
        
        private string passwordencField;
        
        private string domainField;
        
        /// <remarks/>
        public string username {
            get {
                return this.usernameField;
            }
            set {
                this.usernameField = value;
            }
        }
        
        /// <remarks/>
        public string passwordenc {
            get {
                return this.passwordencField;
            }
            set {
                this.passwordencField = value;
            }
        }
        
        /// <remarks/>
        public string domain {
            get {
                return this.domainField;
            }
            set {
                this.domainField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.832")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://services.newsgator.com/svc/Subscription.asmx")]
    public partial class NGOSCredential {
        
        private object itemField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("networkCredential", typeof(Credential))]
        [System.Xml.Serialization.XmlElementAttribute("useNGOSCredentials", typeof(object))]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void AddSubscriptionCompletedEventHandler(object sender, AddSubscriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddSubscriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddSubscriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void DeleteSubscriptionsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void ReplaceSubscriptionsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void MergeSubscriptionsCompletedEventHandler(object sender, MergeSubscriptionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MergeSubscriptionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MergeSubscriptionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlElement Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlElement)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void MoveSubscriptionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void RenameSubscriptionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void GetSubscriptionCountsCompletedEventHandler(object sender, GetSubscriptionCountsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSubscriptionCountsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSubscriptionCountsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlElement Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlElement)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void GetSubscriptionListCompletedEventHandler(object sender, GetSubscriptionListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSubscriptionListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSubscriptionListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlElement Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlElement)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void GetUpdatesCompletedEventHandler(object sender, GetUpdatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUpdatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUpdatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string newToken {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591