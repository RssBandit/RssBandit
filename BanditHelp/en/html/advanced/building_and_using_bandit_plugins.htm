<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Building and Using RSS Bandit plugins</title>

<!--(Meta)==========================================================-->

<meta name="template" content="Bandit Topic.htt">
<meta http-equiv=content-type content="text/html; charset=windows-1252">
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=6995>
<meta name=layout-width content=1615>


 <meta name="topic-status" content="In Progress">
 <meta name="topic-priority" content="0">
 <meta name="topic-time-estimate" content="0">
 <meta name="topic-comment" content="">
 <meta name="topic-id" content="Building_and_Using_RSS_Bandit_plugins"><!--(Links)=========================================================-->

<link rel="StyleSheet" href="..\..\default.css">


<!--(Style Sheet)===================================================-->

<style>
<!--

body {
	border-bottom-style: Groove;
	border-bottom-width: 3px;
	border-bottom-color: #000000;
}

-->
</style>


</head>

<!--(Body)==========================================================-->


<body>

<!--kadov_tag{{<placeholder id="header">}}-->
<h1><!--kadov_tag{{<variable name=title
							x-format=default
							x-value="Building and Using RSS Bandit plugins">}}-->Building 
 and Using RSS Bandit plugins<!--kadov_tag{{</variable>}}--></h1>

<p><b style="font-weight: bold;">RSS Bandit Support for the IBlogExtension</b><br>
RSS Bandit provides support for plug-ins via the <code><strong>IBlogExtension</strong></code> 
 interface. The interface provides a simple extensibility point for aggregators 
 to be able to hook into 3rd party blogging tools.&nbsp; To read about 
 the development of this extension, review visit <a href="http://www.pocketsoap.com/weblog/stories/2003/04/0023.html">this 
 site</a>.</p>

<p>When you right click a feed item within RSS Bandit, you'll notice the 
 following two menu options <b>Blog This Using W::Bloggar</b> and <b>Email 
 This...</b> as in figure 1. </p>

<p><img src="../../images/ContextMenu.jpg"
		alt="Context Menu"
		style="width: 435px;
				height: 267px;
				border-style: none;
				border-style: none;"
		width=435
		height=267
		border=0> <span class=figure><br>
Figure 1: RSS Item Context Menu.</span> </p>

<p>(you might have others if you already have some plugins installed). 
 Building a plugin that implements the <code>IBlogExtension</code> interface 
 adds an item to the context menu when you right click a feed item. Typically 
 an IBlogExtension adds the ability to post an RSS item to a blog from 
 within RSS Bandit. However, there's no limit to the functionality one 
 can add via a plug-in. </p>

<p><b style="font-weight: bold;">Building an IBlogExtension plug-in</b><br>
In order to build a plug-in for RSS Bandit, simply reference the <b>blogExtension.dll</b>, 
 implement the <code>IBlogExtension</code> interface, and drop the compiled 
 assembly in the <b>plugins</b> directory within the directory where RSS 
 Bandit is installed. </p>

<p><b style="font-weight: bold;">Walk Through</b><br>
Sounds easy enough? I'll walk you through building a simple plug-in using 
 Visual Studio .NET 2003.&nbsp; The plug-in we'll create will simply display 
 the XML content of a feed item when you invoke the plug-in via the context 
 menu. I assume that you are already familiar with building a class library 
 with VS.NET.</p>

<p>After starting up Visual Studio.NET, create a new Class Library project 
 called MyPlugin as in figure 2.</p>

<p><img src="../../images/ClassLibrary.jpg"
		alt="Class Library Project"
		style="width: 531px;
				height: 368px;
				border-style: none;
				vertical-align: middle;
				border-style: none;
				vertical-align: middle;"
		width=531
		height=368
		align=middle
		border=0> <span class=figure><br>
Figure 2: New Project Dialog</span> </p>

<p>The first thing you'll need to do is add a reference to the <b>blogExtension.dll</b>. 
 There are two ways to obtain this dll. The first is to download a signed 
 version from <a href="http://www.pocketsoap.com/weblog/mp/2003/05/blogExtension.zip">here</a>. 
 You can also look for the assembly in CVS in the following directory: 
 <b>current_work\Source\RssBandit\bin\blogExtension.dll</b>. As of this 
 writing, the dll has the version 1.1.0.2. </p>

<p>You'll also want to add a reference to System.Windows.Forms.dll. </p>

<p>The IBlogExtension interface is intentionally quite simple. For your 
 information, the source code for the interface is below. </p>

<!-- code formatted by http://manoli.net/csharpformat/ -->
			<pre class=csharpcode>
<code style="font-family: monospace;"><span class=kwrd>using</span> System;<span class=kwrd>
using</span> System.Xml.XPath ;<span class=kwrd>
using</span> System.Reflection ;<span class=kwrd>
using</span> System.Windows.Forms ;
[assembly:AssemblyKeyFile(<span class=str>&quot;public.snk&quot;</span>)]
[assembly:AssemblyDelaySign(<span class=kwrd>true</span>)]
[assembly:AssemblyVersion(<span class=str>&quot;1.1.0.2&quot;</span>)]<span class=kwrd>
namespace</span> Syndication.Extensibility
{
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<span class=kwrd><!--kadov_tag{{</spaces>}}-->public</span> <span class=kwrd>interface</span> IBlogExtension
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->{
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<span class=rem><!--kadov_tag{{</spaces>}}-->// Name of plug-in, suitable for display to a user </span>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<span class=kwrd><!--kadov_tag{{</spaces>}}-->string</span> DisplayName { get; }
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<span class=rem><!--kadov_tag{{</spaces>}}-->// return true if plug-in has configuration settings</span>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<span class=kwrd><!--kadov_tag{{</spaces>}}-->bool</span> HasConfiguration { get; }
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<span class=rem><!--kadov_tag{{</spaces>}}-->// Return true if an editing GUI will be shown to the </span>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<span class=rem><!--kadov_tag{{</spaces>}}-->// user when BlogItem is called. In this case, the </span>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<span class=rem><!--kadov_tag{{</spaces>}}-->// aggregator will not display its own editing UI. </span>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<span class=kwrd><!--kadov_tag{{</spaces>}}-->bool</span> HasEditingGUI { get ; }
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<span class=rem><!--kadov_tag{{</spaces>}}-->// Display configuration dialog to user, if applicable </span>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<span class=kwrd><!--kadov_tag{{</spaces>}}-->void</span> Configure(IWin32Window parent);
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<span class=rem><!--kadov_tag{{</spaces>}}-->// Post item to weblog. If plug-in is going to show a </span>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<span class=rem><!--kadov_tag{{</spaces>}}-->// GUI for editing, it should return true to HasEditingGUI(). </span>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<span class=kwrd><!--kadov_tag{{</spaces>}}-->void</span> BlogItem(IXPathNavigable rssFragment, <span class=kwrd>bool</span> edited);
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->}
}</code>
</pre>

<p>Rename the <strong>Class.cs</strong> file to <strong>DisplayRawRssItemPlugin.cs</strong> 
 and the class to <code><strong>DisplayRawRssItemPlugin</strong></code>. 
 Ensure that the following using statements are at the top of your class. 
 </p>

<pre class=csharpcode>
<code style="font-family: monospace;"><span class=kwrd>using</span> System;<span class=kwrd>
using</span> System.IO;<span class=kwrd>
using</span> System.Text;<span class=kwrd>
using</span> System.Xml;<span class=kwrd>
using</span> System.Xml.XPath;<span class=kwrd>
using</span> System.Xml.Xsl;<span class=kwrd>
using</span> Syndication.Extensibility;
				</code>
</pre>

Now make sure your class inherits from <b><code>IBlogExtension</code></b>. 
 At this point your code window should look like figure 3. 

<p><img src="../../images/ImplementingIBlogExtension.jpg"
		alt="Code Window"
		style="width: 735px;
				height: 275px;
				border-style: none;
				vertical-align: middle;
				border-style: none;
				vertical-align: middle;"
		width=735
		height=275
		align=middle
		border=0> <span class=figure><br>
Figure 3: Code Window</span> </p>

<p>Hitting the TAB key will create stub code for each of the methods we'll 
 need to implement. There are three properties to implement and two methods. 
 Let's go over each of the properties first and then the methods. </p>

<p>The first property we'll look at is <code><strong>HasConfiguration</strong></code>. 
 RSS Bandit will check this property to see if your plug-in has its own 
 configuration settings. If true, Rss Bandit will call the <code><strong>Configure</strong></code> 
 method in order to display a dialog to edit the configuration. For our 
 simple plug-in, we won't add any configuration settings to worry about. 
 Thus the implementation looks like </p>

<pre class=csharpcode>
<code style="font-family: monospace;"><span class=kwrd>public</span> <span class=kwrd>bool</span> HasConfiguration
{
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->get
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->{
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=kwrd><!--kadov_tag{{</spaces>}}-->return</span> <span class=kwrd>false</span>;
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->}
}</code>
</pre>

<p>The next property we'll look at is <code><strong>HasEditingGUI</strong></code>. 
 RSS Bandit will check this property to see if an editing GUI will be shown 
 when you call the plug-in on a selected blog item. In this case, we're 
 merely going to display the RSS item so we will return false here. </p>

<pre class=csharpcode>
<code style="font-family: monospace;"><span class=kwrd>public</span> <span class=kwrd>bool</span> HasEditingGUI
{
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->get
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->{
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=kwrd><!--kadov_tag{{</spaces>}}-->return</span> <span class=kwrd>false</span>;
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->}
}</code>
</pre>

<p>The last property we'll look at is <code><strong>DisplayName</strong></code>. 
 The value of this property will be displayed in the context menu when 
 you right click a blog item. So let's make sure it's informative. </p>

<pre class=csharpcode>
<code style="font-family: monospace;"><span class=kwrd>public</span> <span class=kwrd>string</span> DisplayName
{
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->get
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->{
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=kwrd><!--kadov_tag{{</spaces>}}-->return</span> <span class=str>&quot;Display This Item's RSS...&quot;</span>;
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->}
}</code>
</pre>

<p>The first method we'll look at is <code><strong>Configure</strong></code>. 
 As mentioned before, if <code><strong>HasConfiguration</strong></code> 
 returns true, RSS Bandit will call the Configure menu in order to display 
 a configuration dialog used to configure the plug-in. It is up to you 
 to implement the dialog, but for this plug-in, we'll do no such thing. 
 </p>

<pre class=csharpcode>
<code style="font-family: monospace;"><span class=kwrd>public</span> <span class=kwrd>void</span> Configure(System.Windows.Forms.IWin32Window parent)
{
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<span class=rem><!--kadov_tag{{</spaces>}}-->//Do Nothing</span>
}</code>
</pre>

<p>Finally we're ready to implement the workhorse of the plug-in, the <code><strong>BlogItem</strong></code> 
 method. When your plugin is called via the context menu, RSS Bandit will 
 hand this method an <b>rssFragment</b>. The rssFragment is an instance 
 of a class that implements the <b><a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemxmlxpathixpathnavigableclasstopic.asp">IXPathNavigable</a></b> 
 interface. This provides a way to create an instance of <b><a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemxmlxpathxpathnavigatorclasstopic.asp">XPathNavigator</a></b> 
 used to navigate over the underlying RSS item's XML via the <code><strong>IXpathNavigable.CreateNavigator</strong></code> 
 method. </p>

<p>The underlying XML will contain the source <strong>RSS 2.0</strong> 
 document with all other RSS items removed. If the underlying feed is not 
 RSS 2.0 (for example if the feed is an ATOM feed or an earlier version 
 of RSS) Rss Bandit transforms the feed to RSS 2.0 prior to handing it 
 off to the plugin. Therefore, the fragment will always be formatted as 
 RSS 2.0. Actually displaying the underlying XML takes a bit of coding, 
 but we'll roll up our sleeves and dive right in. </p>

<pre class=csharpcode>
<code style="font-family: monospace;"><span class=rem>/// &lt;summary&gt;</span><span class=rem>
/// This is the identity stylesheet.</span><span class=rem>
/// &lt;/summary&gt;</span><span class=kwrd>
const</span> <span class=kwrd>string</span> IDENTITY_XSLT = <span class=str>@&quot;&lt;?xml version=&quot;</span><span class=str>&quot;1.0&quot;</span><span class=str>&quot; ?&gt;&quot;</span> 
	+ <span class=str>@&quot;&lt;xsl:stylesheet xmlns:xsl=&quot;</span><span class=str>&quot;http://www.w3.org/1999/XSL/Transform&quot;</span><span class=str>&quot; version=&quot;</span><span class=str>&quot;1.0&quot;</span><span class=str>&quot;&gt;&quot;</span>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->+ <span class=str>@&quot;&lt;xsl:template match=&quot;</span><span class=str>&quot;/&quot;</span><span class=str>&quot;&gt;&quot;</span>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->+ <span class=str>@&quot;&lt;xsl:copy-of select=&quot;</span><span class=str>&quot;*&quot;</span><span class=str>&quot; /&gt;&quot;</span>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->+ <span class=str>@&quot;&lt;/xsl:template&gt;&quot;</span>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->+ <span class=str>@&quot;&lt;/xsl:stylesheet&gt;&quot;</span>;<span class=kwrd>
public</span> <span class=kwrd>void</span> BlogItem(System.Xml.XPath.IXPathNavigable rssFragment, <span class=kwrd>bool</span> edited)
{
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<span class=rem><!--kadov_tag{{</spaces>}}-->// Create the XPathNavigator</span>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->XPathNavigator navigator = rssFragment.CreateNavigator();
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<span class=rem><!--kadov_tag{{</spaces>}}-->// Create an XSL Transform.</span>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->XslTransform transform = <span class=kwrd>new</span> XslTransform();
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->XmlDocument stylesheetDoc = <span class=kwrd>new</span> XmlDocument();
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->stylesheetDoc.LoadXml(IDENTITY_XSLT);
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->transform.Load(stylesheetDoc.CreateNavigator(), <span class=kwrd>null</span>, <span class=kwrd>null</span>);
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<span class=rem><!--kadov_tag{{</spaces>}}-->// This will hold the result of the transform.</span>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->StringBuilder sb = <span class=kwrd>new</span> StringBuilder();
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->XmlTextWriter writer = <span class=kwrd>new</span> XmlTextWriter(<span class=kwrd>new</span> StringWriter(sb));
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->transform.Transform(navigator, <span class=kwrd>null</span>, writer, <span class=kwrd>null</span>); <span class=rem>//sb should have the result now.</span>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<span class=rem><!--kadov_tag{{</spaces>}}-->// Build the display</span>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<span class=kwrd><!--kadov_tag{{</spaces>}}-->string</span> display = <span class=str>&quot;TITLE: &quot;</span> + navigator.Evaluate(<span class=str>&quot;string(//item/title/text())&quot;</span>);
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->display += System.Environment.NewLine + System.Environment.NewLine;
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<span class=rem><!--kadov_tag{{</spaces>}}-->//Display the underlying XML.</span>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->display += sb.ToString();
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->System.Windows.Forms.MessageBox.Show(display);
}</code>
</pre>

<p>What the above code is doing is building an XSLT transformation <strong><code>XslTransform</code></strong> 
 using the identity stylesheet stored in the constant <strong><code>IDENTITY_XSLT</code></strong>.&nbsp; 
 The identity stylesheet transforms XML into itself.&nbsp; The reason I 
 do this is its an easy way to look at the underlying XML of an XPathNavigator 
 since the navigator is a forward only cursor through an underlying XML 
 document and doesn't provide a simple means to get at the actual XML.&nbsp; 
 Not only that, this demonstrates that you could apply any transformation 
 you would like in your plug-in simply by changing the stylesheet involved. 
 </p>

<p>After building the transform the code calls <code>navigator.Evaluate(<span 
 class=str>&quot;string(//item/title/text())&quot;</span>);</code> to retrieve 
 the title of the RSS item. The <code><strong>Evaluate</strong></code> 
 method allows you to selectively pull data from the underlying RSS feed 
 using <strong>XPath</strong> . Finally I append to the title a couple 
 of new lines and the output from the previous transform and then use the 
 <code><strong>MessageBox.Show</strong></code> method to display a message 
 box containing the output. </p>

<p>The entire plug-in code is listed below.</p>

<p><code style="font-family: monospace;"><!-- code formatted by http://manoli.net/csharpformat/ -->
				</code></p>

<pre class=csharpcode>
<code style="font-family: monospace;"><span class=kwrd>using</span> System;<span class=kwrd>
using</span> System.IO;<span class=kwrd>
using</span> System.Text;<span class=kwrd>
using</span> System.Xml;<span class=kwrd>
using</span> System.Xml.XPath;<span class=kwrd>
using</span> System.Xml.Xsl;<span class=kwrd>
using</span> Syndication.Extensibility;<span class=kwrd>
namespace</span> MyPlugin
{
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<span class=rem><!--kadov_tag{{</spaces>}}-->/// &lt;summary&gt;</span>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<span class=rem><!--kadov_tag{{</spaces>}}-->/// Implements a plug-in to display the raw rss for a feed item.</span>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<span class=rem><!--kadov_tag{{</spaces>}}-->/// &lt;/summary&gt;</span>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<span class=kwrd><!--kadov_tag{{</spaces>}}-->public</span> <span class=kwrd>class</span> DisplayRawRssItem : IBlogExtension
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->{
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=kwrd><!--kadov_tag{{</spaces>}}-->public</span> DisplayRawRssItem()
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->{}
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=preproc><!--kadov_tag{{</spaces>}}-->#region</span> IBlogExtension Members
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=kwrd><!--kadov_tag{{</spaces>}}-->public</span> <span class=kwrd>void</span> BlogItem(System.Xml.XPath.IXPathNavigable rssFragment, <span class=kwrd>bool</span> edited)
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->{
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=rem><!--kadov_tag{{</spaces>}}-->// Create the XPathNavigator</span>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->XPathNavigator navigator = rssFragment.CreateNavigator();
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=rem><!--kadov_tag{{</spaces>}}-->// Create an XSL Transform.</span>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->XslTransform transform = <span class=kwrd>new</span> XslTransform();
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->XmlDocument stylesheetDoc = <span class=kwrd>new</span> XmlDocument();
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->stylesheetDoc.LoadXml(IDENTITY_XSLT);
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->transform.Load(stylesheetDoc.CreateNavigator(), <span class=kwrd>null</span>, <span class=kwrd>null</span>);
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=rem><!--kadov_tag{{</spaces>}}-->// This will hold the result of the transform.</span>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->StringBuilder sb = <span class=kwrd>new</span> StringBuilder();
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->XmlTextWriter writer = <span class=kwrd>new</span> XmlTextWriter(<span class=kwrd>new</span> StringWriter(sb));
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->transform.Transform(navigator, <span class=kwrd>null</span>, writer, <span class=kwrd>null</span>); <span class=rem>//sb should have the result now.</span>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=rem><!--kadov_tag{{</spaces>}}-->// Build the display</span>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=kwrd><!--kadov_tag{{</spaces>}}-->string</span> display = <span class=str>&quot;TITLE: &quot;</span> + navigator.Evaluate(<span class=str>&quot;string(//item/title/text())&quot;</span>);
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->display += System.Environment.NewLine + System.Environment.NewLine;
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=rem><!--kadov_tag{{</spaces>}}-->//Display the underlying XML.</span>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->display += sb.ToString();
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->System.Windows.Forms.MessageBox.Show(display);
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->}
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=kwrd><!--kadov_tag{{</spaces>}}-->public</span> <span class=kwrd>bool</span> HasEditingGUI
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->{
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->get
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->{
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=kwrd><!--kadov_tag{{</spaces>}}-->return</span> <span class=kwrd>false</span>;
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->}
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->}
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=kwrd><!--kadov_tag{{</spaces>}}-->public</span> <span class=kwrd>string</span> DisplayName
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->{
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->get
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->{
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=kwrd><!--kadov_tag{{</spaces>}}-->return</span> <span class=str>&quot;Display This Item's RSS...&quot;</span>;
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->}
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->}
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=kwrd><!--kadov_tag{{</spaces>}}-->public</span> <span class=kwrd>void</span> Configure(System.Windows.Forms.IWin32Window parent)
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->{
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=rem><!--kadov_tag{{</spaces>}}-->//Do Nothing</span>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->}
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=kwrd><!--kadov_tag{{</spaces>}}-->public</span> <span class=kwrd>bool</span> HasConfiguration
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->{
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->get
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->{
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=kwrd><!--kadov_tag{{</spaces>}}-->return</span> <span class=kwrd>false</span>;
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->}
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->}
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=rem><!--kadov_tag{{</spaces>}}-->/// &lt;summary&gt;</span>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=rem><!--kadov_tag{{</spaces>}}-->/// This is the identity stylesheet.</span>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=rem><!--kadov_tag{{</spaces>}}-->/// &lt;/summary&gt;</span>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=kwrd><!--kadov_tag{{</spaces>}}-->const</span> <span class=kwrd>string</span> IDENTITY_XSLT = <span class=str>@&quot;&lt;?xml version=&quot;</span><span class=str>&quot;1.0&quot;</span><span class=str>&quot; ?&gt;&quot;</span> 
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->+ <span class=str>@&quot;&lt;xsl:stylesheet xmlns:xsl=&quot;</span><span class=str>&quot;http://www.w3.org/1999/XSL/Transform&quot;</span><span class=str>&quot; version=&quot;</span><span class=str>&quot;1.0&quot;</span><span class=str>&quot;&gt;&quot;</span>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->+ <span class=str>@&quot;&lt;xsl:template match=&quot;</span><span class=str>&quot;/&quot;</span><span class=str>&quot;&gt;&quot;</span>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->+ <span class=str>@&quot;&lt;xsl:copy-of select=&quot;</span><span class=str>&quot;*&quot;</span><span class=str>&quot; /&gt;&quot;</span>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->+ <span class=str>@&quot;&lt;/xsl:template&gt;&quot;</span>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->+ <span class=str>@&quot;&lt;/xsl:stylesheet&gt;&quot;</span>;
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=preproc><!--kadov_tag{{</spaces>}}-->#endregion</span>
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->}
}</code>
</pre>

<p>The next step is to compile the assembly and place the resulting MyPlugin.dll 
 into the plugins directory. Make sure to fully restart RSS Bandit. When 
 it starts up again, it will examine every assembly within the plugins 
 directory searching for types that implement the IBlogExtension interface. 
 Each IBlogExtension derived type it finds will be added to the feed item 
 context menu. As mentioned before, the name displayed in the menu is the 
 value of the <code><strong>DisplayName</strong></code> property. When 
 you right click a feed item, you should see the new plug-in displayed 
 as in figure 4. </p>

<p><img src="../../images/ContextMenuNewPlugin.jpg"
		alt="Context Menu with new plugin"
		style="width: 358px;
				height: 238px;
				border-style: none;
				vertical-align: middle;
				border-style: none;
				vertical-align: middle;"
		width=358
		height=238
		align=middle
		border=0> <span class=figure><br>
Figure 4: Context Menu displaying new plug-in.</span> </p>

<p>Click on the plug-in, and you'll see the result shown in figure 5. </p>

<p><img src="../../images/UnderlyingRSSItem.jpg"
		alt="Underlying RSS item"
		style="width: 797px;
				height: 354px;
				border-style: none;
				vertical-align: middle;
				border-style: none;
				vertical-align: middle;"
		width=797
		height=354
		align=middle
		border=0> <span class=figure><br>
Figure 5: Underlying RSS item.</span> </p>

<p><b style="font-weight: bold;">Conclusion</b><br>
This is a simple plug-in to display an RSS item's underlying xml. However, 
 now you have the tools at your disposal to create much more interesting 
 plug-ins than the one demonstrated here. If you do, please share them 
 with everyone by posting a message in the <a href="http://www.rssbandit.org/forum/forum.asp?FORUM_ID=2">RSS 
 Bandit IBlogExtension forum</a>. </p>

<!--kadov_tag{{<placeholder id="footer">}}-->
</body>

</html>
