<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NewsComponents</name>
    </assembly>
    <members>
        <member name="T:NewsComponents.Search.BooleanSearch.QueryNode">
            <summary>
            A QueryNode is the fundamental element used to represent data within
            a QueryTree. Each QueryNode has one immediate parent and zero or more 
            children. QueryNode objects can be inserted at any level within the
            tree, and the tree itself can be navigated using the Parent and
            Children properties
            </summary>
        </member>
        <member name="T:NewsComponents.Resource">
            <summary>
            Helper class used to manage assembly Resources
            </summary>
        </member>
        <member name="M:NewsComponents.Resource.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NewsComponents.Resource.GetStream(System.String)">
            <summary>
            Gets a resource stream with the messages used by the Bandit classes
            </summary>
            <param name="name">resource key</param>
            <returns>a resource stream</returns>
        </member>
        <member name="P:NewsComponents.Resource.Manager">
            <summary>
            Gets a resource manager for the assembly resource file
            </summary>
        </member>
        <member name="T:NewsComponents.RelationCosmos.RelationCosmosFactory">
            <summary>
            Factory to abstract from the real RelationCosmos 
            implementation algorithm(s)
            </summary>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationCosmosFactory.Create">
            <summary>
            Factory method to return different implementations
            </summary>
            <returns>IRelationCosmos</returns>
        </member>
        <member name="T:NewsComponents.RelationCosmos.RelationCosmos">
            <summary>
            Container for defaults, and the global string (url) table
            </summary>
        </member>
        <member name="P:NewsComponents.RelationCosmos.RelationCosmos.DefaultRelationTimeCorrection">
            <summary>
            A timespan that express the time subtracted from a known point in time to get
            another related relation point in time adjusted. Default is one second.
            </summary>
        </member>
        <member name="P:NewsComponents.RelationCosmos.RelationCosmos.UnknownPointInTime">
            <summary>
            A default date representing the unknown point in time of a relation.
            </summary>
        </member>
        <member name="P:NewsComponents.RelationCosmos.RelationCosmos.UrlTable">
            <summary>
            A hashtable table for adding URLs. This allows us to implement the equivalent 
            of string interning without the performance overhead of String.Intern
            </summary>
        </member>
        <member name="M:NewsComponents.RelationCosmos.IRelationCosmos.Add(NewsComponents.RelationCosmos.RelationBase)">
            <summary>
            Add a new Relation to the RelationCosmos. 
            The relation(s) should be registered in time order oldest first to
            prevent lost relationships.
            </summary>
            <param name="relation">Relation to add</param>
            <exception cref="T:System.ArgumentNullException">If relation or relation.HRef is null</exception>
        </member>
        <member name="M:NewsComponents.RelationCosmos.IRelationCosmos.AddRange(NewsComponents.RelationCosmos.RelationBase[])">
            <summary>
            Add a range of <c>RelationBase</c> objects
            </summary>
            <param name="relations">RelationBase[]</param>
        </member>
        <member name="M:NewsComponents.RelationCosmos.IRelationCosmos.AddRange(System.Collections.IList)">
            <summary>
            Add a range of <c>RelationBase</c> objects
            </summary>
            <param name="relations">IList</param>
        </member>
        <member name="M:NewsComponents.RelationCosmos.IRelationCosmos.Remove(NewsComponents.RelationCosmos.RelationBase)">
            <summary>
            Remove a relation from the RelationCosmos.
            </summary>
            <param name="relation">Relation to be removed</param>
        </member>
        <member name="M:NewsComponents.RelationCosmos.IRelationCosmos.RemoveRange(System.Collections.IList)">
            <summary>
            Overloaded. Remove a amount of RelationBase objects from the RelationCosmos.
            </summary>
            <param name="relations">To be removed RelationBase object's</param>
        </member>
        <member name="M:NewsComponents.RelationCosmos.IRelationCosmos.RemoveRange(NewsComponents.RelationCosmos.RelationBase[])">
            <summary>
            Overloaded. Remove a amount of RelationBase objects from the RelationCosmos.
            </summary>
            <param name="relations">To be removed RelationBase object's</param>
        </member>
        <member name="M:NewsComponents.RelationCosmos.IRelationCosmos.Clear">
            <summary>
            Clear all internal collections.
            </summary>
        </member>
        <member name="M:NewsComponents.RelationCosmos.IRelationCosmos.GetIncoming(NewsComponents.RelationCosmos.RelationBase,System.Collections.IList)">
            <summary>
            Returns a list of relations, that are known in RelationCosmos and pointing to
            the relation provided.
            </summary>
            <param name="relation">The object implementing RelationBase</param>
            <param name="excludeRelations">List of relations, 
            that should be excluded in that check</param>
            <returns>RelationList</returns>
        </member>
        <member name="M:NewsComponents.RelationCosmos.IRelationCosmos.GetOutgoing(NewsComponents.RelationCosmos.RelationBase,System.Collections.IList)">
            <summary>
            Returns a list of relations, that are known in RelationCosmos and that 
            the relation provided points to.
            </summary>
            <param name="relation">The object implementing RelationBase</param>
            <param name="excludeRelations">List of relations, 
            that should be excluded in that check</param>
            <returns>RelationList</returns>
        </member>
        <member name="M:NewsComponents.RelationCosmos.IRelationCosmos.GetIncomingAndOutgoing(NewsComponents.RelationCosmos.RelationBase,System.Collections.IList)">
            <summary>
            Returns a list merged of incoming and outging relations.
            </summary>
            <param name="relation">The object implementing RelationBase</param>
            <param name="excludeRelations">List of relations, 
            that should be excluded in that check</param>
            <returns>RelationList</returns>
        </member>
        <member name="M:NewsComponents.RelationCosmos.IRelationCosmos.HasIncomingOrOutgoing(NewsComponents.RelationCosmos.RelationBase,System.Collections.IList)">
            <summary>
            Return true, if the <c>relation</c> has any incoming or outgoing relations 
            (registered/added to RelationCosmos). 
            </summary>
            <param name="relation">Relation to check</param>
            <param name="excludeRelations">List of strings with relation.HRef's, 
            that should be excluded in that check</param>
            <returns>True, if any relation was found, else false</returns>
        </member>
        <member name="P:NewsComponents.RelationCosmos.IRelationCosmos.DeepCosmos">
            <summary>
            Not yet fully implemented/supported!
            </summary>
        </member>
        <member name="P:NewsComponents.RelationCosmos.IRelationCosmos.AdjustPointInTime">
            <summary>
            Set this to true, if RelationCosmos should try to adjust the PointInTime properties
            of added Relations, if they are adjustable. It can do so, because of the knowledge
            about the other Relations and their relationships to other.
            </summary>
        </member>
        <member name="T:NewsComponents.Collections.SortedRelations">
            <summary>
            	Represents a strongly-typed collection of key-and-value pairs that are
            	sorted by the keys and are accessible by key and by index.
            </summary>
            <seealso cref="T:System.Collections.SortedList"/>
        </member>
        <member name="M:NewsComponents.Collections.SortedRelations.#ctor">
            <summary>
            	Initializes a new instance of the <see cref="T:NewsComponents.Collections.SortedRelations"/> class that is empty, 
            	has the default initial capacity and is sorted according to the <see cref="T:System.IComparable"/> interface 
            	implemented by each key added to the <b>SortedRelations</b>.
            </summary>
        </member>
        <member name="M:NewsComponents.Collections.SortedRelations.#ctor(System.Int32)">
            <summary>
            	Initializes a new instance of the <see cref="T:NewsComponents.Collections.SortedRelations"/> class that is empty, 
            	has the specified initial capacity and is sorted according to the <see cref="T:System.IComparable"/>
            	interface implemented by each key added to the <b>SortedRelations</b>.
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:NewsComponents.Collections.SortedRelations"/> can contain.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than zero.</exception>
        </member>
        <member name="M:NewsComponents.Collections.SortedRelations.#ctor(System.Collections.IComparer)">
            <summary>
            	Initializes a new instance of the <see cref="T:NewsComponents.Collections.SortedRelations"/> class that is empty, 
            	has the default initial capacity and is sorted according to the specified 
            	<see cref="T:System.Collections.IComparer"/> interface.
            </summary>
            <param name="comparer">
            	<para>The <see cref="T:System.Collections.IComparer"/> implementation to use when comparing keys.</para>
            	<para>-or-</para>
            	<para>A null reference, to use the <see cref="T:System.IComparable"/> implementation of each key.</para>
            </param>
        </member>
        <member name="M:NewsComponents.Collections.SortedRelations.#ctor(System.Collections.IComparer,System.Int32)">
            <summary>
            	Initializes a new instance of the <see cref="T:NewsComponents.Collections.SortedRelations"/> class that is empty, 
            	has the specified initial capacity and is sorted according to the specified 
            	<see cref="T:System.Collections.IComparer"/> interface.
            </summary>
            <param name="comparer">
            	<para>The <see cref="T:System.Collections.IComparer"/> implementation to use when comparing keys.</para>
            	<para>-or-</para>
            	<para>A null reference, to use the <see cref="T:System.IComparable"/> implementation of each key.</para>
            </param>
            <param name="capacity">The initial number of elements that the <see cref="T:NewsComponents.Collections.SortedRelations"/> can contain.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than zero.</exception>
        </member>
        <member name="M:NewsComponents.Collections.SortedRelations.#ctor(System.Collections.IDictionary)">
            <summary>
            	Initializes a new instance of the <see cref="T:NewsComponents.Collections.SortedRelations"/> class that contains 
            	elements copied from the specified dictionary, has the same initial capacity as the 
            	number of elements copied and is sorted according to the <see cref="T:System.IComparable"/> interface 
            	implemented by each key.
            </summary>
            <param name="d">The <see cref="T:System.Collections.IDictionary"/> to copy to a new SortedList.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="d"/> is a null reference.</exception>
            <exception cref="T:System.InvalidCastException">
            	<para>One or more elements in <paramref name="d"/> do not implement the
            	<see cref="T:System.IComparable"/> interface.</para>
            	<para>-or-</para>
            	<para><pararef name="d"/> contains elements of a type not supported by <see cref="T:NewsComponents.Collections.SortedRelations"/>.</para>
            </exception>
        </member>
        <member name="M:NewsComponents.Collections.SortedRelations.#ctor(System.Collections.IDictionary,System.Collections.IComparer)">
            <summary>
            	Initializes a new instance of the <see cref="T:NewsComponents.Collections.SortedRelations"/> class that contains 
            	elements copied from the specified dictionary, has the same initial capacity as the 
            	number of elements copied and is sorted according to the specified <see cref="T:System.Collections.IComparer"/> interface.
            </summary>
            <param name="d">The <see cref="T:System.Collections.IDictionary"/> to copy to a new SortedList.</param>
            <param name="comparer">
            	<para>The <see cref="T:System.Collections.IComparer"/> implementation to use when comparing keys.</para>
            	<para>-or-</para>
            	<para>A null reference, to use the <see cref="T:System.IComparable"/> implementation of each key.</para>
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="d"/> is a null reference.</exception>
            <exception cref="T:System.InvalidCastException">
            	<para>One or more elements in <paramref name="d"/> do not implement the
            	<see cref="T:System.IComparable"/> interface.</para>
            	<para>-or-</para>
            	<para><pararef name="d"/> contains elements of a type not supported by <see cref="T:NewsComponents.Collections.SortedRelations"/>.</para>
            </exception>
        </member>
        <member name="M:NewsComponents.Collections.SortedRelations.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <summary>
            	Adds an element with the specified key and value to the <b>SortedRelations</b>.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException">
            	<para>An element with the specified <paramref name="key"/> already exists in the <see cref="T:NewsComponents.Collections.SortedRelations"/>.</para>
            	<para>-or-</para>
            	<para>Either the <paramref name="key"/> or the <paramref name="value"/> are not of a type supported by the <see cref="T:NewsComponents.Collections.SortedRelations"/>.</para>
            	<para>-or-</para>
            	<para>The <b>SortedRelations</b> is set to use the <see cref="T:System.IComparable"/> interface,
            	and <paramref name="key"/> does not implement the <b>IComparable</b> interface.</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">The comparer throws an exception.</exception>
            <exception cref="T:System.NotSupportedException">
            	<para>The <see cref="T:NewsComponents.Collections.SortedRelations"/> is read-only.</para>
            	<para>-or-</para>
            	<para>The <b>SortedRelations</b> has a fixed size.</para>
            </exception>
        </member>
        <member name="M:NewsComponents.Collections.SortedRelations.Add(NewsComponents.RelationCosmos.RelationBase,System.Boolean)">
            <summary>
            	Adds an element with the specified key and value to the <b>SortedRelations</b>.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException">
            	<para>An element with the specified <paramref name="key"/> already exists in the <see cref="T:NewsComponents.Collections.SortedRelations"/>.</para>
            	<para>-or-</para>
            	<para>The <b>SortedRelations</b> is set to use the <see cref="T:System.IComparable"/> interface,
            	and <paramref name="key"/> does not implement the <b>IComparable</b> interface.</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">The comparer throws an exception.</exception>
            <exception cref="T:System.NotSupportedException">
            	<para>The <see cref="T:NewsComponents.Collections.SortedRelations"/> is read-only.</para>
            	<para>-or-</para>
            	<para>The <b>SortedRelations</b> has a fixed size.</para>
            </exception>
        </member>
        <member name="M:NewsComponents.Collections.SortedRelations.Clear">
            <summary>
            	Removes all elements from the <b>SortedRelations</b>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            	<para>The <see cref="T:NewsComponents.Collections.SortedRelations"/> is read-only.</para>
            	<para>-or-</para>
            	<para>The <b>SortedRelations</b> has a fixed size.</para>
            </exception>
        </member>
        <member name="M:NewsComponents.Collections.SortedRelations.Clone">
            <summary>
            	Creates a shallow copy of the <b>SortedRelations</b>.
            </summary>
            <returns>A shallow copy of the <see cref="T:NewsComponents.Collections.SortedRelations"/>.</returns>
        </member>
        <member name="M:NewsComponents.Collections.SortedRelations.System#Collections#IDictionary#Contains(System.Object)">
            <summary>
            	Determines whether the <b>SortedRelations</b> contains a specific key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:NewsComponents.Collections.SortedRelations"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException">
            	The <paramref name="key"/> is not of a type supported by the <see cref="T:NewsComponents.Collections.SortedRelations"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">The comparer throws an exception.</exception>
            <returns>
            	<b>true</b> if the <see cref="T:NewsComponents.Collections.SortedRelations"/> contains an element with the specified key; 
            	otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:NewsComponents.Collections.SortedRelations.Contains(NewsComponents.RelationCosmos.RelationBase)">
            <summary>
            	Determines whether the <b>SortedRelations</b> contains a specific key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:NewsComponents.Collections.SortedRelations"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">The comparer throws an exception.</exception>
            <returns>
            	<b>true</b> if the <see cref="T:NewsComponents.Collections.SortedRelations"/> contains an element with the specified 
            	<paramref name="key"/>; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:NewsComponents.Collections.SortedRelations.ContainsKey(NewsComponents.RelationCosmos.RelationBase)">
            <summary>
            	Determines whether the <b>SortedRelations</b> contains a specific key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:NewsComponents.Collections.SortedRelations"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">The comparer throws an exception.</exception>
            <returns>
            	<b>true</b> if the <see cref="T:NewsComponents.Collections.SortedRelations"/> contains an element with the specified 
            	<paramref name="key"/>; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:NewsComponents.Collections.SortedRelations.ContainsValue(System.Boolean)">
            <summary>
            	Determines whether the <b>SortedRelations</b> contains a specific value.
            </summary>
            <param name="value">The value to locate in the <see cref="T:NewsComponents.Collections.SortedRelations"/>.</param>
            <returns>
            	<b>true</b> if the <see cref="T:NewsComponents.Collections.SortedRelations"/> contains an element with the specified 
            	<paramref name="value"/>; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:NewsComponents.Collections.SortedRelations.CopyTo(System.Array,System.Int32)">
            <summary>
            	Copies the <see cref="T:NewsComponents.Collections.SortedRelations"/> elements to a one-dimensional <see cref="T:System.Array"/>
            	instance at the specified index.
            </summary>
            <param name="array">
            	The one-dimensional <see cref="T:System.Array"/> that is the destination of the
            	<see cref="T:System.Collections.DictionaryEntry"/> objects copied from <see cref="T:NewsComponents.Collections.SortedRelations"/>.
            	The array must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException">
            	<para><paramref name="array"/> is multidimensional.</para>
            	<para>-or-</para>
            	<para><paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.</para>
            	<para>-or-</para>
            	<para>The number of elements in the source <see cref="T:NewsComponents.Collections.SortedRelations"/> is greater than the 
            	available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.</para>
            </exception>
            <exception cref="T:System.InvalidCastException">
            	The type of the source <see cref="T:NewsComponents.Collections.SortedRelations"/> cannot be cast automatically to the type
            	of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:NewsComponents.Collections.SortedRelations.GetByIndex(System.Int32)">
            <summary>
            	Gets the value at the specified index of the <b>SortedRelations</b>.
            </summary>
            <param name="index">The zero-based index of the value to get.</param>
            <returns>The value at the specified index of the <see cref="T:NewsComponents.Collections.SortedRelations"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is outside the range of valid indices for the <see cref="T:NewsComponents.Collections.SortedRelations"/>.
            </exception>
        </member>
        <member name="M:NewsComponents.Collections.SortedRelations.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            	Returns an <see cref="T:System.Collections.IEnumerator"/> that can iterate through the <b>SortedRelations</b>.
            </summary>
        </member>
        <member name="M:NewsComponents.Collections.SortedRelations.GetEnumerator">
            <summary>
            	Returns an <see cref="T:System.Collections.IDictionaryEnumerator"/> that can iterate through the
            	<b>SortedRelations</b>.		
            </summary>
            <returns>An <see cref="T:System.Collections.IDictionaryEnumerator"/> for the <see cref="T:NewsComponents.Collections.SortedRelations"/>.</returns>
        </member>
        <member name="M:NewsComponents.Collections.SortedRelations.GetKey(System.Int32)">
            <summary>
            	Gets the key at the specified index of the <b>SortedRelations</b>.
            </summary>
            <param name="index">The zero-based index of the key to get.</param>
            <returns>The key at the specified index of the <see cref="T:NewsComponents.Collections.SortedRelations"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is outside the range of valid indices for the <see cref="T:NewsComponents.Collections.SortedRelations"/>.
            </exception>
        </member>
        <member name="M:NewsComponents.Collections.SortedRelations.GetKeyList">
            <summary>
            	Gets the keys in the <b>SortedRelations</b>.
            </summary>
            <returns>An <see cref="T:System.Collections.IList"/> containing the keys in the <see cref="T:NewsComponents.Collections.SortedRelations"/>.</returns>
            <remarks>
            	<para>The returned <see cref="T:System.Collections.IList"/> is a read-only view of the keys in the 
            	<see cref="T:NewsComponents.Collections.SortedRelations"/>. Modifications made to the underlying <b>SortedRelations</b>
            	are immediately reflected in the <b>IList</b>.</para>
            	<para>The elements of the <b>IList</b> are sorted in the same order as the keys
            	of the <b>SortedRelations</b>.</para>
            	<para>Similar to <see cref="P:NewsComponents.Collections.SortedRelations.Keys"/>, but returns an <b>IList</b>
            	instead of an <see cref="T:System.Collections.ICollection"/>.</para>
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.SortedRelations.GetValueList">
            <summary>
            	Gets the values in the <b>SortedRelations</b>.
            </summary>
            <returns>An <see cref="T:System.Collections.IList"/> containing the values in the <see cref="T:NewsComponents.Collections.SortedRelations"/>.</returns>
            <remarks>
            	<para>The returned <see cref="T:System.Collections.IList"/> is a read-only view of the values in the 
            	<see cref="T:NewsComponents.Collections.SortedRelations"/>. Modifications made to the underlying <b>SortedRelations</b>
            	are immediately reflected in the <b>IList</b>.</para>
            	<para>The elements of the <b>IList</b> are sorted in the same order as the values
            	of the <b>SortedRelations</b>.</para>
            	<para>Similar to <see cref="P:NewsComponents.Collections.SortedRelations.Values"/>, but returns an <b>IList</b>
            	instead of an <see cref="T:System.Collections.ICollection"/>.</para>
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.SortedRelations.IndexOfKey(NewsComponents.RelationCosmos.RelationBase)">
            <summary>
            	Returns the zero-based index of the specified key in the <b>SortedRelations</b>.
            </summary>
            <param name="key">The key to locate in the <see cref="T:NewsComponents.Collections.SortedRelations"/>.</param>
            <returns>
            	The zero-based index of <paramref name="key"/>, if <paramref name="key"/> is found in
            	the <see cref="T:NewsComponents.Collections.SortedRelations"/>; otherwise, -1.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">The comparer throws an exception.</exception>
            <remarks>
            	<para>The elements of a <see cref="T:NewsComponents.Collections.SortedRelations"/> are sorted by the keys either 
            	according to a specific <see cref="T:System.Collections.IComparer"/> implementation specified when the 
            	<see cref="T:NewsComponents.Collections.SortedRelations"/> is created or according to the <see cref="T:System.IComparable"/> 
            	implementation provided by the keys themselves.</para>
            	<para>The index sequence is based on the sort sequence. When an element is added, 
            	it is inserted into <see cref="T:NewsComponents.Collections.SortedRelations"/> in the correct sort order, and the 
            	indexing adjusts accordingly. When an element removed, the indexing also adjusts accordingly.
            	Therefore, the index of a specific key-and-value pair might change as elements are added or 
            	removed from the <see cref="T:NewsComponents.Collections.SortedRelations"/>.</para>
            	<para>This method uses a binary search algorithm; therefore, the average execution time is 
            	proportional to Log2(<i>n</i>), where <i>n</i> is <see cref="P:NewsComponents.Collections.SortedRelations.Count"/>.</para>
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.SortedRelations.IndexOfValue(System.Boolean)">
            <summary>
            	Returns the zero-based index of the first occurrence of the specified value in
            	the <b>SortedRelations</b>.
            </summary>
            <param name="value">The value to locate in the <see cref="T:NewsComponents.Collections.SortedRelations"/>.</param>
            <returns>
            	The zero-based index of <paramref name="value"/>, if <paramref name="value"/> is found in
            	the <see cref="T:NewsComponents.Collections.SortedRelations"/>; otherwise, -1.
            </returns>
            <remarks>
            	<para>The index sequence is based on the sort sequence. When an element is added, 
            	it is inserted into <see cref="T:NewsComponents.Collections.SortedRelations"/> in the correct sort order, and 
            	the indexing adjusts accordingly. When an element removed, the indexing also adjusts 
            	accordingly. Therefore, the index of a specific key-and-value pair might change as 
            	elements are added or removed from the <see cref="T:NewsComponents.Collections.SortedRelations"/>.</para>
            	<para>The values of the elements of the <see cref="T:NewsComponents.Collections.SortedRelations"/> are compared to the 
            	specified value using the Equals method.</para>
            	<para>This method uses a linear search; therefore, the average execution time is 
            	proportional to <see cref="P:NewsComponents.Collections.SortedRelations.Count"/>.</para>
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.SortedRelations.System#Collections#IDictionary#Remove(System.Object)">
            <summary>
            	Removes the element with the specified key from the <b>SortedRelations</b>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <exception cref="T:System.ArgumentException">
            	The <paramref name="key"/> is not of a type supported by the <see cref="T:NewsComponents.Collections.SortedRelations"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.NotSupportedException">
            	<para>The <see cref="T:NewsComponents.Collections.SortedRelations"/> is read-only.</para>
            	<para>-or-</para>
            	<para>The <b>SortedRelations</b> has a fixed size.</para>
            </exception>
        </member>
        <member name="M:NewsComponents.Collections.SortedRelations.Remove(NewsComponents.RelationCosmos.RelationBase)">
            <summary>
            	Removes the element with the specified key from the <b>SortedRelations</b>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.NotSupportedException">
            	<para>The <see cref="T:NewsComponents.Collections.SortedRelations"/> is read-only.</para>
            	<para>-or-</para>
            	<para>The <b>SortedRelations</b> has a fixed size.</para>
            </exception>
            <remarks>
            	If the <see cref="T:NewsComponents.Collections.SortedRelations"/> does not contain an element with the specified key,
            	the <b>SortedRelations</b> remains unchanged. No exception is thrown.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.SortedRelations.RemoveAt(System.Int32)">
            <summary>
            	Removes the element at the specified index of the <b>SortedRelations</b>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is outside the range of valid indices for the <see cref="T:NewsComponents.Collections.SortedRelations"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>The <see cref="T:NewsComponents.Collections.SortedRelations"/> is read-only.</para>
            	<para>-or-</para>
            	<para>The <b>SortedRelations</b> has a fixed size.</para>
            </exception>
            <remarks>
            	<para>The index sequence is based on the sort sequence. When an element is added, 
            	it is inserted into <see cref="T:NewsComponents.Collections.SortedRelations"/> in the correct sort order, and 
            	the indexing adjusts accordingly. When an element removed, the indexing also adjusts 
            	accordingly. Therefore, the index of a specific key-and-value pair might change as 
            	elements are added or removed from the <see cref="T:NewsComponents.Collections.SortedRelations"/>.</para>
            	<para>In collections of contiguous elements, such as lists, the elements that
            	follow the removed element move up to occupy the vacated spot. If the collection is
            	indexed, the indices of the elements that are moved are also updated.</para>
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.SortedRelations.SetByIndex(System.Int32,System.Boolean)">
            <summary>
            	Replaces the value at a specific index in the <b>SortedRelations</b>.
            </summary>
            <param name="index">The zero-based index at which to save <paramref name="value"/>.</param>
            <param name="value">The <see cref="T:System.Boolean"/> to save into the <see cref="T:NewsComponents.Collections.SortedRelations"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is outside the range of valid indices for the <see cref="T:NewsComponents.Collections.SortedRelations"/>.
            </exception>
            <remarks>
            	<para>The index sequence is based on the sort sequence. When an element is added, 
            	it is inserted into <see cref="T:NewsComponents.Collections.SortedRelations"/> in the correct sort order, and 
            	the indexing adjusts accordingly. When an element removed, the indexing also adjusts 
            	accordingly. Therefore, the index of a specific key-and-value pair might change as 
            	elements are added or removed from the <see cref="T:NewsComponents.Collections.SortedRelations"/>.</para>
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.SortedRelations.Synchronized(NewsComponents.Collections.SortedRelations)">
            <summary>
            	Returns a synchronized (thread-safe) wrapper for the <b>SortedRelations</b>.
            </summary>
            <param name="list">The <see cref="T:NewsComponents.Collections.SortedRelations"/> to synchronize.</param>
            <returns>A synchronized (thread-safe) wrapper for the <see cref="T:NewsComponents.Collections.SortedRelations"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> is a null reference.</exception>
        </member>
        <member name="M:NewsComponents.Collections.SortedRelations.TrimToSize">
            <summary>
            	Sets the capacity to the actual number of elements in the <b>SortedRelations</b>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            	<para>The <see cref="T:NewsComponents.Collections.SortedRelations"/> is read-only.</para>
            	<para>-or-</para>
            	<para>The <b>SortedRelations</b> has a fixed size.</para>
            </exception>
        </member>
        <member name="P:NewsComponents.Collections.SortedRelations.System#Collections#IDictionary#Item(System.Object)">
            <summary>
            	Gets and sets the value associated with a specific key in the <b>SortedRelations</b>.
            </summary>
            <value>
            	The <see cref="T:System.Boolean"/> associated with <paramref name="key"/> in the <see cref="T:NewsComponents.Collections.SortedRelations"/>,
            	if <paramref name="key"/> is found; otherwise, a <see cref="T:System.NullReferenceException"/> is thrown.
            </value>
            <remarks>
            	This property, unlike its equivalent in <see cref="T:System.Collections.SortedList"/>, does not return
            	null when a key cannot be found. The reason for this is that the strongly-typed sorted list
            	template this class is created from allows the value to be a value type (or struct), which cannot
            	be set to null. Instead, a <see cref="T:System.NullReferenceException"/> is thrown when a key cannot be found.
            	Callers must either catch this exception, or call the <see cref="M:NewsComponents.Collections.SortedRelations.Contains(NewsComponents.RelationCosmos.RelationBase)"/> method first to
            	see if the key exists.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException">
            	Either the <paramref name="key"/> or the <paramref name="value"/> are not of a type supported by the <see cref="T:NewsComponents.Collections.SortedRelations"/>.
            </exception>
            <exception cref="T:System.NullReferenceException">
            	<paramref name="key"/> is not found in the <see cref="T:NewsComponents.Collections.SortedRelations"/>.
            </exception>
        </member>
        <member name="P:NewsComponents.Collections.SortedRelations.Item(NewsComponents.RelationCosmos.RelationBase)">
            <summary>
            	Gets and sets the value associated with a specific key in the <b>SortedRelations</b>.
            </summary>
            <value>
            	The <see cref="T:System.Boolean"/> associated with <paramref name="key"/> in the <see cref="T:NewsComponents.Collections.SortedRelations"/>,
            	if <paramref name="key"/> is found; otherwise, a <see cref="T:System.NullReferenceException"/> is thrown.
            </value>
            <remarks>
            	<para>This property, unlike its equivalent in <see cref="T:System.Collections.SortedList"/>, does not return
            	null when a key cannot be found. The reason for this is that the strongly-typed sorted list
            	template this class is created from allows the value to be a value type (or struct), which cannot
            	be set to null. Instead, a <see cref="T:System.NullReferenceException"/> is thrown when a key cannot be found.
            	Callers must either catch this exception, or call the <see cref="M:NewsComponents.Collections.SortedRelations.Contains(NewsComponents.RelationCosmos.RelationBase)"/> method first to
            	see if the key exists.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.NullReferenceException">
            	<paramref name="key"/> is not found in the <see cref="T:NewsComponents.Collections.SortedRelations"/>.
            </exception>
        </member>
        <member name="P:NewsComponents.Collections.SortedRelations.Capacity">
            <summary>
            	Gets or sets the capacity of the <b>SortedRelations</b>.
            </summary>
            <value>The number of elements that the <see cref="T:NewsComponents.Collections.SortedRelations"/> can contain.</value>
        </member>
        <member name="P:NewsComponents.Collections.SortedRelations.Count">
            <summary>
            	Gets the number of elements contained in the <b>SortedRelations</b>.
            </summary>
            <value>The number of elements contained in the <see cref="T:NewsComponents.Collections.SortedRelations"/>.</value>
        </member>
        <member name="P:NewsComponents.Collections.SortedRelations.IsFixedSize">
            <summary>
            	Gets a value indicating whether the <b>SortedRelations</b> has a fixed size.
            </summary>
            <value>
            	<b>true</b> if the <see cref="T:NewsComponents.Collections.SortedRelations"/> has a fixed size; otherwise, <b>false</b>.
            	The default is <b>false</b>.
            </value>
        </member>
        <member name="P:NewsComponents.Collections.SortedRelations.IsReadOnly">
            <summary>
            	Gets a value indicating whether the <b>SortedRelations</b> is read-only.
            </summary>
            <value>
            	<b>true</b> if the <see cref="T:NewsComponents.Collections.SortedRelations"/> is read-only; otherwise, <b>false</b>.
            	The default is <b>false</b>.
            </value>
        </member>
        <member name="P:NewsComponents.Collections.SortedRelations.IsSynchronized">
            <summary>
            	Gets a value indicating whether access to the <b>SortedRelations</b> is
            	synchronized (thread-safe).
            </summary>
            <value>
            	<b>true</b> if access to the the <see cref="T:NewsComponents.Collections.SortedRelations"/> is 
            	synchronized (thread-safe); otherwise, <b>false</b>.
            	The default is <b>false</b>.
            </value>
        </member>
        <member name="P:NewsComponents.Collections.SortedRelations.Keys">
            <summary>
            	Gets the keys in the <b>SortedRelations</b>.
            </summary>
            <value>An <see cref="T:System.Collections.ICollection"/> containing the keys in the <see cref="T:NewsComponents.Collections.SortedRelations"/>.</value>
            <remarks>
            	<para>The <see cref="T:System.Collections.ICollection"/> is a read-only view of the keys in the 
            	<see cref="T:NewsComponents.Collections.SortedRelations"/>. Modifications made to the underlying <b>SortedRelations</b>
            	are immediately reflected in the <b>ICollection</b>.</para>
            	<para>The elements of the <b>ICollection</b> are sorted in the same order as the keys
            	of the <b>SortedRelations</b>.</para>
            	<para>Similar to <see cref="M:NewsComponents.Collections.SortedRelations.GetKeyList"/>, but returns an <b>ICollection</b>
            	instead of an <see cref="T:System.Collections.IList"/>.</para>
            </remarks>
        </member>
        <member name="P:NewsComponents.Collections.SortedRelations.SyncRoot">
            <summary>
            	Gets an object that can be used to synchronize access to the <b>SortedRelations</b>.
            </summary>
            <value>An object that can be used to synchronize access to the <see cref="T:NewsComponents.Collections.SortedRelations"/>.</value>
        </member>
        <member name="P:NewsComponents.Collections.SortedRelations.Values">
            <summary>
            	Gets the values in the <b>SortedRelations</b>.
            </summary>
            <value>An <see cref="T:System.Collections.ICollection"/> containing the values in the <see cref="T:NewsComponents.Collections.SortedRelations"/>.</value>
            <remarks>
            	<para>The <see cref="T:System.Collections.ICollection"/> is a read-only view of the values in the 
            	<see cref="T:NewsComponents.Collections.SortedRelations"/>. Modifications made to the underlying <b>SortedRelations</b>
            	are immediately reflected in the <b>ICollection</b>.</para>
            	<para>The elements of the <b>ICollection</b> are sorted in the same order as the values
            	of the <b>SortedRelations</b>.</para>
            	<para>Similar to <see cref="M:NewsComponents.Collections.SortedRelations.GetValueList"/>, but returns an <b>ICollection</b>
            	instead of an <see cref="T:System.Collections.IList"/>.</para>
            </remarks>
        </member>
        <member name="T:NewsComponents.Feed.FeedInfo">
            <summary>
            represents information about a particular rss feed. 
            </summary>
        </member>
        <member name="T:NewsComponents.FeedDetailsInternal">
            <summary>
            Interface represents extended information about a particular feed
            (internal use only)
            </summary>
        </member>
        <member name="T:NewsComponents.ISizeInfo">
            <summary>
            Get informations about the size of an object or item
            </summary>
        </member>
        <member name="M:NewsComponents.Feed.FeedInfo.#ctor(System.String,System.String,System.Collections.ArrayList)">
            <summary>
            Overloaded. Initializer
            </summary>
            <param name="id"></param>
            <param name="feedLocation"></param>
            <param name="itemsList"></param>
        </member>
        <member name="M:NewsComponents.Feed.FeedInfo.#ctor(System.String,System.String,System.Collections.ArrayList,System.String,System.String,System.String)">
            <summary>
            Overloaded. Initializer
            </summary>
            <param name="id"></param>
            <param name="feedLocation"></param>
            <param name="itemsList"></param>
            <param name="title"></param>
            <param name="link"></param>
            <param name="description"></param>
        </member>
        <member name="M:NewsComponents.Feed.FeedInfo.#ctor(System.String,System.String,System.Collections.ArrayList,System.String,System.String,System.String,System.Collections.Hashtable,System.String)">
            <summary>
            Overloaded. Initializer
            </summary>
            <param name="id"></param>
            <param name="feedLocation"></param>
            <param name="itemsList"></param>
            <param name="title"></param>
            <param name="link"></param>
            <param name="description"></param>
            <param name="optionalElements"></param>
            <param name="language"></param>
        </member>
        <member name="M:NewsComponents.Feed.FeedInfo.WriteTo(System.Xml.XmlWriter)">
            <summary>
            Writes this object as an RSS 2.0 feed to the specified writer
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:NewsComponents.Feed.FeedInfo.WriteTo(System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Writes this object as an RSS 2.0 feed to the specified writer.
            </summary>
            <param name="writer"></param>
            <param name="noDescriptions">Indicates whether the contents of RSS items should 
            be written out or not.</param>
        </member>
        <member name="M:NewsComponents.Feed.FeedInfo.WriteTo(System.Xml.XmlWriter,NewsComponents.NewsItemSerializationFormat)">
            <summary>
            Writes this object as an RSS 2.0 feed to the specified writer
            </summary>
            <param name="writer"></param>
            <param name="format">indicates whether we are writing a FeedDemon newspaper or an RSS feed</param>
        </member>
        <member name="M:NewsComponents.Feed.FeedInfo.WriteTo(System.Xml.XmlWriter,NewsComponents.NewsItemSerializationFormat,System.Boolean)">
            <summary>
            Writes this object as an RSS 2.0 feed to the specified writer
            </summary>
            <param name="writer"></param>
            <param name="format">indicates whether we are writing a FeedDemon newspaper or an RSS feed</param>
            <param name="useGMTDate">Indicates whether the date should be GMT or local time</param>				
        </member>
        <member name="M:NewsComponents.Feed.FeedInfo.WriteTo(System.Xml.XmlWriter,NewsComponents.NewsItemSerializationFormat,System.Boolean,System.Boolean)">
            <summary>
            Writes this object as an RSS 2.0 feed to the specified writer
            </summary>
            <param name="writer"></param>
            <param name="format">indicates whether we are writing a FeedDemon newspaper or an RSS feed</param>
            <param name="useGMTDate">Indicates whether the date should be GMT or local time</param>				
            <param name="noDescriptions">Indicates whether the contents of RSS items should 
            be written out or not.</param>
        </member>
        <member name="M:NewsComponents.Feed.FeedInfo.ToString(NewsComponents.NewsItemSerializationFormat)">
            <summary>
            Provides the XML representation of the feed as an RSS 2.0 feed. 
            </summary>
            <param name="format">Indicates whether the XML should be returned as an RSS feed or a newspaper view</param>
            <returns>the feed as an XML string</returns>
        </member>
        <member name="M:NewsComponents.Feed.FeedInfo.ToString(NewsComponents.NewsItemSerializationFormat,System.Boolean)">
            <summary>
            Provides the XML representation of the feed as an RSS 2.0 feed. 
            </summary>
            <param name="format">Indicates whether the XML should be returned as an RSS feed or a newspaper view</param>
            <param name="useGMTDate">Indicates whether the date should be GMT or local time</param>
            <returns>the feed as an XML string</returns>
        </member>
        <member name="M:NewsComponents.Feed.FeedInfo.ToString">
            <summary>
            Provides the XML representation of the feed as an RSS 2.0 feed. 
            </summary>
            <returns>the feed as an XML string</returns>
        </member>
        <member name="M:NewsComponents.Feed.FeedInfo.Clone(System.Boolean)">
            <summary>
            Returns a copy of this FeedInfo. The OptionalElements and ItemsList are only a shallow copies.
            </summary>
            <param name="includeNewsItems">if set to <c>true</c> the item list is cloned (shallow). If false, it is the empty list</param>
            <returns>A copy of this FeedInfo</returns>
        </member>
        <member name="M:NewsComponents.Feed.FeedInfo.Clone">
            <summary>
            Returns a copy of this FeedInfo. The OptionalElements and ItemsList are only a shallow copies.
            </summary>
            <returns>A copy of this FeedInfo</returns>
        </member>
        <member name="M:NewsComponents.Feed.FeedInfo.WriteItemContents(System.IO.BinaryReader,System.IO.BinaryWriter)">
            <summary>
            Writes the union of the distinct item IDs and contents of the NewsItems contained 
            in the input reader to the specified binary writer. 
            </summary>
            <param name="reader">A reader positioned over the old descriptions file</param>
            <param name="writer"></param>
        </member>
        <member name="M:NewsComponents.Feed.FeedInfo.ContainsItemWithId(System.String)">
            <summary>
            Determines whether a NewsItem with the specified ID is contained in this FeedInfo
            </summary>
            <param name="id">The ID of the NewsItem</param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Feed.FeedInfo.GetSize">
            <summary>
            Gets the size.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Feed.FeedInfo.GetSizeDetails">
            <summary>
            Gets the size details.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NewsComponents.Feed.FeedInfo.Id">
            <summary>Gets/sets the id of this feed</summary>
        </member>
        <member name="P:NewsComponents.Feed.FeedInfo.Title">
            <summary></summary>
        </member>
        <member name="P:NewsComponents.Feed.FeedInfo.Description">
            <summary></summary>
        </member>
        <member name="P:NewsComponents.Feed.FeedInfo.Link">
            <summary></summary>
        </member>
        <member name="P:NewsComponents.Feed.FeedInfo.Language">
            <summary></summary>
        </member>
        <member name="P:NewsComponents.Feed.FeedInfo.OptionalElements">
            <summary>
            Table of optional feed elements.
            </summary>
        </member>
        <member name="P:NewsComponents.Feed.FeedInfo.Type">
            <summary>
            Gets the type of the FeedDetails
            </summary>
        </member>
        <member name="T:NewsComponents.Feed.FeedInfoList">
            <summary>
            Represents a list of FeedInfo objects. This is primarily used for generating newspaper views of multiple feeds.
            </summary>
        </member>
        <member name="F:NewsComponents.Feed.FeedInfoList.feeds">
            <summary>
            The list of feeds
            </summary>
        </member>
        <member name="F:NewsComponents.Feed.FeedInfoList.title">
            <summary>
            The title of this list when displayed in a newspaper view
            </summary>
        </member>
        <member name="M:NewsComponents.Feed.FeedInfoList.#ctor(System.String)">
            <summary>
            Creates a list with the specified title
            </summary>
            <param name="title">The name of the list</param>
        </member>
        <member name="M:NewsComponents.Feed.FeedInfoList.GetAllNewsItems">
            <summary>
            Returns all the NewsItems contained within this FeedInfoList in an ArrayList
            </summary>
            <returns>a list of all the NewsItems in this FeedInfoList</returns>
        </member>
        <member name="M:NewsComponents.Feed.FeedInfoList.Add(NewsComponents.Feed.FeedInfo)">
            <summary>
            Adds a new Feed to the list
            </summary>
            <param name="feed">The FeedInfo object to add</param>
            <returns>The position into which the new feed was inserted</returns>
        </member>
        <member name="M:NewsComponents.Feed.FeedInfoList.AddRange(System.Collections.ICollection)">
            <summary>
            Adds the range of feeds (FeedInfo collection).
            </summary>
            <param name="feedCollection">The feed collection.</param>
        </member>
        <member name="M:NewsComponents.Feed.FeedInfoList.Clear">
            <summary>
            Removes all FeedInfo objects from the list
            </summary>
        </member>
        <member name="M:NewsComponents.Feed.FeedInfoList.ToString">
            <summary>
            Provides the XML representation of the list as a FeedDemon newspaper 
            </summary>
            <returns>the feed list as an XML string</returns>
        </member>
        <member name="M:NewsComponents.Feed.FeedInfoList.WriteTo(System.Xml.XmlWriter)">
            <summary>
            Writes this object as a FeedDemon group newspaper to the specified writer
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:NewsComponents.Feed.FeedInfoList.GetEnumerator">
            <summary>
            Returns an enumerator used to iterate over the FeedInfo objects in the list
            </summary>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Feed.FeedInfoList.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
            <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception>
        </member>
        <member name="P:NewsComponents.Feed.FeedInfoList.Title">
            <summary>
            Returns the name of the list
            </summary>
        </member>
        <member name="P:NewsComponents.Feed.FeedInfoList.NewsItemCount">
            <summary>
            Gets the amount of FeedInfo objects.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:NewsComponents.Feed.FeedInfoList.Count">
            <summary>
            Gets the total amount of NewsItem objects in the FeedInfo objects held by this list.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:NewsComponents.Feed.FeedInfoList.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="P:NewsComponents.Feed.FeedInfoList.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="T:NewsComponents.Flagged">
            <summary>
            Item flag states
            </summary>
        </member>
        <member name="F:NewsComponents.Flagged.None">
            <summary>Not flagged</summary>
        </member>
        <member name="F:NewsComponents.Flagged.FollowUp">
            <summary>Flagged for follow up</summary>
        </member>
        <member name="F:NewsComponents.Flagged.Read">
            <summary>Flagged for read (again). This is NOT the "been read" flag!</summary>
        </member>
        <member name="F:NewsComponents.Flagged.Review">
            <summary>Flagged for review</summary>
        </member>
        <member name="F:NewsComponents.Flagged.Forward">
            <summary>Flagged for forward</summary>
        </member>
        <member name="F:NewsComponents.Flagged.Reply">
            <summary>Flagged for reply. Is also set if you replied to an item</summary>
        </member>
        <member name="F:NewsComponents.Flagged.Complete">
            <summary>Flagged for complete</summary>
        </member>
        <member name="T:NewsComponents.SupportedCommentStyle">
            <summary>
            Supported comment styles.
            </summary>
        </member>
        <member name="F:NewsComponents.SupportedCommentStyle.None">
            <summary>
            Undefined or None.
            </summary>
        </member>
        <member name="F:NewsComponents.SupportedCommentStyle.CommentAPI">
            <summary>
            Comment API
            </summary>
        </member>
        <member name="F:NewsComponents.SupportedCommentStyle.NNTP">
            <summary>
            NNTP posting
            </summary>
        </member>
        <member name="T:NewsComponents.NewsItemSerializationFormat">
            <summary>
            Used on the overloaded ToString() method of the NewsItem to indicate what 
            format the NewsItem should be written out as when converted to a string.
            </summary>
        </member>
        <member name="F:NewsComponents.NewsItemSerializationFormat.RssItem">
            <summary>
            Indicates that the NewsItem should be written out as an Rss item element. 
            </summary>
        </member>
        <member name="F:NewsComponents.NewsItemSerializationFormat.RssFeed">
            <summary>
            Indicates that the NewsItem should be written out as a single item element within 
            an RSS feed
            </summary>
        </member>
        <member name="F:NewsComponents.NewsItemSerializationFormat.NntpMessage">
            <summary>
            Indicates that the NewsItem should be written out as an NNTP message
            </summary>
        </member>
        <member name="F:NewsComponents.NewsItemSerializationFormat.NewsPaper">
            <summary>
            Indicates that the NewsItem should be written out as a single item element within 
            an RSS feed that is itself within a FeedDemon newspaper element 
            </summary>
        </member>
        <member name="F:NewsComponents.NewsItemSerializationFormat.Channel">
            <summary>
            Indicates that the NewsItem should be written out as a single item element within 
            an RSS 'channel' element 
            </summary>
        </member>
        <member name="T:NewsComponents.Enclosure">
            <summary>
            Represents an RSS enclosure
            </summary>
        </member>
        <member name="M:NewsComponents.Enclosure.#ctor(System.String,System.Int64,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="mimeType">The MIME type of the enclosure</param>
            <param name="length">The length of the enclosure in bytes</param>
            <param name="url">The URL of the enclosure</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:NewsComponents.Enclosure.Equals(System.Object)">
            <summary>
            Compares to see if two Enclosures are identical. Identity just checks to see if they have 
            the same link, 
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Enclosure.GetHashCode">
            <summary>
            Get the hash code of the object
            </summary>
            <returns></returns>
        </member>
        <member name="P:NewsComponents.Enclosure.MimeType">
            <summary>
            The MIME type of the enclosure
            </summary>
        </member>
        <member name="P:NewsComponents.Enclosure.Length">
            <summary>
            The length of the enclosure in bytes
            </summary>
        </member>
        <member name="P:NewsComponents.Enclosure.Url">
            <summary>
            The MIME type of the enclosure
            </summary>
        </member>
        <member name="P:NewsComponents.Enclosure.Description">
            <summary>
            The description associated with the item obtained via itunes:subtitle or media:title
            </summary>
        </member>
        <member name="P:NewsComponents.Enclosure.Downloaded">
            <summary>
            Indicates whether this enclosure has already been downloaded or not.
            </summary>
        </member>
        <member name="P:NewsComponents.Enclosure.Duration">
            <summary>
            Gets the playing time of the enclosure. 
            </summary>
        </member>
        <member name="T:NewsComponents.NewsItem">
            <summary>
            Represents an item in an RSS feed
            </summary>
        </member>
        <member name="T:NewsComponents.RelationCosmos.RelationBase">
            <summary>
            Abstract base class used by RelationCosmos to work with relational items. 
            </summary>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationBase.#ctor">
            <summary>
            Internal initializer.
            </summary>
        </member>
        <member name="F:NewsComponents.RelationCosmos.RelationBase.hReference">
            <summary>
            Internal: return a web Uri reference 
            </summary>
        </member>
        <member name="F:NewsComponents.RelationCosmos.RelationBase.p_id">
            <summary>
            A resource ID, mail/message ID, NNTP post ID.
            </summary>
        </member>
        <member name="F:NewsComponents.RelationCosmos.RelationBase.outgoingRelationships">
            <summary>
            Stores the outgoing relation(s).
            </summary>
        </member>
        <member name="F:NewsComponents.RelationCosmos.RelationBase.aPointInTime">
            <summary>
            Internal accessor.
            </summary>
        </member>
        <member name="F:NewsComponents.RelationCosmos.RelationBase.pointInTimeIsAdjustable">
            <summary>
            Internal accessor.
            </summary>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationBase.GetExternalRelations">
            <summary>
            Gets called if <see cref="P:NewsComponents.RelationCosmos.RelationBase.HasExternalRelations">HasExternalRelations</see>
            returns true to retrive the external Relation resource(s).
            Default return is the RelationCosmos.EmptyRelationList.
            </summary>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationBase.SetExternalRelations(NewsComponents.Collections.RelationList)">
            <summary>
            Should be overridden. Stores a collection of external Relations related
            to this RelationBase.
            </summary>
        </member>
        <member name="F:NewsComponents.RelationCosmos.RelationBase.externalRelations">
            <summary>
            Internal accessor.
            </summary>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationBase.CompareTo(System.Object)">
            <summary>
            Impl. IComparable.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:NewsComponents.RelationCosmos.RelationBase.HRef">
            <summary>
            Return a web reference, a resource ID, mail/message ID, NNTP post ID.
            </summary>
        </member>
        <member name="P:NewsComponents.RelationCosmos.RelationBase.Id">
            <summary>
            The unique identifier.
            </summary>
        </member>
        <member name="P:NewsComponents.RelationCosmos.RelationBase.OutgoingRelations">
            <summary>
            Return a list of outgoing Relation objects, e.g. 
            links the current relation resource points to.
            </summary>
        </member>
        <member name="P:NewsComponents.RelationCosmos.RelationBase.PointInTime">
            <summary>
            The DateTime the item was published/updated. It should be specified as UTC.
            </summary>
        </member>
        <member name="P:NewsComponents.RelationCosmos.RelationBase.HasExternalRelations">
            <summary>
            Return true, if the Relation has some external relations (that are not part
            of the RelationCosmos). Default is false;
            </summary>
        </member>
        <member name="M:NewsComponents.NewsItem.#ctor">
            <summary>
            An RSS item must always be initialized on construction.
            </summary>
        </member>
        <member name="M:NewsComponents.NewsItem.#ctor(NewsComponents.Feed.feedsFeed,System.String,System.String,System.String,System.DateTime,System.String)">
            <summary>
            Initializes an object representation of an RSS item. 
            </summary>
            <param name="feed">The RSS feed object this item belongs to.</param>
            <param name="title">The title of the article or blog entry.</param>
            <param name="link">A link to the article or blog entry.</param>
            <param name="content">A description of the article or blog entry. This parameter may 
            contain markup. </param>
            <param name="date">The date the article or blog entry was written or when it was fetched.</param>		
            <param name="subject">The topic of the article or blog entry.</param>
        </member>
        <member name="M:NewsComponents.NewsItem.#ctor(NewsComponents.Feed.feedsFeed,System.String,System.String,System.String,System.String,System.DateTime,System.String,System.String)">
            <summary>
            Initializes an object representation of an NNTP item
            </summary>
            <param name="feed">The NNTP feed object this item belongs to</param>
            <param name="title">The title of the newsgroup message</param>
            <param name="link">A link to the article or blog entry.</param>		
            <param name="content">The content of the newsgroup message</param>
            <param name="author">The author of the newsgroup message</param>
            <param name="date">Date of the newsgroup message</param>
            <param name="id">The unique identifier for the item</param>
            <param name="parentId">The ID of the message this one is in response to</param>
        </member>
        <member name="M:NewsComponents.NewsItem.#ctor(NewsComponents.Feed.feedsFeed,System.String,System.String,System.String,System.DateTime,System.String,System.String,System.String)">
            <summary>
            Initializes an object representation of an RSS item. 
            </summary>
            <param name="feed">The RSS feed object this item belongs to.</param>
            <param name="title">The title of the article or blog entry.</param>
            <param name="link">A link to the article or blog entry.</param>
            <param name="content">A description of the article or blog entry. This parameter may 
            contain markup. </param>
            <param name="date">The date the article or blog entry was written or when it was fetched.</param>		
            <param name="subject">The topic of the article or blog entry.</param>
            <param name="id">The unique identifier for the item</param>
            <param name="parentId">The ID of the message this one is in response to</param>		
        </member>
        <member name="M:NewsComponents.NewsItem.#ctor(NewsComponents.Feed.feedsFeed,System.String,System.String,System.String,System.DateTime,System.String,NewsComponents.ContentType,System.Collections.Hashtable,System.String,System.String)">
            <summary>
            Initializes an object representation of an RSS item. 
            </summary>
            <param name="feed">The RSS feed object this item belongs to.</param>
            <param name="title">The title of the article or blog entry.</param>
            <param name="link">A link to the article or blog entry.</param>
            <param name="content">The content of the blog entry</param>
            <param name="date">The date the article or blog entry was written or when it was fetched.</param>
            <param name="subject">The topic of the article or blog entry.</param>
            <param name="ctype">Indicates whether the description parameter contains Text, encoded HTML or XHTML </param>
            <param name="otherElements">Hashtable containing  QName/XmlNode pairs that represent RSS elements that 
            don't map to properties on this class.</param>
            <param name="id">The unique identifier for the item</param>
            <param name="parentId">The unique identifier of the parent of this item</param>
        </member>
        <member name="M:NewsComponents.NewsItem.#ctor(NewsComponents.Feed.feedsFeed,System.String,System.String,System.String,System.DateTime,System.String,NewsComponents.ContentType,System.Collections.Hashtable,System.String,System.String,System.String)">
            <summary>
            Initializes an object representation of an RSS item. 
            </summary>
            <param name="feed">The RSS feed object this item belongs to.</param>
            <param name="title">The title of the article or blog entry.</param>
            <param name="link">A link to the article or blog entry.</param>
            <param name="content">The content of the blog entry</param>
            <param name="date">The date the article or blog entry was written or when it was fetched.</param>
            <param name="subject">The topic of the article or blog entry.</param>
            <param name="ctype">Indicates whether the description parameter contains Text, encoded HTML or XHTML </param>
            <param name="otherElements">Hashtable containing  QName/XmlNode pairs that represent RSS elements that 
            don't map to properties on this class.</param>
            <param name="id">The unique identifier for the item</param>
            <param name="parentId">The unique identifier of the parent of this item</param>		
            <param name="baseUrl">The base URL used for resolving relative links in the content of the NewsItem</param>
        </member>
        <member name="F:NewsComponents.NewsItem.NoComments">
            <summary>
            numeric value that indicates that no comments exist for an item
            </summary>
        </member>
        <member name="M:NewsComponents.NewsItem.SetExternalRelations(NewsComponents.Collections.RelationList)">
            <summary>
            Overrides the default impl. of RelationBase. External Relations are the comments
            of a NewsItem.
            </summary>
            <param name="relations"></param>
        </member>
        <member name="M:NewsComponents.NewsItem.Clone">
            <summary>
            Returns a copy of this NewsItem. The OptionalElements is only a shallow copy.
            </summary>
            <returns>A copy of this NewsItem</returns>
        </member>
        <member name="M:NewsComponents.NewsItem.CopyTo(NewsComponents.Feed.feedsFeed)">
            <summary>
            Copies the item (clone) and set the new parent to the provided feed 
            </summary>
            <param name="f">feedsFeed</param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.NewsItem.WriteItem(System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Helper function used by ToString(bool). 
            </summary>
            <param name="writer"></param>
            <param name="useGMTDate">Indicates whether the time should be written out as GMT or local time</param>
        </member>
        <member name="M:NewsComponents.NewsItem.WriteItem(System.Xml.XmlWriter,System.Boolean,NewsComponents.NewsItemSerializationFormat)">
            <summary>
            Helper function used by ToString(bool). 
            </summary>
            <param name="writer"></param>
            <param name="useGMTDate">Indicates whether the time should be written out as GMT or local time</param>
            <param name="format">Indicates whether the item is being serialized as part of a FeedDemon newspaper view</param>
        </member>
        <member name="M:NewsComponents.NewsItem.WriteItem(System.Xml.XmlWriter,System.Boolean,NewsComponents.NewsItemSerializationFormat,System.Boolean)">
            <summary>
            Helper function used by ToString(bool). 
            </summary>
            <param name="writer"></param>
            <param name="useGMTDate">Indicates whether the time should be written out as GMT or local time</param>
            <param name="format">Indicates whether the item is being serialized as part of a FeedDemon newspaper view</param>
            <param name="noDescriptions">Indicates whether the contents of RSS items should 
            be written out or not.</param>						
        </member>
        <member name="M:NewsComponents.NewsItem.ToString(NewsComponents.NewsItemSerializationFormat)">
            <summary>
            Converts the object to an XML string containing an RSS 2.0 item. 
            </summary>
            <param name="format">Indicates whether an XML representation of an 
            RSS item element is returned, an entire RSS feed with this item as its 
            sole item or an NNTP message.  </param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.NewsItem.ToString(NewsComponents.NewsItemSerializationFormat,System.Boolean)">
            <summary>
            Converts the object to an XML string containing an RSS 2.0 item. 
            </summary>
            <param name="format">Indicates whether an XML representation of an 
            RSS item element is returned, an entire RSS feed with this item as its 
            sole item or an NNTP message. </param>
            <param name="useGMTDate">Indicates whether the date should be GMT or local time</param>
            <returns>A string representation of this news item</returns>		
        </member>
        <member name="M:NewsComponents.NewsItem.ToString(NewsComponents.NewsItemSerializationFormat,System.Boolean,System.Boolean)">
            <summary>
            Converts the object to an XML string containing an RSS 2.0 item. 
            </summary>
            <param name="format">Indicates whether an XML representation of an 
            RSS item element is returned, an entire RSS feed with this item as its 
            sole item or an NNTP message. </param>
            <param name="useGMTDate">Indicates whether the date should be GMT or local time</param>
            <param name="noDescriptions">Indicates whether the contents of RSS items should 
            be written out or not.</param>		
            <returns>A string representation of this news item</returns>		
        </member>
        <member name="M:NewsComponents.NewsItem.ToRssFeedOrItem(NewsComponents.NewsItemSerializationFormat,System.Boolean,System.Boolean)">
            <summary>
            Converts the NewsItem to an XML representation of an 
            RSS item element is returned or an entire RSS feed with this item as its 
            sole item.
            </summary>
            <param name="format">Indicates whether an XML representation of an 
            RSS item element is returned, an entire RSS feed with this item as its 
            sole item or an NNTP message. </param>
            <param name="useGMTDate">Indicates whether the date should be GMT or local time</param>		
            <param name="noDescriptions">Indicates whether the contents of RSS items should 
            be written out or not.</param>				
            <returns>An RSS item or RSS feed</returns>
        </member>
        <member name="M:NewsComponents.NewsItem.ToString">
            <summary>
            Converts the object to an XML string containing an RSS 2.0 item.  
            </summary>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.NewsItem.ProcessTitle(System.String)">
            <summary>
            Makes sure the title isn't null or empty string as well as strips markup. 
            </summary>
        </member>
        <member name="M:NewsComponents.NewsItem.RefreshRelationCosmos">
            <summary>
            Initiate to process the out going links from the 
            own content property field and refresh the RelationCosmos
            (outgoing/incoming link infos).
            Call to this function is required on dynamical late load of
            the item content.
            </summary>
        </member>
        <member name="M:NewsComponents.NewsItem.ProcessOutGoingLinks(System.String,System.String)">
            <summary>
            Processes the <paramref name="content"/> for outgoing links and populate 
            the outgoing links property. 
            </summary>
        </member>
        <member name="M:NewsComponents.NewsItem.GetFirstWords(System.String,System.Int32)">
            <summary>
            Gets the first n number of words from the provided string. 
            </summary>
            <param name="text">The target string</param>
            <param name="wordCount">The number of words to pick</param>
            <returns>The firs</returns>
        </member>
        <member name="M:NewsComponents.NewsItem.CreateNavigator">
            <summary>
            Creates an XPathNavigator over the XML representation of this object. This method
            is equivalent to calling CreateNavigator(false)
            </summary>
            <returns>An XPathNavigator</returns>
        </member>
        <member name="M:NewsComponents.NewsItem.CreateNavigator(System.Boolean)">
            <summary>
            Creates an XPathNavigator over the XML representation of this object.
            </summary>
            <param name="standalone">Indicates whether the navigator will be over the single 
            RSS item or over a representation of the parent RSS feed with this item 
            as the single item within it. When this parameter is true then the navigator 
            works over just an RSS item</param>
            <returns>An XPathNavigator</returns>
        </member>
        <member name="M:NewsComponents.NewsItem.CreateNavigator(System.Boolean,System.Boolean)">
            <summary>
            Creates an XPathNavigator over the XML representation of this object.
            </summary>
            <param name="standalone">Indicates whether the navigator will be over the single 
            RSS item or over a representation of the parent RSS feed with this item 
            as the single item within it. When this parameter is true then the navigator 
            works over just an RSS item</param>
            <param name="useGMTDate">Indicates whether the date should be GMT or local time</param>
            <returns>An XPathNavigator</returns>
        </member>
        <member name="M:NewsComponents.NewsItem.GetHashCode">
            <summary>
            Get the hash code of the object
            </summary>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.NewsItem.Equals(System.Object)">
            <summary>
            Compares to see if two NewsItems are identical. Identity just checks to see if they have 
            the same link, if both have no link then checks to see if they have the same description
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.NewsItem.ToNntpMessage">
            <summary>
            Creates a text based version of this object as NNTP message suitable for posting to a news server
            </summary>
            <returns>the NewsItem as an NNTP message string</returns>
        </member>
        <member name="M:NewsComponents.NewsItem.GetSize">
            <summary>
            [used to measure mem]
            </summary>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.NewsItem.GetSizeDetails">
            <summary>
            [used to measure mem]
            </summary>
        </member>
        <member name="P:NewsComponents.NewsItem.FeedLink">
            <summary>
            Gets the Feed Link (Source Url)
            </summary>
        </member>
        <member name="P:NewsComponents.NewsItem.Link">
            <summary>
            The link to the item.
            </summary>
        </member>
        <member name="P:NewsComponents.NewsItem.Date">
            <summary>
            The date the article or blog entry was made. 
            </summary>
        </member>
        <member name="P:NewsComponents.NewsItem.Feed">
            <summary>
            Returns the feed object to which this item belongs
            </summary>
        </member>
        <member name="P:NewsComponents.NewsItem.ParentId">
            <summary>
            The unique identifier of the parent.
            </summary>
        </member>
        <member name="P:NewsComponents.NewsItem.Content">
            <summary>
            The content of the article or blog entry. 
            </summary>
        </member>
        <member name="P:NewsComponents.NewsItem.HasContent">
            <summary>
            Returns true, if Content contains something; else false.
            </summary>
            <remarks>Should be used instead of testing 
            (Content != null &amp;&amp; Content.Length > 0) and is equivalent to 
            .ContentType == ContentType.None
            </remarks>
        </member>
        <member name="P:NewsComponents.NewsItem.ContentType">
            <summary>
            Indicates whether the description on this feed is text, HTML or XHTML. 
            </summary>
        </member>
        <member name="P:NewsComponents.NewsItem.BeenRead">
            <summary>
            Indicates whether the story has been read or not. 
            </summary>
        </member>
        <member name="P:NewsComponents.NewsItem.FeedDetails">
            <summary>
            Returns an object implementing the FeedDetails interface to which this item belongs
            </summary>
        </member>
        <member name="P:NewsComponents.NewsItem.FlagStatus">
            <summary>
            Indicates whether the item has been flagged for follow up or not. 
            </summary>
        </member>
        <member name="P:NewsComponents.NewsItem.HasNewComments">
            <summary>
            Indicates that there are new comments to this item. 
            </summary>
        </member>
        <member name="P:NewsComponents.NewsItem.WatchComments">
            <summary>
            Indicates that comments to this item are being watched. 
            </summary>
        </member>
        <member name="P:NewsComponents.NewsItem.Language">
            <summary>
            Gets or sets the language of the entry.
            Format of the corresponfing attribute as defined in
            http://www.w3.org/TR/REC-xml/#sec-lang-tag;
            Format of the language string: 
            see http://www.ietf.org/rfc/rfc3066.txt
            </summary>
            <value>The language.</value>
        </member>
        <member name="P:NewsComponents.NewsItem.HasExternalRelations">
            <summary>
            Overrides the default impl. of RelationBase. We return true, if we have a
            valid commentRssUrl and the commentCount is greater than zero.
            CommentCount is only be considered, if NewsHandler.UnconditionalCommentRss
            is false (default).
            </summary>
        </member>
        <member name="P:NewsComponents.NewsItem.Author">
            <summary>
            The author of the article or blog entry 
            </summary>
        </member>
        <member name="P:NewsComponents.NewsItem.Title">
            <summary>
            The title of the article or blog entry. 
            </summary>
        </member>
        <member name="P:NewsComponents.NewsItem.Subject">
            <summary>
            The subject of the article or blog entry. 
            </summary>
        </member>
        <member name="P:NewsComponents.NewsItem.CommentStyle">
            <summary>
            Indicates whether this item supports posting comments. 
            </summary>
        </member>
        <member name="P:NewsComponents.NewsItem.CommentCount">
            <summary>
            Returns the amount of comments attached.
            </summary>
        </member>
        <member name="P:NewsComponents.NewsItem.CommentUrl">
            <summary>the URL to post comments to</summary>
        </member>
        <member name="P:NewsComponents.NewsItem.CommentRssUrl">
            <summary>the URL to get an RSS feed of comments from</summary>
        </member>
        <member name="P:NewsComponents.NewsItem.Enclosures">
            <summary>
            Container of enclosures on the item. If there are no enclosures on the item
            then this value is null. 
            </summary>
        </member>
        <member name="P:NewsComponents.NewsItem.OptionalElements">
            <summary>
            Container for all the optional RSS elements for an item. Also 
            holds information from RSS modules. The keys in the hashtable 
            are instances of XmlQualifiedName while the values are instances 
            of XmlNode. 
            </summary>
            <remarks>Setting this field may have the side effect of setting certain read-only 
            properties such as CommentUrl and CommentStyle depending on whether CommentAPI 
            elements are contained in the table.</remarks>
        </member>
        <member name="P:NewsComponents.NewsItem.OutGoingLinks">
            <summary>
            Returns a collection of strings representing URIs to outgoing links in a feed. 
            </summary>
        </member>
        <member name="T:NewsComponents.SearchHitNewsItem">
            <summary>
            Represents a NewsItem that shows up in the context of search results over local RSS feeds. 
            </summary>
        </member>
        <member name="M:NewsComponents.SearchHitNewsItem.#ctor">
            <summary>
            Default constructor is private. 
            </summary>
        </member>
        <member name="M:NewsComponents.SearchHitNewsItem.#ctor(NewsComponents.Feed.feedsFeed,System.String,System.String,System.String,System.String,System.DateTime,System.String)">
            <summary>
            Main Constructor. 
            </summary>
            <param name="feed"></param>
            <param name="title"></param>
            <param name="link"></param>
            <param name="summary"></param>
            <param name="author"></param>
            <param name="date"></param>
            <param name="id"></param>
        </member>
        <member name="M:NewsComponents.SearchHitNewsItem.#ctor(NewsComponents.NewsItem)">
            <summary>
            Initialize with a NewsItem 
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:NewsComponents.SearchHitNewsItem.Summary">
            <summary>
            A text snippet from the actual content of the RSS item. 
            </summary>
        </member>
        <member name="T:NewsComponents.ExceptionalNewsItem">
            <summary>
            Represents a NewsItem with informations and help about 
            a exception occured
            </summary>
        </member>
        <member name="T:Tst.TstSynchronizedDictionary">
            <summary>
            A synchronized (thread-safe) wrapper for the <see cref="T:Tst.TstDictionary"/>.
            </summary>
        </member>
        <member name="T:Tst.TstDictionary">
            <summary>
            Ternary Search Tree Dictionary
            </summary>
            <remarks>
            <para>
            This dictionary is an implementation of the <b>Ternary Search Tree</b>
            data structure proposed by J. L. Bentley and R. Sedgewick in their 
            paper:  Fast algorithms for sorting and searching strings
            in Proceedings of the Eighth Annual ACM-SIAM Symposium on Discrete Algorithms, 
            New Orleans Louisiana, January 5-7, 1997. 
            </para>
            <para>
            This dictionary acts as a symbol table: the keys must be string. It
            is generally faster to find symbol than the <see cref="T:System.Collections.Hashtable"/> or
            <see cref="T:System.Collections.SortedList"/> classes. It can also perform more complex search
            such as neighbor search.
            </para>
            <para>
            Please read the paper to get some insight on the stucture used below.
            </para>	
            </remarks>
        </member>
        <member name="M:Tst.TstDictionary.#ctor">
            <summary>
             Constructor
            </summary> 
             <remarks>
             Construct an empty ternary search tree.
             </remarks>
        </member>
        <member name="M:Tst.TstDictionary.#ctor(Tst.TstDictionaryEntry)">
            <summary>
            Create a dictionary with a specified root.
            </summary>
            <param name="root">Root of the new dictionary</param>
        </member>
        <member name="M:Tst.TstDictionary.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:Tst.TstDictionary"/>.
            </summary>
            <returns>A shallow copy of the <see cref="T:Tst.TstDictionary"/>.</returns>
        </member>
        <member name="M:Tst.TstDictionary.Synchronized(Tst.TstDictionary)">
            <summary>
            Returns a synchronized (thread-safe) wrapper for 
            the <see cref="T:Tst.TstDictionary"/>.
            </summary>
            <param name="table">The <see cref="T:Tst.TstDictionary"/> to synchronize.</param>
            <returns>A synchronized (thread-safe) wrapper for the 
            <see cref="T:Tst.TstDictionary"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="table"/> is a null reference.</exception>
        </member>
        <member name="M:Tst.TstDictionary.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the <see cref="T:Tst.TstDictionary"/> elements to a one-dimensional Array instance at the specified index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the 
            <see cref="T:System.Collections.DictionaryEntry"/> 
            objects copied from <see cref="T:Tst.TstDictionary"/>. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is a null reference</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/> is multidimensional. 
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>. 
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of elements in the source <see cref="T:Tst.TstDictionary"/> is greater than 
            the available space from <paramref name="arrayIndex"/> to the end of the destination array. 
            </exception>
            <exception cref="T:System.ArgumentException">
            The type of the source <see cref="T:Tst.TstDictionary"/> cannot be cast automatically 
            to the type of the destination array. 
            </exception>
        </member>
        <member name="M:Tst.TstDictionary.Add(System.String,System.Object)">
            <summary>
             Adds an element with the specified key and value into the <see cref="T:Tst.TstDictionary"/>.
            </summary>
             <param name="key">The key of the element to add.</param>
             <param name="value">The value of the element to add. The value can be a null reference (Nothing in Visual Basic).</param>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="key"/> is a null reference (Nothing in Visual Basic).
             </exception>
             <exception cref="T:System.ArgumentException"><paramref name="key"/> is an empty string</exception>
             <exception cref="T:System.ArgumentException">
             An element with the same key already exists in the <see cref="T:Tst.TstDictionary"/>.
             </exception>
             <exception cref="T:System.NotSupportedException">The <see cref="T:Tst.TstDictionary"/> is read-only.</exception>
             <exception cref="T:System.NotSupportedException">The <see cref="T:Tst.TstDictionary"/> has a fixed size.</exception>
        </member>
        <member name="M:Tst.TstDictionary.Remove(System.String)">
            <summary>
             Removes the element with the specified key from the <see cref="T:Tst.TstDictionary"/>.
             </summary>
             <param name="key">The key of the element to remove.</param>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="key"/> is a null reference (Nothing in Visual Basic).
             </exception>
             <exception cref="T:System.ArgumentException"><paramref name="key"/> is an empty string</exception>
             <exception cref="T:System.NotSupportedException">The <see cref="T:Tst.TstDictionary"/> is read-only.</exception>
             <exception cref="T:System.NotSupportedException">The <see cref="T:Tst.TstDictionary"/> has a fixed size.</exception>
        </member>
        <member name="M:Tst.TstDictionary.Clear">
            <summary>
            Removes all elements from the <see cref="T:Tst.TstDictionary"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:Tst.TstDictionary"/> is read-only.</exception>
        </member>
        <member name="M:Tst.TstDictionary.Contains(System.String)">
            <summary>
            Determines whether the <see cref="T:Tst.TstDictionary"/> contains a specific key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:Tst.TstDictionary"/>.</param>
            <returns>true if the <see cref="T:Tst.TstDictionary"/> contains an element with the specified key; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference (Nothing in Visual Basic).
            </exception>
            <remarks>
            <para>Complexity: Uses a Ternary Search Tree (tst) to find the key.</para>
            <para>The method behaves exactly as <see cref="M:Tst.TstDictionary.ContainsKey(System.String)"/>.</para>
            </remarks>
        </member>
        <member name="M:Tst.TstDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:Tst.TstDictionary"/> contains a specific key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:Tst.TstDictionary"/>.</param>
            <returns>true if the <see cref="T:Tst.TstDictionary"/> contains an element with the specified key; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference (Nothing in Visual Basic).
            </exception>
            <remarks>
            <para>Complexity: Uses a Ternary Search Tree (tst) to find the key.</para>
            <para>The method behaves exactly as <see cref="M:Tst.TstDictionary.Contains(System.String)"/>.</para>
            </remarks>    
        </member>
        <member name="M:Tst.TstDictionary.ContainsValue(System.Object)">
            <summary>
            Determines whether the <see cref="T:Tst.TstDictionary"/> contains a specific value.
            </summary>
            <returns>
            true if the <see cref="T:Tst.TstDictionary"/> contains an element with the specified value; 
            otherwise, false.
            </returns>
        </member>
        <member name="M:Tst.TstDictionary.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator"/> that can iterate through the <see cref="T:Tst.TstDictionary"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.IDictionaryEnumerator"/> for the <see cref="T:Tst.TstDictionary"/>.</returns>
        </member>
        <member name="M:Tst.TstDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator"/> that can iterate through the <see cref="T:Tst.TstDictionary"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.IDictionaryEnumerator"/> for the <see cref="T:Tst.TstDictionary"/>.</returns>		
        </member>
        <member name="M:Tst.TstDictionary.Find(System.String)">
            <summary>
            Finds the tst node matching the key.
            </summary>
            <returns>the <see cref="T:Tst.TstDictionaryEntry"/> mathcing the key, null if not found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Tst.TstDictionary.PartialMatch(System.String)">
            <summary>
            </summary>
            <param name="key"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">key is a null reference</exception>
            <exception cref="T:System.ArgumentException">key is an empty string</exception>
        </member>
        <member name="M:Tst.TstDictionary.PartialMatch(System.String,System.Char)">
            <summary>
            Partial match search with wild char character.
            </summary>
            <param name="key">key to match</param>
            <param name="wildChar">"don't care" character</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">key is a null reference</exception>
            <exception cref="T:System.ArgumentException">key is an empty string</exception>
            <remarks>
            <para>
            Searching the dictionary for the pattern
            "*o*o*o" matches the single word <em>rococo</em>, 
            while the pattern
            "*a*a*a" matches many words, including <em>banana</em>,
            <em>casaba</em>, and <em>pajama</em>.
            </para>
            </remarks>
        </member>
        <member name="M:Tst.TstDictionary.PartialMatchSearch(Tst.TstDictionaryEntry,System.String,System.Int32,System.Char,System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <param name="key"></param>
            <param name="index"></param>
            <param name="wildChar"></param>
            <param name="matches"></param>
        </member>
        <member name="M:Tst.TstDictionary.NearNeighbors(System.String,System.Int32)">
            <summary>
            Near-neighbor search in the key string set.
            </summary>
            <param name="key">key to search for.</param>
            <param name="distance">Hamming distance</param>
            <returns>near-neighbor search within <paramref name="distance"/>
            Hamming distance.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is a null reference</exception>
            <exception cref="T:System.ArgumentException">dist is negative</exception>
            <remarks>
            <para>
            This methods finds all words in
            the dictionary that are within a given Hamming distance of
            a query word.
            </para>
            <para>
            For instance, a search for all words within
            distance two of soda finds code, coma and 117 other
            words.
            </para>
            </remarks>
        </member>
        <member name="M:Tst.TstDictionary.NearNeighborsSearch(Tst.TstDictionaryEntry,System.String,System.Int32,System.Int32,System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <param name="key"></param>
            <param name="index"></param>
            <param name="dist"></param>
            <param name="matches"></param>
        </member>
        <member name="P:Tst.TstDictionary.Root">
            <summary>
             Root node
             </summary>
        </member>
        <member name="P:Tst.TstDictionary.Version">
            <summary>
            Returns the current dictionary version.
            </summary>
            <remarks>
            This method is used by enumerators to track the dictionary
            modification.
            </remarks>
        </member>
        <member name="P:Tst.TstDictionary.Count">
            <summary>
             Gets the number of key-and-value pairs contained in the <see cref="T:Tst.TstDictionary"/>.
             </summary>	
             <value>
             The number of key-and-value pairs contained in the <see cref="T:Tst.TstDictionary"/>.
             </value>
             <remarks>
             Complexity: O(N)
             </remarks>
        </member>
        <member name="P:Tst.TstDictionary.IsSynchronized">
            <summary>
            Get a value indicating whether access to the <see cref="T:Tst.TstDictionary"/> is synchronized (thread-safe).
            </summary>
            <value>
            true if access to the <see cref="T:Tst.TstDictionary"/> is synchronized (thread-safe); 
            otherwise, false. The default is false.
            </value>
        </member>
        <member name="P:Tst.TstDictionary.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:Tst.TstDictionary"/>.
            </summary>
            <value>
            An object that can be used to synchronize access to the <see cref="T:Tst.TstDictionary"/>.
            </value>
        </member>
        <member name="P:Tst.TstDictionary.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:Tst.TstDictionary"/> has a fixed size. 
            </summary>
            <value>
            true if the <see cref="T:Tst.TstDictionary"/> has a fixed size; otherwise, false. 
            The default is false.
            </value>
        </member>
        <member name="P:Tst.TstDictionary.IsReadOnly">
            <summary>
             Gets a value indicating whether the <see cref="T:Tst.TstDictionary"/> is read-only.
             </summary>
             <value>
             true if the <see cref="T:Tst.TstDictionary"/> is read-only; otherwise, false. 
             The default is false.
             </value>
        </member>
        <member name="P:Tst.TstDictionary.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Specialized.StringCollection"/> containing the keys in the <see cref="T:Tst.TstDictionary"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Specialized.StringCollection"/> containing the keys in the <see cref="T:Tst.TstDictionary"/>.
            </returns>
        </member>
        <member name="P:Tst.TstDictionary.Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> containing the values in the <see cref="T:Tst.TstDictionary"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.ICollection"/> containing the values in the <see cref="T:Tst.TstDictionary"/>.
            </returns>
        </member>
        <member name="P:Tst.TstDictionary.Item(System.String)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <remarks>
            [C#] In C#, this property is the indexer for the <see cref="T:Tst.TstDictionary"/> class.
            </remarks>
            <param name="key">The key whose value to get or set.</param>
            <value>
            The value associated with the specified key. 
            If the specified key is not found, attempting to get it returns a null reference 
            (Nothing in Visual Basic), and attempting to set it creates a new element using the specified key.
            </value>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference</exception>
            <exception cref="T:System.ArgumentException">
            The property is set and <paramref name="key"/> is an empty string
            </exception>
            <exception cref="T:System.NotSupportedException">
            The property is set and the <see cref="T:Tst.TstDictionary"/> is read-only. 
            </exception>
            <exception cref="T:System.NotSupportedException">
            The property is set, <paramref name="key"/> does not exist in the collection,
            and the <see cref="T:Tst.TstDictionary"/> has a fixed size.
            </exception>
        </member>
        <member name="M:Tst.TstSynchronizedDictionary.#ctor(Tst.TstDictionary)">
            <summary>
            Creates a synchronized wrapper around the 
            <see cref="T:Tst.TstDictionary"/> <paramref name="dic"/>.
            </summary>
            <param name="dic">Dictionary to synchronize</param>
        </member>
        <member name="M:Tst.TstSynchronizedDictionary.Add(System.String,System.Object)">
            <summary>
            Synchronized Add method.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Tst.TstSynchronizedDictionary.Clear">
            <summary>
            Synchronized clear method
            </summary>
        </member>
        <member name="M:Tst.TstSynchronizedDictionary.Remove(System.String)">
            <summary>
            Synchronized remove method
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Tst.TstSynchronizedDictionary.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tst.TstSynchronizedDictionary.ContainsKey(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Tst.TstSynchronizedDictionary.CopyTo(System.Array,System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Tst.TstSynchronizedDictionary.Find(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Tst.TstSynchronizedDictionary.GetEnumerator">
            <summary>
            Gets a non-synchronized enumerator
            </summary>
            <remarks>
            Enumerating through a collection is intrinsically not a 
            thread-safe procedure. 
            Even when a collection is synchronized, other threads could still 
            modify the collection, which causes the enumerator to throw an 
            exception. 
            To guarantee thread safety during enumeration, you can either lock 
            the collection during the entire enumeration or catch the 
            exceptions resulting from changes made by other threads.
            </remarks>
            <returns>Enumerator</returns>
        </member>
        <member name="M:Tst.TstSynchronizedDictionary.PartialMatch(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Tst.TstSynchronizedDictionary.PartialMatch(System.String,System.Char)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="wildChar"></param>
            <returns></returns>
        </member>
        <member name="M:Tst.TstSynchronizedDictionary.NearNeighbors(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="distance"></param>
            <returns></returns>
        </member>
        <member name="P:Tst.TstSynchronizedDictionary.Wrapped">
            <summary>
            Wrapped dictionary
            </summary>
        </member>
        <member name="P:Tst.TstSynchronizedDictionary.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tst.TstSynchronizedDictionary.IsFixedSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tst.TstSynchronizedDictionary.IsSynchronized">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tst.TstSynchronizedDictionary.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tst.TstSynchronizedDictionary.Keys">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tst.TstSynchronizedDictionary.Values">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tst.TstSynchronizedDictionary.Item(System.String)">
            <summary>
            Synchronized indexer
            </summary>
        </member>
        <member name="P:Tst.TstSynchronizedDictionary.SyncRoot">
            <summary>
            SyncRoot object
            </summary>
        </member>
        <member name="T:NewsComponents.Xml.Serialization.SerializerCacheDelegate">
            <summary>
            Delegete type for events to raise from the
            serializer cache.
            </summary>
        </member>
        <member name="T:NewsComponents.Xml.Serialization.XmlSerializerCache">
            <summary>
            The XmlSerializerCache allows to work around the 
            assembly leak problem in the XmlSerializer 
            ( LINK )
            The cache will inspect if it contains any previously cached 
            instances that are compatible with the parameters passed to the
            various overloads to the GetSerializer method before constructing 
            a new XmlSerializer instance.
            </summary>
            <remarks>
            In contrast to the XmlSerializer, the XmlSerializerCache requires
            a permission set that allows reflecting over private members.
            </remarks>
        </member>
        <member name="F:NewsComponents.Xml.Serialization.XmlSerializerCache.Serializers">
            <summary>
            The Dictionary to store cached serializer instances.
            </summary>
        </member>
        <member name="F:NewsComponents.Xml.Serialization.XmlSerializerCache.SyncRoot">
            <summary>
            An object to synchonize access to the Dictionary instance.
            </summary>
        </member>
        <member name="M:NewsComponents.Xml.Serialization.XmlSerializerCache.#ctor">
            <summary>
            Default constructor to initialize
            an instance of the cache.
            </summary>
        </member>
        <member name="M:NewsComponents.Xml.Serialization.XmlSerializerCache.GetSerializer(System.Type)">
            <summary>
            Get an XmlSerializer instance for the
            specified parameters. The method will check if
            any any previously cached instances are compatible
            with the parameters before constructing a new  
            XmlSerializer instance.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Xml.Serialization.XmlSerializerCache.GetSerializer(System.Type,System.String)">
            <summary>
            Get an XmlSerializer instance for the
            specified parameters. The method will check if
            any any previously cached instances are compatible
            with the parameters before constructing a new  
            XmlSerializer instance.
            </summary>
            <param name="type"></param>
            <param name="defaultNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Xml.Serialization.XmlSerializerCache.GetSerializer(System.Type,System.Xml.Serialization.XmlRootAttribute)">
            <summary>
            Get an XmlSerializer instance for the
            specified parameters. The method will check if
            any any previously cached instances are compatible
            with the parameters before constructing a new  
            XmlSerializer instance.
            </summary>
            <param name="type"></param>
            <param name="root"></param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Xml.Serialization.XmlSerializerCache.GetSerializer(System.Type,System.Xml.Serialization.XmlAttributeOverrides)">
            <summary>
            Get an XmlSerializer instance for the
            specified parameters. The method will check if
            any any previously cached instances are compatible
            with the parameters before constructing a new  
            XmlSerializer instance.
            </summary>
            <param name="type"></param>
            <param name="overrides"></param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Xml.Serialization.XmlSerializerCache.GetSerializer(System.Type,System.Type[])">
            <summary>
            Get an XmlSerializer instance for the
            specified parameters. The method will check if
            any any previously cached instances are compatible
            with the parameters before constructing a new  
            XmlSerializer instance.
            </summary>
            <param name="type"></param>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Xml.Serialization.XmlSerializerCache.GetSerializer(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)">
            <summary>
            Get an XmlSerializer instance for the
            specified parameters. The method will check if
            any any previously cached instances are compatible
            with the parameters before constructing a new  
            XmlSerializer instance.
            </summary>
            <param name="type"></param>
            <param name="overrides"></param>
            <param name="types"></param>
            <param name="root"></param>
            <param name="defaultNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Xml.Serialization.XmlSerializerCache.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:NewsComponents.Xml.Serialization.XmlSerializerCache.Dispose">
            <summary>
            Implementation of IDisposable.Dispose. Call to 
            clean up resources held by the XmlSerializerCache.
            </summary>
        </member>
        <member name="E:NewsComponents.Xml.Serialization.XmlSerializerCache.NewSerializer">
            <summary>
            The NewSerializer event fires when the XmlSerializerCache
            receives a request for an XmlSerializer instance
            that is not in the cache and it needs to create a
            new instance.
            </summary>
        </member>
        <member name="E:NewsComponents.Xml.Serialization.XmlSerializerCache.CacheHit">
            <summary>
            The CacheHit even fires when the XmlSerializerCache
            receives a request for a previously cached instance
            of an XmlSerializer
            </summary>
        </member>
        <member name="T:NewsComponents.Xml.Serialization.StringSorter">
            <summary>
            Helper class to simpify sorting
            strings (Not really necessary in Whidbey).
            </summary>
        </member>
        <member name="M:NewsComponents.Xml.Serialization.StringSorter.#ctor">
            <summary>
            Helper class to sort strings alphabetically
            </summary>
        </member>
        <member name="M:NewsComponents.Xml.Serialization.StringSorter.AddString(System.String)">
            <summary>
            Add a string to sort
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:NewsComponents.Xml.Serialization.StringSorter.GetOrderedArray">
            <summary>
            Sort the strings that were added by calling
            <see cref="M:NewsComponents.Xml.Serialization.StringSorter.AddString(System.String)"/>
            </summary>
            <returns>A sorted string array.</returns>
        </member>
        <member name="T:NewsComponents.Xml.Serialization.SignatureExtractor">
            <summary>
            Helper methods to create the signature for 
            the XmlSerializer parameters.
            </summary>
        </member>
        <member name="M:NewsComponents.Xml.Serialization.SignatureExtractor.GetDefaultNamespaceSignature(System.String)">
            <summary>
            Returns a signature for the passed in namespace
            </summary>
            <param name="defaultNamespace"></param>
            <returns>signature for the passed in namespace</returns>
        </member>
        <member name="M:NewsComponents.Xml.Serialization.SignatureExtractor.GetXmlRootSignature(System.Xml.Serialization.XmlRootAttribute)">
            <summary>
            Creates a signature for the passed in XmlRootAttribute
            </summary>
            <param name="root"></param>
            <returns>An instance indpendent signature of the XmlRootAttribute</returns>
        </member>
        <member name="M:NewsComponents.Xml.Serialization.SignatureExtractor.GetOverridesSignature(System.Xml.Serialization.XmlAttributeOverrides)">
            <summary>
            Creates a signature for the passed in XmlAttributeOverrides
            </summary>
            <param name="overrides"></param>
            <returns>An instance indpendent signature of the XmlAttributeOverrides</returns>
        </member>
        <member name="M:NewsComponents.Xml.Serialization.SignatureExtractor.GetTypeArraySignature(System.Type[])">
            <summary>
            Creates a signature for the passed in Type array. The order
            of the elements in the array does not influence the signature.
            </summary>
            <param name="types"></param>
            <returns>An instance indpendent signature of the Type array</returns>
        </member>
        <member name="T:NewsComponents.Utils.StringHelper">
            <summary>
            Summary description for StringHelper.
            </summary>
        </member>
        <member name="M:NewsComponents.Utils.StringHelper.EmptyOrNull(System.String)">
            <summary>
            Helper to test strings.
            </summary>
            <param name="text">String to test</param>
            <returns>True, if 'text' was null or of length zero</returns>
            <remarks>No trimming of the string happens</remarks>
        </member>
        <member name="M:NewsComponents.Utils.StringHelper.EmptyTrimOrNull(System.String)">
            <summary>
            Helper to test strings.
            </summary>
            <param name="text">String to test</param>
            <returns>True, if 'text' was null or of length zero</returns>
            <remarks>Trimming of the string happens</remarks>
        </member>
        <member name="M:NewsComponents.Utils.StringHelper.SizeOfStr(System.String)">
            <summary>
            Return the size of a string in byte. Consider, if it is null.
            </summary>
            <param name="s">String</param>
            <returns>Size in bytes</returns>
        </member>
        <member name="M:NewsComponents.Utils.StringHelper.LengthOfStr(System.String)">
            <summary>
            Return the length of a string. Consider, if it is null.
            </summary>
            <param name="s">String</param>
            <returns>Length</returns>
        </member>
        <member name="M:NewsComponents.Utils.StringHelper.ShortenByEllipsis(System.String,System.Int32)">
            <summary>
            Cuts the provided string at allowedLength - 3 (ellipsis length)
            </summary>
            <param name="text">string to work on</param>
            <param name="allowedLength">Max. length of the string to return</param>
            <returns>string that ends with ellipsis (...)</returns>
            <remarks>Considers newline and linefeed</remarks>
        </member>
        <member name="M:NewsComponents.Utils.StringHelper.GetFirstWords(System.String,System.Int32)">
            <summary>
            Return the first amount of words defined by 'wordCount' contained in 'text'.
            </summary>
            <param name="text">String to work on</param>
            <param name="wordCount">Amount of words to look for</param>
            <returns>String containing only the first x words.</returns>
            <remarks>Word delimiters are: linefeed, carrige return, tab and space</remarks>
        </member>
        <member name="M:NewsComponents.Utils.StringHelper.IsEMailAddress(System.String)">
            <summary>
            Tests the <c>text</c> for a valid e-Mail address and returns true,
            if the content match, else false. 
            </summary>
            <param name="text">String to test</param>
            <returns>True if it looks like a valid e-Mail address, else false.</returns>
        </member>
        <member name="M:NewsComponents.Utils.StringHelper.GetEMailAddress(System.String)">
            <summary>
            Gets the Email address within a selection of text.
            </summary>
            <param name="text">Text.</param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Utils.StringHelper.AreEqualCaseInsensitive(System.String,System.String)">
            <summary>
            Performs case insensitive check on whether the strings are equal.
            </summary>
            <param name="original">Original.</param>
            <param name="comparand">Comparand.</param>
            <returns></returns>
        </member>
        <member name="T:NewsComponents.Search.BooleanSearch.IDocument">
            <summary>
            IDocument is an interface class responsible for providing search facilities
            to the QueryTree class. You can subclass it in order to provide support for
            plain-text searching across a variety of media.
            </summary>
        </member>
        <member name="T:NewsComponents.Search.BooleanSearch.QueryTree">
            <summary>
            A QueryTree manages a tree QueryNode objects, providing facilities
            to match a boolean search against one or more objects that implement
            IDocument, and return a list of positive matches.
            </summary>
        </member>
        <member name="T:NewsComponents.Net.HttpExtendedStatusCode">
            <summary>
            Extended HTTP Response Status Codes.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.HttpExtendedStatusCode.IMUsed">
            <summary>
            Instance Manipulation used - Using RFC3229 with feeds.
            See also http://bobwyman.pubsub.com/main/2004/09/using_rfc3229_w.html
            </summary>
        </member>
        <member name="T:NewsComponents.Net.AsyncWebRequest">
            <summary>
            Summary description for AsyncWebRequest.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.AsyncWebRequest.MinValue">
            <summary>
            We use our own default MinValue for web requests to
            prevent first chance exceptions (InvalidRangeException on
            assigning to Request.IfModifiedSince). This value is expected
            in local Time, so we don't use DateTime.MinValue! It goes out
            of range if converted to universal time (e.g. if we have GMT +xy)
            </summary>
        </member>
        <member name="F:NewsComponents.Net.AsyncWebRequest.trustedCertificateIssues">
            <summary>
            Contains the url's as keys and the allowed (user interaction needed) 
            CertificateIssue's within an ICollection as values.
            </summary>
            <remarks>That content should be maintained completely from within
            the OnCertificateIssue event.</remarks>
        </member>
        <member name="M:NewsComponents.Net.AsyncWebRequest.#ctor">
            <summary>
            Constructor initialize a AsyncWebRequest instance
            </summary>
        </member>
        <member name="M:NewsComponents.Net.AsyncWebRequest.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:NewsComponents.Net.AsyncWebRequest.QueueRequest(NewsComponents.Net.RequestParameter,NewsComponents.Net.RequestQueuedCallback,NewsComponents.Net.RequestStartCallback,NewsComponents.Net.RequestCompleteCallback,NewsComponents.Net.RequestExceptionCallback,System.Int32)">
            <summary>
            Used to a queue an HTTP request for processing
            </summary>
            <param name="requestParameter"></param>
            <param name="webRequestQueued"></param>
            <param name="webRequestComplete"></param>
            <param name="webRequestException"></param>
            <param name="webRequestStart"></param>
            <param name="priority"></param>
            <exception cref="T:System.NotSupportedException">The request scheme specified in address has not been registered.</exception>
            <exception cref="T:System.ArgumentNullException">The requestParameter is a null reference</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have permission to connect to the requested URI or a URI that the request is redirected to.</exception>
        </member>
        <member name="M:NewsComponents.Net.AsyncWebRequest.QueueRequest(NewsComponents.Net.RequestParameter,NewsComponents.Net.RequestQueuedCallback,NewsComponents.Net.RequestStartCallback,NewsComponents.Net.RequestCompleteCallback,NewsComponents.Net.RequestExceptionCallback,NewsComponents.Net.RequestProgressCallback,System.Int32)">
            <summary>
            Used to a queue an HTTP request for processing
            </summary>
            <param name="requestParameter"></param>
            <param name="webRequestQueued"></param>
            <param name="webRequestComplete"></param>
            <param name="webRequestException"></param>
            <param name="webRequestStart"></param>
            <param name="priority"></param>
            <exception cref="T:System.NotSupportedException">The request scheme specified in address has not been registered.</exception>
            <exception cref="T:System.ArgumentNullException">The requestParameter is a null reference</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have permission to connect to the requested URI or a URI that the request is redirected to.</exception>
        </member>
        <member name="M:NewsComponents.Net.AsyncWebRequest.QueueRequest(NewsComponents.Net.RequestParameter,NewsComponents.Net.RequestQueuedCallback,NewsComponents.Net.RequestStartCallback,NewsComponents.Net.RequestCompleteCallback,NewsComponents.Net.RequestExceptionCallback,NewsComponents.Net.RequestProgressCallback,System.Int32,NewsComponents.Net.RequestState)">
            <summary>
            Called for first and subsequent requests.
            </summary>
            <param name="requestParameter">Could be modified for each subsequent request</param>
            <param name="webRequestQueued"></param>
            <param name="webRequestComplete"></param>
            <param name="webRequestException"></param>
            <param name="webRequestStart"></param>
            <param name="priority"></param>
            <param name="prevState">If subsequent request, this should contain the previous RequestState</param>
        </member>
        <member name="M:NewsComponents.Net.AsyncWebRequest.SetAllowUnsafeHeaderParsing">
            <summary>
            Internal workaround. 
            DO NOT USE THIS IN YOUR OWN PROJECTS, UNLESS YOU REALLY KNOW WHAT
            YOU ARE DOING!!!
            Fixes the fix in .NET 1.1 SP1 and .NET 1.0 SP3
            they made the header parsing more standards compliant, but this
            leads to various HTTP protocol violation exceptions on subscribed feeds :-(
            </summary>
        </member>
        <member name="M:NewsComponents.Net.AsyncWebRequest.FullUserAgent(System.String)">
            <summary>
            To be provided
            </summary>
            <param name="userAgent"></param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Net.AsyncWebRequest.TimeoutCallback(System.Object,System.Boolean)">
            <summary>
            Callback that is fired if an HTTP request times out
            </summary>
            <param name="input">the RequestState object</param>
            <param name="timedOut">indicates whether a time out occured</param>
        </member>
        <member name="M:NewsComponents.Net.AsyncWebRequest.RequestStartCancelled(NewsComponents.Net.RequestState)">
            <summary>
            Cancels the request
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:NewsComponents.Net.AsyncWebRequest.FinalizeWebRequest(NewsComponents.Net.RequestState)">
            <summary>
            Call it to cleanup any made request.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:NewsComponents.Net.AsyncWebRequest.ResponseCallback(System.IAsyncResult)">
            <summary>
            Callback gets called if BeginGetResponse() has any result.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:NewsComponents.Net.AsyncWebRequest.ReadCallback(System.IAsyncResult)">
            <summary>
            Callback gets called (recursively) on subsequent response stream read requests
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:NewsComponents.Net.AsyncWebRequest.GetDeflatedResponse(System.Net.HttpWebResponse)">
            <summary>
            Returns a deflated version of the response sent by the web server. If the 
            web server did not send a compressed stream then the original stream is returned
            as a seekable MemoryStream. 
            </summary>
            <param name="response">HttpWebResponse</param>
            <returns>seekable Stream</returns>
        </member>
        <member name="M:NewsComponents.Net.AsyncWebRequest.GetDeflatedResponse(System.Net.FileWebResponse)">
            <summary>
            Overload for FileWebResponse.
            </summary>
            <param name="response">FileWebResponse</param>
            <returns>seekable Stream</returns>
        </member>
        <member name="M:NewsComponents.Net.AsyncWebRequest.GetDeflatedResponse(System.String,System.IO.Stream)">
            <summary>
            Returns a deflated version of the response sent by the web server. If the 
            web server did not send a compressed stream then the original stream is returned. 
            </summary>
            <param name="encoding">Encoding of the stream. One of 'deflate' or 'gzip' or Empty.</param>
            <param name="inputStream">Input Stream</param>
            <returns>Seekable Stream</returns>
        </member>
        <member name="M:NewsComponents.Net.AsyncWebRequest.ResponseToMemory(System.IO.Stream)">
            <summary>
            Helper to copy a non-seekable stream (like from a HttpResponse) to a seekable memory stream.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Net.AsyncWebRequest.IsRedirect(System.Net.HttpStatusCode)">
            <summary>
            Helper method checks if a status code is a redirect or not
            </summary>
            <param name="statusCode"></param>
            <returns>True if the status code is a redirect</returns>
        </member>
        <member name="M:NewsComponents.Net.AsyncWebRequest.IsUnauthorized(System.Net.HttpStatusCode)">
            <summary>
            Helper method checks if a status code is a unauthorized or not
            </summary>
            <param name="statusCode"></param>
            <returns>True if the status code is unauthorized</returns>
        </member>
        <member name="M:NewsComponents.Net.AsyncWebRequest.GetSyncResponse(System.String,System.Net.ICredentials,System.String,System.Net.IWebProxy,System.DateTime,System.String,System.Int32)">
            <summary>
            Can be called syncronized to get a HttpWebResponse.
            </summary>
            <param name="address">Url to request</param>
            <param name="credentials">Url credentials</param>
            <param name="userAgent"></param>
            <param name="proxy">Proxy to use</param>
            <param name="ifModifiedSince">Header date</param>
            <param name="eTag">Header tag</param>
            <param name="timeout">Request timeout. E.g. 60 * 1000, means one minute timeout. 
            If zero or less than zero, the default timeout of one minute will be used</param>
            <returns>WebResponse</returns>
        </member>
        <member name="M:NewsComponents.Net.AsyncWebRequest.GetSyncResponseHeadersOnly(System.String,System.Net.IWebProxy,System.Int32)">
            <summary>
            Can be called syncronized to get a HttpWebResponse (Headers only!).
            </summary>
            <param name="address">Url to request</param>
            <param name="proxy">Proxy to use</param>
            <param name="timeout">Request timeout. E.g. 60 * 1000, means one minute timeout. 
            If zero or less than zero, the default timeout of one minute will be used</param>
            <returns>WebResponse</returns>
        </member>
        <member name="M:NewsComponents.Net.AsyncWebRequest.GetSyncResponseHeadersOnly(System.String,System.Net.IWebProxy,System.Int32,System.Net.ICredentials)">
            <summary>
            Can be called syncronized to get a HttpWebResponse (Headers only!).
            </summary>
            <param name="address">Url to request</param>
            <param name="proxy">Proxy to use</param>
            <param name="timeout">Request timeout. E.g. 60 * 1000, means one minute timeout. 
            If zero or less than zero, the default timeout of one minute will be used</param>
            <param name="credentials">ICredentials</param>
            <returns>WebResponse</returns>
        </member>
        <member name="M:NewsComponents.Net.AsyncWebRequest.GetSyncResponseStream(System.String,System.Net.ICredentials,System.Net.IWebProxy)">
            <summary>
            Can be called syncronized to get a Http Web ResponseStream.
            </summary>
            <param name="address">Url to request</param>
            <param name="credentials">Url credentials</param>
            <param name="proxy">Proxy to use</param>
        </member>
        <member name="M:NewsComponents.Net.AsyncWebRequest.GetSyncResponseStream(System.String,System.Net.ICredentials,System.Net.IWebProxy,System.Int32)">
            <summary>
            Can be called syncronized to get a Http Web ResponseStream.
            </summary>
            <param name="address">Url to request</param>
            <param name="credentials">Url credentials</param>
            <param name="proxy">Proxy to use</param>
            <param name="timeout">Timeout in msecs</param>
        </member>
        <member name="M:NewsComponents.Net.AsyncWebRequest.GetSyncResponseStream(System.String,System.Net.ICredentials,System.String,System.Net.IWebProxy)">
            <summary>
            Can be called syncronized to get a Http Web ResponseStream.
            </summary>
            <param name="address">Url to request</param>
            <param name="credentials">Url credentials</param>
            <param name="userAgent"></param>
            <param name="proxy">Proxy to use</param>
        </member>
        <member name="M:NewsComponents.Net.AsyncWebRequest.GetSyncResponseStream(System.String,System.Net.ICredentials,System.String,System.Net.IWebProxy,System.Int32)">
            <summary>
            Can be called syncronized to get a Http Web ResponseStream.
            </summary>
            <param name="address">Url to request</param>
            <param name="credentials">Url credentials</param>
            <param name="userAgent"></param>
            <param name="proxy">Proxy to use</param>
            <param name="timeout">Timeout in msecs</param>
        </member>
        <member name="M:NewsComponents.Net.AsyncWebRequest.GetSyncResponseStream(System.String,System.String@,System.Net.ICredentials,System.String,System.Net.IWebProxy,System.Int32)">
            <summary>
            Can be called syncronized to get a Http Web ResponseStream.
            </summary>
            <param name="address">Url to request</param>
            <param name="newAddress">New Url, if redirected</param>
            <param name="credentials">Url credentials</param>
            <param name="userAgent"></param>
            <param name="proxy">Proxy to use</param>
            <param name="timeout">Timeout in msecs</param>
        </member>
        <member name="M:NewsComponents.Net.AsyncWebRequest.GetSyncResponseStream(System.String,System.String@,System.Net.ICredentials,System.String,System.Net.IWebProxy,System.DateTime@,System.String@,System.Int32,NewsComponents.Net.RequestResult@)">
            <summary>
            Can be called syncronized to get a Http Web ResponseStream.
            </summary>
            <param name="address">Url to request</param>
            <param name="newAddress">out string. return a new url, if the original requested is permanent moved</param>
            <param name="credentials">Url credentials</param>
            <param name="userAgent"></param>
            <param name="proxy">Proxy to use</param>
            <param name="ifModifiedSince">Header date</param>
            <param name="eTag">Header tag</param>
            <param name="timeout">Request timeout. E.g. 60 * 1000, means one minute timeout.
            If zero or less than zero, the default timeout of one minute will be used</param>
            <param name="responseResult">out. Result of the request</param>
            <returns>Stream</returns>
        </member>
        <member name="E:NewsComponents.Net.AsyncWebRequest.OnCertificateIssue">
            <summary>
            Event triggered, if a not yet accepted CertificateIssue is raised by a web request.
            </summary>
        </member>
        <member name="E:NewsComponents.Net.AsyncWebRequest.OnAllRequestsComplete">
            <summary>
            Event triggered, if all queued async. requests are done.
            </summary>
        </member>
        <member name="P:NewsComponents.Net.AsyncWebRequest.RequestThread">
            <summary>
            Returns the RequestThread used by this object. 
            </summary>
        </member>
        <member name="P:NewsComponents.Net.AsyncWebRequest.PendingRequests">
            <summary>
            Gets the pending queued requests.
            </summary>
        </member>
        <member name="P:NewsComponents.Net.AsyncWebRequest.TrustedCertificateIssues">
            <summary>
            Contains the url's as keys and the allowed (user interaction needed) 
            CertificateIssue's within an ICollection as values.
            </summary>
            <remarks>That content should be maintained completely from within
            the OnCertificateIssue event.</remarks>
        </member>
        <member name="T:NewsComponents.Net.AsyncWebRequest.RequestAllCompleteCallback">
            <summary>
            Callback delegate used for OnAllRequestsComplete event.
            </summary>
        </member>
        <member name="T:NewsComponents.Net.CertificateIssue">
            <summary>
            Possible Certificate issues.
            </summary>
            <remarks> The .NET Framwork should expose these, but they don't.</remarks>
        </member>
        <member name="T:NewsComponents.Net.CertificateIssueHandler">
            <summary>
            Method signature to enable external handling of certificate issues.
            </summary>
        </member>
        <member name="T:NewsComponents.Net.CertificateIssueCancelEventArgs">
            <summary>
            Cancelable Event Argument class to handle certificate issues on web requests.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.CertificateIssueCancelEventArgs.CertificateIssue">
            <summary>
            Problem/Issue caused
            </summary>
        </member>
        <member name="F:NewsComponents.Net.CertificateIssueCancelEventArgs.Certificate">
            <summary>
            The certificate, that casued the problem
            </summary>
        </member>
        <member name="F:NewsComponents.Net.CertificateIssueCancelEventArgs.WebRequest">
            <summary>
            The involved WebRequest.
            </summary>
        </member>
        <member name="M:NewsComponents.Net.CertificateIssueCancelEventArgs.#ctor(NewsComponents.Net.CertificateIssue,System.Security.Cryptography.X509Certificates.X509Certificate,System.Net.WebRequest,System.Boolean)">
            <summary>
            Designated initializer
            </summary>
            <param name="issue">CertificateIssue</param>
            <param name="cert">X509Certificate</param>
            <param name="request">WebRequest</param>
            <param name="cancel">bool</param>
        </member>
        <member name="T:NewsComponents.Net.TrustSelectedCertificatePolicy">
            <summary>
            Does enable certificate acceptance. 
            See also http://weblogs.asp.net/tgraham/archive/2004/08/12/213469.aspx
            and http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpguide/html/cpconhostingremoteobjectsininternetinformationservicesiis.asp
            </summary>
        </member>
        <member name="T:NewsComponents.Net.HttpCookieManager">
            <summary>
            Used to manage cookies
            </summary>
            <remarks>see http://www.rendelmann.info/blog/CommentView.aspx?guid=bd99bcd5-7088-4d46-801e-c0fe622dc2e5</remarks>
        </member>
        <member name="M:NewsComponents.Net.HttpCookieManager.SetCookies(System.Net.HttpWebRequest)">
            <summary>
            Retrieves the cookie(s) from windows system and assign them to the request, 
            if available.
            </summary>
            <param name="request">HttpWebRequest</param>
        </member>
        <member name="M:NewsComponents.Net.HttpCookieManager.GetCookies(System.Net.HttpWebResponse)">
            <summary>
            Gets newly received cookie(s) and make them persistent within windows system.
            </summary>
            <param name="response">HttpWebResponse</param>
        </member>
        <member name="M:NewsComponents.Net.HttpCookieManager.FixupIECookies(System.Text.StringBuilder)">
            <summary>
            Fixups the cookies IE may return. 
            If there is a comma AND a semicolon, we escape the comma
            first, then replace the semicolon with a comma (.CLR requires
            comma as a cookie separators).
            </summary>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="T:NewsComponents.Collections.IcategoryCollection">
            <summary>
            Defines size, enumerators, and synchronization methods for strongly
            typed collections of <see cref="T:NewsComponents.Feed.category"/> elements.
            </summary>
            <remarks>
            <b>IcategoryCollection</b> provides an <see cref="T:System.Collections.ICollection"/>
            that is strongly typed for <see cref="T:NewsComponents.Feed.category"/> elements.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.IcategoryCollection.CopyTo(NewsComponents.Feed.category[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:NewsComponents.Collections.IcategoryCollection"/> to a one-dimensional <see cref="T:System.Array"/>
            of <see cref="T:NewsComponents.Feed.category"/> elements, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the
            <see cref="T:NewsComponents.Feed.category"/> elements copied from the <see cref="T:NewsComponents.Collections.IcategoryCollection"/>.
            The <b>Array</b> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/>
            at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:NewsComponents.Collections.IcategoryCollection"/> is greater
            than the available space from <paramref name="arrayIndex"/> to the end of the destination
            <paramref name="array"/>.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IcategoryCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:NewsComponents.Collections.IcategoryEnumerator"/> that can
            iterate through the <see cref="T:NewsComponents.Collections.IcategoryCollection"/>.
            </summary>
            <returns>An <see cref="T:NewsComponents.Collections.IcategoryEnumerator"/>
            for the entire <see cref="T:NewsComponents.Collections.IcategoryCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.IEnumerable.GetEnumerator"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IcategoryCollection.Count">
            <summary>
            Gets the number of elements contained in the
            <see cref="T:NewsComponents.Collections.IcategoryCollection"/>.
            </summary>
            <value>The number of elements contained in the
            <see cref="T:NewsComponents.Collections.IcategoryCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ICollection.Count"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IcategoryCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the
            <see cref="T:NewsComponents.Collections.IcategoryCollection"/> is synchronized (thread-safe).
            </summary>
            <value><c>true</c> if access to the <see cref="T:NewsComponents.Collections.IcategoryCollection"/> is
            synchronized (thread-safe); otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ICollection.IsSynchronized"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IcategoryCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access
            to the <see cref="T:NewsComponents.Collections.IcategoryCollection"/>.
            </summary>
            <value>An object that can be used to synchronize access
            to the <see cref="T:NewsComponents.Collections.IcategoryCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ICollection.SyncRoot"/> for details.</remarks>
        </member>
        <member name="T:NewsComponents.Collections.IcategoryList">
            <summary>
            Represents a strongly typed collection of <see cref="T:NewsComponents.Feed.category"/>
            objects that can be individually accessed by index.
            </summary>
            <remarks>
            <b>IcategoryList</b> provides an <see cref="T:System.Collections.IList"/>
            that is strongly typed for <see cref="T:NewsComponents.Feed.category"/> elements.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.IcategoryList.Add(NewsComponents.Feed.category)">
            <summary>
            Adds a <see cref="T:NewsComponents.Feed.category"/> to the end
            of the <see cref="T:NewsComponents.Collections.IcategoryList"/>.
            </summary>
            <param name="value">The <see cref="T:NewsComponents.Feed.category"/> object
            to be added to the end of the <see cref="T:NewsComponents.Collections.IcategoryList"/>.
            This argument can be a null reference.
            </param>
            <returns>The <see cref="T:NewsComponents.Collections.IcategoryList"/> index at which
            the <paramref name="value"/> has been added.</returns>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IcategoryList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IcategoryList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Add(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IcategoryList.Clear">
            <summary>
            Removes all elements from the <see cref="T:NewsComponents.Collections.IcategoryList"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IcategoryList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IcategoryList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Clear"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IcategoryList.Contains(NewsComponents.Feed.category)">
            <summary>
            Determines whether the <see cref="T:NewsComponents.Collections.IcategoryList"/>
            contains the specified <see cref="T:NewsComponents.Feed.category"/> element.
            </summary>
            <param name="value">The <see cref="T:NewsComponents.Feed.category"/> object
            to locate in the <see cref="T:NewsComponents.Collections.IcategoryList"/>.
            This argument can be a null reference.
            </param>
            <returns><c>true</c> if <paramref name="value"/> is found in the
            <see cref="T:NewsComponents.Collections.IcategoryList"/>; otherwise, <c>false</c>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Contains(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IcategoryList.IndexOf(NewsComponents.Feed.category)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified
            <see cref="T:NewsComponents.Feed.category"/> in the <see cref="T:NewsComponents.Collections.IcategoryList"/>.
            </summary>
            <param name="value">The <see cref="T:NewsComponents.Feed.category"/> object
            to locate in the <see cref="T:NewsComponents.Collections.IcategoryList"/>.
            This argument can be a null reference.
            </param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="value"/>
            in the <see cref="T:NewsComponents.Collections.IcategoryList"/>, if found; otherwise, -1.
            </returns>
            <remarks>Please refer to <see cref="M:System.Collections.IList.IndexOf(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IcategoryList.Insert(System.Int32,NewsComponents.Feed.category)">
            <summary>
            Inserts a <see cref="T:NewsComponents.Feed.category"/> element into the
            <see cref="T:NewsComponents.Collections.IcategoryList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which
            <paramref name="value"/> should be inserted.</param>
            <param name="value">The <see cref="T:NewsComponents.Feed.category"/> object
            to insert into the <see cref="T:NewsComponents.Collections.IcategoryList"/>.
            This argument can be a null reference.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is greater than
            <see cref="P:NewsComponents.Collections.IcategoryCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IcategoryList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IcategoryList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IcategoryList.Remove(NewsComponents.Feed.category)">
            <summary>
            Removes the first occurrence of the specified <see cref="T:NewsComponents.Feed.category"/>
            from the <see cref="T:NewsComponents.Collections.IcategoryList"/>.
            </summary>
            <param name="value">The <see cref="T:NewsComponents.Feed.category"/> object
            to remove from the <see cref="T:NewsComponents.Collections.IcategoryList"/>.
            This argument can be a null reference.
            </param>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IcategoryList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IcategoryList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Remove(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IcategoryList.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the
            <see cref="T:NewsComponents.Collections.IcategoryList"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than
            <see cref="P:NewsComponents.Collections.IcategoryCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IcategoryList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IcategoryList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.RemoveAt(System.Int32)"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IcategoryList.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:NewsComponents.Collections.IcategoryList"/> has a fixed size.
            </summary>
            <value><c>true</c> if the <see cref="T:NewsComponents.Collections.IcategoryList"/> has a fixed size;
            otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IList.IsFixedSize"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IcategoryList.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:NewsComponents.Collections.IcategoryList"/> is read-only.
            </summary>
            <value><c>true</c> if the <see cref="T:NewsComponents.Collections.IcategoryList"/> is read-only;
            otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IList.IsReadOnly"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IcategoryList.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:NewsComponents.Feed.category"/> element at the specified index.
            </summary>
            <param name="index">The zero-based index of the
            <see cref="T:NewsComponents.Feed.category"/> element to get or set.</param>
            <value>
            The <see cref="T:NewsComponents.Feed.category"/> element at the specified <paramref name="index"/>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than
            <see cref="P:NewsComponents.Collections.IcategoryCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The property is set and the <see cref="T:NewsComponents.Collections.IcategoryList"/> is read-only.</exception>
            <remarks>Please refer to <see cref="P:System.Collections.IList.Item(System.Int32)"/> for details.</remarks>
        </member>
        <member name="T:NewsComponents.Collections.IcategoryEnumerator">
            <summary>
            Supports type-safe iteration over a collection that
            contains <see cref="T:NewsComponents.Feed.category"/> elements.
            </summary>
            <remarks>
            <b>IcategoryEnumerator</b> provides an <see cref="T:System.Collections.IEnumerator"/>
            that is strongly typed for <see cref="T:NewsComponents.Feed.category"/> elements.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.IcategoryEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><c>true</c> if the enumerator was successfully advanced to the next element;
            <c>false</c> if the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.IEnumerator.MoveNext"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IcategoryEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position,
            which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.IEnumerator.Reset"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IcategoryEnumerator.Current">
            <summary>
            Gets the current <see cref="T:NewsComponents.Feed.category"/> element in the collection.
            </summary>
            <value>The current <see cref="T:NewsComponents.Feed.category"/> element in the collection.</value>
            <exception cref="T:System.InvalidOperationException"><para>The enumerator is positioned
            before the first element of the collection or after the last element.</para>
            <para>-or-</para>
            <para>The collection was modified after the enumerator was created.</para></exception>
            <remarks>Please refer to <see cref="P:System.Collections.IEnumerator.Current"/> for details, but note
            that <b>Current</b> fails if the collection was modified since the last successful
            call to <see cref="M:NewsComponents.Collections.IcategoryEnumerator.MoveNext"/> or <see cref="M:NewsComponents.Collections.IcategoryEnumerator.Reset"/>.</remarks>
        </member>
        <member name="T:NewsComponents.Collections.IStringcategoryCollection">
            <summary>
            Defines size, enumerators, and synchronization methods for strongly
            typed collections of <see cref="T:NewsComponents.Collections.CategoryEntry"/> elements.
            </summary>
            <remarks>
            <b>IStringcategoryCollection</b> provides an <see cref="T:System.Collections.ICollection"/>
            that is strongly typed for <see cref="T:NewsComponents.Collections.CategoryEntry"/> elements.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringcategoryCollection.CopyTo(NewsComponents.Collections.CategoryEntry[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:NewsComponents.Collections.IStringcategoryCollection"/>
            to a one-dimensional <see cref="T:System.Array"/> of <see cref="T:NewsComponents.Collections.CategoryEntry"/> elements,
            starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the
            destination of the <see cref="T:NewsComponents.Collections.CategoryEntry"/> elements copied from the
            <see cref="T:NewsComponents.Collections.IStringcategoryCollection"/>.
            The <b>Array</b> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/>
            at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:NewsComponents.Collections.IStringcategoryCollection"/>
            is greater than the available space from <paramref name="arrayIndex"/> to the end of the
            destination <paramref name="array"/>.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringcategoryCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:NewsComponents.Collections.IStringcategoryEnumerator"/> that can
            iterate through the <see cref="T:NewsComponents.Collections.IStringcategoryCollection"/>.
            </summary>
            <returns>An <see cref="T:NewsComponents.Collections.IStringcategoryEnumerator"/>
            for the entire <see cref="T:NewsComponents.Collections.IStringcategoryCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.IEnumerable.GetEnumerator"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringcategoryCollection.Count">
            <summary>
            Gets the number of elements contained in the
            <see cref="T:NewsComponents.Collections.IStringcategoryCollection"/>.
            </summary>
            <value>The number of elements contained in the
            <see cref="T:NewsComponents.Collections.IStringcategoryCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ICollection.Count"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringcategoryCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the
            <see cref="T:NewsComponents.Collections.IStringcategoryCollection"/> is synchronized (thread-safe).
            </summary>
            <value><c>true</c> if access to the <see cref="T:NewsComponents.Collections.IStringcategoryCollection"/>
            is synchronized (thread-safe); otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ICollection.IsSynchronized"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringcategoryCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access
            to the <see cref="T:NewsComponents.Collections.IStringcategoryCollection"/>.
            </summary>
            <value>An object that can be used to synchronize access to the
            <see cref="T:NewsComponents.Collections.IStringcategoryCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ICollection.SyncRoot"/> for details.</remarks>
        </member>
        <member name="T:NewsComponents.Collections.IStringcategoryDictionary">
            <summary>
            Represents a strongly typed collection of
            <see cref="T:NewsComponents.Collections.CategoryEntry"/> key-and-value pairs.
            </summary>
            <remarks>
            <b>IStringcategoryDictionary</b> provides an
            <see cref="T:System.Collections.IDictionary"/> that is strongly typed for
            <see cref="T:System.String"/> keys and <see cref="T:NewsComponents.Feed.category"/> values.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringcategoryDictionary.Add(System.String,NewsComponents.Feed.category)">
            <summary>
            Adds an element with the specified <see cref="T:System.String"/>
            key and <see cref="T:NewsComponents.Feed.category"/> value to the
            <see cref="T:NewsComponents.Collections.IStringcategoryDictionary"/>.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key of the element
            to add to the <see cref="T:NewsComponents.Collections.IStringcategoryDictionary"/>.</param>
            <param name="value">The <see cref="T:NewsComponents.Feed.category"/> value of the element
            to add to the <see cref="T:NewsComponents.Collections.IStringcategoryDictionary"/>.
            This argument can be a null reference.
            </param>
            <exception cref="T:System.ArgumentException">
            <para>An element with the specified <paramref name="key"/> already exists
            in the <see cref="T:NewsComponents.Collections.IStringcategoryDictionary"/>.</para>
            <para>-or-</para>
            <para>The <b>IStringcategoryDictionary</b> is set to use the
            <see cref="T:System.IComparable"/> interface, and <paramref name="key"/> does not
            implement the <b>IComparable</b> interface.</para></exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">
            The comparer throws an exception.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IStringcategoryDictionary"/> is read-only.
            </para><para>-or-</para>
            <para>The <b>IStringcategoryDictionary</b> has a fixed size.
            </para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringcategoryDictionary.Clear">
            <summary>
            Removes all elements from the <see cref="T:NewsComponents.Collections.IStringcategoryDictionary"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IStringcategoryDictionary"/> is read-only.
            </para><para>-or-</para>
            <para>The <b>IStringcategoryDictionary</b> has a fixed size.
            </para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IDictionary.Clear"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringcategoryDictionary.Contains(System.String)">
            <summary>
            Determines whether the <see cref="T:NewsComponents.Collections.IStringcategoryDictionary"/>
            contains the specified <see cref="T:System.String"/> key.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key to locate
            in the <see cref="T:NewsComponents.Collections.IStringcategoryDictionary"/>.</param>
            <returns><c>true</c> if the <see cref="T:NewsComponents.Collections.IStringcategoryDictionary"/>
            contains an element with the specified <paramref name="key"/>; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">
            The comparer throws an exception.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.IDictionary.Contains(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringcategoryDictionary.Remove(System.String)">
            <summary>
            Removes the element with the specified <see cref="T:System.String"/> key
            from the <see cref="T:NewsComponents.Collections.IStringcategoryDictionary"/>.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key of the element to remove
            from the <see cref="T:NewsComponents.Collections.IStringcategoryDictionary"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">
            The comparer throws an exception.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IStringcategoryDictionary"/> is read-only.
            </para><para>-or-</para>
            <para>The <b>IStringcategoryDictionary</b> has a fixed size.
            </para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IDictionary.Remove(System.Object)"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringcategoryDictionary.IsFixedSize">
            <summary>
            Gets a value indicating whether the
            <see cref="T:NewsComponents.Collections.IStringcategoryDictionary"/> has a fixed size.
            </summary>
            <value><c>true</c> if the <see cref="T:NewsComponents.Collections.IStringcategoryDictionary"/>
            has a fixed size; otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IDictionary.IsFixedSize"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringcategoryDictionary.IsReadOnly">
            <summary>
            Gets a value indicating whether the
            <see cref="T:NewsComponents.Collections.IStringcategoryDictionary"/> is read-only.
            </summary>
            <value><c>true</c> if the <see cref="T:NewsComponents.Collections.IStringcategoryDictionary"/>
            is read-only; otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IDictionary.IsReadOnly"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringcategoryDictionary.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:NewsComponents.Feed.category"/> value
            associated with the specified <see cref="T:System.String"/> key.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key
            whose value to get or set.</param>
            <value>The <see cref="T:NewsComponents.Feed.category"/> value associated with the specified
            <paramref name="key"/>. If the specified <paramref name="key"/> is not found,
            attempting to get it returns
            a null reference,
            and attempting to set it creates a new element using the specified
            <paramref name="key"/>.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The property is set and the
            <see cref="T:NewsComponents.Collections.IStringcategoryDictionary"/> is read-only.</para>
            <para>-or-</para>
            <para>The property is set, <paramref name="key"/> does not exist in the collection,
            and the <b>IStringcategoryDictionary</b> has a fixed size.</para>
            </exception>
            <remarks>Please refer to <see cref="P:System.Collections.IDictionary.Item(System.Object)"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringcategoryDictionary.Keys">
            <summary>
            Gets an <see cref="T:NewsComponents.Collections.IStringCollection"/> containing the keys
            in the <see cref="T:NewsComponents.Collections.IStringcategoryDictionary"/>.
            </summary>
            <value>An <see cref="T:NewsComponents.Collections.IStringCollection"/> containing the keys
            in the <see cref="T:NewsComponents.Collections.IStringcategoryDictionary"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IDictionary.Keys"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringcategoryDictionary.Values">
            <summary>
            Gets an <see cref="T:NewsComponents.Collections.IcategoryCollection"/> containing the values
            in the <see cref="T:NewsComponents.Collections.IStringcategoryDictionary"/>.
            </summary>
            <value>An <see cref="T:NewsComponents.Collections.IcategoryCollection"/> containing the values
            in the <see cref="T:NewsComponents.Collections.IStringcategoryDictionary"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IDictionary.Values"/> for details.</remarks>
        </member>
        <member name="T:NewsComponents.Collections.IStringcategoryList">
            <summary>
            Represents a strongly typed collection of <see cref="T:NewsComponents.Collections.CategoryEntry"/>
            objects that can be individually accessed by index.
            </summary>
            <remarks>
            <b>IStringcategoryList</b> provides an <see cref="T:System.Collections.IList"/>
            that is strongly typed for <see cref="T:NewsComponents.Collections.CategoryEntry"/> elements.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringcategoryList.Add(NewsComponents.Collections.CategoryEntry)">
            <summary>
            Adds a <see cref="T:NewsComponents.Collections.CategoryEntry"/> to the end
            of the <see cref="T:NewsComponents.Collections.IStringcategoryList"/>.
            </summary>
            <param name="entry">The <see cref="T:NewsComponents.Collections.CategoryEntry"/> object
            to be added to the end of the <see cref="T:NewsComponents.Collections.IStringcategoryList"/>.
            </param>
            <returns>The <see cref="T:NewsComponents.Collections.IStringcategoryList"/> index at which
            the <paramref name="entry"/> has been added.</returns>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IStringcategoryList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IStringcategoryList</b> has a fixed size.</para>
            </exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Add(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringcategoryList.Clear">
            <summary>
            Removes all elements from the <see cref="T:NewsComponents.Collections.IStringcategoryList"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IStringcategoryList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IStringcategoryList</b> has a fixed size.</para>
            </exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Clear"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringcategoryList.Contains(NewsComponents.Collections.CategoryEntry)">
            <summary>
            Determines whether the <see cref="T:NewsComponents.Collections.IStringcategoryList"/>
            contains the specified <see cref="T:NewsComponents.Collections.CategoryEntry"/> element.
            </summary>
            <param name="entry">The <see cref="T:NewsComponents.Collections.CategoryEntry"/> object
            to locate in the <see cref="T:NewsComponents.Collections.IStringcategoryList"/>.</param>
            <returns><c>true</c> if <paramref name="entry"/> is found in the
            <see cref="T:NewsComponents.Collections.IStringcategoryList"/>; otherwise, <c>false</c>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Contains(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringcategoryList.IndexOf(NewsComponents.Collections.CategoryEntry)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified
            <see cref="T:NewsComponents.Collections.CategoryEntry"/> in the <see cref="T:NewsComponents.Collections.IStringcategoryList"/>.
            </summary>
            <param name="entry">The <see cref="T:NewsComponents.Collections.CategoryEntry"/> object
            to locate in the <see cref="T:NewsComponents.Collections.IStringcategoryList"/>.</param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="entry"/>
            in the <see cref="T:NewsComponents.Collections.IStringcategoryList"/>, if found; otherwise, -1.
            </returns>
            <remarks>Please refer to <see cref="M:System.Collections.IList.IndexOf(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringcategoryList.Insert(System.Int32,NewsComponents.Collections.CategoryEntry)">
            <summary>
            Inserts a <see cref="T:NewsComponents.Collections.CategoryEntry"/> element into the
            <see cref="T:NewsComponents.Collections.IStringcategoryList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which
            <paramref name="entry"/> should be inserted.</param>
            <param name="entry">The <see cref="T:NewsComponents.Collections.CategoryEntry"/> object to insert
            into the <see cref="T:NewsComponents.Collections.IStringcategoryList"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is greater than
            <see cref="P:NewsComponents.Collections.IStringcategoryCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IStringcategoryList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IStringcategoryList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringcategoryList.Remove(NewsComponents.Collections.CategoryEntry)">
            <summary>
            Removes the first occurrence of the specified <see cref="T:NewsComponents.Collections.CategoryEntry"/>
            from the <see cref="T:NewsComponents.Collections.IStringcategoryList"/>.
            </summary>
            <param name="entry">The <see cref="T:NewsComponents.Collections.CategoryEntry"/> object to remove
            from the <see cref="T:NewsComponents.Collections.IStringcategoryList"/>.</param>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IStringcategoryList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IStringcategoryList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Remove(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringcategoryList.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the
            <see cref="T:NewsComponents.Collections.IStringcategoryList"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than
            <see cref="P:NewsComponents.Collections.IStringcategoryCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IStringcategoryList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IStringcategoryList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.RemoveAt(System.Int32)"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringcategoryList.IsFixedSize">
            <summary>
            Gets a value indicating whether the
            <see cref="T:NewsComponents.Collections.IStringcategoryList"/> has a fixed size.
            </summary>
            <value><c>true</c> if the <see cref="T:NewsComponents.Collections.IStringcategoryList"/>
            has a fixed size; otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IList.IsFixedSize"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringcategoryList.IsReadOnly">
            <summary>
            Gets a value indicating whether the
            <see cref="T:NewsComponents.Collections.IStringcategoryList"/> is read-only.
            </summary>
            <value><c>true</c> if the <see cref="T:NewsComponents.Collections.IStringcategoryList"/>
            is read-only; otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IList.IsReadOnly"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringcategoryList.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:NewsComponents.Collections.CategoryEntry"/> element at the specified index.
            </summary>
            <param name="index">The zero-based index of the
            <see cref="T:NewsComponents.Collections.CategoryEntry"/> element to get or set.</param>
            <value>
            The <see cref="T:NewsComponents.Collections.CategoryEntry"/> element at the specified <paramref name="index"/>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than
            <see cref="P:NewsComponents.Collections.IStringcategoryCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">The property is set and the
            <see cref="T:NewsComponents.Collections.IStringcategoryList"/> is read-only.</exception>
            <remarks>Please refer to <see cref="P:System.Collections.IList.Item(System.Int32)"/> for details.</remarks>
        </member>
        <member name="T:NewsComponents.Collections.IStringcategoryEnumerator">
            <summary>
            Supports type-safe iteration over a dictionary that
            contains <see cref="T:NewsComponents.Collections.CategoryEntry"/> elements.
            </summary>
            <remarks>
            <b>IStringcategoryEnumerator</b> provides an
            <see cref="T:System.Collections.IDictionaryEnumerator"/> that is strongly typed for
            <see cref="T:System.String"/> keys and <see cref="T:NewsComponents.Feed.category"/> values.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringcategoryEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><c>true</c> if the enumerator was successfully advanced to the next element;
            <c>false</c> if the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.IEnumerator.MoveNext"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringcategoryEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position,
            which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.IEnumerator.Reset"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringcategoryEnumerator.Current">
            <summary>
            Gets the current <see cref="T:NewsComponents.Collections.CategoryEntry"/> element in the collection.
            </summary>
            <value>The current <see cref="T:NewsComponents.Collections.CategoryEntry"/> element in the collection.</value>
            <exception cref="T:System.InvalidOperationException"><para>The enumerator is positioned
            before the first element of the collection or after the last element.</para>
            <para>-or-</para>
            <para>The collection was modified after the enumerator was created.</para></exception>
            <remarks>Please refer to <see cref="P:System.Collections.IEnumerator.Current"/> for details, but note
            that <b>Current</b> fails if the collection was modified since the last successful
            call to <see cref="M:NewsComponents.Collections.IStringcategoryEnumerator.MoveNext"/> or <see cref="M:NewsComponents.Collections.IStringcategoryEnumerator.Reset"/>.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringcategoryEnumerator.Entry">
            <summary>
            Gets a <see cref="T:NewsComponents.Collections.CategoryEntry"/> containing both
            the key and the value of the current dictionary entry.
            </summary>
            <value>A <see cref="T:NewsComponents.Collections.CategoryEntry"/> containing both
            the key and the value of the current dictionary entry.</value>
            <exception cref="T:System.InvalidOperationException"><para>The enumerator is positioned
            before the first element of the dictionary or after the last element.</para>
            <para>-or-</para>
            <para>The dictionary was modified after the enumerator was created.</para></exception>
            <remarks>Please refer to <see cref="P:System.Collections.IDictionaryEnumerator.Entry"/> for details, but
            note that <b>Entry</b> fails if the collection was modified since the last successful
            call to <see cref="M:NewsComponents.Collections.IStringcategoryEnumerator.MoveNext"/> or <see cref="M:NewsComponents.Collections.IStringcategoryEnumerator.Reset"/>.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringcategoryEnumerator.Key">
            <summary>
            Gets the <see cref="T:System.String"/> key of the current dictionary entry.
            </summary>
            <value>The <see cref="T:System.String"/> key
            of the current element of the enumeration.</value>
            <exception cref="T:System.InvalidOperationException"><para>The enumerator is positioned
            before the first element of the dictionary or after the last element.</para>
            <para>-or-</para>
            <para>The dictionary was modified after the enumerator was created.</para></exception>
            <remarks>Please refer to <see cref="P:System.Collections.IDictionaryEnumerator.Key"/> for details, but
            note that <b>Key</b> fails if the collection was modified since the last successful
            call to <see cref="M:NewsComponents.Collections.IStringcategoryEnumerator.MoveNext"/> or <see cref="M:NewsComponents.Collections.IStringcategoryEnumerator.Reset"/>.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringcategoryEnumerator.Value">
            <summary>
            Gets the <see cref="T:NewsComponents.Feed.category"/> value of the current dictionary entry.
            </summary>
            <value>The <see cref="T:NewsComponents.Feed.category"/> value
            of the current element of the enumeration.</value>
            <exception cref="T:System.InvalidOperationException"><para>The enumerator is positioned
            before the first element of the dictionary or after the last element.</para>
            <para>-or-</para>
            <para>The dictionary was modified after the enumerator was created.</para></exception>
            <remarks>Please refer to <see cref="P:System.Collections.IDictionaryEnumerator.Value"/> for details, but
            note that <b>Value</b> fails if the collection was modified since the last successful
            call to <see cref="M:NewsComponents.Collections.IStringcategoryEnumerator.MoveNext"/> or <see cref="M:NewsComponents.Collections.IStringcategoryEnumerator.Reset"/>.</remarks>
        </member>
        <member name="T:NewsComponents.Collections.CategoryEntry">
            <summary>
            Implements a strongly typed pair of one <see cref="T:System.String"/>
            key and one <see cref="T:NewsComponents.Feed.category"/> value.
            </summary>
            <remarks>
            <b>CategoryEntry</b> provides a <see cref="T:System.Collections.DictionaryEntry"/> that is strongly
            typed for <see cref="T:System.String"/> keys and <see cref="T:NewsComponents.Feed.category"/> values.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.CategoryEntry.#ctor(System.String,NewsComponents.Feed.category)">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.Collections.CategoryEntry"/>
            class with the specified key and value.
            </summary>
            <param name="key">
            The <see cref="T:System.String"/> key in the key-and-value pair.</param>
            <param name="value">
            The <see cref="T:NewsComponents.Feed.category"/> value in the key-and-value pair.
            This argument can be a null reference.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
        </member>
        <member name="M:NewsComponents.Collections.CategoryEntry.op_Implicit(System.Collections.DictionaryEntry)~NewsComponents.Collections.CategoryEntry">
            <summary>
            Converts a <see cref="T:System.Collections.DictionaryEntry"/> to a <see cref="T:NewsComponents.Collections.CategoryEntry"/>.
            </summary>
            <param name="entry">A <see cref="T:System.Collections.DictionaryEntry"/> object to convert.</param>
            <returns>A <see cref="T:NewsComponents.Collections.CategoryEntry"/> object that represents
            the converted <paramref name="entry"/>.</returns>
            <exception cref="T:System.InvalidCastException">
            <para><paramref name="entry"/> contains a key that is not compatible
            with <see cref="T:System.String"/>.</para>
            <para>-or-</para>
            <para><paramref name="entry"/> contains a value that is not compatible
            with <see cref="T:NewsComponents.Feed.category"/>.</para>
            </exception>
        </member>
        <member name="M:NewsComponents.Collections.CategoryEntry.op_Implicit(NewsComponents.Collections.CategoryEntry)~System.Collections.DictionaryEntry">
            <summary>
            Converts a <see cref="T:NewsComponents.Collections.CategoryEntry"/> to a <see cref="T:System.Collections.DictionaryEntry"/>.
            </summary>
            <param name="pair">A <see cref="T:NewsComponents.Collections.CategoryEntry"/> object to convert.</param>
            <returns>A <see cref="T:System.Collections.DictionaryEntry"/> object that
            represents the converted <paramref name="pair"/>.</returns>
        </member>
        <member name="P:NewsComponents.Collections.CategoryEntry.Key">
            <summary>
            Gets or sets the <see cref="T:System.String"/> key in the key-and-value pair.
            </summary>
            <value>
            The <see cref="T:System.String"/> key in the key-and-value pair.
            The default is a null reference.
            </value>
            <exception cref="T:System.ArgumentNullException">
            <b>Key</b> is set to a null reference.</exception>
            <remarks>
            <see cref="T:NewsComponents.Collections.CategoryEntry"/> is a value type and therefore has an implicit default
            constructor that zeroes all data members. This means that the <b>Key</b> property of
            a default-constructed <b>CategoryEntry</b> contains a null reference by default,
            even though it is not possible to explicitly set <b>Key</b> to a null reference.
            </remarks>
        </member>
        <member name="P:NewsComponents.Collections.CategoryEntry.Value">
            <summary>
            Gets or sets the <see cref="T:NewsComponents.Feed.category"/> value in the key-and-value pair.
            </summary>
            <value>
            The <see cref="T:NewsComponents.Feed.category"/> value in the key-and-value pair.
            This value can be a null reference, which is also the default.
            </value>
        </member>
        <member name="T:NewsComponents.Collections.CategoriesCollection">
            <summary>
            Implements a strongly typed collection of <see cref="T:NewsComponents.Collections.CategoryEntry"/> key-and-value
            pairs that retain their insertion order and are accessible by index and by key.
            </summary>
            <remarks><para>
            <b>CategoriesCollection</b> provides an <see cref="T:System.Collections.ArrayList"/> that is strongly
            typed for <see cref="T:NewsComponents.Collections.CategoryEntry"/> elements and allows direct access to
            its <see cref="T:System.String"/> keys and <see cref="T:NewsComponents.Feed.category"/> values.
            </para><para>
            The collection may contain multiple identical keys. All key access methods return the
            first occurrence of the specified key, if found. Access by index is an O(1) operation
            but access by key or value are both O(<em>N</em>) operations, where <em>N</em> is the
            current value of the <see cref="P:NewsComponents.Collections.CategoriesCollection.Count"/> property.
            </para></remarks>
        </member>
        <member name="M:NewsComponents.Collections.CategoriesCollection.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:NewsComponents.Collections.CategoriesCollection"/> class.
            </overloads>
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.Collections.CategoriesCollection"/> class
            that is empty and has the default initial capacity.
            </summary>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.#ctor"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.CategoriesCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.Collections.CategoriesCollection"/> class
            that is empty and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of elements that the new
            <see cref="T:NewsComponents.Collections.CategoriesCollection"/> is initially capable of storing.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is less than zero.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.#ctor(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.CategoriesCollection.#ctor(NewsComponents.Collections.CategoriesCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.Collections.CategoriesCollection"/> class
            that contains elements copied from the specified collection and
            that has the same initial capacity as the number of elements copied.
            </summary>
            <param name="collection">The <see cref="T:NewsComponents.Collections.CategoriesCollection"/>
            whose elements are copied to the new collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is a null reference.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.#ctor(System.Collections.ICollection)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.CategoriesCollection.#ctor(NewsComponents.Collections.CategoryEntry[])">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.Collections.CategoriesCollection"/> class
            that contains elements copied from the specified <see cref="T:NewsComponents.Collections.CategoryEntry"/>
            array and that has the same initial capacity as the number of elements copied.
            </summary>
            <param name="array">An <see cref="T:System.Array"/> of <see cref="T:NewsComponents.Collections.CategoryEntry"/>
            elements that are copied to the new collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.#ctor(System.Collections.ICollection)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.CategoriesCollection.CreateCategory(System.String)">
            <summary>
            Creates a new category object. 
            </summary>
            <param name="categoryName">Name of the category. 
            Nested categories needs to have backslash delimiters like 'My Cat1\Sub cat'</param>
            <returns>category object</returns>
        </member>
        <member name="M:NewsComponents.Collections.CategoriesCollection.Add(NewsComponents.Collections.CategoryEntry)">
            <overloads>
            Adds an element to the end of the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            </overloads>
            <summary>
            Adds a <see cref="T:NewsComponents.Collections.CategoryEntry"/> to the end of the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            </summary>
            <param name="entry">The <see cref="T:NewsComponents.Collections.CategoryEntry"/> object
            to be added to the end of the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.</param>
            <returns>The <see cref="T:NewsComponents.Collections.CategoriesCollection"/> index at which the
            <paramref name="entry"/> has been added.</returns>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.CategoriesCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>CategoriesCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Add(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.CategoriesCollection.Add(System.String,NewsComponents.Feed.category)">
            <summary>
            Adds an element with the specified <see cref="T:System.String"/> key and
            <see cref="T:NewsComponents.Feed.category"/> value to the end of the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key of the element
            to add to the end of the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.</param>
            <param name="value">The <see cref="T:NewsComponents.Feed.category"/> value of the element
            to add to the end of the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            This argument can be a null reference.
            </param>
            <returns>The <see cref="T:NewsComponents.Collections.CategoriesCollection"/> index at which the
            new element has been added.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.CategoriesCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>CategoriesCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.Add(System.Object,System.Object)"/> for details but note that
            the <see cref="T:NewsComponents.Collections.CategoriesCollection"/> may contain multiple identical keys.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.CategoriesCollection.Add(System.String)">
            <summary>
            Adds an element with the specified <see cref="T:System.String"/> key and a newly 
            created <see cref="T:NewsComponents.Feed.category"/> value to the end of the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key of the element
            to add to the end of the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.</param>
            <returns>The <see cref="T:NewsComponents.Collections.CategoriesCollection"/> index at which the
            new element has been added.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.CategoriesCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>CategoriesCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.Add(System.Object,System.Object)"/> for details but note that
            the <see cref="T:NewsComponents.Collections.CategoriesCollection"/> may contain multiple identical keys.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.CategoriesCollection.Add(NewsComponents.Feed.category)">
            <summary>
            Adds an <see cref="T:NewsComponents.Feed.category"/> element and use the category.Value as the key 
            to the end of the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            </summary>
            <param name="value">The <see cref="T:NewsComponents.Feed.category"/> element
            to add to the end of the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.</param>
            <returns>The <see cref="T:NewsComponents.Collections.CategoriesCollection"/> index at which the
            new element has been added.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="category"/> or category.Value is a null reference.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.CategoriesCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>CategoriesCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.Add(System.Object,System.Object)"/> for details but note that
            the <see cref="T:NewsComponents.Collections.CategoriesCollection"/> may contain multiple identical keys.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.CategoriesCollection.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an <see cref="T:System.Object"/> to the end of the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            </summary>
            <param name="entry">
            The object to be added to the end of the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            This argument must be compatible with <see cref="T:NewsComponents.Collections.CategoryEntry"/>.</param>
            <returns>The <see cref="T:NewsComponents.Collections.CategoriesCollection"/> index at which the
            <paramref name="entry"/> has been added.</returns>
            <exception cref="T:System.InvalidCastException"><paramref name="entry"/>
            is not compatible with <see cref="T:NewsComponents.Collections.CategoryEntry"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.CategoriesCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>CategoriesCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Add(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.CategoriesCollection.AddRange(NewsComponents.Collections.CategoriesCollection)">
            <overloads>
            Adds a range of elements to the end of the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            </overloads>
            <summary>
            Adds the elements of another collection to the end of the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            </summary>
            <param name="collection">The <see cref="T:NewsComponents.Collections.CategoriesCollection"/> whose elements
            should be added to the end of the current collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is a null reference.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.CategoriesCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>CategoriesCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.CategoriesCollection.AddRange(NewsComponents.Collections.CategoryEntry[])">
            <summary>
            Adds the elements of a <see cref="T:NewsComponents.Collections.CategoryEntry"/> array
            to the end of the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            </summary>
            <param name="array">An <see cref="T:System.Array"/> of <see cref="T:NewsComponents.Collections.CategoryEntry"/> elements
            that should be added to the end of the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.CategoriesCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>CategoriesCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.CategoriesCollection.Clear">
            <summary>
            Removes all elements from the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.CategoriesCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>CategoriesCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Clear"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.CategoriesCollection.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            </summary>
            <returns>A shallow copy of the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Clone"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.CategoriesCollection.Contains(NewsComponents.Collections.CategoryEntry)">
            <summary>
            Determines whether the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>
            contains the specified <see cref="T:NewsComponents.Collections.CategoryEntry"/> element.
            </summary>
            <param name="entry">The <see cref="T:NewsComponents.Collections.CategoryEntry"/> object
            to locate in the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.</param>
            <returns><c>true</c> if <paramref name="entry"/> is found in the
            <see cref="T:NewsComponents.Collections.CategoriesCollection"/>; otherwise, <c>false</c>.</returns>
            <remarks><para>
            Please refer to <see cref="M:System.Collections.ArrayList.Contains(System.Object)"/> for details.
            </para><para>
            <b>Contains</b> uses the equality operators defined by <see cref="T:System.String"/>
            and <see cref="T:NewsComponents.Feed.category"/> to locate the specified <paramref name="entry"/>.
            </para></remarks>
        </member>
        <member name="M:NewsComponents.Collections.CategoriesCollection.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:NewsComponents.Collections.CategoriesCollection"/> contains the specified element.
            </summary>
            <param name="entry">The object to locate in the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            This argument must be compatible with <see cref="T:NewsComponents.Collections.CategoryEntry"/>.</param>
            <returns><c>true</c> if <paramref name="entry"/> is found in the
            <see cref="T:NewsComponents.Collections.CategoriesCollection"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.InvalidCastException"><paramref name="entry"/>
            is not compatible with <see cref="T:NewsComponents.Collections.CategoryEntry"/>.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Contains(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.CategoriesCollection.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>
            contains the specified <see cref="T:System.String"/> key.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key
            to locate in the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.</param>
            <returns><c>true</c> if the <see cref="T:NewsComponents.Collections.CategoriesCollection"/> contains an element
            with the specified <paramref name="key"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.ContainsKey(System.Object)"/> for details but note
            that the <see cref="T:NewsComponents.Collections.CategoriesCollection"/> requires linear time to locate a key.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.CategoriesCollection.ContainsValue(NewsComponents.Feed.category)">
            <summary>
            Determines whether the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>
            contains the specified <see cref="T:NewsComponents.Feed.category"/> value.
            </summary>
            <param name="value">The <see cref="T:NewsComponents.Feed.category"/> value
            to locate in the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            This argument can be a null reference.
            </param>
            <returns><c>true</c> if the <see cref="T:NewsComponents.Collections.CategoriesCollection"/> contains an element
            with the specified <paramref name="value"/>; otherwise, <c>false</c>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.ContainsValue(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.CategoriesCollection.CopyTo(NewsComponents.Collections.CategoryEntry[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:NewsComponents.Collections.CategoriesCollection"/> to a one-dimensional <see cref="T:System.Array"/> of
            <see cref="T:NewsComponents.Collections.CategoryEntry"/> elements, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the
            <see cref="T:NewsComponents.Collections.CategoryEntry"/> elements copied from the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            The <b>Array</b> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/>
            at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:NewsComponents.Collections.CategoriesCollection"/> is greater than
            the available space from <paramref name="arrayIndex"/> to the end of the destination
            <paramref name="array"/>.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.CopyTo(System.Array)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.CategoriesCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire <see cref="T:NewsComponents.Collections.CategoriesCollection"/> to a one-dimensional <see cref="T:System.Array"/>,
            starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the
            <see cref="T:NewsComponents.Collections.CategoryEntry"/> elements copied from the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            The <b>Array</b> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/>
            at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="array"/> is multidimensional.
            </para><para>-or-</para><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:NewsComponents.Collections.CategoriesCollection"/> is greater than
            the available space from <paramref name="arrayIndex"/> to the end of the destination
            <paramref name="array"/>.</para></exception>
            <exception cref="T:System.InvalidCastException">
            The <see cref="T:NewsComponents.Collections.CategoryEntry"/> type cannot be cast automatically
            to the type of the destination <paramref name="array"/>.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.CopyTo(System.Array)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.CategoriesCollection.Equals(NewsComponents.Collections.CategoriesCollection)">
            <summary>
            Determines whether the specified <see cref="T:NewsComponents.Collections.CategoriesCollection"/>
            is equal to the current <b>CategoriesCollection</b>.
            </summary>
            <param name="collection">The <see cref="T:NewsComponents.Collections.CategoriesCollection"/>
            to compare with the current <b>CategoriesCollection</b>.</param>
            <returns><c>true</c> if the specified <see cref="T:NewsComponents.Collections.CategoriesCollection"/> is equal
            to the current <b>CategoriesCollection</b>; otherwise, <c>false</c>.</returns>
            <remarks><para>
            This <b>Equals</b> overload tests for value equality of all <see cref="T:NewsComponents.Collections.CategoryEntry"/>
            elements contained in the two <see cref="T:NewsComponents.Collections.CategoriesCollection"/> collections.
            </para><para>
            <b>Equals</b> returns <c>false</c> if <paramref name="collection"/> is a null
            reference, holds a different number of elements, or holds at least one
            <see cref="T:NewsComponents.Collections.CategoryEntry"/> element at a given index position whose key and/or
            value is different from that of the element at the same index position in this
            <b>CategoriesCollection</b>, as determined by the inequality operators defined by
            <see cref="T:System.String"/> and <see cref="T:NewsComponents.Feed.category"/>.
            </para></remarks>
        </member>
        <member name="M:NewsComponents.Collections.CategoriesCollection.GetByIndex(System.Int32)">
            <summary>
            Gets the <see cref="T:NewsComponents.Feed.category"/> value at the
            specified index of the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            </summary>
            <param name="index">The zero-based index of the
            <see cref="T:NewsComponents.Feed.category"/> value to get.</param>
            <returns>The <see cref="T:NewsComponents.Feed.category"/> value at the specified
            <paramref name="index"/> of the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than <see cref="P:NewsComponents.Collections.CategoriesCollection.Count"/>.</para>
            </exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.GetByIndex(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.CategoriesCollection.GetByKey(System.String)">
            <summary>
            Gets the <see cref="T:NewsComponents.Feed.category"/> value associated with the
            first occurrence of the specified <see cref="T:System.String"/> key.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key whose value to get.</param>
            <returns>The <see cref="T:NewsComponents.Feed.category"/> value associated with the first occurrence
            of the specified <paramref name="key"/>, if found; otherwise,
            a null reference.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <remarks><b>GetByKey</b> and <see cref="M:NewsComponents.Collections.CategoriesCollection.SetByKey(System.String,NewsComponents.Feed.category)"/> emulate the indexer of the
            <see cref="T:System.Collections.SortedList"/> class but require linear time to locate a key.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.CategoriesCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:NewsComponents.Collections.IStringcategoryEnumerator"/> that can
            iterate through the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            </summary>
            <returns>An <see cref="T:NewsComponents.Collections.IStringcategoryEnumerator"/>
            for the entire <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.GetEnumerator"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.CategoriesCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> that can
            iterate through the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/>
            for the entire <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.GetEnumerator"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.CategoriesCollection.GetKey(System.Int32)">
            <summary>
            Gets the <see cref="T:System.String"/> key at the
            specified index of the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            </summary>
            <param name="index">The zero-based index of the
            <see cref="T:System.String"/> key to get.</param>
            <returns>The <see cref="T:System.String"/> key at the specified
            <paramref name="index"/> of the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than <see cref="P:NewsComponents.Collections.CategoriesCollection.Count"/>.</para>
            </exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.GetKey(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.CategoriesCollection.GetKeyList">
            <summary>
            Gets the keys in the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            </summary>
            <returns>An <see cref="T:NewsComponents.Collections.IStringList"/> containing the keys
            in the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.GetKeyList"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.CategoriesCollection.GetValueList">
            <summary>
            Gets the values in the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            </summary>
            <returns>An <see cref="T:NewsComponents.Collections.IcategoryList"/> containing the values
            in the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.GetValueList"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.CategoriesCollection.IndexOf(NewsComponents.Collections.CategoryEntry)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified
            <see cref="T:NewsComponents.Collections.CategoryEntry"/> in the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            </summary>
            <param name="entry">The <see cref="T:NewsComponents.Collections.CategoryEntry"/> object
            to locate in the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.</param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="entry"/>
            in the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>, if found; otherwise, -1.
            </returns>
            <remarks><para>
            Please refer to <see cref="M:System.Collections.ArrayList.IndexOf(System.Object)"/> for details.
            </para><para>
            <b>IndexOf</b> uses the equality operators defined by <see cref="T:System.String"/>
            and <see cref="T:NewsComponents.Feed.category"/> to locate the specified <paramref name="entry"/>.
            </para></remarks>
        </member>
        <member name="M:NewsComponents.Collections.CategoriesCollection.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified
            <see cref="T:System.Object"/> in the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            </summary>
            <param name="entry">The object to locate in the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            This argument must be compatible with <see cref="T:NewsComponents.Collections.CategoryEntry"/>.</param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="entry"/>
            in the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>, if found; otherwise, -1.
            </returns>
            <exception cref="T:System.InvalidCastException"><paramref name="entry"/>
            is not compatible with <see cref="T:NewsComponents.Collections.CategoryEntry"/>.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.IndexOf(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.CategoriesCollection.IndexOfKey(System.String)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified
            <see cref="T:System.String"/> key in the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key
            to locate in the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.</param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="key"/>
            in the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>, if found; otherwise, -1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.IndexOfKey(System.Object)"/> for details but note
            that the <see cref="T:NewsComponents.Collections.CategoriesCollection"/> requires linear time to locate a key.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.CategoriesCollection.IndexOfValue(NewsComponents.Feed.category)">
            <summary>
            Returns the zero-based index of first occurrence of the specified
            <see cref="T:NewsComponents.Feed.category"/> value in the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            </summary>
            <param name="value">The <see cref="T:NewsComponents.Feed.category"/> value
            to locate in the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            This argument can be a null reference.
            </param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="value"/>
            in the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>, if found; otherwise, -1.
            </returns>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.IndexOfValue(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.CategoriesCollection.Insert(System.Int32,NewsComponents.Collections.CategoryEntry)">
            <summary>
            Inserts a <see cref="T:NewsComponents.Collections.CategoryEntry"/> element into the
            <see cref="T:NewsComponents.Collections.CategoriesCollection"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="entry"/>
            should be inserted.</param>
            <param name="entry">The <see cref="T:NewsComponents.Collections.CategoryEntry"/> object
            to insert into the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is greater than <see cref="P:NewsComponents.Collections.CategoriesCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.CategoriesCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>CategoriesCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.CategoriesCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts an element into the <see cref="T:NewsComponents.Collections.CategoriesCollection"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="entry"/>
            should be inserted.</param>
            <param name="entry">The object to insert into the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            This argument must be compatible with <see cref="T:NewsComponents.Collections.CategoryEntry"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is greater than <see cref="P:NewsComponents.Collections.CategoriesCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.InvalidCastException"><paramref name="entry"/>
            is not compatible with <see cref="T:NewsComponents.Collections.CategoryEntry"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.CategoriesCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>CategoriesCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.CategoriesCollection.Remove(System.String)">
            <summary>
            Removes the first occurrence of the specified key
            from the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            </summary>
            <param name="key">The key of the <see cref="T:NewsComponents.Collections.CategoryEntry"/> object
            to remove from the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.</param>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.CategoriesCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>CategoriesCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Remove(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.CategoriesCollection.Remove(NewsComponents.Collections.CategoryEntry)">
            <summary>
            Removes the first occurrence of the specified <see cref="T:NewsComponents.Collections.CategoryEntry"/>
            from the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            </summary>
            <param name="entry">The <see cref="T:NewsComponents.Collections.CategoryEntry"/> object
            to remove from the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.</param>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.CategoriesCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>CategoriesCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Remove(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.CategoriesCollection.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of the specified <see cref="T:System.Object"/>
            from the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            </summary>
            <param name="entry">The object to remove from the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            This argument must be compatible with <see cref="T:NewsComponents.Collections.CategoryEntry"/>.</param>
            <exception cref="T:System.InvalidCastException"><paramref name="entry"/>
            is not compatible with <see cref="T:NewsComponents.Collections.CategoryEntry"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.CategoriesCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>CategoriesCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Remove(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.CategoriesCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than <see cref="P:NewsComponents.Collections.CategoriesCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.CategoriesCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>CategoriesCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.RemoveAt(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.CategoriesCollection.SetByIndex(System.Int32,NewsComponents.Feed.category)">
            <summary>
            Sets the <see cref="T:NewsComponents.Feed.category"/> value at the
            specified index of the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            </summary>
            <param name="index">The zero-based index of the
            <see cref="T:NewsComponents.Feed.category"/> value to set.</param>
            <param name="value">The <see cref="T:NewsComponents.Feed.category"/> object to store
            at the specified <paramref name="index"/> of the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            This argument can be a null reference.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than <see cref="P:NewsComponents.Collections.CategoriesCollection.Count"/>.</para>
            </exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.SetByIndex(System.Int32,System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.CategoriesCollection.SetByKey(System.String,NewsComponents.Feed.category)">
            <summary>
            Sets the <see cref="T:NewsComponents.Feed.category"/> value associated with the
            first occurrence of the specified <see cref="T:System.String"/> key.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key whose value to set.</param>
            <param name="value">The <see cref="T:NewsComponents.Feed.category"/> object to associate with
            the first occurrence of the specified <paramref name="key"/>.
            This argument can be a null reference.
            If the specified <paramref name="key"/> is not found, <b>SetByKey</b> adds a new element
            with the specified <paramref name="key"/> and <paramref name="value"/> to the end of the
            <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.</param>
            <returns>The <see cref="T:NewsComponents.Collections.CategoriesCollection"/> index of the element
            that was changed or added.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.CategoriesCollection"/> is read-only.</para>
            <para>-or-</para>
            <para><paramref name="key"/> does not exist in the collection,
            and the <b>CategoriesCollection</b> has a fixed size.</para></exception>
            <remarks><b>SetByKey</b> and <see cref="M:NewsComponents.Collections.CategoriesCollection.GetByKey(System.String)"/> emulate the indexer of the
            <see cref="T:System.Collections.SortedList"/> class but require linear time to locate a key.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.CategoriesCollection.Synchronized(NewsComponents.Collections.CategoriesCollection)">
            <summary>
            Returns a synchronized (thread-safe) wrapper
            for the specified <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            </summary>
            <param name="collection">The <see cref="T:NewsComponents.Collections.CategoriesCollection"/> to synchronize.</param>
            <returns>
            A synchronized (thread-safe) wrapper around <paramref name="collection"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is a null reference.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Synchronized(System.Collections.IList)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.CategoriesCollection.ToArray">
            <summary>
            Copies the elements of the <see cref="T:NewsComponents.Collections.CategoriesCollection"/> to a new
            <see cref="T:System.Array"/> of <see cref="T:NewsComponents.Collections.CategoryEntry"/> elements.
            </summary>
            <returns>A one-dimensional <see cref="T:System.Array"/> of <see cref="T:NewsComponents.Collections.CategoryEntry"/>
            elements containing copies of the elements of the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            </returns>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.ToArray"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.CategoriesCollection.TrimToSize">
            <summary>
            Sets the capacity to the actual number of elements in the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.CategoriesCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>CategoriesCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.TrimToSize"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.CategoriesCollection.InnerKeys">
            <summary>
            Gets the list of keys contained in the <see cref="T:NewsComponents.Collections.CategoriesCollection"/> instance.
            </summary>
            <value>
            A one-dimensional <see cref="T:System.Array"/> with zero-based indexing that contains all 
            <see cref="T:System.String"/> elements in the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            </value>
            <remarks>
            Use <b>InnerKeys</b> to access the key array of a <see cref="T:NewsComponents.Collections.CategoriesCollection"/>
            instance that might be a read-only or synchronized wrapper. This is necessary 
            because the key and value arrays of wrapper classes are always null references.
            </remarks>
        </member>
        <member name="P:NewsComponents.Collections.CategoriesCollection.InnerValues">
            <summary>
            Gets the list of values contained in the <see cref="T:NewsComponents.Collections.CategoriesCollection"/> instance.
            </summary>
            <value>
            A one-dimensional <see cref="T:System.Array"/> with zero-based indexing that contains all 
            <see cref="T:NewsComponents.Feed.category"/> elements in the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            </value>
            <remarks>
            Use <b>InnerValues</b> to access the value array of a <see cref="T:NewsComponents.Collections.CategoriesCollection"/>
            instance that might be a read-only or synchronized wrapper. This is necessary
            because the key and value arrays of wrapper classes are always null references.
            </remarks>
        </member>
        <member name="P:NewsComponents.Collections.CategoriesCollection.Capacity">
            <summary>
            Gets or sets the capacity of the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            </summary>
            <value>The number of elements that the
            <see cref="T:NewsComponents.Collections.CategoriesCollection"/> can contain.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <b>Capacity</b> is set to a value that is less than <see cref="P:NewsComponents.Collections.CategoriesCollection.Count"/>.</exception>
            <remarks>Please refer to <see cref="P:System.Collections.ArrayList.Capacity"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.CategoriesCollection.Count">
            <summary>
            Gets the number of key-and-value pairs contained
            in the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            </summary>
            <value>The number of key-and-value pairs contained
            in the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ArrayList.Count"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.CategoriesCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:NewsComponents.Collections.CategoriesCollection"/> has a fixed size.
            </summary>
            <value><c>true</c> if the <see cref="T:NewsComponents.Collections.CategoriesCollection"/> has a fixed size;
            otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ArrayList.IsFixedSize"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.CategoriesCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:NewsComponents.Collections.CategoriesCollection"/> is read-only.
            </summary>
            <value><c>true</c> if the <see cref="T:NewsComponents.Collections.CategoriesCollection"/> is read-only;
            otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ArrayList.IsReadOnly"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.CategoriesCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>
            is synchronized (thread-safe).
            </summary>
            <value><c>true</c> if access to the <see cref="T:NewsComponents.Collections.CategoriesCollection"/> is
            synchronized (thread-safe); otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ArrayList.IsSynchronized"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.CategoriesCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:NewsComponents.Collections.CategoryEntry"/> element at the specified index.
            </summary>
            <param name="index">The zero-based index of the
            <see cref="T:NewsComponents.Collections.CategoryEntry"/> element to get or set.</param>
            <value>
            The <see cref="T:NewsComponents.Collections.CategoryEntry"/> element at the specified <paramref name="index"/>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than <see cref="P:NewsComponents.Collections.CategoriesCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The property is set and the <see cref="T:NewsComponents.Collections.CategoriesCollection"/> is read-only.</exception>
            <remarks>Please refer to <see cref="P:System.Collections.ArrayList.Item(System.Int32)"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.CategoriesCollection.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <value>
            The element at the specified <paramref name="index"/>, returned as a boxed
            <see cref="T:System.Collections.DictionaryEntry"/> value. When the property is set, this value 
            must be compatible with <see cref="T:NewsComponents.Collections.CategoryEntry"/>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than <see cref="P:NewsComponents.Collections.CategoriesCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.InvalidCastException">The property is set to a value
            that is not compatible with <see cref="T:NewsComponents.Collections.CategoryEntry"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            The property is set and the <see cref="T:NewsComponents.Collections.CategoriesCollection"/> is read-only.</exception>
            <remarks>Please refer to <see cref="P:System.Collections.ArrayList.Item(System.Int32)"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.CategoriesCollection.Keys">
            <summary>
            Gets an <see cref="T:NewsComponents.Collections.IStringCollection"/> containing
            the keys in the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            </summary>
            <value>An <see cref="T:NewsComponents.Collections.IStringCollection"/> containing
            the keys in the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.SortedList.Keys"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.CategoriesCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize
            access to the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            </summary>
            <value>An object that can be used to synchronize
            access to the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.SortedList.SyncRoot"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.CategoriesCollection.Values">
            <summary>
            Gets an <see cref="T:NewsComponents.Collections.IcategoryCollection"/> containing
            the values in the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.
            </summary>
            <value>An <see cref="T:NewsComponents.Collections.IcategoryCollection"/> containing
            the values in the <see cref="T:NewsComponents.Collections.CategoriesCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.SortedList.Values"/> for details.</remarks>
        </member>
        <member name="T:NewsComponents.Collections.IStringList">
            <summary>
            Represents a strongly typed collection of <see cref="T:System.String"/>
            objects that can be individually accessed by index.
            </summary>
            <remarks>
            <b>IStringList</b> provides an <see cref="T:System.Collections.IList"/>
            that is strongly typed for <see cref="T:System.String"/> elements.
            </remarks>
        </member>
        <member name="T:NewsComponents.Collections.IStringCollection">
            <summary>
            Defines size, enumerators, and synchronization methods for strongly
            typed collections of <see cref="T:System.String"/> elements.
            </summary>
            <remarks>
            <b>IStringCollection</b> provides an <see cref="T:System.Collections.ICollection"/>
            that is strongly typed for <see cref="T:System.String"/> elements.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringCollection.CopyTo(System.String[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:NewsComponents.Collections.IStringCollection"/> to a one-dimensional <see cref="T:System.Array"/>
            of <see cref="T:System.String"/> elements, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the
            <see cref="T:System.String"/> elements copied from the <see cref="T:NewsComponents.Collections.IStringCollection"/>.
            The <b>Array</b> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/>
            at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:NewsComponents.Collections.IStringCollection"/> is greater
            than the available space from <paramref name="arrayIndex"/> to the end of the destination
            <paramref name="array"/>.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:NewsComponents.Collections.IStringEnumerator"/> that can
            iterate through the <see cref="T:NewsComponents.Collections.IStringCollection"/>.
            </summary>
            <returns>An <see cref="T:NewsComponents.Collections.IStringEnumerator"/>
            for the entire <see cref="T:NewsComponents.Collections.IStringCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.IEnumerable.GetEnumerator"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringCollection.Count">
            <summary>
            Gets the number of elements contained in the
            <see cref="T:NewsComponents.Collections.IStringCollection"/>.
            </summary>
            <value>The number of elements contained in the
            <see cref="T:NewsComponents.Collections.IStringCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ICollection.Count"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the
            <see cref="T:NewsComponents.Collections.IStringCollection"/> is synchronized (thread-safe).
            </summary>
            <value><c>true</c> if access to the <see cref="T:NewsComponents.Collections.IStringCollection"/> is
            synchronized (thread-safe); otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ICollection.IsSynchronized"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access
            to the <see cref="T:NewsComponents.Collections.IStringCollection"/>.
            </summary>
            <value>An object that can be used to synchronize access
            to the <see cref="T:NewsComponents.Collections.IStringCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ICollection.SyncRoot"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringList.Add(System.String)">
            <summary>
            Adds a <see cref="T:System.String"/> to the end
            of the <see cref="T:NewsComponents.Collections.IStringList"/>.
            </summary>
            <param name="value">The <see cref="T:System.String"/> object
            to be added to the end of the <see cref="T:NewsComponents.Collections.IStringList"/>.
            This argument can be a null reference.
            </param>
            <returns>The <see cref="T:NewsComponents.Collections.IStringList"/> index at which
            the <paramref name="value"/> has been added.</returns>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IStringList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IStringList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Add(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringList.Clear">
            <summary>
            Removes all elements from the <see cref="T:NewsComponents.Collections.IStringList"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IStringList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IStringList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Clear"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringList.Contains(System.String)">
            <summary>
            Determines whether the <see cref="T:NewsComponents.Collections.IStringList"/>
            contains the specified <see cref="T:System.String"/> element.
            </summary>
            <param name="value">The <see cref="T:System.String"/> object
            to locate in the <see cref="T:NewsComponents.Collections.IStringList"/>.
            This argument can be a null reference.
            </param>
            <returns><c>true</c> if <paramref name="value"/> is found in the
            <see cref="T:NewsComponents.Collections.IStringList"/>; otherwise, <c>false</c>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Contains(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringList.IndexOf(System.String)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified
            <see cref="T:System.String"/> in the <see cref="T:NewsComponents.Collections.IStringList"/>.
            </summary>
            <param name="value">The <see cref="T:System.String"/> object
            to locate in the <see cref="T:NewsComponents.Collections.IStringList"/>.
            This argument can be a null reference.
            </param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="value"/>
            in the <see cref="T:NewsComponents.Collections.IStringList"/>, if found; otherwise, -1.
            </returns>
            <remarks>Please refer to <see cref="M:System.Collections.IList.IndexOf(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringList.Insert(System.Int32,System.String)">
            <summary>
            Inserts a <see cref="T:System.String"/> element into the
            <see cref="T:NewsComponents.Collections.IStringList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which
            <paramref name="value"/> should be inserted.</param>
            <param name="value">The <see cref="T:System.String"/> object
            to insert into the <see cref="T:NewsComponents.Collections.IStringList"/>.
            This argument can be a null reference.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is greater than
            <see cref="P:NewsComponents.Collections.IStringCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IStringList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IStringList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringList.Remove(System.String)">
            <summary>
            Removes the first occurrence of the specified <see cref="T:System.String"/>
            from the <see cref="T:NewsComponents.Collections.IStringList"/>.
            </summary>
            <param name="value">The <see cref="T:System.String"/> object
            to remove from the <see cref="T:NewsComponents.Collections.IStringList"/>.
            This argument can be a null reference.
            </param>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IStringList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IStringList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Remove(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringList.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the
            <see cref="T:NewsComponents.Collections.IStringList"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than
            <see cref="P:NewsComponents.Collections.IStringCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IStringList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IStringList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.RemoveAt(System.Int32)"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringList.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:NewsComponents.Collections.IStringList"/> has a fixed size.
            </summary>
            <value><c>true</c> if the <see cref="T:NewsComponents.Collections.IStringList"/> has a fixed size;
            otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IList.IsFixedSize"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringList.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:NewsComponents.Collections.IStringList"/> is read-only.
            </summary>
            <value><c>true</c> if the <see cref="T:NewsComponents.Collections.IStringList"/> is read-only;
            otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IList.IsReadOnly"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringList.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.String"/> element at the specified index.
            </summary>
            <param name="index">The zero-based index of the
            <see cref="T:System.String"/> element to get or set.</param>
            <value>
            The <see cref="T:System.String"/> element at the specified <paramref name="index"/>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than
            <see cref="P:NewsComponents.Collections.IStringCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The property is set and the <see cref="T:NewsComponents.Collections.IStringList"/> is read-only.</exception>
            <remarks>Please refer to <see cref="P:System.Collections.IList.Item(System.Int32)"/> for details.</remarks>
        </member>
        <member name="T:NewsComponents.Collections.IStringEnumerator">
            <summary>
            Supports type-safe iteration over a collection that
            contains <see cref="T:System.String"/> elements.
            </summary>
            <remarks>
            <b>IStringEnumerator</b> provides an <see cref="T:System.Collections.IEnumerator"/>
            that is strongly typed for <see cref="T:System.String"/> elements.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><c>true</c> if the enumerator was successfully advanced to the next element;
            <c>false</c> if the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.IEnumerator.MoveNext"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position,
            which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.IEnumerator.Reset"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringEnumerator.Current">
            <summary>
            Gets the current <see cref="T:System.String"/> element in the collection.
            </summary>
            <value>The current <see cref="T:System.String"/> element in the collection.</value>
            <exception cref="T:System.InvalidOperationException"><para>The enumerator is positioned
            before the first element of the collection or after the last element.</para>
            <para>-or-</para>
            <para>The collection was modified after the enumerator was created.</para></exception>
            <remarks>Please refer to <see cref="P:System.Collections.IEnumerator.Current"/> for details, but note
            that <b>Current</b> fails if the collection was modified since the last successful
            call to <see cref="M:NewsComponents.Collections.IStringEnumerator.MoveNext"/> or <see cref="M:NewsComponents.Collections.IStringEnumerator.Reset"/>.</remarks>
        </member>
        <member name="T:NewsComponents.Utils.NewsItemSortField">
            <summary>
            Enumeration used to tell which field a NewsItemComparer should use when comparing NewsItem objects
            </summary>
        </member>
        <member name="T:NewsComponents.Utils.RssHelper">
            <summary>
            RssHelper
            </summary>
        </member>
        <member name="F:NewsComponents.Utils.RssHelper.NsSlashModules">
            <summary>
            </summary>
        </member>
        <member name="F:NewsComponents.Utils.RssHelper.NsDcElements">
            <summary>
            For spec. see http://dublincore.org/2003/03/24/dces#
            </summary>
        </member>
        <member name="F:NewsComponents.Utils.RssHelper.NsCommentAPI">
            <summary>
            For spec. see http://wellformedweb.org/news/wfw_namespace_elements/
            </summary>
        </member>
        <member name="M:NewsComponents.Utils.RssHelper.InitialLastRetrievedSettings(System.Int32,System.Int32)">
            <summary>
            Returns a array of DateTime with values to be used as initial values 
            for last retrieved property to reduce the initial payload of
            bulk requests that can be initiated by a large OPML import.
            </summary>
            <param name="expectedAmountOfBulkRequests">int. Number of expected requests.</param>
            <param name="defaultRefreshRateInMSecs">int. Base for the algorithm.</param>
            <returns>DateTime[]</returns>
            <remarks>
            The algorithm currently works this way:
            1. If we get less than 100, we assume to handle them all at once 
              and return an array with DateTime.MinValue's
            2. If we have more, we always initialize an array of 103 (magic) entries and set each entry
              to a DateTime we calculate starting with DateTime.Now reduced by defaultRefreshRateInMSecs.
              Then we add a calculated step determined by the index of the array entry. So we get an array with DateTimes spreading
              the whole Time from Now to Now - defaultRefreshRateInMSecs.
            3. Now we overwrite some of them dependent on expectedAmountOfBulkRequests to be
              of DateTime.MinValue to force a request: the more expectedAmountOfBulkRequests we
              have, the fewer entries are overwritten with MinValue. E.g. for expectedAmountOfBulkRequests=1234 each
              19. entry gets the DateTime.MinValue.
            </remarks>
        </member>
        <member name="M:NewsComponents.Utils.RssHelper.ItemListToHRefList(System.Collections.IList)">
            <summary>
            Converts a list of NewsItem's to a list of NewsItem.Link's
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Utils.RssHelper.GetDcElementValue(NewsComponents.NewsItem,System.String)">
            <summary>
            TODO
            </summary>
            <param name="item"></param>
            <param name="elementName"></param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Utils.RssHelper.GetHashCode(NewsComponents.NewsItem)">
            <summary>
            TODO
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Utils.RssHelper.GetOptionalElement(NewsComponents.NewsItem,System.String,System.String)">
            <summary>
            Returns the optional XmlElement if found within the NewsItem.OptionalElements list,
            else null.
            </summary>
            <param name="item">NewsItem</param>
            <param name="elementName">String</param>
            <param name="elementNamespace">String</param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Utils.RssHelper.GetOptionalElement(NewsComponents.NewsItem,System.Xml.XmlQualifiedName)">
            <summary>
            Returns the optional XmlElement if found within the NewsItem.OptionalElements list,
            else null.
            </summary>
            <param name="item">NewsItem</param>
            <param name="qName">XmlQualifiedName</param>
            <returns>XmlElement</returns>
        </member>
        <member name="M:NewsComponents.Utils.RssHelper.GetOptionalElement(System.Collections.IDictionary,System.String,System.String)">
            <summary>
            Returns the optional XmlElement if found within the provided list,
            else null.
            </summary>
            <param name="elements"></param>
            <param name="elementName"></param>
            <param name="elementNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Utils.RssHelper.GetOptionalElements(System.Collections.IDictionary,System.String,System.String)">
            <summary>
            Returns the optional XmlElement if found within the provided list,
            else null.
            </summary>
            <param name="elements"></param>
            <param name="elementName"></param>
            <param name="elementNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Utils.RssHelper.GetOptionalElementKey(System.Collections.IDictionary,System.Xml.XmlQualifiedName)">
            <summary>
            Returns the optional XmlElement if found within the provided list,
            else null.
            </summary>
            <param name="elements"></param>
            <param name="qName">XmlQualifiedName</param>
            <returns>XmlQualifiedName</returns>
        </member>
        <member name="M:NewsComponents.Utils.RssHelper.GetOptionalElementKey(System.Collections.IDictionary,System.String,System.String)">
            <summary>
            Returns the optional XmlElement if found within the provided list,
            else null.
            </summary>
            <param name="elements"></param>
            <param name="elementName"></param>
            <param name="elementNamespace"></param>
            <returns>XmlQualifiedName</returns>
        </member>
        <member name="M:NewsComponents.Utils.RssHelper.GetOptionalElementKeys(System.Collections.IDictionary,System.String,System.String)">
            <summary>
            Returns the optional XmlElements if found within the provided list,
            else null.
            </summary>
            <param name="elements"></param>
            <param name="elementName"></param>
            <param name="elementNamespace"></param>
            <returns>XmlQualifiedName[] or null</returns>
        </member>
        <member name="M:NewsComponents.Utils.RssHelper.CreateXmlElement(System.String,System.String,System.String,System.String)">
            <summary>
            Creates and returns a new XmlElement with the specified
            prefix, elementName, elementNamespace and value.
            </summary>
            <param name="prefix"></param>
            <param name="elementName">String</param>
            <param name="elementNamespace">String</param>
            <param name="value">String</param>
            <returns>XmlElement</returns>
        </member>
        <member name="M:NewsComponents.Utils.RssHelper.CreateXmlElement(System.Xml.XmlReader)">
            <summary>
            Creates and returns a new XmlElement from the provided XmlReader
            </summary>
            <param name="reader">The XmlReader positioned on the element to create</param>	
            <returns>XmlElement</returns>
        </member>
        <member name="M:NewsComponents.Utils.RssHelper.GetComparer">
            <summary>
            Returns the default NewsItem comparer.
            </summary>
            <returns>Ascending sorting NewsItemComparer (by Date)</returns>
        </member>
        <member name="M:NewsComponents.Utils.RssHelper.GetComparer(System.Boolean)">
            <summary>
            Returns a NewsItem comparer.
            </summary>
            <param name="sortDescending">Set to False, if it should sort ascending (by date), 
            else true</param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Utils.RssHelper.GetComparer(System.Boolean,NewsComponents.Utils.NewsItemSortField)">
            <summary>
            Returns a NewsItem comparer.
            </summary>
            <param name="sortDescending">Set to False, if it should sort ascending, 
            else true</param>
            <param name="sortField">indicates which field on the NewsItem object should be used for 
            sorting</param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Utils.RssHelper.IsFeedUrl(System.String)">
            <summary>
            Returns true, if the url is a valid feed Url
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Utils.RssHelper.IsNntpUrl(System.String)">
            <summary>
            Returns true, if the url is a valid NNTP Url
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="T:NewsComponents.Utils.FileHelper">
            <summary>
            File Helper class.
            </summary>
        </member>
        <member name="F:NewsComponents.Utils.FileHelper.EndOfBinaryFileMarker">
            <summary>
            This marker is written at the end of the binary files containing the content of 
            RSS items to indicate the end of the file. 
            </summary>
        </member>
        <member name="M:NewsComponents.Utils.FileHelper.CreateValidFileName(System.String)">
            <summary>
            Converts the input string to a valid file name. 
            </summary>
            <param name="name">The input string</param>
            <returns>A valid file name</returns>
        </member>
        <member name="M:NewsComponents.Utils.FileHelper.OpenForWrite(System.String)">
            <summary>
            Tries to open a file for write. On concurrent access failures it will retry 10 times.
            </summary>
            <param name="fileName">filename to open</param>
            <returns>FielStream</returns>
        </member>
        <member name="M:NewsComponents.Utils.FileHelper.OpenForWriteAppend(System.String)">
            <summary>
            Tries to open a file for write (append). On concurrent access failures it will retry 10 times.
            </summary>
            <param name="fileName">filename to open</param>
            <returns>FielStream</returns>
        </member>
        <member name="M:NewsComponents.Utils.FileHelper.OpenForReadWrite(System.String)">
            <summary>
            Tries to open a file for read/write. On concurrent access failures it will retry 10 times.
            </summary>
            <param name="fileName">filename to open</param>
            <returns>FielStream</returns>
        </member>
        <member name="M:NewsComponents.Utils.FileHelper.OpenForRead(System.String)">
            <summary>
            Tries to open a file for read. On concurrent access failures it will retry 10 times.
            </summary>
            <param name="fileName">filename to open</param>
            <returns>FielStream</returns>
        </member>
        <member name="M:NewsComponents.Utils.FileHelper.Delete(System.String)">
            <summary>
            Tries to delete a file. On concurrent access failures it will retry 10 times.
            </summary>
            <param name="fileName">filename to delete</param>
            <returns>FielStream</returns>
        </member>
        <member name="M:NewsComponents.Utils.FileHelper.WriteStreamWithBackup(System.String,System.IO.Stream)">
            <summary>
            Writes a stream to the fielsystem with the full qualified fileName in a save manner: 
            1. It writes a file named <c>fileName</c>+".new" first. 
            2. It renames the old file (if exists) to <c>fileName</c>+".bak".
            3. It renames the file written in step (1) to <c>fileName</c>.
            </summary>
            <param name="fileName">Full qualified file name incl. path</param>
            <param name="stream">The Stream to be written.</param>
            <exception cref="T:System.ArgumentNullException">If fileName or stream is null</exception>
            <returns>True on success, else false</returns>
            <remarks>The caller have to close the provided stream by itself!</remarks>
        </member>
        <member name="M:NewsComponents.Utils.FileHelper.WriteStreamWithRename(System.String,System.IO.Stream)">
            <summary>
            Writes a stream to the filesystem with the full qualified fileName in a save manner: 
            1. It writes a file named <c>fileName</c>+".new" first. 
            2. It deletes the old file (if exists)
            3. It renames the file written in step (1) to <c>fileName</c>.
            </summary>
            <param name="fileName">Full qualified file name incl. path</param>
            <param name="stream">The Stream to be written.</param>
            <exception cref="T:System.ArgumentNullException">If fileName or stream is null</exception>
            <returns>True on success, else false</returns>
            <remarks>The caller have to close the provided stream by itself!</remarks>
        </member>
        <member name="M:NewsComponents.Utils.FileHelper.StreamToMemory(System.IO.Stream)">
            <summary>
            Helper to copy a non-seekable stream to a seekable memory stream.
            </summary>
            <param name="input">A (optional) non-seekable stream</param>
            <returns>Stream positioned at the beginning</returns>
        </member>
        <member name="M:NewsComponents.Utils.FileHelper.FileToMemory(System.String)">
            <summary>
            Helper to copy a whole file from disk to a seekable memory stream.
            </summary>
            <param name="file">A filename</param>
            <returns>Stream positioned at the beginning</returns>
        </member>
        <member name="M:NewsComponents.Utils.FileHelper.IsUncPath(System.String)">
            <summary>
            Returns whether the path is a UNC path.
            </summary>
            <param name="path">The path string.</param>
            <returns><c>true</c> if the path is a UNC path.</returns>
        </member>
        <member name="M:NewsComponents.Utils.FileHelper.AppendSlashUrlOrUnc(System.String)">
            <summary>
            Takes a UNC or URL path, determines which it is (NOT hardened against bad strings, assumes one or the other is present)
            and returns the path with correct trailing slash: backslash for UNC or
            slash mark for URL.
            </summary>
            <param name="path">The URL or UNC string.</param>
            <returns>Path with correct terminal slash.</returns>
        </member>
        <member name="M:NewsComponents.Utils.FileHelper.AppendTerminalBackslash(System.String)">
            <summary>
            If not present appends terminal backslash to paths.
            </summary>
            <param name="path">A path string; for example, "C:\Temp".</param>
            <returns>A path string with trailing backslash; for example, "C:\Temp\".</returns>
        </member>
        <member name="M:NewsComponents.Utils.FileHelper.AppendTerminalForwardSlash(System.String)">
            <summary>
            Appends a terminal slash mark if there is not already one; returns corrected path.
            </summary>
            <param name="path">The path that may be missing a terminal slash mark.</param>
            <returns>The corrected path with terminal slash mark.</returns>
        </member>
        <member name="M:NewsComponents.Utils.FileHelper.CreateTemporaryFolder">
            <summary>
            Creates a new temporary folder under the system temp folder
            and returns its full pathname.
            </summary>
            <returns>The full temp path string.</returns>
        </member>
        <member name="M:NewsComponents.Utils.FileHelper.CopyDirectory(System.String,System.String)">
            <summary>
            Copies files from the source to destination directories. Directory.Move is not 
            suitable here because the downloader may still have the temporary 
            directory locked. 
            </summary>
            <param name="sourcePath">The source path.</param>
            <param name="destinationPath">The destination path.</param>
        </member>
        <member name="M:NewsComponents.Utils.FileHelper.CopyDirectory(System.String,System.String,System.Boolean)">
            <summary>
            Copies files from the source to destination directories. Directory.Move is not 
            suitable here because the downloader may still have the temporary 
            directory locked. 
            </summary>
            <param name="sourcePath">The source path.</param>
            <param name="destinationPath">The destination path.</param>
            <param name="overwrite">Indicates whether the destination files should be overwritten.</param>
        </member>
        <member name="M:NewsComponents.Utils.FileHelper.MoveFile(System.String,System.String,NewsComponents.Utils.MoveFileFlag)">
            <summary>
            Move a file from a folder to a new one.
            </summary>
            <param name="existingFileName">The original file name.</param>
            <param name="newFileName">The new file name.</param>
            <param name="flags">Flags about how to move the files.</param>
            <returns>indicates whether the file was moved.</returns>
        </member>
        <member name="M:NewsComponents.Utils.FileHelper.DestroyFolder(System.String)">
            <summary>
            Deletes a folder. If the folder cannot be deleted at the time this method is called,
            the deletion operation is delayed until the next system boot.
            </summary>
            <param name="folderPath">The directory to be removed</param>
        </member>
        <member name="M:NewsComponents.Utils.FileHelper.DestroyFile(System.String)">
            <summary>
            Deletes a file. If the file cannot be deleted at the time this method is called,
            the deletion operation is delayed until the next system boot.
            </summary>
            <param name="filePath">The file to be removed</param>
        </member>
        <member name="M:NewsComponents.Utils.FileHelper.GetLatestDotNetFrameworkPath">
            <summary>
            Returns the path to the newer version of the .NET Framework installed on the system.
            </summary>
            <returns>A string containig the full path to the newer .Net Framework location</returns>
        </member>
        <member name="M:NewsComponents.Utils.FileHelper.OpenForWriteCompressed(System.String)">
            <summary>
            Opens a file stream for write compressed content.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Utils.FileHelper.ZipFiles(System.String[],ICSharpCode.SharpZipLib.Zip.ZipOutputStream)">
            <summary>
            Zips up the files listed into the specified stream
            </summary>
            <param name="files">The list of files to zip</param>
            <param name="zos">The stream to store the zipped files</param>
        </member>
        <member name="M:NewsComponents.Utils.FileHelper.MoveFileEx(System.String,System.String,System.Int64)">
            <summary>
            API declaration of the Win32 function.
            </summary>
            <param name="lpExistingFileName">Existing file path.</param>
            <param name="lpNewFileName">The file path.</param>
            <param name="dwFlags">Move file flags.</param>
            <returns>Whether the file was moved or not.</returns>
        </member>
        <member name="M:NewsComponents.Utils.FileHelper.GetSize(System.IO.DirectoryInfo)">
            <summary>
            Determines the size of a Directory
            </summary>
            <param name="d">The directory</param>
            <returns>The size of the directory</returns>
        </member>
        <member name="M:NewsComponents.Utils.FileHelper.CopyDirRecurse(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Utility function that recursively copies directories and files.
            Again, we could use Directory.Move but we need to preserve the original.
            </summary>
            <param name="sourcePath">The source path to copy.</param>
            <param name="destinationPath">The destination path to copy to.</param>
            <param name="originalDestination">The original dstination path.</param>
            <param name="overwrite">Whether the folders should be copied recursively.</param>
        </member>
        <member name="T:NewsComponents.Utils.MoveFileFlag">
            <summary>
            Indicates how to proceed with the move file operation. 
            </summary>
        </member>
        <member name="F:NewsComponents.Utils.MoveFileFlag.None">
            <summary>
            Perform a default move funtion.
            </summary>
        </member>
        <member name="F:NewsComponents.Utils.MoveFileFlag.ReplaceExisting">
            <summary>
            If the target file exists, the move function will replace it.
            </summary>
        </member>
        <member name="F:NewsComponents.Utils.MoveFileFlag.CopyAllowed">
            <summary>
            If the file is to be moved to a different volume, 
            the function simulates the move by using the CopyFile and DeleteFile functions. 
            </summary>
        </member>
        <member name="F:NewsComponents.Utils.MoveFileFlag.DelayUntilReboot">
            <summary>
            The system does not move the file until the operating system is restarted. 
            The system moves the file immediately after AUTOCHK is executed, but before 
            creating any paging files. Consequently, this parameter enables the function 
            to delete paging files from previous startups. 
            </summary>
        </member>
        <member name="F:NewsComponents.Utils.MoveFileFlag.WriteThrough">
            <summary>
            The function does not return until the file has actually been moved on the disk. 
            </summary>
        </member>
        <member name="F:NewsComponents.Utils.MoveFileFlag.CreateHardLink">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:NewsComponents.Utils.MoveFileFlag.FailIfNotTrackable">
            <summary>
            The function fails if the source file is a link source, but the file cannot be tracked after the move. This situation can occur if the destination is a volume formatted with the FAT file system.
            </summary>
        </member>
        <member name="T:NewsComponents.News.NntpParser">
            <summary>
            Class for parsing NNTP results sent by a server 
            </summary>
        </member>
        <member name="F:NewsComponents.News.NntpParser.GoogleGroupsUrl">
            <summary>
            Links to Google Groups used for creating permalinks for NNTP items
            </summary>
        </member>
        <member name="M:NewsComponents.News.NntpParser.PostCommentViaNntp(NewsComponents.NewsItem,NewsComponents.NewsItem,System.Net.ICredentials)">
            <summary>
            Posts a comment to a newsgroup using NNTP 
            </summary>
            <param name="item2post">An NNTP item that will be posted to the website</param>
            <param name="inReply2item">An NNTP item that is the post parent</param>
            <param name="credentials">Credentials to use for post</param>
            <returns>The NNTP Status code returned</returns>
            <exception cref="T:System.Net.WebException">If an error occurs when the POSTing the 
            comment</exception>
        </member>
        <member name="M:NewsComponents.News.NntpParser.PostCommentViaNntp(NewsComponents.NewsItem,NewsComponents.Feed.feedsFeed,System.Net.ICredentials)">
            <summary>
            Posts a comment to a newsgroup using NNTP 
            </summary>
            <param name="item2post">An NNTP item that will be posted to the website</param>
            <param name="postTarget">An feed that is the post target</param>
            <param name="credentials">Credentials to use</param>
            <returns>The NNTP Status code returned</returns>
            <exception cref="T:System.Net.WebException">If an error occurs when the POSTing the 
            comment</exception>
        </member>
        <member name="M:NewsComponents.News.NntpParser.GetNewsgroupList(System.IO.Stream)">
            <summary>
            Parses the results of an NNTP LIST request into an ArrayList of newsgroup names.
            </summary>
            <returns>An arraylist containing a list of newsgroups</returns>
        </member>
        <member name="M:NewsComponents.News.NntpParser.GetItemsForNewsGroup(NewsComponents.Feed.feedsFeed,System.IO.Stream,System.Boolean)">
            <summary>
            Reads the list of articles from the stream and returns the feed item.
            </summary>	
            <param name="f">Information about the feed. This information is updated based
            on the results of processing the feed. </param>
            <param name="newsgroupListStream">A stream containing an nntp news group list.</param>				
            <param name="cachedStream">Flag states update last retrieved date on feed only 
            if the item was not cached. Indicates whether the lastretrieved date is updated
            on the feedsFeed object passed in. </param>
            <returns>A FeedInfo containing the NewsItem objects</returns>		
        </member>
        <member name="M:NewsComponents.News.NntpParser.HeaderDecode(System.String)">
            <summary>
            Decodes a string according to RFC 2047
            </summary>
            <param name="line">The string to decode</param>
            <returns>The decoded string</returns>
        </member>
        <member name="M:NewsComponents.News.NntpParser.QDecode(System.String,System.String)">
            <summary>
            Decodes a string according to the "Q" encoding rules of RFC 2047
            </summary>
            <param name="encoding">The string's encoding</param>
            <param name="text">The string to decode</param>
            <returns>The decoded string</returns>
        </member>
        <member name="M:NewsComponents.News.NntpParser.Base64Decode(System.String,System.String)">
            <summary>
            Decodes a string according to the "B" encoding rules of RFC 2047
            </summary>
            <param name="encoding">The string's encoding</param>
            <param name="text">The string to decode</param>
            <returns>The decoded string</returns>
        </member>
        <member name="M:NewsComponents.News.NntpParser.GetEncodedWordIndexes(System.String)">
            <summary>
            Gets the indexes of encoded words within the string. 
            </summary>
            <param name="str">The target string</param>
            <returns>An array list containing pairs of start and end indexes of encoded
            words within the string</returns>
        </member>
        <member name="M:NewsComponents.News.NntpParser.CreateGoogleUrlFromID(System.String)">
            <summary>
            Creates the google URL from ID.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="T:NewsComponents.Net.BackgroundCopyManager">
            <summary>
            Entry point to the BITS infraestructure.
            </summary>
        </member>
        <member name="T:NewsComponents.Net.IBackgroundCopyManager">
            <summary>
            Use the IBackgroundCopyManager interface to create transfer jobs, 
            retrieve an enumerator object that contains the jobs in the queue, 
            and to retrieve individual jobs from the queue.
            </summary>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyManager.CreateJob(System.String,NewsComponents.Net.BG_JOB_TYPE,System.Guid@,NewsComponents.Net.IBackgroundCopyJob@)">
            <summary>
            Creates a new transfer job
            </summary>
            <param name="DisplayName">Null-terminated string that contains a display name for the job. Typically, the display name is used to identify the job in a user interface. Note that more than one job may have the same display name. Must not be NULL. The name is limited to 256 characters, not including the null terminator.</param>
            <param name="pJobId">Uniquely identifies your job in the queue. Use this identifier when you call the IBackgroundCopyManager::GetJob method to get a job from the queue.</param>
            <param name="ppJob">An IBackgroundCopyJob interface pointer that you use to modify the job's properties and specify the files to be transferred. To activate the job in the queue, call the IBackgroundCopyJob::Resume method. Release ppJob when done.</param>
            <param name="Type">Type of transfer job, such as BG_JOB_TYPE_DOWNLOAD. For a list of transfer types, see the BG_JOB_TYPE enumeration. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyManager.GetJob(System.Guid@,NewsComponents.Net.IBackgroundCopyJob@)">
            <summary>
            Retrieves a given job from the queue
            </summary>
            <param name="jobID">Identifies the job to retrieve from the transfer queue. The CreateJob method returns the job identifier.</param>
            <param name="ppJob">An IBackgroundCopyJob interface pointer to the job specified by JobID. When done, release ppJob.</param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyManager.EnumJobs(System.UInt32,NewsComponents.Net.IEnumBackgroundCopyJobs@)">
            <summary>
            Retrieves an enumerator object that you use to enumerate jobs in the queue
            </summary>
            <param name="dwFlags">Specifies whose jobs to include in the enumeration. If dwFlags is set to 0, the user receives all jobs that they own in the transfer queue. The following table lists the enumeration options. </param>
            <param name="ppenum">An IEnumBackgroundCopyJobs interface pointer that you use to enumerate the jobs in the transfer queue. The contents of the enumerator depend on the value of dwFlags. Release ppEnumJobs when done. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyManager.GetErrorDescription(System.Int32,System.UInt32,System.String@)">
            <summary>
            Retrieves a description for the given error code
            </summary>
            <param name="hResult">Error code from a previous call to a BITS method.</param>
            <param name="LanguageId">Identifies the language identifier to use to generate the description. To create the language identifier, use the MAKELANGID macro.</param>
            <param name="pErrorDescription">Null-terminated string that contains a description of the error. Call the CoTaskMemFree function to free ppErrorDescription when done. </param>
        </member>
        <member name="T:NewsComponents.Net.IBackgroundCopyCallback">
            <summary>
            Implement the IBackgroundCopyCallback interface to receive notification that a 
            job is complete, has been modified, or is in error. Clients use this interface 
            instead of polling for the status of the job.
            </summary>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyCallback.JobTransferred(NewsComponents.Net.IBackgroundCopyJob)">
            <summary>
            Called when all of the files in the job have successfully transferred.
            </summary>
            <param name="pJob">Contains job-related information, such as the time the job completed, the number of bytes transferred, and the number of files transferred. Do not release pJob; BITS releases the interface when the method returns. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyCallback.JobError(NewsComponents.Net.IBackgroundCopyJob,NewsComponents.Net.IBackgroundCopyError)">
            <summary>
            Called when an error occurs.
            </summary>
            <param name="pJob">Contains job-related information, such as the number of bytes and files transferred before the error occurred. It also contains the methods to resume and cancel the job. Do not release pJob; BITS releases the interface when the JobError method returns.</param>
            <param name="pError">Contains error information, such as the file being processed at the time the fatal error occurred and a description of the error. Do not release pError; BITS releases the interface when the JobError method returns.</param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyCallback.JobModification(NewsComponents.Net.IBackgroundCopyJob,System.UInt32)">
            <summary>
            Called when a job is modified.
            </summary>
            <param name="pJob">Contains the methods for accessing property, progress, and state information of the job. Do not release pJob; BITS releases the interface when the JobModification method returns.</param>
            <param name="dwReserved">Reserved for future use.</param>
        </member>
        <member name="T:NewsComponents.Net.IBackgroundCopyJob">
            <summary>
            Use the IBackgroundCopyJob interface to add files to the job, 
            set the priority level of the job, determine the state of the
            job, and to start and stop the job.
            </summary>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob.AddFileSet(System.UInt32,NewsComponents.Net._BG_FILE_INFO@)">
            <summary>
            Adds multiple files to the job
            </summary>
            <param name="cFileCount">Number of elements in paFileSet. </param>
            <param name="pFileSet">Array of BG_FILE_INFO structures that identify the local and remote file names of the files to transfer.</param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob.AddFile(System.String,System.String)">
            <summary>
            Adds a single file to the job
            </summary>
            <param name="LocalName">Null-terminated string that contains the name of the file on the server. For information on specifying the remote name, see the RemoteName member and Remarks section of the BG_FILE_INFO structure. </param>
            <param name="RemoteUrl">Null-terminated string that contains the name of the file on the client. For information on specifying the local name, see the LocalName member and Remarks section of the BG_FILE_INFO structure. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob.EnumFiles(NewsComponents.Net.IEnumBackgroundCopyFiles@)">
            <summary>
            Returns an interface pointer to an enumerator
            object that you use to enumerate the files in the job
            </summary>
            <param name="pEnum">IEnumBackgroundCopyFiles interface pointer that you use to enumerate the files in the job. Release ppEnumFiles when done. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob.Suspend">
            <summary>
            Pauses the job
            </summary>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob.Resume">
            <summary>
            Restarts a suspended job
            </summary>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob.Cancel">
            <summary>
            Cancels the job and removes temporary files from the client
            </summary>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob.Complete">
            <summary>
            Ends the job and saves the transferred files on the client
            </summary>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob.GetId(System.Guid@)">
            <summary>
            Retrieves the identifier of the job in the queue
            </summary>
            <param name="pVal">GUID that identifies the job within the BITS queue.</param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob.GetType(NewsComponents.Net.BG_JOB_TYPE@)">
            <summary>
            Retrieves the type of transfer being performed, 
            such as a file download
            </summary>
            <param name="pVal">Type of transfer being performed. For a list of transfer types, see the BG_JOB_TYPE enumeration type. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob.GetProgress(NewsComponents.Net._BG_JOB_PROGRESS@)">
            <summary>
            Retrieves job-related progress information, 
            such as the number of bytes and files transferred 
            to the client
            </summary>
            <param name="pVal">Contains data that you can use to calculate the percentage of the job that is complete. For more information, see BG_JOB_PROGRESS. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob.GetTimes(NewsComponents.Net._BG_JOB_TIMES@)">
            <summary>
            Retrieves timestamps for activities related
            to the job, such as the time the job was created
            </summary>
            <param name="pVal">Contains job-related time stamps. For available time stamps, see the BG_JOB_TIMES structure.</param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob.GetState(NewsComponents.Net.BG_JOB_STATE@)">
            <summary>
            Retrieves the state of the job
            </summary>
            <param name="pVal">Current state of the job. For example, the state reflects whether the job is in error, transferring data, or suspended. For a list of job states, see the BG_JOB_STATE enumeration type. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob.GetError(NewsComponents.Net.IBackgroundCopyError@)">
            <summary>
            Retrieves an interface pointer to 
            the error object after an error occurs
            </summary>
            <param name="ppError">Error interface that provides the error code, a description of the error, and the context in which the error occurred. This parameter also identifies the file being transferred at the time the error occurred. Release ppError when done. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob.GetOwner(System.String@)">
            <summary>
            Retrieves the job owner's identity
            </summary>
            <param name="pVal">Null-terminated string that contains the string version of the SID that identifies the job's owner. Call the CoTaskMemFree function to free ppOwner when done. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob.SetDisplayName(System.String)">
            <summary>
            Specifies a display name that identifies the job in 
            a user interface
            </summary>
            <param name="Val">Null-terminated string that identifies the job. Must not be NULL. The length of the string is limited to 256 characters, not including the null terminator. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob.GetDisplayName(System.String@)">
            <summary>
            Retrieves the display name that identifies the job
            </summary>
            <param name="pVal">Null-terminated string that contains the display name that identifies the job. More than one job can have the same display name. Call the CoTaskMemFree function to free ppDisplayName when done.</param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob.SetDescription(System.String)">
            <summary>
            Specifies a description of the job
            </summary>
            <param name="Val">Null-terminated string that provides additional information about the job. The length of the string is limited to 1,024 characters, not including the null terminator.</param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob.GetDescription(System.String@)">
            <summary>
            Retrieves the description of the job
            </summary>
            <param name="pVal">Null-terminated string that contains a short description of the job. Call the CoTaskMemFree function to free ppDescription when done. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob.SetPriority(NewsComponents.Net.BG_JOB_PRIORITY)">
            <summary>
            Specifies the priority of the job relative to 
            other jobs in the transfer queue
            </summary>
            <param name="Val">Specifies the priority level of your job relative to other jobs in the transfer queue. The default is BG_JOB_PRIORITY_NORMAL. For a list of priority levels, see the BG_JOB_PRIORITY enumeration. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob.GetPriority(NewsComponents.Net.BG_JOB_PRIORITY@)">
            <summary>
            Retrieves the priority level you have set for the job.
            </summary>
            <param name="pVal">Priority of the job relative to other jobs in the transfer queue. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob.SetNotifyFlags(System.UInt32)">
            <summary>
            Specifies the type of event notification to receive
            </summary>
            <param name="Val">Set one or more of the following flags to identify the events that you want to receive. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob.GetNotifyFlags(System.UInt32@)">
            <summary>
            Retrieves the event notification (callback) flags 
            you have set for your application.
            </summary>
            <param name="pVal">Identifies the events that your application receives. The following table lists the event notification flag values. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob.SetNotifyInterface(System.Object)">
            <summary>
            Specifies a pointer to your implementation of the 
            IBackgroundCopyCallback interface (callbacks). The 
            interface receives notification based on the event 
            notification flags you set
            </summary>
            <param name="Val">An IBackgroundCopyCallback interface pointer. To remove the current callback interface pointer, set this parameter to NULL.</param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob.GetNotifyInterface(System.Object@)">
            <summary>
            Retrieves a pointer to your implementation 
            of the IBackgroundCopyCallback interface (callbacks).
            </summary>
            <param name="pVal">Interface pointer to your implementation of the IBackgroundCopyCallback interface. When done, release ppNotifyInterface.</param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob.SetMinimumRetryDelay(System.UInt32)">
            <summary>
            Specifies the minimum length of time that BITS waits after 
            encountering a transient error condition before trying to 
            transfer the file
            </summary>
            <param name="Seconds">Minimum length of time, in seconds, that BITS waits after encountering a transient error before trying to transfer the file. The default retry delay is 600 seconds (10 minutes). The minimum retry delay that you can specify is 60 seconds. If you specify a value less than 60 seconds, BITS changes the value to 60 seconds. If the value exceeds the no-progress-timeout value retrieved from the GetNoProgressTimeout method, BITS will not retry the transfer and moves the job to the BG_JOB_STATE_ERROR state. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob.GetMinimumRetryDelay(System.UInt32@)">
            <summary>
            Retrieves the minimum length of time that BITS waits after 
            encountering a transient error condition before trying to 
            transfer the file
            </summary>
            <param name="Seconds">Length of time, in seconds, that the service waits after encountering a transient error before trying to transfer the file. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob.SetNoProgressTimeout(System.UInt32)">
            <summary>
            Specifies the length of time that BITS continues to try to 
            transfer the file after encountering a transient error 
            condition
            </summary>
            <param name="Seconds">Length of time, in seconds, that BITS tries to transfer the file after the first transient error occurs. The default retry period is 1,209,600 seconds (14 days). Set the retry period to 0 to prevent retries and to force the job into the BG_JOB_STATE_ERROR state for all errors. If the retry period value exceeds the JobInactivityTimeout Group Policy value (90-day default), BITS cancels the job after the policy value is exceeded.</param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob.GetNoProgressTimeout(System.UInt32@)">
            <summary>
            Retrieves the length of time that BITS continues to try to 
            transfer the file after encountering a transient error condition
            </summary>
            <param name="Seconds">Length of time, in seconds, that the service tries to transfer the file after a transient error occurs. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob.GetErrorCount(System.UInt32@)">
            <summary>
            Retrieves the number of times the job was interrupted by 
            network failure or server unavailability
            </summary>
            <param name="Errors">Number of errors that occurred while BITS tried to transfer the job. The count increases when the job moves from the BG_JOB_STATE_TRANSFERRING state to the BG_JOB_STATE_TRANSIENT_ERROR or BG_JOB_STATE_ERROR state.</param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob.SetProxySettings(NewsComponents.Net.BG_JOB_PROXY_USAGE,System.String,System.String)">
            <summary>
            Specifies which proxy to use to transfer the files
            </summary>
            <param name="ProxyBypassList">Null-terminated string that contains an optional list of host names, IP addresses, or both, that can bypass the proxy. The list is space-delimited. For details on specifying a bypass proxy, see Remarks. This parameter must be NULL if the value of ProxyUsage is BG_JOB_PROXY_USAGE_PRECONFIG, BG_JOB_PROXY_USAGE_NO_PROXY, or BG_JOB_PROXY_USAGE_NO_AUTODETECT. The length of the proxy bypass list is limited to 4,000 characters, not including the null terminator. </param>
            <param name="ProxyList">Null-terminated string that contains the proxies to use to transfer files. The list is space-delimited. For details on specifying a proxy, see Remarks. This parameter must be NULL if the value of ProxyUsage is BG_JOB_PROXY_USAGE_PRECONFIG, BG_JOB_PROXY_USAGE_NO_PROXY, or BG_JOB_PROXY_USAGE_NO_AUTODETECT. The length of the proxy list is limited to 4,000 characters, not including the null terminator. </param>
            <param name="ProxyUsage">Specifies whether to use the user's proxy settings, not to use a proxy, or to use application-specified proxy settings. The default is to use the user's proxy settings, BG_JOB_PROXY_USAGE_PRECONFIG. For a list of proxy options, see the BG_JOB_PROXY_USAGE enumeration.</param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob.GetProxySettings(NewsComponents.Net.BG_JOB_PROXY_USAGE@,System.String@,System.String@)">
            <summary>
            Retrieves the proxy settings the job uses to transfer the files
            </summary>
            <param name="pProxyBypassList">Null-terminated string that contains an optional list of host names or IP addresses, or both, that were not routed through the proxy. The list is space-delimited. For details on the format of the string, see the Listing the Proxy Bypass section of Enabling Internet Functionality. Call the CoTaskMemFree function to free ppProxyBypassList when done.</param>
            <param name="pProxyList">Null-terminated string that contains one or more proxies to use to transfer files. The list is space-delimited. For details on the format of the string, see the Listing Proxy Servers section of Enabling Internet Functionality. Call the CoTaskMemFree function to free ppProxyList when done.</param>
            <param name="pProxyUsage">Specifies the proxy settings the job uses to transfer the files. For a list of proxy options, see the BG_JOB_PROXY_USAGE enumeration. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob.TakeOwnership">
            <summary>
            Changes the ownership of the job to the current user
            </summary>
        </member>
        <member name="T:NewsComponents.Net.IBackgroundCopyJob2">
            <summary>
            Use the IBackgroundCopyJob2 interface to retrieve reply data from an upload-reply job, determine the progress of the reply data transfer to the client, request command line execution, and provide credentials for proxy and remote server authentication requests.
            </summary>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob2.AddFileSet(System.UInt32,NewsComponents.Net._BG_FILE_INFO@)">
            <summary>
            Adds multiple files to the job
            </summary>
            <param name="cFileCount">Number of elements in paFileSet. </param>
            <param name="pFileSet">Array of BG_FILE_INFO structures that identify the local and remote file names of the files to transfer.</param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob2.AddFile(System.String,System.String)">
            <summary>
            Adds a single file to the job
            </summary>
            <param name="LocalName">Null-terminated string that contains the name of the file on the server. For information on specifying the remote name, see the RemoteName member and Remarks section of the BG_FILE_INFO structure. </param>
            <param name="RemoteUrl">Null-terminated string that contains the name of the file on the client. For information on specifying the local name, see the LocalName member and Remarks section of the BG_FILE_INFO structure. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob2.EnumFiles(NewsComponents.Net.IEnumBackgroundCopyFiles@)">
            <summary>
            Returns an interface pointer to an enumerator
            object that you use to enumerate the files in the job
            </summary>
            <param name="pEnum">IEnumBackgroundCopyFiles interface pointer that you use to enumerate the files in the job. Release ppEnumFiles when done. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob2.Suspend">
            <summary>
            Pauses the job
            </summary>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob2.Resume">
            <summary>
            Restarts a suspended job
            </summary>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob2.Cancel">
            <summary>
            Cancels the job and removes temporary files from the client
            </summary>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob2.Complete">
            <summary>
            Ends the job and saves the transferred files on the client
            </summary>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob2.GetId(System.Guid@)">
            <summary>
            Retrieves the identifier of the job in the queue
            </summary>
            <param name="pVal">GUID that identifies the job within the BITS queue.</param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob2.GetType(NewsComponents.Net.BG_JOB_TYPE@)">
            <summary>
            Retrieves the type of transfer being performed, 
            such as a file download
            </summary>
            <param name="pVal">Type of transfer being performed. For a list of transfer types, see the BG_JOB_TYPE enumeration type. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob2.GetProgress(NewsComponents.Net._BG_JOB_PROGRESS@)">
            <summary>
            Retrieves job-related progress information, 
            such as the number of bytes and files transferred 
            to the client
            </summary>
            <param name="pVal">Contains data that you can use to calculate the percentage of the job that is complete. For more information, see BG_JOB_PROGRESS. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob2.GetTimes(NewsComponents.Net._BG_JOB_TIMES@)">
            <summary>
            Retrieves timestamps for activities related
            to the job, such as the time the job was created
            </summary>
            <param name="pVal">Contains job-related time stamps. For available time stamps, see the BG_JOB_TIMES structure.</param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob2.GetState(NewsComponents.Net.BG_JOB_STATE@)">
            <summary>
            Retrieves the state of the job
            </summary>
            <param name="pVal">Current state of the job. For example, the state reflects whether the job is in error, transferring data, or suspended. For a list of job states, see the BG_JOB_STATE enumeration type. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob2.GetError(NewsComponents.Net.IBackgroundCopyError@)">
            <summary>
            Retrieves an interface pointer to 
            the error object after an error occurs
            </summary>
            <param name="ppError">Error interface that provides the error code, a description of the error, and the context in which the error occurred. This parameter also identifies the file being transferred at the time the error occurred. Release ppError when done. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob2.GetOwner(System.String@)">
            <summary>
            Retrieves the job owner's identity
            </summary>
            <param name="pVal">Null-terminated string that contains the string version of the SID that identifies the job's owner. Call the CoTaskMemFree function to free ppOwner when done. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob2.SetDisplayName(System.String)">
            <summary>
            Specifies a display name that identifies the job in 
            a user interface
            </summary>
            <param name="Val">Null-terminated string that identifies the job. Must not be NULL. The length of the string is limited to 256 characters, not including the null terminator. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob2.GetDisplayName(System.String@)">
            <summary>
            Retrieves the display name that identifies the job
            </summary>
            <param name="pVal">Null-terminated string that contains the display name that identifies the job. More than one job can have the same display name. Call the CoTaskMemFree function to free ppDisplayName when done.</param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob2.SetDescription(System.String)">
            <summary>
            Specifies a description of the job
            </summary>
            <param name="Val">Null-terminated string that provides additional information about the job. The length of the string is limited to 1,024 characters, not including the null terminator.</param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob2.GetDescription(System.String@)">
            <summary>
            Retrieves the description of the job
            </summary>
            <param name="pVal">Null-terminated string that contains a short description of the job. Call the CoTaskMemFree function to free ppDescription when done. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob2.SetPriority(NewsComponents.Net.BG_JOB_PRIORITY)">
            <summary>
            Specifies the priority of the job relative to 
            other jobs in the transfer queue
            </summary>
            <param name="Val">Specifies the priority level of your job relative to other jobs in the transfer queue. The default is BG_JOB_PRIORITY_NORMAL. For a list of priority levels, see the BG_JOB_PRIORITY enumeration. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob2.GetPriority(NewsComponents.Net.BG_JOB_PRIORITY@)">
            <summary>
            Retrieves the priority level you have set for the job.
            </summary>
            <param name="pVal">Priority of the job relative to other jobs in the transfer queue. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob2.SetNotifyFlags(NewsComponents.Net.BG_JOB_NOTIFICATION_TYPE)">
            <summary>
            Specifies the type of event notification to receive
            </summary>
            <param name="Val">Set one or more of the following flags to identify the events that you want to receive. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob2.GetNotifyFlags(System.UInt32@)">
            <summary>
            Retrieves the event notification (callback) flags 
            you have set for your application.
            </summary>
            <param name="pVal">Identifies the events that your application receives. The following table lists the event notification flag values. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob2.SetNotifyInterface(System.Object)">
            <summary>
            Specifies a pointer to your implementation of the 
            IBackgroundCopyCallback interface (callbacks). The 
            interface receives notification based on the event 
            notification flags you set
            </summary>
            <param name="Val">An IBackgroundCopyCallback interface pointer. To remove the current callback interface pointer, set this parameter to NULL.</param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob2.GetNotifyInterface(System.Object@)">
            <summary>
            Retrieves a pointer to your implementation 
            of the IBackgroundCopyCallback interface (callbacks).
            </summary>
            <param name="pVal">Interface pointer to your implementation of the IBackgroundCopyCallback interface. When done, release ppNotifyInterface.</param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob2.SetMinimumRetryDelay(System.UInt32)">
            <summary>
            Specifies the minimum length of time that BITS waits after 
            encountering a transient error condition before trying to 
            transfer the file
            </summary>
            <param name="Seconds">Minimum length of time, in seconds, that BITS waits after encountering a transient error before trying to transfer the file. The default retry delay is 600 seconds (10 minutes). The minimum retry delay that you can specify is 60 seconds. If you specify a value less than 60 seconds, BITS changes the value to 60 seconds. If the value exceeds the no-progress-timeout value retrieved from the GetNoProgressTimeout method, BITS will not retry the transfer and moves the job to the BG_JOB_STATE_ERROR state. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob2.GetMinimumRetryDelay(System.UInt32@)">
            <summary>
            Retrieves the minimum length of time that BITS waits after 
            encountering a transient error condition before trying to 
            transfer the file
            </summary>
            <param name="Seconds">Length of time, in seconds, that the service waits after encountering a transient error before trying to transfer the file. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob2.SetNoProgressTimeout(System.UInt32)">
            <summary>
            Specifies the length of time that BITS continues to try to 
            transfer the file after encountering a transient error 
            condition
            </summary>
            <param name="Seconds">Length of time, in seconds, that BITS tries to transfer the file after the first transient error occurs. The default retry period is 1,209,600 seconds (14 days). Set the retry period to 0 to prevent retries and to force the job into the BG_JOB_STATE_ERROR state for all errors. If the retry period value exceeds the JobInactivityTimeout Group Policy value (90-day default), BITS cancels the job after the policy value is exceeded.</param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob2.GetNoProgressTimeout(System.UInt32@)">
            <summary>
            Retrieves the length of time that BITS continues to try to 
            transfer the file after encountering a transient error condition
            </summary>
            <param name="Seconds">Length of time, in seconds, that the service tries to transfer the file after a transient error occurs. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob2.GetErrorCount(System.UInt32@)">
            <summary>
            Retrieves the number of times the job was interrupted by 
            network failure or server unavailability
            </summary>
            <param name="Errors">Number of errors that occurred while BITS tried to transfer the job. The count increases when the job moves from the BG_JOB_STATE_TRANSFERRING state to the BG_JOB_STATE_TRANSIENT_ERROR or BG_JOB_STATE_ERROR state.</param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob2.SetProxySettings(NewsComponents.Net.BG_JOB_PROXY_USAGE,System.String,System.String)">
            <summary>
            Specifies which proxy to use to transfer the files
            </summary>
            <param name="ProxyBypassList">Null-terminated string that contains an optional list of host names, IP addresses, or both, that can bypass the proxy. The list is space-delimited. For details on specifying a bypass proxy, see Remarks. This parameter must be NULL if the value of ProxyUsage is BG_JOB_PROXY_USAGE_PRECONFIG, BG_JOB_PROXY_USAGE_NO_PROXY, or BG_JOB_PROXY_USAGE_NO_AUTODETECT. The length of the proxy bypass list is limited to 4,000 characters, not including the null terminator. </param>
            <param name="ProxyList">Null-terminated string that contains the proxies to use to transfer files. The list is space-delimited. For details on specifying a proxy, see Remarks. This parameter must be NULL if the value of ProxyUsage is BG_JOB_PROXY_USAGE_PRECONFIG, BG_JOB_PROXY_USAGE_NO_PROXY, or BG_JOB_PROXY_USAGE_NO_AUTODETECT. The length of the proxy list is limited to 4,000 characters, not including the null terminator. </param>
            <param name="ProxyUsage">Specifies whether to use the user's proxy settings, not to use a proxy, or to use application-specified proxy settings. The default is to use the user's proxy settings, BG_JOB_PROXY_USAGE_PRECONFIG. For a list of proxy options, see the BG_JOB_PROXY_USAGE enumeration.</param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob2.GetProxySettings(NewsComponents.Net.BG_JOB_PROXY_USAGE@,System.String@,System.String@)">
            <summary>
            Retrieves the proxy settings the job uses to transfer the files
            </summary>
            <param name="pProxyBypassList">Null-terminated string that contains an optional list of host names or IP addresses, or both, that were not routed through the proxy. The list is space-delimited. For details on the format of the string, see the Listing the Proxy Bypass section of Enabling Internet Functionality. Call the CoTaskMemFree function to free ppProxyBypassList when done.</param>
            <param name="pProxyList">Null-terminated string that contains one or more proxies to use to transfer files. The list is space-delimited. For details on the format of the string, see the Listing Proxy Servers section of Enabling Internet Functionality. Call the CoTaskMemFree function to free ppProxyList when done.</param>
            <param name="pProxyUsage">Specifies the proxy settings the job uses to transfer the files. For a list of proxy options, see the BG_JOB_PROXY_USAGE enumeration. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob2.TakeOwnership">
            <summary>
            Changes the ownership of the job to the current user
            </summary>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob2.SetNotifyCmdLine(System.String,System.String)">
            <summary>
            Use the SetNotifyCmdLine method to specify a program to execute if the job enters the BG_JOB_STATE_ERROR or BG_JOB_STATE_TRANSFERRED state. BITS executes the program in the context of the user.
            </summary>
            <param name="Program">Null-terminated string that contains the program to execute. The pProgram parameter is limited to MAX_PATH characters, not including the null terminator. You should specify a full path to the program; the method will not use the search path to locate the program. To remove command line notification, set pProgram and pParameters to NULL. The method fails if pProgram is NULL and pParameters is non-NULL. </param>
            <param name="Parameters">Null-terminated string that contains the parameters of the program in pProgram. The first parameter must be the program in pProgram (use quotes if the path uses long file names). The pParameters parameter is limited to 4,000 characters, not including the null terminator. This parameter can be NULL.</param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob2.GetNotifyCmdLine(System.String@,System.String@)">
            <summary>
            Use the GetNotifyCmdLine method to retrieve the program to execute when the job enters the error or transferred state.
            </summary>
            <param name="pProgram">Null-terminated string that contains the program to execute when the job enters the error or transferred state. Call the CoTaskMemFree function to free pProgram when done. </param>
            <param name="pParameters">Null-terminated string that contains the arguments of the program in pProgram. Call the CoTaskMemFree function to free pParameters when done. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob2.GetReplyProgress(NewsComponents.Net._BG_JOB_REPLY_PROGRESS@)">
            <summary>
            Use the GetReplyProgress method to retrieve progress information related to the transfer of the reply data from an upload-reply job.
            </summary>
            <param name="pProgress">Contains information that you use to calculate the percentage of the reply file transfer that is complete. For more information, see BG_JOB_REPLY_PROGRESS.</param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob2.GetReplyData(System.IntPtr,System.UInt64@)">
            <summary>
            Use the GetReplyData method to retrieve an in-memory copy of the reply data from the server application. Only call this method if the job's type is BG_JOB_TYPE_UPLOAD_REPLY and its state is BG_JOB_STATE_TRANSFERRED.
            </summary>
            <param name="ppBuffer">Buffer to contain the reply data. The method sets ppBuffer to NULL if the server application did not return a reply. Call the CoTaskMemFree function to free ppBuffer when done.</param>
            <param name="pLength">Size, in bytes, of the reply data in ppBuffer.</param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob2.SetReplyFileName(System.String)">
            <summary>
            Use the SetReplyFileName method to specify the name of the file to contain the reply data from the server application. Only call this method if the job's type is BG_JOB_TYPE_UPLOAD_REPLY.
            </summary>
            <param name="ReplyFileName">Null-terminated string that contains the full path to the reply file. BITS generates the file name if ReplyFileNamePathSpec is NULL or an empty string. You cannot use wildcards in the path or file name, and directories in the path must exist. The path is limited to MAX_PATH, not including the null terminator. The user must have permissions to write to the directory. BITS does not support NTFS streams. Instead of using network drives, which are session specific, use UNC paths (for example, \\server\share\path\file). Do not include the \\? prefix in the path. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob2.GetReplyFileName(System.String@)">
            <summary>
            Use the GetReplyFileName method to retrieve the name of the file that contains the reply data from the server application. Only call this method if the job type is BG_JOB_TYPE_UPLOAD_REPLY.
            </summary>
            <param name="pReplyFileName">Null-terminated string that contains the full path to the reply file. Call the CoTaskMemFree function to free pReplyFileName when done. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob2.SetCredentials(NewsComponents.Net.BG_AUTH_CREDENTIALS@)">
            <summary>
            Use the SetCredentials method to specify the credentials to use for a proxy or remote server user authentication request.
            </summary>
            <param name="Credentials">Identifies the target (proxy or server), authentication scheme, and the user's credentials to use for user authentication. For details, see the BG_AUTH_CREDENTIALS structure. If the job currently contains credentials with the same target and scheme pair, the existing credentials are replaced with the new credentials. The credentials persist for the life of the job. To remove the credentials from the job, call the IBackgroundCopyJob2::RemoveCredentials method. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyJob2.RemoveCredentials(NewsComponents.Net.BG_AUTH_TARGET,NewsComponents.Net.BG_AUTH_SCHEME)">
            <summary>
            Use the RemoveCredentials method to remove credentials from use. The credentials must match an existing target and scheme pair that you specified using the IBackgroundCopyJob2::SetCredentials method. There is no method to retrieve the credentials you have set.
            </summary>
            <param name="Target">Identifies whether to use the credentials for proxy or server authentication.</param>
            <param name="Scheme">Identifies the authentication scheme to use (basic or one of several challenge-response schemes). For details, see the BG_AUTH_SCHEME enumeration. </param>
        </member>
        <member name="T:NewsComponents.Net.IBackgroundCopyError">
            <summary>
            Use the information in the IBackgroundCopyError interface to 
            determine the cause of the error and if the transfer process 
            can proceed
            </summary>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyError.GetError(NewsComponents.Net.BG_ERROR_CONTEXT@,System.Int32@)">
            <summary>
            Retrieves the error code and identify the context 
            in which the error occurred
            </summary>
            <param name="pContext">Context in which the error occurred. For a list of context values, see the BG_ERROR_CONTEXT enumeration. </param>
            <param name="pCode">Error code of the error that occurred. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyError.GetFile(NewsComponents.Net.IBackgroundCopyFile@)">
            <summary>
            Retrieves an interface pointer to the file object 
            associated with the error
            </summary>
            <param name="pVal"> An IBackgroundCopyFile interface pointer whose methods you use to determine the local and remote file names associated with the error. The ppFile parameter is set to NULL if the error is not associated with the local or remote file. When done, release ppFile.</param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyError.GetErrorDescription(System.UInt32,System.String@)">
            <summary>
            Retrieves the error text associated with the error
            </summary>
            <param name="LanguageId">Identifies the locale to use to generate the description. To create the language identifier, use the MAKELANGID macro.</param>
            <param name="pErrorDescription">Null-terminated string that contains the error text associated with the error. Call the CoTaskMemFree function to free ppErrorDescription when done.</param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyError.GetErrorContextDescription(System.UInt32,System.String@)">
            <summary>
            Retrieves a description of the context in which the error occurred
            </summary>
            <param name="LanguageId">Identifies the locale to use to generate the description. To create the language identifier, use the MAKELANGID macro.</param>
            <param name="pContextDescription">Null-terminated string that contains the description of the context in which the error occurred. Call the CoTaskMemFree function to free ppContextDescription when done. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyError.GetProtocol(System.String@)">
            <summary>
            Retrieves the protocol used to transfer the file
            </summary>
            <param name="pProtocol">Null-terminated string that contains the protocol used to transfer the file. The string contains http for the HTTP protocol and file for the SMB protocol. The ppProtocol parameter is set to NULL if the error is not related to the transfer protocol. Call the CoTaskMemFree function to free ppProtocol when done. </param>
        </member>
        <member name="T:NewsComponents.Net.IEnumBackgroundCopyJobs">
            <summary>
            Use the IEnumBackgroundCopyJobs interface to enumerate the list 
            of jobs in the transfer queue. To get an IEnumBackgroundCopyJobs 
            interface pointer, call the IBackgroundCopyManager::EnumJobs method
            </summary>
        </member>
        <member name="M:NewsComponents.Net.IEnumBackgroundCopyJobs.Next(System.UInt32,NewsComponents.Net.IBackgroundCopyJob@,System.UInt32@)">
            <summary>
            Retrieves a specified number of items in the enumeration sequence
            </summary>
            <param name="celt">Number of elements requested. </param>
            <param name="rgelt">Array of IBackgroundCopyJob objects. You must release each object in rgelt when done. </param>
            <param name="pceltFetched">Number of elements returned in rgelt. You can set pceltFetched to NULL if celt is one. Otherwise, initialize the value of pceltFetched to 0 before calling this method.</param>
        </member>
        <member name="M:NewsComponents.Net.IEnumBackgroundCopyJobs.Skip(System.UInt32)">
            <summary>
            Skips a specified number of items in the enumeration sequence
            </summary>
            <param name="celt">Number of elements to skip. </param>
        </member>
        <member name="M:NewsComponents.Net.IEnumBackgroundCopyJobs.Reset">
            <summary>
            Resets the enumeration sequence to the beginning.
            </summary>
        </member>
        <member name="M:NewsComponents.Net.IEnumBackgroundCopyJobs.Clone(NewsComponents.Net.IEnumBackgroundCopyJobs@)">
            <summary>
            Creates another enumerator that contains the same 
            enumeration state as the current one
            </summary>
            <param name="ppenum">Receives the interface pointer to the enumeration object. If the method is unsuccessful, the value of this output variable is undefined. You must release ppEnumJobs when done.</param>
        </member>
        <member name="M:NewsComponents.Net.IEnumBackgroundCopyJobs.GetCount(System.UInt32@)">
            <summary>
            Returns the number of items in the enumeration
            </summary>
            <param name="puCount">Number of jobs in the enumeration.</param>
        </member>
        <member name="T:NewsComponents.Net.IEnumBackgroundCopyFiles">
            <summary>
            Use the IEnumBackgroundCopyFiles interface to enumerate the files 
            that a job contains. To get an IEnumBackgroundCopyFiles interface 
            pointer, call the IBackgroundCopyJob::EnumFiles method
            </summary>
        </member>
        <member name="M:NewsComponents.Net.IEnumBackgroundCopyFiles.Next(System.UInt32,NewsComponents.Net.IBackgroundCopyFile@,System.UInt32@)">
            <summary>
            Retrieves a specified number of items in the enumeration sequence
            </summary>
            <param name="celt">Number of elements requested. </param>
            <param name="rgelt">Array of IBackgroundCopyFile objects. You must release each object in rgelt when done.</param>
            <param name="pceltFetched">Number of elements returned in rgelt. You can set pceltFetched to NULL if celt is one. Otherwise, initialize the value of pceltFetched to 0 before calling this method. </param>
        </member>
        <member name="M:NewsComponents.Net.IEnumBackgroundCopyFiles.Skip(System.UInt32)">
            <summary>
            Skips a specified number of items in the enumeration sequence
            </summary>
            <param name="celt">Number of elements to skip.</param>
        </member>
        <member name="M:NewsComponents.Net.IEnumBackgroundCopyFiles.Reset">
            <summary>
            Resets the enumeration sequence to the beginning
            </summary>
        </member>
        <member name="M:NewsComponents.Net.IEnumBackgroundCopyFiles.Clone(NewsComponents.Net.IEnumBackgroundCopyFiles@)">
            <summary>
            Creates another enumerator that contains the same 
            enumeration state as the current enumerator
            </summary>
            <param name="ppenum">Receives the interface pointer to the enumeration object. If the method is unsuccessful, the value of this output variable is undefined. You must release ppEnumFiles when done.</param>
        </member>
        <member name="M:NewsComponents.Net.IEnumBackgroundCopyFiles.GetCount(System.UInt32@)">
            <summary>
            Retrieves the number of items in the enumeration
            </summary>
            <param name="puCount">Number of files in the enumeration.</param>
        </member>
        <member name="T:NewsComponents.Net.IBackgroundCopyFile">
            <summary>
             The IBackgroundCopyFile interface contains information about a file 
             that is part of a job. For example, you can use the interfaces methods
             to retrieve the local and remote names of the file and transfer progress
             information
            </summary>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyFile.GetRemoteName(System.String@)">
            <summary>
            Retrieves the remote name of the file
            </summary>
            <param name="pVal">Null-terminated string that contains the remote name of the file to transfer. The name is fully qualified. Call the CoTaskMemFree function to free ppName when done. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyFile.GetLocalName(System.String@)">
            <summary>
            Retrieves the local name of the file
            </summary>
            <param name="pVal">Null-terminated string that contains the name of the file on the client. The name is fully qualified. Call the CoTaskMemFree function to free ppName when done. </param>
        </member>
        <member name="M:NewsComponents.Net.IBackgroundCopyFile.GetProgress(NewsComponents.Net._BG_FILE_PROGRESS@)">
            <summary>
            Retrieves the progress of the file transfer
            </summary>
            <param name="pVal">Structure whose members indicate the progress of the file transfer. For details on the type of progress information available, see the BG_FILE_PROGRESS structure.</param>
        </member>
        <member name="T:NewsComponents.Net.BG_AUTH_SCHEME">
            <summary>
            Authentication scheme used for the background job
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BG_AUTH_SCHEME.BG_AUTH_SCHEME_BASIC">
            <summary>
            Basic is a scheme in which the user name and password are sent in clear-text to the server or proxy. 
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BG_AUTH_SCHEME.BG_AUTH_SCHEME_DIGEST">
            <summary>
            Digest is a challenge-response scheme that uses a server-specified data string for the challenge.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BG_AUTH_SCHEME.BG_AUTH_SCHEME_NTLM">
            <summary>
            Windows NT LAN Manager (NTLM) is a challenge-response scheme that uses the credentials of the user for authentication in a Windows network environment.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BG_AUTH_SCHEME.BG_AUTH_SCHEME_NEGOTIATE">
            <summary>
            Simple and Protected Negotiation protocol (Snego) is a challenge-response scheme that negotiates with the server or proxy to determine which scheme to use for authentication. Examples are the Kerberos protocol, Secure Socket Layer (SSL), and NTLM. 
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BG_AUTH_SCHEME.BG_AUTH_SCHEME_PASSPORT">
            <summary>
            Passport is a centralized authentication service provided by Microsoft that offers a single logon for member sites.
            </summary>
        </member>
        <member name="T:NewsComponents.Net.BG_AUTH_TARGET">
            <summary>
            The location from which to download the code.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BG_AUTH_TARGET.BG_AUTH_TARGET_SERVER">
            <summary>
            Use credentials for server requests. 
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BG_AUTH_TARGET.BG_AUTH_TARGET_PROXY">
            <summary>
            Use credentials for proxy requests. 
            </summary>
        </member>
        <member name="T:NewsComponents.Net.BG_JOB_STATE">
            <summary>
            The BG_JOB_STATE enumeration type defines constant values for the 
            different states of a job
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BG_JOB_STATE.BG_JOB_STATE_QUEUED">
            <summary>
            Specifies that the job is in the queue and waiting to run. 
            If a user logs off while their job is transferring, the job 
            transitions to the queued state
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BG_JOB_STATE.BG_JOB_STATE_CONNECTING">
            <summary>
            Specifies that BITS is trying to connect to the server. If the 
            connection succeeds, the state of the job becomes 
            BG_JOB_STATE_TRANSFERRING; otherwise, the state becomes 
            BG_JOB_STATE_TRANSIENT_ERROR
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BG_JOB_STATE.BG_JOB_STATE_TRANSFERRING">
            <summary>
            Specifies that BITS is transferring data for the job
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BG_JOB_STATE.BG_JOB_STATE_SUSPENDED">
            <summary>
            Specifies that the job is suspended (paused)
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BG_JOB_STATE.BG_JOB_STATE_ERROR">
            <summary>
            Specifies that a non-recoverable error occurred (the service is 
            unable to transfer the file). When the error can be corrected, 
            such as an access-denied error, call the IBackgroundCopyJob::Resume 
            method after the error is fixed. However, if the error cannot be 
            corrected, call the IBackgroundCopyJob::Cancel method to cancel 
            the job, or call the IBackgroundCopyJob::Complete method to accept 
            the portion of a download job that transferred successfully.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BG_JOB_STATE.BG_JOB_STATE_TRANSIENT_ERROR">
            <summary>
            Specifies that a recoverable error occurred. The service tries to 
            recover from the transient error until the retry time value that 
            you specify using the IBackgroundCopyJob::SetNoProgressTimeout method 
            expires. If the retry time expires, the job state changes to 
            BG_JOB_STATE_ERROR
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BG_JOB_STATE.BG_JOB_STATE_TRANSFERRED">
            <summary>
            Specifies that your job was successfully processed
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BG_JOB_STATE.BG_JOB_STATE_ACKNOWLEDGED">
            <summary>
            Specifies that you called the IBackgroundCopyJob::Complete method 
            to acknowledge that your job completed successfully
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BG_JOB_STATE.BG_JOB_STATE_CANCELLED">
            <summary>
            Specifies that you called the IBackgroundCopyJob::Cancel method to 
            cancel the job (remove the job from the transfer queue)
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BG_JOB_STATE.BG_JOB_STATE_UPDATE_AVAILABLE">
            <summary>
            This is custom state not provided by BITS to indicate that an Update
            is available for the application.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BG_JOB_STATE.BG_JOB_STATE_VALIDATION_SUCCESS">
            <summary>
            This is custom state not provided by BITS to indicate that an validation
            of the application files was successful.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BG_JOB_STATE.BG_JOB_STATE_VALIDATION_FAILED">
            <summary>
            This is custom state not provided by BITS to indicate that an validation
            of the application files was failed.
            </summary>
        </member>
        <member name="T:NewsComponents.Net.BG_JOB_TYPE">
            <summary>
            The BG_JOB_TYPE enumeration type defines constant values that you 
            use to specify the type of transfer job, such as download
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BG_JOB_TYPE.BG_JOB_TYPE_DOWNLOAD">
            <summary>
            Specifies that the job downloads files to the client
            </summary>
        </member>
        <member name="T:NewsComponents.Net.BG_JOB_NOTIFICATION_TYPE">
            <summary>
            Used for the SetNotifyFlags method.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BG_JOB_NOTIFICATION_TYPE.BG_NOTIFY_JOB_TRANSFERRED">
            <summary>
            All of the files in the job have been transferred.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BG_JOB_NOTIFICATION_TYPE.BG_NOTIFY_JOB_ERROR">
            <summary>
            An error has occurred.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BG_JOB_NOTIFICATION_TYPE.BG_NOTIFY_DISABLE">
            <summary>
            Event notification is disabled. BITS ignores the other flags.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BG_JOB_NOTIFICATION_TYPE.BG_NOTIFY_JOB_MODIFICATION">
            <summary>
            The job has been modified. For example, a property value changed, the state of the job changed, or progress is made transferring the files. This flag is ignored if command line notification is specified.
            </summary>
        </member>
        <member name="T:NewsComponents.Net.BG_JOB_PROXY_USAGE">
            <summary>
            The BG_JOB_PROXY_USAGE enumeration type defines constant values 
            that you use to specify which proxy to use for file transfers
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BG_JOB_PROXY_USAGE.BG_JOB_PROXY_USAGE_PRECONFIG">
            <summary>
            Use the proxy and proxy bypass list settings defined by each 
            user to transfer files
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BG_JOB_PROXY_USAGE.BG_JOB_PROXY_USAGE_NO_PROXY">
            <summary>
            Do not use a proxy to transfer files
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BG_JOB_PROXY_USAGE.BG_JOB_PROXY_USAGE_OVERRIDE">
            <summary>
            Use the application's proxy and proxy bypass list to transfer files
            </summary>
        </member>
        <member name="T:NewsComponents.Net.BG_JOB_PRIORITY">
            <summary>
            The BG_JOB_PRIORITY enumeration type defines the constant values 
            that you use to specify the priority level of the job
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BG_JOB_PRIORITY.BG_JOB_PRIORITY_FOREGROUND">
            <summary>
            Transfers the job in the foreground
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BG_JOB_PRIORITY.BG_JOB_PRIORITY_HIGH">
            <summary>
            Transfers the job in the background. This is the highest background 
            priority level. 
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BG_JOB_PRIORITY.BG_JOB_PRIORITY_NORMAL">
            <summary>
            Transfers the job in the background. This is the default priority 
            level for a job
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BG_JOB_PRIORITY.BG_JOB_PRIORITY_LOW">
            <summary>
            Transfers the job in the background. This is the lowest background 
            priority level
            </summary>
        </member>
        <member name="T:NewsComponents.Net.BG_AUTH_CREDENTIALS">
            <summary>
            The BG_AUTH_CREDENTIALS structure identifies the target (proxy or server), authentication scheme, and the user's credentials to use for user authentication requests. The structure is passed to the IBackgroundCopyJob2::SetCredentials method.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BG_AUTH_CREDENTIALS.Target">
            <summary>
            Identifies whether to use the credentials for a proxy or server authentication request. For a list of values, see the BG_AUTH_TARGET enumeration.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BG_AUTH_CREDENTIALS.Scheme">
            <summary>
            Identifies the scheme to use for authentication (for example, Basic or NTLM). For a list of values, see the BG_AUTH_SCHEME enumeration. 
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BG_AUTH_CREDENTIALS.Credentials">
            <summary>
            Identifies the credentials to use for the specified authentication scheme. For details, see the BG_AUTH_CREDENTIALS_UNION union.
            </summary>
        </member>
        <member name="T:NewsComponents.Net.BG_AUTH_CREDENTIALS_UNION">
            <summary>
            The BG_AUTH_CREDENTIALS_UNION union identifies the credentials to use for the authentication scheme specified in the BG_AUTH_CREDENTIALS structure.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BG_AUTH_CREDENTIALS_UNION.Basic">
            <summary>
            Identifies the user name and password of the user to authenticate. For details, see the BG_BASIC_CREDENTIALS structure.
            </summary>
        </member>
        <member name="T:NewsComponents.Net.BG_BASIC_CREDENTIALS">
            <summary>
            The BG_BASIC_CREDENTIALS structure identifies the user name and password to authenticate.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BG_BASIC_CREDENTIALS.UserName">
            <summary>
            Null-terminated string that contains the user name to authenticate. The user name is limited to 300 characters, not including the null terminator. The format of the user name depends on the authentication scheme requested. For example, for Basic, NTLM, and Negotiate authentication, the user name is of the form "domain\user name" or "user name". For Passport authentication, the user name is an e-mail address. If NULL, default credentials for this session context are used. 
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BG_BASIC_CREDENTIALS.Password">
            <summary>
            Null-terminated string that contains the password in clear-text. The password is limited to 300 characters, not including the null terminator. The password can be blank. Set to NULL if UserName is NULL. BITS encrypts the password before persisting the job if a network disconnect occurs or the user logs off. 
            </summary>
        </member>
        <member name="T:NewsComponents.Net.BG_ERROR_CONTEXT">
            <summary>
            The BG_ERROR_CONTEXT enumeration type defines the constant values 
            that specify the context in which the error occurred
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BG_ERROR_CONTEXT.BG_ERROR_CONTEXT_NONE">
            <summary>
            An error has not occurred
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BG_ERROR_CONTEXT.BG_ERROR_CONTEXT_UNKNOWN">
            <summary>
            The error context is unknown
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BG_ERROR_CONTEXT.BG_ERROR_CONTEXT_GENERAL_QUEUE_MANAGER">
            <summary>
            The transfer queue manager generated the error
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BG_ERROR_CONTEXT.BG_ERROR_CONTEXT_QUEUE_MANAGER_NOTIFICATION">
            <summary>
            The error was generated while the queue manager was 
            notifying the client of an event
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BG_ERROR_CONTEXT.BG_ERROR_CONTEXT_LOCAL_FILE">
            <summary>
            The error was related to the specified local file. For example, 
            permission was denied or the volume was unavailable
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BG_ERROR_CONTEXT.BG_ERROR_CONTEXT_REMOTE_FILE">
            <summary>
            The error was related to the specified remote file. 
            For example, the URL is not accessible
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BG_ERROR_CONTEXT.BG_ERROR_CONTEXT_GENERAL_TRANSPORT">
            <summary>
            The transport layer generated the error. These errors are general 
            transport failures; errors not specific to the remote file
            </summary>
        </member>
        <member name="T:NewsComponents.Net._BG_FILE_INFO">
            <summary>
            The BG_FILE_INFO structure provides the local and 
            remote names of the file to transfer
            </summary>
        </member>
        <member name="F:NewsComponents.Net._BG_FILE_INFO.RemoteName">
            <summary>
            Remote Name for the File
            </summary>
        </member>
        <member name="F:NewsComponents.Net._BG_FILE_INFO.LocalName">
            <summary>
            Local Name for the file
            </summary>
        </member>
        <member name="T:NewsComponents.Net._BG_JOB_PROGRESS">
            <summary>
            The BG_JOB_PROGRESS structure provides job-related progress information, 
            such as the number of bytes and files transferred
            </summary>
        </member>
        <member name="F:NewsComponents.Net._BG_JOB_PROGRESS.BytesTotal">
            <summary>
            Total number of bytes to transfer for the job.
            </summary>
        </member>
        <member name="F:NewsComponents.Net._BG_JOB_PROGRESS.BytesTransferred">
            <summary>
            Number of bytes transferred
            </summary>
        </member>
        <member name="F:NewsComponents.Net._BG_JOB_PROGRESS.FilesTotal">
            <summary>
            Total number of files to transfer for this job
            </summary>
        </member>
        <member name="F:NewsComponents.Net._BG_JOB_PROGRESS.FilesTransferred">
            <summary>
            Number of files transferred. 
            </summary>
        </member>
        <member name="T:NewsComponents.Net._BG_JOB_REPLY_PROGRESS">
            <summary>
            The BG_JOB_REPLY_PROGRESS structure provides progress information related to the reply portion of an upload-reply job.
            </summary>
        </member>
        <member name="F:NewsComponents.Net._BG_JOB_REPLY_PROGRESS.BytesTotal">
            <summary>
            Size of the file in bytes. The value is BG_SIZE_UNKNOWN if the reply has not begun. 
            </summary>
        </member>
        <member name="F:NewsComponents.Net._BG_JOB_REPLY_PROGRESS.BytesTransferred">
            <summary>
            Number of bytes transferred. 
            </summary>
        </member>
        <member name="T:NewsComponents.Net._BG_JOB_TIMES">
            <summary>
            The BG_JOB_TIMES structure provides job-related timestamps
            </summary>
        </member>
        <member name="F:NewsComponents.Net._BG_JOB_TIMES.CreationTime">
            <summary>
            Time the job was created
            </summary>
        </member>
        <member name="F:NewsComponents.Net._BG_JOB_TIMES.ModificationTime">
            <summary>
            Time the job was last modified or bytes were transferred
            </summary>
        </member>
        <member name="F:NewsComponents.Net._BG_JOB_TIMES.TransferCompletionTime">
            <summary>
            Time the job entered the BG_JOB_STATE_TRANSFERRED state
            </summary>
        </member>
        <member name="T:NewsComponents.Net._FILETIME">
            <summary>
            This structure is a 64-bit value representing the number of 100-nanosecond intervals since January 1, 1601. 
            </summary>
        </member>
        <member name="F:NewsComponents.Net._FILETIME.dwLowDateTime">
            <summary>
            Specifies the low 32 bits of the file time. 
            </summary>
        </member>
        <member name="F:NewsComponents.Net._FILETIME.dwHighDateTime">
            <summary>
            Specifies the high 32 bits of the file time. 
            </summary>
        </member>
        <member name="T:NewsComponents.Net._BG_FILE_PROGRESS">
            <summary>
            The BG_FILE_PROGRESS structure provides file-related progress information, 
            such as the number of bytes transferred
            </summary>
        </member>
        <member name="F:NewsComponents.Net._BG_FILE_PROGRESS.BytesTotal">
            <summary>
            Size of the file in bytes
            </summary>
        </member>
        <member name="F:NewsComponents.Net._BG_FILE_PROGRESS.BytesTransferred">
            <summary>
            Number of bytes transferred. 
            </summary>
        </member>
        <member name="F:NewsComponents.Net._BG_FILE_PROGRESS.Completed">
            <summary>
            For downloads, the value is TRUE if the file is available to the user; 
            otherwise, the value is FALSE
            </summary>
        </member>
        <member name="T:Tst.TstDictionaryEnumerator">
            <summary>
            Enumerates the elements of a <see cref="T:Tst.TstDictionary"/>.
            </summary>
        </member>
        <member name="M:Tst.TstDictionaryEnumerator.#ctor(Tst.TstDictionary)">
            <summary>Constructs an enumerator over <paramref name="tst"/></summary>
            <param name="tst">dictionary to enumerate.</param>
            <exception cref="T:System.ArgumentNullException">tst is null</exception>
        </member>
        <member name="M:Tst.TstDictionaryEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Tst.TstDictionaryEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; 
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Tst.TstDictionaryEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <value>The current element in the collection.</value>
        </member>
        <member name="P:Tst.TstDictionaryEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <value>The current element in the collection.</value>	
        </member>
        <member name="P:Tst.TstDictionaryEnumerator.Entry">
            <summary>
            Gets both the key and the value of the current dictionary entry.
            </summary>
            <value>
            A <see cref="T:System.Collections.DictionaryEntry"/> containing both the key and the value of the current 
            dictionary entry.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first entry of the dictionary or after the last entry. 
            </exception>
        </member>
        <member name="P:Tst.TstDictionaryEnumerator.Key">
            <summary>
            Gets the key of the current dictionary entry.
            </summary>
            <value>
            The key of the current element of the enumeration.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first entry of the dictionary or after the last entry. 
            </exception>	
        </member>
        <member name="P:Tst.TstDictionaryEnumerator.System#Collections#IDictionaryEnumerator#Key">
            <summary>
            Gets the key of the current dictionary entry.
            </summary>
            <value>
            The key of the current element of the enumeration.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first entry of the dictionary or after the last entry. 
            </exception>		
        </member>
        <member name="P:Tst.TstDictionaryEnumerator.Value">
            <summary>
            Gets the value of the current dictionary entry.
            </summary>
            <value>
            The value of the current element of the enumeration.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first entry of the dictionary or after the last entry. 
            </exception>		
        </member>
        <member name="T:NewsComponents.Utils.DateTimeExt">
            <summary>
            DateTimeExt is able to parse RFC2822/RFC822 formatted dates.
            </summary>
        </member>
        <member name="M:NewsComponents.Utils.DateTimeExt.ToDateTime(System.String)">
            <summary>
            Converts an ISO 8601 date to a DateTime object. Helper method needed to 
            deal with timezone offset since they are unsupported by the 
            .NET Framework. 
            </summary>
            <param name="datetime">DateTime string</param>
            <returns>DateTime instance</returns>
            <exception cref="T:System.FormatException">On format errors parsing the datetime</exception>
            <remarks>
            See also W3C note at: http://www.w3.org/TR/NOTE-datetime
            </remarks>
        </member>
        <member name="M:NewsComponents.Utils.DateTimeExt.Parse(System.String)">
            <summary>
            Parse is able to parse RFC2822/RFC822 formatted dates.
            It has a fallback mechanism: if the string does not match,
            the normal DateTime.Parse() function is called.
            </summary>
            <param name="dateTimeString">DateTime String to parse</param>
            <returns>DateTime instance with date and time converted to Universal Time</returns>
            <exception cref="T:System.FormatException">On format errors parsing the datetime</exception>
        </member>
        <member name="M:NewsComponents.Utils.DateTimeExt.DateAsInteger(System.DateTime)">
            <summary>
            returns a date as integer in the format YYYYMMDD.
            </summary>
            <param name="date">The date.</param>
            <returns>int</returns>
        </member>
        <member name="T:NewsComponents.Search.BooleanSearch.FileDocument">
            <summary>
            FileDocument is a concrete, lightweight implementation of IDocument
            for searching plain-text file-based resources.
            </summary>
        </member>
        <member name="T:NewsComponents.Net.RequestState">
            <summary>
            Summary description for RequestState.
            </summary>
        </member>
        <member name="T:NewsComponents.Net.HttpDownloader">
            <summary>
            This downloader uses HTTP to download files.
            </summary>
        </member>
        <member name="T:NewsComponents.IDownloader">
            <summary>
            Defines the contract that all downloaders must implement
            to be used as an updater downloader.
            </summary>
        </member>
        <member name="M:NewsComponents.IDownloader.Download(NewsComponents.Net.DownloadTask,System.TimeSpan)">
            <summary>
            Performs the synchronous download of the files specified in the manifest.
            </summary>
            <param name="task">The associated <see cref="T:NewsComponents.Net.DownloadTask"/> that holds a reference to the manifest to process</param>
            <param name="maxWaitTime">A time span indicating the maximum period of time to wait for a download. 
            An exception must be thrown if this period is exeeded.</param>
        </member>
        <member name="M:NewsComponents.IDownloader.BeginDownload(NewsComponents.Net.DownloadTask)">
            <summary>
            Initiates the asynchronous download of the files specified in the manifest.
            </summary>
            <param name="task">The associated <see cref="T:NewsComponents.Net.DownloadTask"/> that holds a reference to the manifest to process.</param>
        </member>
        <member name="M:NewsComponents.IDownloader.CancelDownload(NewsComponents.Net.DownloadTask)">
            <summary>
            Terminates or cancels an unfinished asynchronous download.
            </summary>
            <param name="task">The associated <see cref="T:NewsComponents.Net.DownloadTask"/> that holds a reference to the manifest to process</param>
            <returns>Returns true if the task was canceled.</returns>
        </member>
        <member name="E:NewsComponents.IDownloader.DownloadProgress">
            <summary>
            Notifies about the download progress for the update.
            </summary>
        </member>
        <member name="E:NewsComponents.IDownloader.DownloadStarted">
            <summary>
            Notifies that the downloading for an DownloadTask has started.
            </summary>
        </member>
        <member name="E:NewsComponents.IDownloader.DownloadCompleted">
            <summary>
            Notifies that the downloading for an DownloadTask has finished.
            </summary>
        </member>
        <member name="E:NewsComponents.IDownloader.DownloadError">
            <summary>
            Notifies that an error ocurred while downloading the files for an DownloadTask.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.HttpDownloader.currentTask">
            <summary>
            An IDownloader is only associated with a single DownloadTask. 
            </summary>
        </member>
        <member name="F:NewsComponents.Net.HttpDownloader.state">
            <summary>
            The current state of the download task
            </summary>
        </member>
        <member name="M:NewsComponents.Net.HttpDownloader.OnDownloadStarted(NewsComponents.Net.TaskEventArgs)">
            <summary>
            Helper method to fire the event.
            </summary>
            <param name="e">The event information.</param>
        </member>
        <member name="M:NewsComponents.Net.HttpDownloader.OnDownloadProgress(NewsComponents.Net.DownloadTaskProgressEventArgs)">
            <summary>
            Helper method to fire the event.
            </summary>
            <param name="e">The event information.</param>
        </member>
        <member name="M:NewsComponents.Net.HttpDownloader.OnDownloadCompleted(NewsComponents.Net.TaskEventArgs)">
            <summary>
            Helper method to fire the event.
            </summary>
            <param name="e">The event information.</param>
        </member>
        <member name="M:NewsComponents.Net.HttpDownloader.OnDownloadError(NewsComponents.Net.DownloadTaskErrorEventArgs)">
            <summary>
            Helper method to fire the event.
            </summary>
            <param name="e">The event information.</param>
        </member>
        <member name="M:NewsComponents.Net.HttpDownloader.Download(NewsComponents.Net.DownloadTask,System.TimeSpan)">
            <summary>
            Synchronous download method implementation.
            </summary>
            <param name="task">The DownloadTask to process.</param>
            <param name="maxWaitTime">The maximum wait time.</param>
        </member>
        <member name="M:NewsComponents.Net.HttpDownloader.BeginDownload(NewsComponents.Net.DownloadTask)">
            <summary>
            Asynchronous download method implementation.
            </summary>
            <param name="task">The DownloadTask to process.</param>
        </member>
        <member name="M:NewsComponents.Net.HttpDownloader.CancelDownload(NewsComponents.Net.DownloadTask)">
            <summary>
            Terminates or cancels an unfinished asynchronous download.
            </summary>
            <param name="task">The associated <see cref="T:NewsComponents.Net.DownloadTask"/> that holds a reference to the manifest to process</param>
            <returns>Returns true if the task was cancelled.</returns>
        </member>
        <member name="M:NewsComponents.Net.HttpDownloader.Dispose">
            <summary>
            Allows graceful cleanup of hard resources
            </summary>
        </member>
        <member name="M:NewsComponents.Net.HttpDownloader.Dispose(System.Boolean)">
            <summary>
            used by externally visible overload.
            </summary>
            <param name="isDisposing">whether or not to clean up managed + unmanaged/large (true) or just unmanaged(false)</param>
        </member>
        <member name="M:NewsComponents.Net.HttpDownloader.Finalize">
            <summary>
            Destructor/Finalizer
            </summary>
        </member>
        <member name="M:NewsComponents.Net.HttpDownloader.OnRequestStart(System.Uri,System.Boolean@)">
            <summary>
            Notification that the download of the file has started. 
            </summary>
            <param name="requestUri"></param>
            <param name="cancel"></param>
        </member>
        <member name="M:NewsComponents.Net.HttpDownloader.OnRequestException(System.Uri,System.Exception,System.Int32)">
            <summary>
            Called, if the web request caused an exception, that is not yet handled by the class itself.
            </summary>
        </member>
        <member name="M:NewsComponents.Net.HttpDownloader.OnRequestComplete(System.Uri,System.IO.Stream,System.Uri,System.String,System.DateTime,NewsComponents.Net.RequestResult,System.Int32)">
            <summary>
            Called on every queued request, when the real fetch is finished.
            </summary>
        </member>
        <member name="M:NewsComponents.Net.HttpDownloader.OnRequestProgress(System.Uri,System.Int64)">
            <summary>
            Called infrequently as bytes are transferred for the file. 
            </summary>
        </member>
        <member name="E:NewsComponents.Net.HttpDownloader.DownloadProgress">
            <summary>
            Notifies the application of the download progress. 
            </summary>
        </member>
        <member name="E:NewsComponents.Net.HttpDownloader.DownloadCompleted">
            <summary>
            Notifies the application when the download is complete.
            </summary>
        </member>
        <member name="E:NewsComponents.Net.HttpDownloader.DownloadError">
            <summary>
            Notifies the application when there is a download error. 
            </summary>
        </member>
        <member name="E:NewsComponents.Net.HttpDownloader.DownloadStarted">
            <summary>
            Notifies the application that the download has started. 
            </summary>
        </member>
        <member name="T:NewsComponents.Net.AutomaticProxy">
            <summary>
            AutomaticProxy: class handles auto-configuration of the web proxy.
            </summary>
        </member>
        <member name="M:NewsComponents.Net.AutomaticProxy.GetProxy(System.Uri)">
            <summary>
            Returns the URI of a proxy.
            </summary>
            <param name="destination">A <see cref="T:System.Uri"/> specifying the requested Internet resource.</param>
            <returns>
            A <see cref="T:System.Uri"/>
            containing the URI of the proxy used to contact
            <paramref name="destination"/>.
            </returns>
        </member>
        <member name="M:NewsComponents.Net.AutomaticProxy.IsBypassed(System.Uri)">
            <summary>
            Indicates that the proxy should not be used for the specified host.
            </summary>
            <param name="host">The <see cref="T:System.Uri"/> of the host to check for proxy use.</param>
            <returns>
            	<see langword="true "/>if the proxy server should not be used for <paramref name="host"/>;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NewsComponents.Net.AutomaticProxy.GetProxyFromIESettings">
            <summary>
            Extends the WebProxy.GetDefaultProxy() method by adding also
            the dynamic proxy settings, if possible.
            </summary>
            <returns>AutomaticProxy</returns>
        </member>
        <member name="M:NewsComponents.Net.AutomaticProxy.CheckAndRefreshInfos">
            <summary>
            Because we cannot "listen" to registry key changes for now,
            we poll in regular intervals for IE proxy config changes.
            </summary>
        </member>
        <member name="P:NewsComponents.Net.AutomaticProxy.Credentials">
            <summary>
            The credentials to submit to the proxy server for authentication.
            </summary>
            <value></value>
        </member>
        <member name="P:NewsComponents.Net.AutomaticProxy.AutoDetectSettings">
            <summary>
            Gets/Set a boolean to control the ability to automatically detect 
            the proxy-server settings or automatic configuration settings.
            </summary>
        </member>
        <member name="P:NewsComponents.Net.AutomaticProxy.ConfigScriptAddress">
            <summary>
            Gets/Set the proxy configuration script address Url.
            </summary>
        </member>
        <member name="P:NewsComponents.Net.AutomaticProxy.AutoConfigurationPossible">
            <summary>
            Returns true, if Proxy Auto-Config functionality is available
            </summary>
        </member>
        <member name="M:NewsComponents.Net.Interop.WinHttpCheckPlatform">
            <summary>
            The WinHttpCheckPlatform function determines whether the 
            current platform is supported by this version of 
            Microsoft Windows HTTP Services (WinHTTP).
            </summary>
            <returns>
            Returns TRUE if the platform is supported by 
            Microsoft Windows HTTP Services (WinHTTP), or FALSE otherwise.
            </returns>
        </member>
        <member name="M:NewsComponents.Net.Interop.WinHttpGetIEProxyConfigForCurrentUser(NewsComponents.Net.Interop.WINHTTP_CURRENT_USER_IE_PROXY_CONFIG@)">
            <summary>
            The WinHttpGetIEProxyConfigForCurrentUser function obtains the 
            Internet Explorer proxy configuration for the current user.
            </summary>
            <param name="pProxyConfig">WINHTTP_CURRENT_USER_IE_PROXY_CONFIG structure</param>
            <returns>Returns TRUE if successful, or FALSE otherwise. 
            For extended error information, call Marshal.GetLastWin32Error().</returns>
        </member>
        <member name="T:NewsComponents.Feed.FeedLocationMethod">
            <summary>
            Feed Location Methods
            </summary>
        </member>
        <member name="F:NewsComponents.Feed.FeedLocationMethod.AutoDiscoverUrl">
            <summary>
            RSS location algorithm described by Mark Pilgrim
            </summary>
        </member>
        <member name="F:NewsComponents.Feed.FeedLocationMethod.Syndic8Search">
            <summary>
            Syndic8 service request
            </summary>
        </member>
        <member name="T:NewsComponents.Feed.RssLocater">
            <summary>
            This class implements the RSS location algorithm described by Mark Pilgrim at 
            http://diveintomark.org/archives/2002/08/15/ultraliberal_rss_locator.html
            </summary>
        </member>
        <member name="F:NewsComponents.Feed.RssLocater.proxy">
            <summary>
            Proxy server information used for connections when fetching feeds. 
            </summary>
        </member>
        <member name="F:NewsComponents.Feed.RssLocater.offline">
            <summary>
            Indicates whether the application is offline or not. 
            </summary>
        </member>
        <member name="M:NewsComponents.Feed.RssLocater.UrlFromFeedProtocolUrl(System.String)">
            <summary>
            Detect, if the url contains the 'feed:' uri scheme. If so, it just remove it
            to prepare a valid web url.
            </summary>
            <param name="webUrl">Url to mangle</param>
            <returns>Mangled Url</returns>
        </member>
        <member name="M:NewsComponents.Feed.RssLocater.UrlsFromWellknownListener(System.String)">
            <summary>
            Examines the provided webUrl for wellknown local listeners
            </summary>
            <param name="webUrl">Url string to examine</param>
            <returns>ArrayList with the found Urls (strings), or an empty ArrayList</returns>
            <remarks>
            Examine the link:
            we try to find out if someone provides a link to import
            a feed or feedlist to Userland, AmphetaDesk, Awasu etc. (Local HTTP Listeners)
            A good reference about all these is:
            http://xml.mfd-consult.dk/syn-sub/?rss=http://www22.brinkster.com/rendelmann/db/net.rss.xml
            (with my blog feed as an example ;-).
            These links are of the form (Userland):
            <code>http://127.0.0.1:5335/system/pages/subscriptions?url=&lt;FEED_URL&gt;</code>
            or (Amphetadesk, see also <a href="http://www.disobey.com/amphetadesk/website_integration.html">Website integration</a>):
            <code> 
            http://127.0.0.1:8888/index.html?add_url=&lt;FEED_URL>
            http://127.0.0.1:8888/index.html?add_urls=&lt;FEED_URL1>,&lt;FEED_URL2>,...
            http://127.0.0.1:8888/index.html?add_url=&lt;OPML_URL>
            </code>
            </remarks>
        </member>
        <member name="M:NewsComponents.Feed.RssLocater.#ctor">
            <summary>
            Creates a new <see cref="T:NewsComponents.Feed.RssLocater"/> instance.
            </summary>
        </member>
        <member name="M:NewsComponents.Feed.RssLocater.#ctor(System.Net.IWebProxy,System.String)">
            <summary>
            Creates a new <see cref="T:NewsComponents.Feed.RssLocater"/> instance.
            </summary>
            <param name="p">P.</param>
        </member>
        <member name="M:NewsComponents.Feed.RssLocater.#ctor(System.Net.IWebProxy,System.String,System.Net.ICredentials)">
            <summary>
            Creates a new <see cref="T:NewsComponents.Feed.RssLocater"/> instance.
            </summary>
            <param name="p">WebProxy.</param>
            <param name="userAgent">The user agent.</param>
            <param name="credentials">The credentials.</param>
        </member>
        <member name="M:NewsComponents.Feed.RssLocater.GetRssFeedsForUrlContent(System.String,System.String,System.Boolean)">
            <summary>
            Examines the contents of the specified URL looking for 
            potential RSS feeds.
            </summary>
            <param name="url">URL.</param>
            <param name="content">Content.</param>
            <param name="deepSearch">Deep search.</param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Feed.RssLocater.GetRssFeedsForUrl(System.String,System.Boolean)">
            <summary>
            Gets the RSS feeds for URL.
            </summary>
            <param name="url">URL.</param>
            <param name="throwExceptions">if set to <c>true</c> [throw exceptions].</param>
            <returns></returns>
            <remarks>
            If the URL is not available or down, returns an empty ArrayList.
            </remarks>
        </member>
        <member name="M:NewsComponents.Feed.RssLocater.GetRssAutoDiscoveryLinks(System.String)">
            <summary>
            Gets the RSS auto discovery links from the specified URL.
            </summary>
            <param name="url">URL.</param>
            <returns></returns>
        </member>
        <member name="P:NewsComponents.Feed.RssLocater.Credentials">
            <summary>
            Gets or sets the credentials.
            </summary>
            <value>The credentials.</value>
        </member>
        <member name="P:NewsComponents.Feed.RssLocater.Proxy">
            <summary>
            Proxy server information used for connections when fetching feeds. 
            </summary>
        </member>
        <member name="P:NewsComponents.Feed.RssLocater.Offline">
            <summary>
            Indicates whether the application is offline or not. 
            </summary>
        </member>
        <member name="T:NewsComponents.Feed.RssLocater.FeedUrlSearchType">
            <summary>
            Enum used to determine where to search for feed strings
            </summary>
        </member>
        <member name="T:RssBandit.Common.Logging.ProfilerHelper">
            <summary>
             Helps to profile some calls.
            </summary>
            <remarks>
            Usage:
              long secs = 0;
              ProfilerHelper.StartMeasure(ref secs);
              // ... time consuming task here
              Trace.WriteLine(ProfilerHelper.StopMeasureString(secs), "task perf.");
            </remarks>
        </member>
        <member name="T:NewsComponents.Xml.Serialization.CacheKeyFactory">
            <summary>
            The CacheKeyFactory extracts a unique signature
            to identify each instance of an XmlSerializer
            in the cache.
            </summary>
        </member>
        <member name="M:NewsComponents.Xml.Serialization.CacheKeyFactory.MakeKey(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)">
            <summary>
            Creates a unique signature for the passed
            in parameter. MakeKey normalizes array content
            and the content of the XmlAttributeOverrides before
            creating the key.
            </summary>
            <param name="type"></param>
            <param name="overrides"></param>
            <param name="types"></param>
            <param name="root"></param>
            <param name="defaultNamespace"></param>
            <returns></returns>
        </member>
        <member name="T:NewsComponents.Utils.SimpleHyperLink">
            <summary>
            SimpleHyperLink represents a simple HyperLink
            without the overhead of the yet existing class 
            System.Web.UI.WebControls.HyperLink.
            </summary>
        </member>
        <member name="M:NewsComponents.Utils.SimpleHyperLink.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.Utils.SimpleHyperLink"/> class.
            </summary>
            <param name="navigateUrl">The navigate URL.</param>
        </member>
        <member name="M:NewsComponents.Utils.SimpleHyperLink.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.Utils.SimpleHyperLink"/> class.
            </summary>
            <param name="navigateUrl">The navigate URL.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:NewsComponents.Utils.SimpleHyperLink.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.Utils.SimpleHyperLink"/> class.
            </summary>
            <param name="navigateUrl">The navigate URL.</param>
            <param name="text">The text.</param>
            <param name="imageUrl">The image URL.</param>
        </member>
        <member name="M:NewsComponents.Utils.SimpleHyperLink.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/> by
            returning the NavigateUrl;
            </returns>
        </member>
        <member name="P:NewsComponents.Utils.SimpleHyperLink.ImageUrl">
            <summary>
            Gets or sets the image URL.
            </summary>
            <value>The image URL.</value>
        </member>
        <member name="P:NewsComponents.Utils.SimpleHyperLink.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:NewsComponents.Utils.SimpleHyperLink.NavigateUrl">
            <summary>
            Gets or sets the navigate URL.
            </summary>
            <value>The navigate URL.</value>
        </member>
        <member name="T:NewsComponents.Net.RequestThread">
            <summary>
            RequestThread runs a thread to manage queued requests. 
            </summary>
        </member>
        <member name="F:NewsComponents.Net.RequestThread._maxRequests">
            <summary>
            Maximum number of concurrent async requests.
            For debugging multithreaded problems, set this to 1 (one). 
            Please remember: it can also be updated by the RssBandit.exe.config file!
            </summary>
        </member>
        <member name="F:NewsComponents.Net.RequestThread._waitingRequests">
            <summary>Queue of all the requests waiting to be executed.</summary>
        </member>
        <member name="F:NewsComponents.Net.RequestThread._runningRequests">
            <summary>Number of requests currently active.</summary>
        </member>
        <member name="F:NewsComponents.Net.RequestThread.myAsyncWebRequest">
            <summary>
            The AsyncWebRequest associated with this object. 
            </summary>
        </member>
        <member name="M:NewsComponents.Net.RequestThread.#ctor(NewsComponents.Net.AsyncWebRequest)">
            <summary>Initialize the request thread.</summary>
        </member>
        <member name="T:NewsComponents.Net.RequestThread2">
            <summary>
            RequestThread is an alternative to PriorityThreadPool. It just start one
            Thread (initiator), that runs only if any worker thread that is activated 
            after calling async method WebRequest.BeginGetResponse()
            finishes or throws an exeption. So they have to call Monitor.Pulse via 
            RequestThread.EndRequest tomake it work correctly.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.RequestThread2._maxRequests">
            <summary>
            Maximum number of concurrent async requests.
            For debugging multithreaded problems, set this to 1 (one). 
            Please remember: it can also be updated by the RssBandit.exe.config file!
            </summary>
        </member>
        <member name="F:NewsComponents.Net.RequestThread2._waitingRequests">
            <summary>Queue of all the requests waiting to be executed.</summary>
        </member>
        <member name="F:NewsComponents.Net.RequestThread2._runningRequests">
            <summary>Number of requests currently active.</summary>
        </member>
        <member name="M:NewsComponents.Net.RequestThread2.#cctor">
            <summary>Initialize the request thread.</summary>
        </member>
        <member name="T:NewsComponents.IDownloadInfoProvider">
            <summary>
            Provides some of the file independent information needed to download a file. 
            </summary>
        </member>
        <member name="M:NewsComponents.IDownloadInfoProvider.GetTargetFolder(NewsComponents.Net.DownloadItem)">
            <summary>
            Retrieves the target folder for a particular DownloadItem
            </summary>
            <param name="item">The item being downloaded</param>
            <returns>The target folder to download the file to</returns>
        </member>
        <member name="M:NewsComponents.IDownloadInfoProvider.GetCredentials(NewsComponents.Net.DownloadItem)">
            <summary>
            Retrieves the credentials needed for accessing a particular DownloadItem
            </summary>
            <param name="item">The item being dowbloaded</param>
            <returns>The credentials needed to access the item</returns>
        </member>
        <member name="P:NewsComponents.IDownloadInfoProvider.Proxy">
            <summary>
            The proxy that must be used when accessing the Web
            </summary>
        </member>
        <member name="P:NewsComponents.IDownloadInfoProvider.InitialDownloadLocation">
            <summary>
            This is the location where BITS should temporarily download files until moving them to 
            TargetFolder on completion. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:NewsComponents.BackgroundDownloadManager">
            <summary>
            Public class that client application uses to operate with the 
            background download manager.
            </summary>
        </member>
        <member name="F:NewsComponents.BackgroundDownloadManager.AsyncTaskKey">
            <summary>
            Key in the task context.
            </summary>
        </member>
        <member name="F:NewsComponents.BackgroundDownloadManager.asyncWebRequest">
            <summary>
            Used for making asynchronous Web requests by HttpDownloader instances
            </summary>
        </member>
        <member name="F:NewsComponents.BackgroundDownloadManager.applicationId">
            <summary>
            The applicationID the updater instance is for.
            </summary>
        </member>
        <member name="F:NewsComponents.BackgroundDownloadManager.downloadInfoProvider">
            <summary>
            This is used to provide information about the files being downloaded 
            such as target directory and credentials. 
            </summary>
        </member>
        <member name="F:NewsComponents.BackgroundDownloadManager.downloadResumeMaxWaitTime">
            <summary>
            Maximum time to wait when resuming a pending update
            </summary>
        </member>
        <member name="M:NewsComponents.BackgroundDownloadManager.#ctor(NewsComponents.INewsComponentsConfiguration,NewsComponents.NewsHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.BackgroundDownloadManager"/> class.
            </summary>
            <param name="configuration">The configuration. Used: ApplicationID and UserLocalApplicationDataPath</param>
            <param name="downloadInfoProvider">The IDownloadInfoProvider instance. It is used to 
            request the download informations like proxy or credentials at the time the real
            download is queued.</param>
        </member>
        <member name="M:NewsComponents.BackgroundDownloadManager.#ctor(System.String,NewsComponents.NewsHandler)">
            <summary>
            Constructor initializes class.
            </summary>
            <param name="applicationName">The Application Name or ID that uses the component. 
            This will be used to initialize the user path to store the 
            download registry.</param>
            <param name="downloadInfoProvider">The IDownloadInfoProvider instance. It is used to 
            request the download informations like proxy or credentials at the time the real
            download is queued.</param>
        </member>
        <member name="M:NewsComponents.BackgroundDownloadManager.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:NewsComponents.BackgroundDownloadManager.GetUserPath(System.String)">
            <summary>
            Returns the user path used to store the current feed and cached items.
            </summary>
            <param name="appname">The application name that uses the component.</param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.BackgroundDownloadManager.GetRelevantHttpHeaders(NewsComponents.Net.DownloadFile,System.Net.ICredentials,System.Net.IWebProxy)">
            <summary>
            Retrieves the value of various HTTP headers from the file using an HTTP HEAD request.
            </summary>
            <param name="file">The file.</param>
            <param name="credentials">The credentials.</param>
            <param name="proxy">The proxy server to send requests through</param>
            <remarks>Relevant HTTP Headers are: Content-Length, Content-Type and Content-Diposition</remarks>
            <returns>A hashtable containing entries for the Content-Length, Content-Type and Content-Diposition headers.</returns>
        </member>
        <member name="M:NewsComponents.BackgroundDownloadManager.GetTasks">
            <summary>
            Returns the list of registered tasks.
            </summary>
            <returns>A list of tasks corresponding to downloads currently in progress.</returns>
        </member>
        <member name="M:NewsComponents.BackgroundDownloadManager.GetDownloader(NewsComponents.Net.DownloadTask)">
            <summary>
            Return the downloader instance for a specific DownloadTask.
            </summary>
            <param name="task">The DownloadTask.</param>
            <returns>The Downloader instance.</returns>
        </member>
        <member name="M:NewsComponents.BackgroundDownloadManager.GetFileSize(NewsComponents.Net.DownloadTask)">
            <summary>
            Returns the most accurate size we have determined for the DownloadTask or -1 if no size information
            is available. 
            </summary>
            <param name="task">The download task</param>
            <returns>The most accurate size we have determined for the DownloadTask or -1 if no size information
            is available</returns>
        </member>
        <member name="M:NewsComponents.BackgroundDownloadManager.UpdateTaskFromHttpHeaders(NewsComponents.Net.DownloadTask)">
            <summary>
            Updates the information about the download task based on performing an HTTP HEAD 
            request on the file to download. 
            </summary>
            <param name="task">The download task to update</param>
            <returns>True if the Content-Length header was specified</returns>
        </member>
        <member name="M:NewsComponents.BackgroundDownloadManager.AnyFileIsUncPath(NewsComponents.Net.DownloadFilesCollection)">
            <summary>
            Checks if any file is a UNC path and return true in case,
            else false 
            </summary>
            <param name="files">DownloadFilesCollection instance or null</param>
            <returns>bool</returns>
        </member>
        <member name="M:NewsComponents.BackgroundDownloadManager.GetTargetFolder(NewsComponents.Net.DownloadItem)">
            <summary>
            Retrieves the target folder for a particular DownloadItem
            </summary>
            <param name="item">The item being downloaded</param>
            <returns>The target folder to download the file to</returns>
        </member>
        <member name="M:NewsComponents.BackgroundDownloadManager.GetCredentials(NewsComponents.Net.DownloadItem)">
            <summary>
            Retrieves the credentials needed for accessing a particular DownloadItem
            </summary>
            <param name="item">The item being dowbloaded</param>
            <returns>The credentials needed to access the item</returns>
        </member>
        <member name="M:NewsComponents.BackgroundDownloadManager.SubmitTask(NewsComponents.Net.DownloadTask,System.TimeSpan)">
            <summary>
            Synchronously submits a task to the downloader.
            </summary>
            <param name="task">The DownloadTask instance.</param>
            <param name="maxWaitTime">The maximum wait time for the task.</param>
        </member>
        <member name="M:NewsComponents.BackgroundDownloadManager.SubmitTaskAsync(NewsComponents.Net.DownloadTask)">
            <summary>
            Asynchronously submits a task to the downloader.
            </summary>
            <param name="task">The DownloadTask instance.</param>
        </member>
        <member name="M:NewsComponents.BackgroundDownloadManager.EndTask(NewsComponents.Net.DownloadTask)">
            <summary>
            Cancels a pending task.
            </summary>
            <param name="task">The DownloadTask instance.</param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.BackgroundDownloadManager.ResumePendingDownloads">
            <summary>
            Resumes pending downloads that were not completed in a 
            previous session. 
            </summary>
        </member>
        <member name="M:NewsComponents.BackgroundDownloadManager.CancelPendingDownloads(System.String)">
            <summary>
            Cancels pending downloads.
            </summary>
            <param name="ownerId">The ID of the feed that the task belongs to</param>
        </member>
        <member name="M:NewsComponents.BackgroundDownloadManager.CancelPendingDownloads">
            <summary>
            Cancels pending downloads.
            </summary>
        </member>
        <member name="M:NewsComponents.BackgroundDownloadManager.Download(NewsComponents.Net.DownloadItem[],System.TimeSpan)">
            <summary>
            Synchronously downloads the specified files in specified 
            DownloadItem array.
            </summary>
            <param name="items">The list of DownloadItems to process.</param>
            <param name="maxWaitTime">The maximum amount of time for download to complete before timeout.</param>
        </member>
        <member name="M:NewsComponents.BackgroundDownloadManager.Download(NewsComponents.Net.DownloadItem,System.TimeSpan)">
            <summary>
            Synchronously downloads the specified files in specified 
            DownloadItem.
            </summary>
            <param name="item">The DownloadItem to process.</param>
            <param name="maxWaitTime">The maximum amount of time for download to complete before timeout.</param>
        </member>
        <member name="M:NewsComponents.BackgroundDownloadManager.BeginDownload(NewsComponents.Net.DownloadItem[])">
            <summary>
            Asynchronously begins a download of the files specified 
            in DownloadItem array.
            </summary>
            <param name="items">The list of DownloadItems to process.</param>
        </member>
        <member name="M:NewsComponents.BackgroundDownloadManager.BeginDownload(NewsComponents.Net.DownloadItem)">
            <summary>
            Asynchronously begins a download of the files specified 
            in DownloadItem.
            </summary>
            <param name="item">The DownloadItem to process.</param>
        </member>
        <member name="M:NewsComponents.BackgroundDownloadManager.CancelDownload(NewsComponents.Net.DownloadItem)">
            <summary>
            Cancels the asynchronous download operation associated
            with the specified DownloadItem. 
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the related update 
            task is in a state that is not cancelable.</exception>
            <param name="item">The DownloadItem instance to cancel.</param>
        </member>
        <member name="M:NewsComponents.BackgroundDownloadManager.OnDownloadCompleted(System.Object,NewsComponents.Net.TaskEventArgs)">
            <summary>
            Method used to handle the event.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The task information.</param>
        </member>
        <member name="M:NewsComponents.BackgroundDownloadManager.OnDownloadError(System.Object,NewsComponents.Net.DownloadTaskErrorEventArgs)">
            <summary>
            Method used to handle the event.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The download error information.</param>
        </member>
        <member name="M:NewsComponents.BackgroundDownloadManager.OnDownloadProgress(System.Object,NewsComponents.Net.DownloadTaskProgressEventArgs)">
            <summary>
            Method used to handle the event.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The download progress task information.</param>
        </member>
        <member name="M:NewsComponents.BackgroundDownloadManager.OnDownloadStarted(System.Object,NewsComponents.Net.TaskEventArgs)">
            <summary>
            Method used to handle the event.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The task information.</param>
        </member>
        <member name="M:NewsComponents.BackgroundDownloadManager.Release(NewsComponents.IDownloader)">
            <summary>
            Method to unregister Downloader events and invoke Dispose() on the downloader.
            </summary>
            <param name="downloader">
            Downloader instance to unregister events from.
            </param>
        </member>
        <member name="P:NewsComponents.BackgroundDownloadManager.InitialDownloadLocation">
            <summary>
            This is the location where BITS should temporarily download files until moving them to 
            TargetFolder on completion. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:NewsComponents.BackgroundDownloadManager.Proxy">
            <summary>
            The proxy that must be used when accessing the Web
            </summary>
        </member>
        <member name="E:NewsComponents.BackgroundDownloadManager.DownloadStarted">
            <summary>
            Notifies downloads have started.
            </summary>
        </member>
        <member name="E:NewsComponents.BackgroundDownloadManager.DownloadProgress">
            <summary>
            Notifies download progress.
            </summary>
        </member>
        <member name="E:NewsComponents.BackgroundDownloadManager.DownloadError">
            <summary>
            Notifies download errors.
            </summary>
        </member>
        <member name="E:NewsComponents.BackgroundDownloadManager.DownloadCompleted">
            <summary>
            Notifies that download is complete.
            </summary>
        </member>
        <member name="P:NewsComponents.BackgroundDownloadManager.AsyncWebRequest">
            <summary>
            Used for making asynchronous web requests
            </summary>
        </member>
        <member name="P:NewsComponents.BackgroundDownloadManager.IsOSAtLeastWindowsXP">
            <summary>
            Returns true, if the OS is at least Windows XP (or higher), else false.
            </summary>
        </member>
        <member name="T:NewsComponents.DownloaderException">
            <summary>
            This is a generic exception thrown by the updater.
            </summary>
        </member>
        <member name="M:NewsComponents.DownloaderException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:NewsComponents.DownloaderException.#ctor(System.String)">
            <summary>
            Creates an DownloaderException with a specified message.
            </summary>
            <param name="message">The exception message string.</param>
        </member>
        <member name="M:NewsComponents.DownloaderException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an DownloaderException with a specified message and an inner exception.
            </summary>
            <param name="message">The exception message string.</param>
            <param name="innerException">The inner exception detected.</param>
        </member>
        <member name="M:NewsComponents.DownloaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor used for the serialization of the exception.
            </summary>
            <param name="info">The serialization information.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="T:NewsComponents.NewsChannelServices">
            <summary>
            NewsChannelServices class is to be used to (un)register INewsChannels.
            </summary>
        </member>
        <member name="T:NewsComponents.Threading.Semaphore">
            <summary>Implementation of Dijkstra's PV Semaphore based on the Monitor class.</summary>
        </member>
        <member name="F:NewsComponents.Threading.Semaphore._count">
            <summary>The number of units alloted by this semaphore.</summary>
        </member>
        <member name="M:NewsComponents.Threading.Semaphore.#ctor">
            <summary> Initialize the semaphore as a binary semaphore.</summary>
        </member>
        <member name="M:NewsComponents.Threading.Semaphore.#ctor(System.Int32)">
            <summary> Initialize the semaphore as a counting semaphore.</summary>
            <param name="count">Initial number of threads that can take out units from this semaphore.</param>
            <exception cref="T:System.ArgumentException">Throws if the count argument is less than 1.</exception>
        </member>
        <member name="M:NewsComponents.Threading.Semaphore.AddOne">
            <summary>V the semaphore (add 1 unit to it).</summary>
        </member>
        <member name="M:NewsComponents.Threading.Semaphore.WaitOne">
            <summary>P the semaphore (take out 1 unit from it).</summary>
        </member>
        <member name="M:NewsComponents.Threading.Semaphore.P">
            <summary>P the semaphore (take out 1 unit from it).</summary>
        </member>
        <member name="M:NewsComponents.Threading.Semaphore.V">
            <summary>V the semaphore (add 1 unit to it).</summary>
        </member>
        <member name="M:NewsComponents.Threading.Semaphore.Reset(System.Int32)">
            <summary>Resets the semaphore to the specified count.  Should be used cautiously.</summary>
        </member>
        <member name="T:NewsComponents.Collections.IRelationHRefEntryCollection">
            <summary>
            Defines size, enumerators, and synchronization methods for strongly
            typed collections of <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> elements.
            </summary>
            <remarks>
            <b>IRelationHRefEntryCollection</b> provides an <see cref="T:System.Collections.ICollection"/>
            that is strongly typed for <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> elements.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.IRelationHRefEntryCollection.CopyTo(NewsComponents.Collections.RelationHRefEntry[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:NewsComponents.Collections.IRelationHRefEntryCollection"/> to a one-dimensional <see cref="T:System.Array"/>
            of <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> elements, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the
            <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> elements copied from the <see cref="T:NewsComponents.Collections.IRelationHRefEntryCollection"/>.
            The <b>Array</b> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/>
            at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:NewsComponents.Collections.IRelationHRefEntryCollection"/> is greater
            than the available space from <paramref name="arrayIndex"/> to the end of the destination
            <paramref name="array"/>.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IRelationHRefEntryCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:NewsComponents.Collections.IRelationHRefEntryEnumerator"/> that can
            iterate through the <see cref="T:NewsComponents.Collections.IRelationHRefEntryCollection"/>.
            </summary>
            <returns>An <see cref="T:NewsComponents.Collections.IRelationHRefEntryEnumerator"/>
            for the entire <see cref="T:NewsComponents.Collections.IRelationHRefEntryCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.IEnumerable.GetEnumerator"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IRelationHRefEntryCollection.Count">
            <summary>
            Gets the number of elements contained in the
            <see cref="T:NewsComponents.Collections.IRelationHRefEntryCollection"/>.
            </summary>
            <value>The number of elements contained in the
            <see cref="T:NewsComponents.Collections.IRelationHRefEntryCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ICollection.Count"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IRelationHRefEntryCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the
            <see cref="T:NewsComponents.Collections.IRelationHRefEntryCollection"/> is synchronized (thread-safe).
            </summary>
            <value><c>true</c> if access to the <see cref="T:NewsComponents.Collections.IRelationHRefEntryCollection"/> is
            synchronized (thread-safe); otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ICollection.IsSynchronized"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IRelationHRefEntryCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access
            to the <see cref="T:NewsComponents.Collections.IRelationHRefEntryCollection"/>.
            </summary>
            <value>An object that can be used to synchronize access
            to the <see cref="T:NewsComponents.Collections.IRelationHRefEntryCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ICollection.SyncRoot"/> for details.</remarks>
        </member>
        <member name="T:NewsComponents.Collections.IRelationHRefEntryList">
            <summary>
            Represents a strongly typed collection of <see cref="T:NewsComponents.Collections.RelationHRefEntry"/>
            objects that can be individually accessed by index.
            </summary>
            <remarks>
            <b>IRelationHRefEntryList</b> provides an <see cref="T:System.Collections.IList"/>
            that is strongly typed for <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> elements.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.IRelationHRefEntryList.Add(NewsComponents.Collections.RelationHRefEntry)">
            <summary>
            Adds a <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> to the end
            of the <see cref="T:NewsComponents.Collections.IRelationHRefEntryList"/>.
            </summary>
            <param name="value">The <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> object
            to be added to the end of the <see cref="T:NewsComponents.Collections.IRelationHRefEntryList"/>.
            </param>
            <returns>The <see cref="T:NewsComponents.Collections.IRelationHRefEntryList"/> index at which
            the <paramref name="value"/> has been added.</returns>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IRelationHRefEntryList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IRelationHRefEntryList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Add(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IRelationHRefEntryList.Clear">
            <summary>
            Removes all elements from the <see cref="T:NewsComponents.Collections.IRelationHRefEntryList"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IRelationHRefEntryList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IRelationHRefEntryList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Clear"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IRelationHRefEntryList.Contains(NewsComponents.Collections.RelationHRefEntry)">
            <summary>
            Determines whether the <see cref="T:NewsComponents.Collections.IRelationHRefEntryList"/>
            contains the specified <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> element.
            </summary>
            <param name="value">The <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> object
            to locate in the <see cref="T:NewsComponents.Collections.IRelationHRefEntryList"/>.
            </param>
            <returns><c>true</c> if <paramref name="value"/> is found in the
            <see cref="T:NewsComponents.Collections.IRelationHRefEntryList"/>; otherwise, <c>false</c>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Contains(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IRelationHRefEntryList.IndexOf(NewsComponents.Collections.RelationHRefEntry)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified
            <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> in the <see cref="T:NewsComponents.Collections.IRelationHRefEntryList"/>.
            </summary>
            <param name="value">The <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> object
            to locate in the <see cref="T:NewsComponents.Collections.IRelationHRefEntryList"/>.
            </param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="value"/>
            in the <see cref="T:NewsComponents.Collections.IRelationHRefEntryList"/>, if found; otherwise, -1.
            </returns>
            <remarks>Please refer to <see cref="M:System.Collections.IList.IndexOf(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IRelationHRefEntryList.Insert(System.Int32,NewsComponents.Collections.RelationHRefEntry)">
            <summary>
            Inserts a <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> element into the
            <see cref="T:NewsComponents.Collections.IRelationHRefEntryList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which
            <paramref name="value"/> should be inserted.</param>
            <param name="value">The <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> object
            to insert into the <see cref="T:NewsComponents.Collections.IRelationHRefEntryList"/>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is greater than
            <see cref="P:NewsComponents.Collections.IRelationHRefEntryCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IRelationHRefEntryList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IRelationHRefEntryList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IRelationHRefEntryList.Remove(NewsComponents.Collections.RelationHRefEntry)">
            <summary>
            Removes the first occurrence of the specified <see cref="T:NewsComponents.Collections.RelationHRefEntry"/>
            from the <see cref="T:NewsComponents.Collections.IRelationHRefEntryList"/>.
            </summary>
            <param name="value">The <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> object
            to remove from the <see cref="T:NewsComponents.Collections.IRelationHRefEntryList"/>.
            </param>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IRelationHRefEntryList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IRelationHRefEntryList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Remove(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IRelationHRefEntryList.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the
            <see cref="T:NewsComponents.Collections.IRelationHRefEntryList"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than
            <see cref="P:NewsComponents.Collections.IRelationHRefEntryCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IRelationHRefEntryList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IRelationHRefEntryList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.RemoveAt(System.Int32)"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IRelationHRefEntryList.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:NewsComponents.Collections.IRelationHRefEntryList"/> has a fixed size.
            </summary>
            <value><c>true</c> if the <see cref="T:NewsComponents.Collections.IRelationHRefEntryList"/> has a fixed size;
            otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IList.IsFixedSize"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IRelationHRefEntryList.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:NewsComponents.Collections.IRelationHRefEntryList"/> is read-only.
            </summary>
            <value><c>true</c> if the <see cref="T:NewsComponents.Collections.IRelationHRefEntryList"/> is read-only;
            otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IList.IsReadOnly"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IRelationHRefEntryList.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> element at the specified index.
            </summary>
            <param name="index">The zero-based index of the
            <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> element to get or set.</param>
            <value>
            The <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> element at the specified <paramref name="index"/>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than
            <see cref="P:NewsComponents.Collections.IRelationHRefEntryCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The property is set and the <see cref="T:NewsComponents.Collections.IRelationHRefEntryList"/> is read-only.</exception>
            <remarks>Please refer to <see cref="P:System.Collections.IList.Item(System.Int32)"/> for details.</remarks>
        </member>
        <member name="T:NewsComponents.Collections.IRelationHRefEntryEnumerator">
            <summary>
            Supports type-safe iteration over a collection that
            contains <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> elements.
            </summary>
            <remarks>
            <b>IRelationHRefEntryEnumerator</b> provides an <see cref="T:System.Collections.IEnumerator"/>
            that is strongly typed for <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> elements.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.IRelationHRefEntryEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><c>true</c> if the enumerator was successfully advanced to the next element;
            <c>false</c> if the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.IEnumerator.MoveNext"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IRelationHRefEntryEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position,
            which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.IEnumerator.Reset"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IRelationHRefEntryEnumerator.Current">
            <summary>
            Gets the current <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> element in the collection.
            </summary>
            <value>The current <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> element in the collection.</value>
            <exception cref="T:System.InvalidOperationException"><para>The enumerator is positioned
            before the first element of the collection or after the last element.</para>
            <para>-or-</para>
            <para>The collection was modified after the enumerator was created.</para></exception>
            <remarks>Please refer to <see cref="P:System.Collections.IEnumerator.Current"/> for details, but note
            that <b>Current</b> fails if the collection was modified since the last successful
            call to <see cref="M:NewsComponents.Collections.IRelationHRefEntryEnumerator.MoveNext"/> or <see cref="M:NewsComponents.Collections.IRelationHRefEntryEnumerator.Reset"/>.</remarks>
        </member>
        <member name="T:NewsComponents.Collections.IStringRelationHRefEntryCollection">
            <summary>
            Defines size, enumerators, and synchronization methods for strongly
            typed collections of <see cref="T:NewsComponents.Collections.RelationHRefEntry2"/> elements.
            </summary>
            <remarks>
            <b>IStringRelationHRefEntryCollection</b> provides an <see cref="T:System.Collections.ICollection"/>
            that is strongly typed for <see cref="T:NewsComponents.Collections.RelationHRefEntry2"/> elements.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringRelationHRefEntryCollection.CopyTo(NewsComponents.Collections.RelationHRefEntry2[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryCollection"/>
            to a one-dimensional <see cref="T:System.Array"/> of <see cref="T:NewsComponents.Collections.RelationHRefEntry2"/> elements,
            starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the
            destination of the <see cref="T:NewsComponents.Collections.RelationHRefEntry2"/> elements copied from the
            <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryCollection"/>.
            The <b>Array</b> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/>
            at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryCollection"/>
            is greater than the available space from <paramref name="arrayIndex"/> to the end of the
            destination <paramref name="array"/>.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringRelationHRefEntryCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryEnumerator"/> that can
            iterate through the <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryCollection"/>.
            </summary>
            <returns>An <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryEnumerator"/>
            for the entire <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.IEnumerable.GetEnumerator"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringRelationHRefEntryCollection.Count">
            <summary>
            Gets the number of elements contained in the
            <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryCollection"/>.
            </summary>
            <value>The number of elements contained in the
            <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ICollection.Count"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringRelationHRefEntryCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the
            <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryCollection"/> is synchronized (thread-safe).
            </summary>
            <value><c>true</c> if access to the <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryCollection"/>
            is synchronized (thread-safe); otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ICollection.IsSynchronized"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringRelationHRefEntryCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access
            to the <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryCollection"/>.
            </summary>
            <value>An object that can be used to synchronize access to the
            <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ICollection.SyncRoot"/> for details.</remarks>
        </member>
        <member name="T:NewsComponents.Collections.IStringRelationHRefEntryDictionary">
            <summary>
            Represents a strongly typed collection of
            <see cref="T:NewsComponents.Collections.RelationHRefEntry2"/> key-and-value pairs.
            </summary>
            <remarks>
            <b>IStringRelationHRefEntryDictionary</b> provides an
            <see cref="T:System.Collections.IDictionary"/> that is strongly typed for
            <see cref="T:System.String"/> keys and <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> values.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringRelationHRefEntryDictionary.Add(System.String,NewsComponents.Collections.RelationHRefEntry)">
            <summary>
            Adds an element with the specified <see cref="T:System.String"/>
            key and <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> value to the
            <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryDictionary"/>.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key of the element
            to add to the <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryDictionary"/>.</param>
            <param name="value">The <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> value of the element
            to add to the <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryDictionary"/>.
            </param>
            <exception cref="T:System.ArgumentException">
            <para>An element with the specified <paramref name="key"/> already exists
            in the <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryDictionary"/>.</para>
            <para>-or-</para>
            <para>The <b>IStringRelationHRefEntryDictionary</b> is set to use the
            <see cref="T:System.IComparable"/> interface, and <paramref name="key"/> does not
            implement the <b>IComparable</b> interface.</para></exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">
            The comparer throws an exception.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryDictionary"/> is read-only.
            </para><para>-or-</para>
            <para>The <b>IStringRelationHRefEntryDictionary</b> has a fixed size.
            </para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringRelationHRefEntryDictionary.Clear">
            <summary>
            Removes all elements from the <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryDictionary"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryDictionary"/> is read-only.
            </para><para>-or-</para>
            <para>The <b>IStringRelationHRefEntryDictionary</b> has a fixed size.
            </para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IDictionary.Clear"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringRelationHRefEntryDictionary.Contains(System.String)">
            <summary>
            Determines whether the <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryDictionary"/>
            contains the specified <see cref="T:System.String"/> key.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key to locate
            in the <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryDictionary"/>.</param>
            <returns><c>true</c> if the <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryDictionary"/>
            contains an element with the specified <paramref name="key"/>; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">
            The comparer throws an exception.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.IDictionary.Contains(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringRelationHRefEntryDictionary.Remove(System.String)">
            <summary>
            Removes the element with the specified <see cref="T:System.String"/> key
            from the <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryDictionary"/>.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key of the element to remove
            from the <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryDictionary"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">
            The comparer throws an exception.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryDictionary"/> is read-only.
            </para><para>-or-</para>
            <para>The <b>IStringRelationHRefEntryDictionary</b> has a fixed size.
            </para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IDictionary.Remove(System.Object)"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringRelationHRefEntryDictionary.IsFixedSize">
            <summary>
            Gets a value indicating whether the
            <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryDictionary"/> has a fixed size.
            </summary>
            <value><c>true</c> if the <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryDictionary"/>
            has a fixed size; otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IDictionary.IsFixedSize"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringRelationHRefEntryDictionary.IsReadOnly">
            <summary>
            Gets a value indicating whether the
            <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryDictionary"/> is read-only.
            </summary>
            <value><c>true</c> if the <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryDictionary"/>
            is read-only; otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IDictionary.IsReadOnly"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringRelationHRefEntryDictionary.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> value
            associated with the specified <see cref="T:System.String"/> key.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key
            whose value to get or set.</param>
            <value>The <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> value associated with the specified
            <paramref name="key"/>. If the specified <paramref name="key"/> is not found,
            attempting to get it returns
            a default-initialized <b>RelationHRefEntry</b> value,
            and attempting to set it creates a new element using the specified
            <paramref name="key"/>.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The property is set and the
            <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryDictionary"/> is read-only.</para>
            <para>-or-</para>
            <para>The property is set, <paramref name="key"/> does not exist in the collection,
            and the <b>IStringRelationHRefEntryDictionary</b> has a fixed size.</para>
            </exception>
            <remarks>Please refer to <see cref="P:System.Collections.IDictionary.Item(System.Object)"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringRelationHRefEntryDictionary.Keys">
            <summary>
            Gets an <see cref="T:NewsComponents.Collections.IStringCollection"/> containing the keys
            in the <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryDictionary"/>.
            </summary>
            <value>An <see cref="T:NewsComponents.Collections.IStringCollection"/> containing the keys
            in the <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryDictionary"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IDictionary.Keys"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringRelationHRefEntryDictionary.Values">
            <summary>
            Gets an <see cref="T:NewsComponents.Collections.IRelationHRefEntryCollection"/> containing the values
            in the <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryDictionary"/>.
            </summary>
            <value>An <see cref="T:NewsComponents.Collections.IRelationHRefEntryCollection"/> containing the values
            in the <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryDictionary"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IDictionary.Values"/> for details.</remarks>
        </member>
        <member name="T:NewsComponents.Collections.IStringRelationHRefEntryList">
            <summary>
            Represents a strongly typed collection of <see cref="T:NewsComponents.Collections.RelationHRefEntry2"/>
            objects that can be individually accessed by index.
            </summary>
            <remarks>
            <b>IStringRelationHRefEntryList</b> provides an <see cref="T:System.Collections.IList"/>
            that is strongly typed for <see cref="T:NewsComponents.Collections.RelationHRefEntry2"/> elements.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringRelationHRefEntryList.Add(NewsComponents.Collections.RelationHRefEntry2)">
            <summary>
            Adds a <see cref="T:NewsComponents.Collections.RelationHRefEntry2"/> to the end
            of the <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryList"/>.
            </summary>
            <param name="entry">The <see cref="T:NewsComponents.Collections.RelationHRefEntry2"/> object
            to be added to the end of the <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryList"/>.
            </param>
            <returns>The <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryList"/> index at which
            the <paramref name="entry"/> has been added.</returns>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IStringRelationHRefEntryList</b> has a fixed size.</para>
            </exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Add(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringRelationHRefEntryList.Clear">
            <summary>
            Removes all elements from the <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryList"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IStringRelationHRefEntryList</b> has a fixed size.</para>
            </exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Clear"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringRelationHRefEntryList.Contains(NewsComponents.Collections.RelationHRefEntry2)">
            <summary>
            Determines whether the <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryList"/>
            contains the specified <see cref="T:NewsComponents.Collections.RelationHRefEntry2"/> element.
            </summary>
            <param name="entry">The <see cref="T:NewsComponents.Collections.RelationHRefEntry2"/> object
            to locate in the <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryList"/>.</param>
            <returns><c>true</c> if <paramref name="entry"/> is found in the
            <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryList"/>; otherwise, <c>false</c>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Contains(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringRelationHRefEntryList.IndexOf(NewsComponents.Collections.RelationHRefEntry2)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified
            <see cref="T:NewsComponents.Collections.RelationHRefEntry2"/> in the <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryList"/>.
            </summary>
            <param name="entry">The <see cref="T:NewsComponents.Collections.RelationHRefEntry2"/> object
            to locate in the <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryList"/>.</param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="entry"/>
            in the <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryList"/>, if found; otherwise, -1.
            </returns>
            <remarks>Please refer to <see cref="M:System.Collections.IList.IndexOf(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringRelationHRefEntryList.Insert(System.Int32,NewsComponents.Collections.RelationHRefEntry2)">
            <summary>
            Inserts a <see cref="T:NewsComponents.Collections.RelationHRefEntry2"/> element into the
            <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which
            <paramref name="entry"/> should be inserted.</param>
            <param name="entry">The <see cref="T:NewsComponents.Collections.RelationHRefEntry2"/> object to insert
            into the <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryList"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is greater than
            <see cref="P:NewsComponents.Collections.IStringRelationHRefEntryCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IStringRelationHRefEntryList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringRelationHRefEntryList.Remove(NewsComponents.Collections.RelationHRefEntry2)">
            <summary>
            Removes the first occurrence of the specified <see cref="T:NewsComponents.Collections.RelationHRefEntry2"/>
            from the <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryList"/>.
            </summary>
            <param name="entry">The <see cref="T:NewsComponents.Collections.RelationHRefEntry2"/> object to remove
            from the <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryList"/>.</param>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IStringRelationHRefEntryList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Remove(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringRelationHRefEntryList.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the
            <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryList"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than
            <see cref="P:NewsComponents.Collections.IStringRelationHRefEntryCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IStringRelationHRefEntryList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.RemoveAt(System.Int32)"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringRelationHRefEntryList.IsFixedSize">
            <summary>
            Gets a value indicating whether the
            <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryList"/> has a fixed size.
            </summary>
            <value><c>true</c> if the <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryList"/>
            has a fixed size; otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IList.IsFixedSize"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringRelationHRefEntryList.IsReadOnly">
            <summary>
            Gets a value indicating whether the
            <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryList"/> is read-only.
            </summary>
            <value><c>true</c> if the <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryList"/>
            is read-only; otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IList.IsReadOnly"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringRelationHRefEntryList.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:NewsComponents.Collections.RelationHRefEntry2"/> element at the specified index.
            </summary>
            <param name="index">The zero-based index of the
            <see cref="T:NewsComponents.Collections.RelationHRefEntry2"/> element to get or set.</param>
            <value>
            The <see cref="T:NewsComponents.Collections.RelationHRefEntry2"/> element at the specified <paramref name="index"/>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than
            <see cref="P:NewsComponents.Collections.IStringRelationHRefEntryCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">The property is set and the
            <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryList"/> is read-only.</exception>
            <remarks>Please refer to <see cref="P:System.Collections.IList.Item(System.Int32)"/> for details.</remarks>
        </member>
        <member name="T:NewsComponents.Collections.IStringRelationHRefEntryEnumerator">
            <summary>
            Supports type-safe iteration over a dictionary that
            contains <see cref="T:NewsComponents.Collections.RelationHRefEntry2"/> elements.
            </summary>
            <remarks>
            <b>IStringRelationHRefEntryEnumerator</b> provides an
            <see cref="T:System.Collections.IDictionaryEnumerator"/> that is strongly typed for
            <see cref="T:System.String"/> keys and <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> values.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringRelationHRefEntryEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><c>true</c> if the enumerator was successfully advanced to the next element;
            <c>false</c> if the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.IEnumerator.MoveNext"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringRelationHRefEntryEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position,
            which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.IEnumerator.Reset"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringRelationHRefEntryEnumerator.Current">
            <summary>
            Gets the current <see cref="T:NewsComponents.Collections.RelationHRefEntry2"/> element in the collection.
            </summary>
            <value>The current <see cref="T:NewsComponents.Collections.RelationHRefEntry2"/> element in the collection.</value>
            <exception cref="T:System.InvalidOperationException"><para>The enumerator is positioned
            before the first element of the collection or after the last element.</para>
            <para>-or-</para>
            <para>The collection was modified after the enumerator was created.</para></exception>
            <remarks>Please refer to <see cref="P:System.Collections.IEnumerator.Current"/> for details, but note
            that <b>Current</b> fails if the collection was modified since the last successful
            call to <see cref="M:NewsComponents.Collections.IStringRelationHRefEntryEnumerator.MoveNext"/> or <see cref="M:NewsComponents.Collections.IStringRelationHRefEntryEnumerator.Reset"/>.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringRelationHRefEntryEnumerator.Entry">
            <summary>
            Gets a <see cref="T:NewsComponents.Collections.RelationHRefEntry2"/> containing both
            the key and the value of the current dictionary entry.
            </summary>
            <value>A <see cref="T:NewsComponents.Collections.RelationHRefEntry2"/> containing both
            the key and the value of the current dictionary entry.</value>
            <exception cref="T:System.InvalidOperationException"><para>The enumerator is positioned
            before the first element of the dictionary or after the last element.</para>
            <para>-or-</para>
            <para>The dictionary was modified after the enumerator was created.</para></exception>
            <remarks>Please refer to <see cref="P:System.Collections.IDictionaryEnumerator.Entry"/> for details, but
            note that <b>Entry</b> fails if the collection was modified since the last successful
            call to <see cref="M:NewsComponents.Collections.IStringRelationHRefEntryEnumerator.MoveNext"/> or <see cref="M:NewsComponents.Collections.IStringRelationHRefEntryEnumerator.Reset"/>.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringRelationHRefEntryEnumerator.Key">
            <summary>
            Gets the <see cref="T:System.String"/> key of the current dictionary entry.
            </summary>
            <value>The <see cref="T:System.String"/> key
            of the current element of the enumeration.</value>
            <exception cref="T:System.InvalidOperationException"><para>The enumerator is positioned
            before the first element of the dictionary or after the last element.</para>
            <para>-or-</para>
            <para>The dictionary was modified after the enumerator was created.</para></exception>
            <remarks>Please refer to <see cref="P:System.Collections.IDictionaryEnumerator.Key"/> for details, but
            note that <b>Key</b> fails if the collection was modified since the last successful
            call to <see cref="M:NewsComponents.Collections.IStringRelationHRefEntryEnumerator.MoveNext"/> or <see cref="M:NewsComponents.Collections.IStringRelationHRefEntryEnumerator.Reset"/>.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringRelationHRefEntryEnumerator.Value">
            <summary>
            Gets the <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> value of the current dictionary entry.
            </summary>
            <value>The <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> value
            of the current element of the enumeration.</value>
            <exception cref="T:System.InvalidOperationException"><para>The enumerator is positioned
            before the first element of the dictionary or after the last element.</para>
            <para>-or-</para>
            <para>The dictionary was modified after the enumerator was created.</para></exception>
            <remarks>Please refer to <see cref="P:System.Collections.IDictionaryEnumerator.Value"/> for details, but
            note that <b>Value</b> fails if the collection was modified since the last successful
            call to <see cref="M:NewsComponents.Collections.IStringRelationHRefEntryEnumerator.MoveNext"/> or <see cref="M:NewsComponents.Collections.IStringRelationHRefEntryEnumerator.Reset"/>.</remarks>
        </member>
        <member name="T:NewsComponents.Collections.RelationHRefEntry2">
            <summary>
            Implements a strongly typed pair of one <see cref="T:System.String"/>
            key and one <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> value.
            </summary>
            <remarks>
            <b>RelationHRefEntry2</b> provides a <see cref="T:System.Collections.DictionaryEntry"/> that is strongly
            typed for <see cref="T:System.String"/> keys and <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> values.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.RelationHRefEntry2.#ctor(System.String,NewsComponents.Collections.RelationHRefEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.Collections.RelationHRefEntry2"/>
            class with the specified key and value.
            </summary>
            <param name="key">
            The <see cref="T:System.String"/> key in the key-and-value pair.</param>
            <param name="value">
            The <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> value in the key-and-value pair.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
        </member>
        <member name="M:NewsComponents.Collections.RelationHRefEntry2.op_Implicit(System.Collections.DictionaryEntry)~NewsComponents.Collections.RelationHRefEntry2">
            <summary>
            Converts a <see cref="T:System.Collections.DictionaryEntry"/> to a <see cref="T:NewsComponents.Collections.RelationHRefEntry2"/>.
            </summary>
            <param name="entry">A <see cref="T:System.Collections.DictionaryEntry"/> object to convert.</param>
            <returns>A <see cref="T:NewsComponents.Collections.RelationHRefEntry2"/> object that represents
            the converted <paramref name="entry"/>.</returns>
            <exception cref="T:System.InvalidCastException">
            <para><paramref name="entry"/> contains a key that is not compatible
            with <see cref="T:System.String"/>.</para>
            <para>-or-</para>
            <para><paramref name="entry"/> contains a value that is not compatible
            with <see cref="T:NewsComponents.Collections.RelationHRefEntry"/>.</para>
            </exception>
            <remarks>
            <para>If the specified <paramref name="entry"/> contains a value that is a null
            reference, the returned <see cref="T:NewsComponents.Collections.RelationHRefEntry2"/> will contain a value
            that is a default-initialized <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> object.</para>
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.RelationHRefEntry2.op_Implicit(NewsComponents.Collections.RelationHRefEntry2)~System.Collections.DictionaryEntry">
            <summary>
            Converts a <see cref="T:NewsComponents.Collections.RelationHRefEntry2"/> to a <see cref="T:System.Collections.DictionaryEntry"/>.
            </summary>
            <param name="pair">A <see cref="T:NewsComponents.Collections.RelationHRefEntry2"/> object to convert.</param>
            <returns>A <see cref="T:System.Collections.DictionaryEntry"/> object that
            represents the converted <paramref name="pair"/>.</returns>
        </member>
        <member name="P:NewsComponents.Collections.RelationHRefEntry2.Key">
            <summary>
            Gets or sets the <see cref="T:System.String"/> key in the key-and-value pair.
            </summary>
            <value>
            The <see cref="T:System.String"/> key in the key-and-value pair.
            The default is a null reference.
            </value>
            <exception cref="T:System.ArgumentNullException">
            <b>Key</b> is set to a null reference.</exception>
            <remarks>
            <see cref="T:NewsComponents.Collections.RelationHRefEntry2"/> is a value type and therefore has an implicit default
            constructor that zeroes all data members. This means that the <b>Key</b> property of
            a default-constructed <b>RelationHRefEntry2</b> contains a null reference by default,
            even though it is not possible to explicitly set <b>Key</b> to a null reference.
            </remarks>
        </member>
        <member name="P:NewsComponents.Collections.RelationHRefEntry2.Value">
            <summary>
            Gets or sets the <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> value in the key-and-value pair.
            </summary>
            <value>
            The <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> value in the key-and-value pair.
            </value>
        </member>
        <member name="T:NewsComponents.Collections.RelationHRefDictionary">
            <summary>
            Implements a strongly typed collection of <see cref="T:NewsComponents.Collections.RelationHRefEntry2"/>
            key-and-value pairs that are organized based on the hash code of the key.
            </summary>
            <remarks>
            <b>RelationHRefDictionary</b> provides a <see cref="T:System.Collections.Hashtable"/> that is strongly typed
            for <see cref="T:System.String"/> keys and <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> values.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.RelationHRefDictionary.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/> class.
            </overloads>
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/> class
            that is empty and has the default initial capacity, the default load factor,
            the default hash code provider and the default comparer.
            </summary>
            <remarks>Please refer to <see cref="M:System.Collections.Hashtable.#ctor"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.RelationHRefDictionary.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/> class
            that is empty and has the default initial capacity, the default load factor,
            the specified hash code provider and the specified comparer.
            </summary>
            <param name="provider">
            <para>The <see cref="T:System.Collections.IHashCodeProvider"/> that supplies the hash codes
            for all keys in the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.</para>
            <para>-or-</para>
            <para>A null reference to use the default hash code provider, which is each key's
            implementation of <see cref="M:System.Object.GetHashCode"/>.</para></param>
            <param name="comparer">
            <para>The <see cref="T:System.Collections.IComparer"/> to use to determine whether two keys are equal.</para>
            <para>-or-</para>
            <para>A null reference to use the default comparer, which is each key's
            implementation of <see cref="M:System.Object.Equals(System.Object)"/>.</para></param>
            <remarks>
            Please refer to <see cref="M:System.Collections.Hashtable.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)"/> for details.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.RelationHRefDictionary.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/> class
            that is empty and has the specified initial capacity, the default load factor,
            the default hash code provider and the default comparer.
            </summary>
            <param name="capacity">The approximate number of elements that the new
            <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/> is initially capable of storing.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is less than zero.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.Hashtable.#ctor(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.RelationHRefDictionary.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/> class
            that is empty and has the specified initial capacity, the default load factor,
            the specified hash code provider and the specified comparer.
            </summary>
            <param name="capacity">The approximate number of elements that the new
            <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/> is initially capable of storing.</param>
            <param name="provider">
            <para>The <see cref="T:System.Collections.IHashCodeProvider"/> that supplies the hash codes
            for all keys in the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.</para>
            <para>-or-</para>
            <para>A null reference to use the default hash code provider, which is each key's
            implementation of <see cref="M:System.Object.GetHashCode"/>.</para></param>
            <param name="comparer">
            <para>The <see cref="T:System.Collections.IComparer"/> to use to determine whether two keys are equal.</para>
            <para>-or-</para>
            <para>A null reference to use the default comparer, which is each key's
            implementation of <see cref="M:System.Object.Equals(System.Object)"/>.</para></param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is less than zero.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)"/> for details.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.RelationHRefDictionary.#ctor(System.Int32,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/> class
            that is empty and has the specified initial capacity, the specified load factor,
            the default hash code provider and the default comparer.
            </summary>
            <param name="capacity">The approximate number of elements that the new
            <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/> is initially capable of storing.</param>
            <param name="loadFactor">A number in the range from 0.1 through 1.0
            indicating the maximum ratio of elements to buckets.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="capacity"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="loadFactor"/> is less than 0.1.</para>
            <para>-or-</para>
            <para><paramref name="loadFactor"/> is greater than 1.0.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.Hashtable.#ctor(System.Int32,System.Single)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.RelationHRefDictionary.#ctor(System.Int32,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/> class
            that is empty and has the specified initial capacity, the specified load factor,
            the specified hash code provider and the specified comparer.
            </summary>
            <param name="capacity">The approximate number of elements that the new
            <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/> is initially capable of storing.</param>
            <param name="loadFactor">A number in the range from 0.1 through 1.0
            indicating the maximum ratio of elements to buckets.</param>
            <param name="provider">
            <para>The <see cref="T:System.Collections.IHashCodeProvider"/> that supplies the hash codes
            for all keys in the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.</para>
            <para>-or-</para>
            <para>A null reference to use the default hash code provider, which is each key's
            implementation of <see cref="M:System.Object.GetHashCode"/>.</para></param>
            <param name="comparer">
            <para>The <see cref="T:System.Collections.IComparer"/> to use to determine whether two keys are equal.</para>
            <para>-or-</para>
            <para>A null reference to use the default comparer, which is each key's
            implementation of <see cref="M:System.Object.Equals(System.Object)"/>.</para></param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="capacity"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="loadFactor"/> is less than 0.1.</para>
            <para>-or-</para>
            <para><paramref name="loadFactor"/> is greater than 1.0.</para></exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)"/>
            for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.RelationHRefDictionary.#ctor(NewsComponents.Collections.RelationHRefDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/> class
            that contains elements copied from the specified dictionary and
            that has the same initial capacity as the number of elements copied, the
            default load factor, the default hash code provider and the default comparer.
            </summary>
            <param name="dictionary">The <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>
            whose elements are copied to the new collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dictionary"/> is a null reference.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.RelationHRefDictionary.#ctor(System.Collections.IDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/> class
            that contains elements copied from the specified <see cref="T:System.Collections.IDictionary"/>
            and that has the same initial capacity as the number of elements copied, the
            default load factor, the default hash code provider and the default comparer.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.IDictionary"/>
            whose elements are copied to the new collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dictionary"/> is a null reference.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.RelationHRefDictionary.#ctor(System.Collections.IDictionary,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/> class
            that contains elements copied from the specified <see cref="T:System.Collections.IDictionary"/>
            and that has the same initial capacity as the number of elements copied, the
            default load factor, the specified hash code provider and the specified comparer.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.IDictionary"/>
            whose elements are copied to the new collection.</param>
            <param name="provider">
            <para>The <see cref="T:System.Collections.IHashCodeProvider"/> that supplies the hash codes
            for all keys in the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.</para>
            <para>-or-</para>
            <para>A null reference to use the default hash code provider, which is each key's
            implementation of <see cref="M:System.Object.GetHashCode"/>.</para></param>
            <param name="comparer">
            <para>The <see cref="T:System.Collections.IComparer"/> to use to determine whether two keys are equal.</para>
            <para>-or-</para>
            <para>A null reference to use the default comparer, which is each key's
            implementation of <see cref="M:System.Object.Equals(System.Object)"/>.</para></param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dictionary"/> is a null reference.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IHashCodeProvider,System.Collections.IComparer)"/>
            for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.RelationHRefDictionary.#ctor(System.Collections.IDictionary,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/> class
            that contains elements copied from the specified <see cref="T:System.Collections.IDictionary"/>
            and that has the same initial capacity as the number of elements copied, the
            specified load factor, the default hash code provider and the default comparer.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.IDictionary"/>
            whose elements are copied to the new collection.</param>
            <param name="loadFactor">A number in the range from 0.1 through 1.0
            indicating the maximum ratio of elements to buckets.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dictionary"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="loadFactor"/> is less than 0.1.</para>
            <para>-or-</para>
            <para><paramref name="loadFactor"/> is greater than 1.0.</para></exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single)"/> for details.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.RelationHRefDictionary.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/> class
            that contains elements copied from the specified <see cref="T:System.Collections.IDictionary"/>
            and that has the same initial capacity as the number of elements copied, the
            specified load factor, the specified hash code provider and the specified comparer.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.IDictionary"/>
            whose elements are copied to the new collection.</param>
            <param name="loadFactor">A number in the range from 0.1 through 1.0
            indicating the maximum ratio of elements to buckets.</param>
            <param name="provider">
            <para>The <see cref="T:System.Collections.IHashCodeProvider"/> that supplies the hash codes
            for all keys in the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.</para>
            <para>-or-</para>
            <para>A null reference to use the default hash code provider, which is each key's
            implementation of <see cref="M:System.Object.GetHashCode"/>.</para></param>
            <param name="comparer">
            <para>The <see cref="T:System.Collections.IComparer"/> to use to determine whether two keys are equal.</para>
            <para>-or-</para>
            <para>A null reference to use the default comparer, which is each key's
            implementation of <see cref="M:System.Object.Equals(System.Object)"/>.</para></param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dictionary"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="loadFactor"/> is less than 0.1.</para>
            <para>-or-</para>
            <para><paramref name="loadFactor"/> is greater than 1.0.</para></exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)"/>
            for details.</remarks>
        </member>
        <member name="F:NewsComponents.Collections.RelationHRefDictionary.Empty">
            <summary>
            Gets a single empty and ReadOnly RelationHRefDictionary instance.
            </summary>
            <value>The empty ReadOnly RelationHRefDictionary.</value>
        </member>
        <member name="M:NewsComponents.Collections.RelationHRefDictionary.Add(System.String,NewsComponents.Collections.RelationHRefEntry)">
            <summary>
            Adds an element with the specified <see cref="T:System.String"/> key and
            <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> value to the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key of the element
            to add to the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.</param>
            <param name="value">The <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> value of the element
            to add to the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.
            </param>
            <exception cref="T:System.ArgumentException">
            An element with the specified <paramref name="key"/>
            already exists in the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>RelationHRefDictionary</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.Hashtable.Add(System.Object,System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.RelationHRefDictionary.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <summary>
            Adds an element with the specified key and value
            to the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.
            </summary>
            <param name="key">The key of the element to add to the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.
            This argument must be compatible with <see cref="T:System.String"/>.</param>
            <param name="value">The value of the element to add to the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.
            This argument must be compatible with <see cref="T:NewsComponents.Collections.RelationHRefEntry"/>.
            </param>
            <exception cref="T:System.ArgumentException">
            An element with the specified <paramref name="key"/>
            already exists in the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidCastException">
            <para><paramref name="key"/> is not compatible with <see cref="T:System.String"/>.</para>
            <para>-or-</para>
            <para><paramref name="value"/> is not compatible with <see cref="T:NewsComponents.Collections.RelationHRefEntry"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>RelationHRefDictionary</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.Hashtable.Add(System.Object,System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.RelationHRefDictionary.AddRange(NewsComponents.Collections.RelationHRefEntry[])">
            <summary>
            Adds an array of <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> elements to the 
            <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.
            </summary>
            <param name="value">The array of <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> values
            to add to the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.
            </param>
            <exception cref="T:System.ArgumentException">
            An element with the specified RelationHRefEntry
            already exists in the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>RelationHRefDictionary</b> has a fixed size.</para></exception>
        </member>
        <member name="M:NewsComponents.Collections.RelationHRefDictionary.Clear">
            <summary>
            Removes all elements from the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>RelationHRefDictionary</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.Hashtable.Clear"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.RelationHRefDictionary.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.
            </summary>
            <returns>A shallow copy of the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.Hashtable.Clone"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.RelationHRefDictionary.Contains(System.String)">
            <summary>
            Determines whether the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>
            contains the specified <see cref="T:System.String"/> key.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key
            to locate in the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.</param>
            <returns><c>true</c> if the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/> contains an element
            with the specified <paramref name="key"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.Hashtable.Contains(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.RelationHRefDictionary.System#Collections#IDictionary#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/> contains the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.
            This argument must be compatible with <see cref="T:System.String"/>.</param>
            <returns><c>true</c> if the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/> contains an element
            with the specified <paramref name="key"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidCastException"><paramref name="key"/>
            is not compatible with <see cref="T:System.String"/>.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.Hashtable.Contains(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.RelationHRefDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>
            contains the specified <see cref="T:System.String"/> key.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key
            to locate in the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.</param>
            <returns><c>true</c> if the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/> contains an element
            with the specified <paramref name="key"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.Hashtable.ContainsKey(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.RelationHRefDictionary.ContainsValue(NewsComponents.Collections.RelationHRefEntry)">
            <summary>
            Determines whether the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>
            contains the specified <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> value.
            </summary>
            <param name="value">The <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> value
            to locate in the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.
            </param>
            <returns><c>true</c> if the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/> contains an element
            with the specified <paramref name="value"/>; otherwise, <c>false</c>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.Hashtable.ContainsValue(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.RelationHRefDictionary.CopyTo(NewsComponents.Collections.RelationHRefEntry2[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/> to a one-dimensional <see cref="T:System.Array"/> of
            <see cref="T:NewsComponents.Collections.RelationHRefEntry2"/> elements, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the
            <see cref="T:NewsComponents.Collections.RelationHRefEntry2"/> elements copied from the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.
            The <b>Array</b> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/>
            at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/> is greater than
            the available space from <paramref name="arrayIndex"/> to the end of the destination
            <paramref name="array"/>.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.Hashtable.CopyTo(System.Array,System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.RelationHRefDictionary.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/> to a one-dimensional <see cref="T:System.Array"/>,
            starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the
            <see cref="T:NewsComponents.Collections.RelationHRefEntry2"/> elements copied from the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.
            The <b>Array</b> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/>
            at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="array"/> is multidimensional.
            </para><para>-or-</para><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/> is greater than
            the available space from <paramref name="arrayIndex"/> to the end of the destination
            <paramref name="array"/>.</para></exception>
            <exception cref="T:System.InvalidCastException">
            The <see cref="T:NewsComponents.Collections.RelationHRefEntry2"/> type cannot be cast automatically
            to the type of the destination <paramref name="array"/>.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.Hashtable.CopyTo(System.Array,System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.RelationHRefDictionary.GetEnumerator">
            <summary>
            Returns an <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryEnumerator"/>
            that can iterate through the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.
            </summary>
            <returns>An <see cref="T:NewsComponents.Collections.IStringRelationHRefEntryEnumerator"/>
            for the entire <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.Hashtable.GetEnumerator"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.RelationHRefDictionary.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator"/> that can
            iterate through the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.IDictionaryEnumerator"/>
            for the entire <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.Hashtable.GetEnumerator"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.RelationHRefDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> that can
            iterate through the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/>
            for the entire <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.Hashtable.GetEnumerator"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.RelationHRefDictionary.Remove(System.String)">
            <summary>
            Removes the element with the specified <see cref="T:System.String"/> key
            from the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key of the element
            to remove from the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>RelationHRefDictionary</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.Hashtable.Remove(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.RelationHRefDictionary.System#Collections#IDictionary#Remove(System.Object)">
            <summary>
            Removes the element with the specified key
            from the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.
            </summary>
            <param name="key">The key of the element to remove from the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.
            This argument must be compatible with <see cref="T:System.String"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidCastException"><paramref name="key"/>
            is not compatible with <see cref="T:System.String"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>RelationHRefDictionary</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.Hashtable.Remove(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.RelationHRefDictionary.Synchronized(NewsComponents.Collections.RelationHRefDictionary)">
            <summary>
            Returns a synchronized (thread-safe) wrapper
            for the specified <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.
            </summary>
            <param name="dictionary">The <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/> to synchronize.</param>
            <returns>A synchronized (thread-safe) wrapper around <paramref name="dictionary"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dictionary"/> is a null reference.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.RelationHRefDictionary.Count">
            <summary>
            Gets the number of key-and-value pairs contained in the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.
            </summary>
            <value>
            The number of key-and-value pairs contained in the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.
            </value>
            <remarks>Please refer to <see cref="P:System.Collections.Hashtable.Count"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.RelationHRefDictionary.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/> has a fixed size.
            </summary>
            <value><c>true</c> if the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/> has a fixed size;
            otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.Hashtable.IsFixedSize"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.RelationHRefDictionary.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/> is read-only.
            </summary>
            <value><c>true</c> if the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/> is read-only;
            otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.Hashtable.IsReadOnly"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.RelationHRefDictionary.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>
            is synchronized (thread-safe).
            </summary>
            <value><c>true</c> if access to the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/> is
            synchronized (thread-safe); otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.Hashtable.IsSynchronized"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.RelationHRefDictionary.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> value
            associated with the specified <see cref="T:System.String"/> key.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key
            whose value to get or set.</param>
            <value>The <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> value associated with the specified
            <paramref name="key"/>. If the specified <paramref name="key"/> is not found,
            attempting to get it returns
            a default-initialized <b>RelationHRefEntry</b> value,
            and attempting to set it creates a new element using the specified
            <paramref name="key"/>.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The property is set and the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/> is read-only.</para>
            <para>-or-</para>
            <para>The property is set, <paramref name="key"/> does not exist in the collection,
            and the <b>RelationHRefDictionary</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="P:System.Collections.Hashtable.Item(System.Object)"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.RelationHRefDictionary.System#Collections#IDictionary#Item(System.Object)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get or set.
            This argument must be compatible with <see cref="T:System.String"/>.</param>
            <value>
            The value associated with the specified <paramref name="key"/>. If the specified
            <paramref name="key"/> is not found, attempting to get it returns
            a default-initialized <see cref="T:NewsComponents.Collections.RelationHRefEntry"/> object,
            and attempting to set it creates a new element using the specified <paramref name="key"/>.
            When set, this value must be compatible with <see cref="T:NewsComponents.Collections.RelationHRefEntry"/>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidCastException">
            <para><paramref name="key"/> is not compatible with <see cref="T:System.String"/>.</para>
            <para>-or-</para>
            <para>The property is set to a value that is not compatible with
            <see cref="T:NewsComponents.Collections.RelationHRefEntry"/>.</para></exception>
            <exception cref="T:System.NotSupportedException">
            <para>The property is set and the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/> is read-only.</para>
            <para>-or-</para>
            <para>The property is set, <paramref name="key"/> does not exist in the collection,
            and the <b>RelationHRefDictionary</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="P:System.Collections.Hashtable.Item(System.Object)"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.RelationHRefDictionary.Keys">
            <summary>
            Gets an <see cref="T:NewsComponents.Collections.IStringCollection"/> containing
            the keys in the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.
            </summary>
            <value>An <see cref="T:NewsComponents.Collections.IStringCollection"/> containing
            the keys in the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.Hashtable.Keys"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.RelationHRefDictionary.System#Collections#IDictionary#Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> containing
            the keys in the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.
            </summary>
            <value>An <see cref="T:System.Collections.ICollection"/> containing
            the keys in the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.Hashtable.Keys"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.RelationHRefDictionary.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize
            access to the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.
            </summary>
            <value>An object that can be used to synchronize
            access to the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.Hashtable.SyncRoot"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.RelationHRefDictionary.Values">
            <summary>
            Gets an <see cref="T:NewsComponents.Collections.IRelationHRefEntryCollection"/> containing
            the values in the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.
            </summary>
            <value>An <see cref="T:NewsComponents.Collections.IRelationHRefEntryCollection"/> containing
            the values in the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.Hashtable.Values"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.RelationHRefDictionary.System#Collections#IDictionary#Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> containing
            the values in the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.
            </summary>
            <value>An <see cref="T:System.Collections.ICollection"/> containing
            the values in the <see cref="T:NewsComponents.Collections.RelationHRefDictionary"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.Hashtable.Values"/> for details.</remarks>
        </member>
        <member name="T:NewsComponents.INewsComponentsConfiguration">
            <summary>
            INewsComponentsConfiguration provides the relevant configuration
            information required to run NewsHandler.
            </summary>
        </member>
        <member name="P:NewsComponents.INewsComponentsConfiguration.ApplicationID">
            <summary>
            Gets the application ID. This will be used e.g. to build
            the relative path below the user's appdata (UserApplicationDataPath)
            or local appdata (UserLocalApplicationDataPath) paths.
            </summary>
            <remarks>Required</remarks>
            <value>The application ID.</value>
        </member>
        <member name="P:NewsComponents.INewsComponentsConfiguration.UserApplicationDataPath">
            <summary>
            Gets the windows user application data path (roaming one).
            </summary>
            <remarks>Required</remarks>
            <value>The windows user application path.</value>
        </member>
        <member name="P:NewsComponents.INewsComponentsConfiguration.UserLocalApplicationDataPath">
            <summary>
            Gets the windows user local application data path (non-roaming).
            </summary>
            <remarks>Required</remarks>
            <value>The windows user local application path.</value>
        </member>
        <member name="P:NewsComponents.INewsComponentsConfiguration.DownloadedFilesDataPath">
            <summary>
            Gets the downloaded files data path. Usually a folder 
            located below user's Documents.
            </summary>
            <remarks>Optional. Set to null to prevent initializing the 
            BackgroundDownloadManager.</remarks>
            <value>The downloaded files data path.</value>
        </member>
        <member name="P:NewsComponents.INewsComponentsConfiguration.PersistedSettings">
            <summary>
            Gets a persisted settings implementation.
            </summary>
            <remarks>Required</remarks>
            <value>The persisted settings.</value>
        </member>
        <member name="P:NewsComponents.INewsComponentsConfiguration.CacheManager">
            <summary>
            Gets the cache manager.
            </summary>
            <remarks>Required</remarks>
            <value>The cache manager.</value>
        </member>
        <member name="P:NewsComponents.INewsComponentsConfiguration.SearchIndexBehavior">
            <summary>
            Gets the search index behavior.
            </summary>
            <remarks>Required</remarks>
            <value>The search index behavior.</value>
        </member>
        <member name="T:NewsComponents.IPersistedSettings">
            <summary>
            Defines the interface to a permanent/persisted settings storage impl.
            Permanent/persisted means: the settings must be available for multiple
            (sequential) running application sessions.
            </summary>
        </member>
        <member name="M:NewsComponents.IPersistedSettings.GetProperty(System.String,System.Type,System.Object)">
            <summary>
            Gets the property value.
            </summary>
            <param name="name">The name.</param>
            <param name="returnType">Type of the return.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.IPersistedSettings.SetProperty(System.String,System.Object)">
            <summary>
            Sets the property value.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:NewsComponents.SearchIndexBehavior">
            <summary>
            Defines the search indexing storage behavior options
            </summary>
        </member>
        <member name="F:NewsComponents.SearchIndexBehavior.NoIndexing">
            <summary>
            No index will be built
            </summary>
        </member>
        <member name="F:NewsComponents.SearchIndexBehavior.LocalAppDataDirectoryBased">
            <summary>
            Index is directory based and build relative to
            the user's local application data folder
            </summary>
        </member>
        <member name="F:NewsComponents.SearchIndexBehavior.AppDataDirectoryBased">
            <summary>
            Index is directory based and build relative to
            the user's application data folder
            </summary>
        </member>
        <member name="F:NewsComponents.SearchIndexBehavior.TempDirectoryBased">
            <summary>
            Index is directory based and build relative to
            the user's temporary folder
            </summary>
        </member>
        <member name="F:NewsComponents.SearchIndexBehavior.Default">
            <summary>
            Defindes the default indexing behavior: LocalAppDataDirectoryBased
            </summary>
        </member>
        <member name="T:NewsComponents.NewsComponentsConfiguration">
            <summary>
            Provides a default implementation of INewsComponentsConfiguration
            </summary>
        </member>
        <member name="F:NewsComponents.NewsComponentsConfiguration.Default">
            <summary>
            Gets the default configuration instance
            </summary>
        </member>
        <member name="M:NewsComponents.NewsComponentsConfiguration.CreateDefaultConfiguration">
            <summary>
            Creates the default configuration.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NewsComponents.NewsComponentsConfiguration.ApplicationID">
            <summary>
            Gets/Sets the application ID. This will be used e.g. to build
            the relative path below the user's appdata (UserApplicationDataPath)
            or local appdata (UserLocalApplicationDataPath) paths.
            </summary>
            <value>The application ID.</value>
        </member>
        <member name="P:NewsComponents.NewsComponentsConfiguration.UserApplicationDataPath">
            <summary>
            Gets the windows user application data path (roaming one).
            </summary>
            <value>The windows user application path.</value>
        </member>
        <member name="P:NewsComponents.NewsComponentsConfiguration.UserLocalApplicationDataPath">
            <summary>
            Gets the windows user local application data path (non-roaming).
            </summary>
            <value>The windows user local application path.</value>
        </member>
        <member name="P:NewsComponents.NewsComponentsConfiguration.DownloadedFilesDataPath">
            <summary>
            Gets the downloaded files data path. Usually a folder
            located below user's Documents.
            </summary>
            <value>The downloaded files data path.</value>
        </member>
        <member name="P:NewsComponents.NewsComponentsConfiguration.PersistedSettings">
            <summary>
            Gets a persisted settings implementation.
            </summary>
            <value>The persisted settings.</value>
        </member>
        <member name="P:NewsComponents.NewsComponentsConfiguration.CacheManager">
            <summary>
            Gets the cache manager.
            </summary>
            <value>The cache manager.</value>
        </member>
        <member name="P:NewsComponents.NewsComponentsConfiguration.SearchIndexBehavior">
            <summary>
            Gets the search index behavior.
            </summary>
            <value>The search index behavior.</value>
        </member>
        <member name="T:NewsComponents.Utils.MimeType">
            <summary>
            Represents a MIME Type.
            See also http://www.ietf.org/rfc/rfc2045.txt
            and http://msdn.microsoft.com/library/default.asp?url=/workshop/networking/moniker/overview/appendix_a.asp
            </summary>
        </member>
        <member name="M:NewsComponents.Utils.MimeType.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:NewsComponents.Utils.MimeType.#ctor(System.String)">
            <summary>Constructor.</summary>
            <param name="contentType">Full MIME Content-Type string.</param>
        </member>
        <member name="M:NewsComponents.Utils.MimeType.#ctor(System.String,System.String)">
            <summary>Constructor.</summary>
            <param name="type">discrete-type or composite-type</param>
            <param name="subType">sub-Type</param>
        </member>
        <member name="F:NewsComponents.Utils.MimeType.Empty">
            <summary>
            Gets an empty MimeType instance.
            </summary>
        </member>
        <member name="M:NewsComponents.Utils.MimeType.CreateFrom(System.String)">
            <summary>
            Gets the MIME type of a file.
            </summary>
            <param name="dataFileName">File name incl. path</param>
            <returns>MimeType</returns>
            <exception cref="T:System.ArgumentNullException">if dataFileName is null or empty</exception>
        </member>
        <member name="M:NewsComponents.Utils.MimeType.CreateFrom(System.String,System.String)">
            <summary>
            Gets the MIME type of a file.
            </summary>
            <param name="dataFileName">File name incl. path</param>
            <param name="mimeProposed">A proposed MIME content type string</param>
            <returns>MimeType</returns>
            <remarks>If mimeProposed is null or empty, also the file extension is used to detect the MIME type, 
            if it cannot be obtained from the file content</remarks>
            <exception cref="T:System.ArgumentNullException">if dataFileName is null or empty</exception>
        </member>
        <member name="M:NewsComponents.Utils.MimeType.CreateFrom(System.String,NewsComponents.Utils.MimeType)">
            <summary>
            Gets the MIME type of a file.
            </summary>
            <param name="dataFileName">File name incl. path</param>
            <param name="mimeProposed">A proposed MIME content type</param>
            <returns>MimeType</returns>
            <remarks>If mimeProposed is null or empty, also the file extension is used to detect the MIME type, 
            if it cannot be obtained from the file content</remarks>
            <exception cref="T:System.ArgumentNullException">if dataFileName is null or empty</exception>
        </member>
        <member name="M:NewsComponents.Utils.MimeType.CreateFrom(System.IO.Stream)">
            <summary>
            Gets the MIME type of a stream.
            </summary>
            <param name="dataStream">Stream to read</param>
            <returns>MimeType</returns>
            <exception cref="T:System.ArgumentNullException">if dataStream is null</exception>
            <exception cref="T:System.IO.IOException">On IO stream errors</exception>
            <exception cref="T:System.NotSupportedException">If stream do not support reading
            or is not seekable</exception>
            <exception cref="T:System.InvalidOperationException">If the stream contains no readable data (length zero)</exception>
        </member>
        <member name="M:NewsComponents.Utils.MimeType.CreateFrom(System.IO.Stream,System.String)">
            <summary>
            Gets the MIME type of a stream.
            </summary>
            <param name="dataStream">Stream to read</param>
            <param name="mimeProposed">A proposed MIME content type string</param>
            <returns>MimeType</returns>
            <exception cref="T:System.ArgumentNullException">if dataStream is null</exception>
            <exception cref="T:System.IO.IOException">On IO stream errors</exception>
            <exception cref="T:System.NotSupportedException">If stream do not support reading
            or is not seekable</exception>
            <exception cref="T:System.InvalidOperationException">If the stream contains no readable data (length zero)</exception>
        </member>
        <member name="M:NewsComponents.Utils.MimeType.CreateFrom(System.IO.Stream,NewsComponents.Utils.MimeType)">
            <summary>
            Gets the MIME type of a stream.
            </summary>
            <param name="dataStream">Stream to read</param>
            <param name="mimeProposed">A proposed MIME content type</param>
            <returns>MimeType</returns>
            <exception cref="T:System.ArgumentNullException">if dataStream is null</exception>
            <exception cref="T:System.IO.IOException">On IO stream errors</exception>
            <exception cref="T:System.NotSupportedException">If stream do not support reading
            or is not seekable</exception>
            <exception cref="T:System.InvalidOperationException">If the stream contains no readable data (length zero)</exception>
        </member>
        <member name="M:NewsComponents.Utils.MimeType.CreateFrom(System.Byte[])">
            <summary>
            Gets the MIME type of a byte array.
            </summary>
            <param name="dataBytes">Byte array with the content</param>
            <returns>MimeType</returns>
            <exception cref="T:System.ArgumentNullException">if dataStream is null</exception>
        </member>
        <member name="M:NewsComponents.Utils.MimeType.CreateFrom(System.Byte[],System.String)">
            <summary>
            Gets the MIME type of a byte array.
            </summary>
            <param name="dataBytes">Byte array with the content</param>
            <param name="mimeProposed">A proposed MIME content type string</param>
            <returns>MimeType</returns>
            <exception cref="T:System.ArgumentNullException">if dataStream is null</exception>
        </member>
        <member name="M:NewsComponents.Utils.MimeType.CreateFrom(System.Byte[],NewsComponents.Utils.MimeType)">
            <summary>
            Gets the MIME type of a byte array.
            </summary>
            <param name="dataBytes">Byte array with the content</param>
            <param name="mimeProposed">A proposed MIME content type</param>
            <returns>MimeType</returns>
            <exception cref="T:System.ArgumentNullException">if dataStream is null</exception>
        </member>
        <member name="M:NewsComponents.Utils.MimeType.CreateFromFileExt(System.String)">
            <summary>
            Get a MimeType from a provided file extension.
            </summary>
            <param name="fileNameExt">File name incl. extension or
            extension only: e.g. ".pdf"</param>
            <returns>MimeType</returns>
        </member>
        <member name="M:NewsComponents.Utils.MimeType.CreateFromRegisteredApps(System.String)">
            <summary>
            Creates a MimeType for a file extension using the OS registered applications 
            for that file type.
            </summary>
            <param name="fileExtension">string (e.g. "pdf" or ".pdf")</param>
            <returns>MimeType</returns>
            <permission cref="T:System.Security.Permissions.RegistryPermission">Read access to HKEY_CLASSES_ROOT\MIME</permission>
        </member>
        <member name="M:NewsComponents.Utils.MimeType.GetCLSID">
            <summary>
            Gets the CLSID for this MimeType instance.
            </summary>
            <returns>CLSID (string), or null</returns>
        </member>
        <member name="M:NewsComponents.Utils.MimeType.GetFileExtension">
            <summary>
            Gets the file extension for this MimeType instance.
            </summary>
            <returns>File extension (string) if found/available, else null</returns>
        </member>
        <member name="M:NewsComponents.Utils.MimeType.MatchContentOf(System.String)">
            <summary>
            Returns true, if the content of the provided fileName
            matches this MimeType. 
            You can use this to check if the content of a file matches
            this mimetype. This check will NOT take the file extension
            into account!
            </summary>
            <param name="fileName">string</param>
            <exception cref="T:System.ArgumentNullException">If fileName is null or length of 0</exception>
            <returns>true if the file content match this mimetype, else false</returns>
        </member>
        <member name="M:NewsComponents.Utils.MimeType.MatchContentOf(System.IO.Stream)">
            <summary>
            Returns true, if the content of the provided stream
            matches this MimeType. 
            You can use this to check if the content of a stream matches
            this mimetype.
            </summary>
            <remarks>The provided stream must be seekable for this check
            to succeed.</remarks>
            <param name="stream">Stream</param>
            <exception cref="T:System.ArgumentNullException">If stream is null</exception>
            <returns>true if the stream content match this mimetype, else false</returns>
        </member>
        <member name="M:NewsComponents.Utils.MimeType.MatchContentOf(System.Byte[])">
            <summary>
            Returns true, if the content of the provided byte array
            matches this MimeType. 
            You can use this to check if the content of a byte array matches
            this mimetype.
            </summary>
            <param name="bytes">byte[]</param>
            <exception cref="T:System.ArgumentNullException">If bytes are null or length of 0</exception>
            <returns>true if the byte array content match this mimetype, else false</returns>
        </member>
        <member name="M:NewsComponents.Utils.MimeType.FindMimeFromData(System.IntPtr,System.IntPtr,System.Byte[],System.Int32,System.IntPtr,System.Int32,System.IntPtr@,System.Int32)">
            <summary>
            Determines the Multipurpose Internet Mail Extensions (MIME) type 
            from the data provided.
            </summary>
            <param name="pBC">Pointer to the bind context. This can be set to NULL. </param>
            <param name="pwzUrl">Pointer to a string value that contains the URL of the data. 
            This can be set to NULL if pBuffer contains the data to be sniffed.</param>
            <param name="pBuffer">Pointer to the buffer containing the data to be sniffed. 
            This can be set to NULL if pwzUrl contains a valid URL. </param>
            <param name="cbSize">Unsigned long integer value that contains the size of the buffer</param>
            <param name="pwzMimeProposed">Pointer to a string value containing the proposed MIME type. 
            This can be set to NULL.</param>
            <param name="dwMimeFlags">Reserved. Must be set to 0.</param>
            <param name="ppwzMimeOut">Address of a string value containing the suggested MIME type.</param>
            <param name="dwReserved">Reserved. Must be set to 0.</param>
            <returns>
            Returns one of the following values.
              * E_INVALIDARG One or more of the arguments passed to the function were invalid. 
              * E_OUTOFMEMORY The function could not allocate enough memory to complete 
              the call. 
              * NOERROR The call was completed successfully. 
            </returns>
        </member>
        <member name="P:NewsComponents.Utils.MimeType.Type">
            <summary>
            Gets/Sets the MIME type (discrete-type or composite-type)
            </summary>
        </member>
        <member name="P:NewsComponents.Utils.MimeType.SubType">
            <summary>
            Gets/Sets the MIME sub-Type.
            </summary>
        </member>
        <member name="P:NewsComponents.Utils.MimeType.ContentType">
            <summary>
            Gets/Sets the Full MIME Content-Type string.
            </summary>
        </member>
        <member name="T:NewsComponents.Utils.MimeType.WindowsRegistry">
            <summary>
            Wrap the windows registry access needed for MimeType
            </summary>
        </member>
        <member name="M:NewsComponents.Utils.MimeType.WindowsRegistry.GetMimeTypeString(System.String)">
            <summary>
            Gets the mimetype (string) for an provided 
            file extension (incl. the leading point, e.g. ".pdf")
            </summary>
            <param name="fileExtension">string (incl. the leading point, e.g. ".pdf")</param>
            <returns>Non empty string if found, else null</returns>
            <permission cref="T:System.Security.Permissions.RegistryPermission">Read access to HKEY_CLASSES_ROOT\MIME</permission>
        </member>
        <member name="M:NewsComponents.Utils.MimeType.WindowsRegistry.GetMimeTypeOption(System.String,System.String)">
            <summary>
            Gets the mimetype option (string) for an provided 
            mimetype.
            </summary>
            <param name="mimeType">string. The mimetype to return an option for</param>
            <param name="option">string (incl. the leading point, e.g. ".pdf")</param>
            <returns>Non empty string if found, else null</returns>
            <permission cref="T:System.Security.Permissions.RegistryPermission">Read access to HKEY_CLASSES_ROOT\MIME</permission>
        </member>
        <member name="T:NewsComponents.Search.LuceneSearch">
            <summary>
            Manages the process (instantiating the objects and hooking them together, 
            both for indexing and for searching), selecting the data files, 
            parsing the data files, getting the search string from the user 
            and displaying/providing the search results to the user 	
            </summary>
            <remarks>See also: 
            Project home page(s):
            http://incubator.apache.org/lucene.net/ (current project site)
            http://www.dotlucene.net/	(formerly project site)
            
            Documentations:
            http://www.dotlucene.net/documentation/ToolforAnalyzingLuceneInd.html
            http://www.lucenebook.com/
            
            Downloads:
            http://incubator.apache.org/lucene.net/download/
            </remarks>
        </member>
        <member name="F:NewsComponents.Search.LuceneSearch.HelpLink">
            <summary>
            Used in exceptions as the help link
            </summary>
        </member>
        <member name="F:NewsComponents.Search.LuceneSearch.DefaultLanguage">
            <summary>
            Gets the default language used by lucene search and indexers
            </summary>
        </member>
        <member name="F:NewsComponents.Search.LuceneSearch.indexRelevantPropertyChanges">
            <summary>
            Defines all index relevant feedsFeed properties, 
            that are part of the lucene search index. On any change
            of these feedsFeed properties, that feed requires to be re-indexed!
            </summary>
        </member>
        <member name="F:NewsComponents.Search.LuceneSearch.startIndexAll">
            <summary>
            Is true, if we have to initially index all feeds
            </summary>
        </member>
        <member name="M:NewsComponents.Search.LuceneSearch.#ctor(NewsComponents.INewsComponentsConfiguration,NewsComponents.NewsHandler)">
            <summary>
            Default constructor
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="newsHandler">The news handler.</param>
            <exception cref="T:System.ArgumentNullException">if newsHandler or configuration are null</exception>
            <exception cref="T:System.IO.IOException">On indexPath directory creation failures</exception>
            <exception cref="T:System.Security.SecurityException">On indexPath directory creation failures</exception>
        </member>
        <member name="M:NewsComponents.Search.LuceneSearch.ExecuteSearch(NewsComponents.Search.SearchCriteriaCollection,NewsComponents.Feed.feedsFeed[],System.String)">
            <summary>
            Executes a search. 
            </summary>
            <param name="criteria">The criteria.</param>
            <param name="scope">The scope.</param>
            <param name="cultureName">Name of the culture.</param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Search.LuceneSearch.IsIndexRelevantChange(NewsComponents.NewsFeedProperty)">
            <summary>
            Determines whether the changed specified properties 
            are index relevant changes.
            </summary>
            <param name="changedProperty">The changed property or properties.</param>
            <returns>
            	<c>true</c> if it is a index relevant change; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NewsComponents.Search.LuceneSearch.CheckIndex">
            <summary>
            Checks the index. If it does not exists, this will start
            creating a new index. This process is recoverable/restartable and 
            can/should be called each time the Search is expected to be used.
            </summary>
        </member>
        <member name="M:NewsComponents.Search.LuceneSearch.CheckIndex(System.Boolean)">
            <summary>
            Checks the index. If it does not exists, this will start
            creating a new index. This process is recoverable/restartable and
            can/should be called each time the Search is expected to be used.
            </summary>
            <param name="force">if set to <c>true</c> a re-indexing of all
            items is started.</param>
        </member>
        <member name="M:NewsComponents.Search.LuceneSearch.IndexAdd(System.Collections.IList)">
            <summary>
            Add the list of NewsItems to the lucene search index.
            </summary>
            <param name="newsItems">The news items list.</param>
        </member>
        <member name="M:NewsComponents.Search.LuceneSearch.IndexAdd(NewsComponents.NewsItem)">
            <summary>
            Add the NewsItem to the lucene search index.
            </summary>
            <param name="item">The news item.</param>
        </member>
        <member name="M:NewsComponents.Search.LuceneSearch.IndexRemove(NewsComponents.NewsItem[])">
            <summary>
            Remove the list of NewsItems from the lucene search index.
            </summary>
            <param name="newsItems">The news items list.</param>
        </member>
        <member name="M:NewsComponents.Search.LuceneSearch.IndexRemove(NewsComponents.NewsItem)">
            <summary>
            Remove the list of NewsItems from the lucene search index.
            </summary>
            <param name="newsItem">The news items list.</param>
        </member>
        <member name="M:NewsComponents.Search.LuceneSearch.IndexRemove(System.String)">
            <summary>
            Remove the feed (and all it's items) from the lucene search index.
            </summary>
            <param name="feedID">The feed url.</param>
        </member>
        <member name="M:NewsComponents.Search.LuceneSearch.IndexRemoveAll">
            <summary>
            Remove all indexed feeds (and all it's items) from the lucene search index.
            </summary>
        </member>
        <member name="M:NewsComponents.Search.LuceneSearch.ReIndex(NewsComponents.Feed.feedsFeed)">
            <summary>
            Re-Index a feed. First, the feed gets removed completely from index,
            then the items are added to index again.
            </summary>
            <param name="feed">The feed.</param>
        </member>
        <member name="M:NewsComponents.Search.LuceneSearch.IndexOptimize">
            <summary>
            Optimize the search index.
            </summary>
        </member>
        <member name="M:NewsComponents.Search.LuceneSearch.StopIndexer">
            <summary>
            Stops the indexer (background thread),
            performs all pending operations on the index and 
            flushes all pending I/O writes to disk. 
            </summary>
        </member>
        <member name="M:NewsComponents.Search.LuceneSearch.GetAnalyzer(NewsComponents.NewsItem)">
            <summary>
            Gets the analyzer matching the item.Language.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Search.LuceneSearch.GetAnalyzer(System.String)">
            <summary>
            Base method to get the analyzer.
            TODO: have to be changed as soon Lucene fully integrates
            the Snowball Analyzer using different language stemmers.
            See also: https://svn.apache.org/repos/asf/incubator/lucene.net/trunk/C%23/contrib/Snowball.Net/Snowball.Net/Lucene.Net/Analysis/Snowball/
            </summary>
            <param name="culture">The language.</param>
            <remarks>To get language support we use a custom build of Lucene.Net.dll
            including the various language packs. Italian was there, but did not compiled
            and so it is not supported here.</remarks>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Search.LuceneSearch.NormalizeCulture(System.String)">
            <summary>
            Normalizes the culture provided and returns 
            a culture string supported by the LuceneSearch 
            infrastructure (that can be mapped to a Analyzer class).
            </summary>
            <param name="culture">The language.</param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Search.LuceneSearch.CreateIndexer">
            <summary>
            Creates the indexer.
            </summary>
            <returns></returns>
        </member>
        <member name="E:NewsComponents.Search.LuceneSearch.IndexingProgress">
            <summary>
            Raised on Indexing progress
            </summary>
        </member>
        <member name="E:NewsComponents.Search.LuceneSearch.IndexingFinished">
            <summary>
            Raised, if the Indexing process finished.
            </summary>
        </member>
        <member name="P:NewsComponents.Search.LuceneSearch.Settings">
            <summary>
            Gets the settings.
            </summary>
            <value>The settings.</value>
        </member>
        <member name="P:NewsComponents.Search.LuceneSearch.RestartIndexingStateFile">
            <summary>
            Gets the restart indexing state file path.
            </summary>
            <value>The index state file.</value>
        </member>
        <member name="T:NewsComponents.Search.LuceneSearch.IndexDocument">
            <summary>
            Used internal only to identify index documents
            for maintenance (remove/refresh), define the major
            search field and a summery to display.
            </summary>
        </member>
        <member name="T:NewsComponents.Search.LuceneSearch.Result">
            <summary>
            Container of a search result
            </summary>
        </member>
        <member name="M:NewsComponents.Search.LuceneSearch.Result.#ctor(System.Int32,System.Int32,System.Collections.IList,System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.Search.LuceneSearch.Result"/> class.
            </summary>
            <param name="itemMatches">The item matches.</param>
            <param name="feedMatches">The feed matches.</param>
            <param name="itemsMatched">The items matched.</param>
            <param name="feedsMatched">The feeds matched.</param>
        </member>
        <member name="T:NewsComponents.Search.LuceneSearch.SearchException">
            <summary>
            Search Exception. May be caused on search expression validation
            or other search specific errors.
            </summary>
        </member>
        <member name="M:NewsComponents.Search.LuceneSearch.SearchException.#ctor">
            <summary></summary>
        </member>
        <member name="M:NewsComponents.Search.LuceneSearch.SearchException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:NewsComponents.Search.LuceneSearch.SearchException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="T:NewsComponents.News.NntpStatusCode">
            <summary>
            Represents the status of an NNTP request
            </summary>
        </member>
        <member name="F:NewsComponents.News.NntpStatusCode.OK">
            <summary>
            Indicates that the operation was successful
            </summary>
        </member>
        <member name="F:NewsComponents.News.NntpStatusCode.Error">
            <summary>
            Indicates that an error occured while trying to satisfy the NNTP request
            </summary>
        </member>
        <member name="T:NewsComponents.News.NntpWebResponse">
            <summary>
            Provides an NNTP-specific implementation of the WebRequest class.
            </summary>
        </member>
        <member name="F:NewsComponents.News.NntpWebResponse.statusCode">
            <summary>
            The status of the request
            </summary>
        </member>
        <member name="F:NewsComponents.News.NntpWebResponse.contentLength">
            <summary>
            The length of the content returned by the request
            </summary>
        </member>
        <member name="F:NewsComponents.News.NntpWebResponse.contentType">
            <summary>
            Gets the content type of the response.
            </summary>
        </member>
        <member name="F:NewsComponents.News.NntpWebResponse.headers">
            <summary>
            The collection of header name/value pairs associated with the request
            </summary>
        </member>
        <member name="F:NewsComponents.News.NntpWebResponse.responseUri">
            <summary>
            The URI of the response.
            </summary>
        </member>
        <member name="F:NewsComponents.News.NntpWebResponse.responseStream">
            <summary>
            Stream for reading response from the server.  
            </summary>
        </member>
        <member name="M:NewsComponents.News.NntpWebResponse.#ctor">
            <summary>
            Prevent creating an NntpWebResponse without a status code
            </summary>
        </member>
        <member name="M:NewsComponents.News.NntpWebResponse.#ctor(NewsComponents.News.NntpStatusCode)">
            <summary>
            Creates an NntpWebResponse with the given status code
            </summary>
            <param name="status">The status code of the response</param>
        </member>
        <member name="M:NewsComponents.News.NntpWebResponse.#ctor(NewsComponents.News.NntpStatusCode,System.IO.Stream)">
            <summary>
            Creates an NntpWebResponse with the given status code and sets the response stream
            </summary>
            <param name="status">The status code of the response</param>
            <param name="stream">the response stream</param>
        </member>
        <member name="M:NewsComponents.News.NntpWebResponse.Dispose">
            <summary>
             Close memory stream and open connections
             </summary>
        </member>
        <member name="M:NewsComponents.News.NntpWebResponse.GetResponseStream">
            <summary>
            Returns the response stream sent back by the server
            </summary>
            <returns>The response stream</returns>
        </member>
        <member name="M:NewsComponents.News.NntpWebResponse.Close">
            <summary>
            Closes the response stream
            </summary>
        </member>
        <member name="P:NewsComponents.News.NntpWebResponse.StatusCode">
            <summary>
            The status of the NNTP response from the server
            </summary>
        </member>
        <member name="P:NewsComponents.News.NntpWebResponse.Headers">
            <summary>
            Gets the collection of header name/value pairs associated with the request
            </summary>
        </member>
        <member name="P:NewsComponents.News.NntpWebResponse.ContentType">
            <summary>
            Gets the content type of the response.
            </summary>
        </member>
        <member name="P:NewsComponents.News.NntpWebResponse.ContentLength">
            <summary>
            Gets the length of the content returned by the request.
            </summary>
        </member>
        <member name="P:NewsComponents.News.NntpWebResponse.ResponseUri">
            <summary>
            The URI of the request.
            </summary>
        </member>
        <member name="T:NewsComponents.Net.DownloadTask">
            <summary>
            Holds the state information about an download in progress.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.DownloadTask.id">
            <summary>
            The task Id.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.DownloadTask.downloadFilesBase">
            <summary>
            The base folder where files will be downloaded.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.DownloadTask.item">
            <summary>
            The item that is being processed.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.DownloadTask.context">
            <summary>
            The task context where all the components can set information for later retrieval.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.DownloadTask.state">
            <summary>
            The status of the download task.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.DownloadTask.syncRoot">
            <summary>
            An object that can be used to synchronize access to the DownloadTask.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.DownloadTask.downloader">
            <summary>
            The Downloader that is responsible for downloading this task.
            </summary>
        </member>
        <member name="M:NewsComponents.Net.DownloadTask.#ctor(NewsComponents.Net.DownloadItem,NewsComponents.IDownloadInfoProvider)">
            <summary>
            Creates an instance of the updater task using the specified item.
            </summary>
            <param name="item">The item corresponding to an updater task.</param>
            <param name="info">IDownloadInfo</param>
        </member>
        <member name="M:NewsComponents.Net.DownloadTask.Init(NewsComponents.Net.DownloadItem,NewsComponents.IDownloadInfoProvider)">
            <summary>
            Initializes an existing DownloadTask with the specified item.
            </summary>
            <param name="item">The item corresponding to an updater task.</param>
            <param name="info">IDownloadInfoProvider</param>
        </member>
        <member name="M:NewsComponents.Net.DownloadTask.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor to support serialization required for storing the task.
            </summary>
            <param name="info">The serialization information.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="M:NewsComponents.Net.DownloadTask.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method used by the seralization mechanism to retrieve the serialized information.
            </summary>
            <param name="info">The serialization information.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="P:NewsComponents.Net.DownloadTask.Item(System.String)">
            <summary>
            A property bag where components can set key-value pairs of information for later retrieval.
            </summary>
            <param name="key">The index key of the item to locate.</param>
        </member>
        <member name="P:NewsComponents.Net.DownloadTask.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the DownloadTask.
            </summary>
        </member>
        <member name="P:NewsComponents.Net.DownloadTask.DownloadFilesBase">
            <summary>
            The base folder where files will be downloaded.
            </summary>
        </member>
        <member name="P:NewsComponents.Net.DownloadTask.TaskId">
            <summary>
            An unique identifier for the DownloadTask.
            </summary>
        </member>
        <member name="P:NewsComponents.Net.DownloadTask.State">
            <summary>
            The current state of the DownloadTask.
            <see cref="T:NewsComponents.Net.DownloadTaskState"/>
            </summary>
        </member>
        <member name="P:NewsComponents.Net.DownloadTask.DownloadItem">
            <summary>
            The item corresponding to the current DownloadTask.
            </summary>
        </member>
        <member name="P:NewsComponents.Net.DownloadTask.Downloader">
            <summary>
            The IDownloader instance responsible for downloading this task
            </summary>
        </member>
        <member name="T:NewsComponents.Net.StateBag">
            <summary>
            A helper class to hold any state information needed in the DownloadTask.
            </summary>
        </member>
        <member name="M:NewsComponents.Net.StateBag.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:NewsComponents.Net.StateBag.Item(System.String)">
            <summary>
            Gets or sets and object value associated with a string key.
            </summary>
        </member>
        <member name="T:NewsComponents.Collections.GetArrayList">
            <summary>
            Helper class to return a empty ArrayList instance
            </summary>
        </member>
        <member name="P:NewsComponents.Collections.GetArrayList.Empty">
            <summary>
            Gets the empty/readonly single ArrayList instance.
            </summary>
        </member>
        <member name="T:NewsComponents.Collections.IfeedsFeedCollection">
            <summary>
            Defines size, enumerators, and synchronization methods for strongly
            typed collections of <see cref="T:NewsComponents.Feed.feedsFeed"/> elements.
            </summary>
            <remarks>
            <b>IfeedsFeedCollection</b> provides an <see cref="T:System.Collections.ICollection"/>
            that is strongly typed for <see cref="T:NewsComponents.Feed.feedsFeed"/> elements.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.IfeedsFeedCollection.CopyTo(NewsComponents.Feed.feedsFeed[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:NewsComponents.Collections.IfeedsFeedCollection"/> to a one-dimensional <see cref="T:System.Array"/>
            of <see cref="T:NewsComponents.Feed.feedsFeed"/> elements, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the
            <see cref="T:NewsComponents.Feed.feedsFeed"/> elements copied from the <see cref="T:NewsComponents.Collections.IfeedsFeedCollection"/>.
            The <b>Array</b> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/>
            at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:NewsComponents.Collections.IfeedsFeedCollection"/> is greater
            than the available space from <paramref name="arrayIndex"/> to the end of the destination
            <paramref name="array"/>.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IfeedsFeedCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:NewsComponents.Collections.IfeedsFeedEnumerator"/> that can
            iterate through the <see cref="T:NewsComponents.Collections.IfeedsFeedCollection"/>.
            </summary>
            <returns>An <see cref="T:NewsComponents.Collections.IfeedsFeedEnumerator"/>
            for the entire <see cref="T:NewsComponents.Collections.IfeedsFeedCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.IEnumerable.GetEnumerator"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IfeedsFeedCollection.Count">
            <summary>
            Gets the number of elements contained in the
            <see cref="T:NewsComponents.Collections.IfeedsFeedCollection"/>.
            </summary>
            <value>The number of elements contained in the
            <see cref="T:NewsComponents.Collections.IfeedsFeedCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ICollection.Count"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IfeedsFeedCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the
            <see cref="T:NewsComponents.Collections.IfeedsFeedCollection"/> is synchronized (thread-safe).
            </summary>
            <value><c>true</c> if access to the <see cref="T:NewsComponents.Collections.IfeedsFeedCollection"/> is
            synchronized (thread-safe); otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ICollection.IsSynchronized"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IfeedsFeedCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access
            to the <see cref="T:NewsComponents.Collections.IfeedsFeedCollection"/>.
            </summary>
            <value>An object that can be used to synchronize access
            to the <see cref="T:NewsComponents.Collections.IfeedsFeedCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ICollection.SyncRoot"/> for details.</remarks>
        </member>
        <member name="T:NewsComponents.Collections.IfeedsFeedList">
            <summary>
            Represents a strongly typed collection of <see cref="T:NewsComponents.Feed.feedsFeed"/>
            objects that can be individually accessed by index.
            </summary>
            <remarks>
            <b>IfeedsFeedList</b> provides an <see cref="T:System.Collections.IList"/>
            that is strongly typed for <see cref="T:NewsComponents.Feed.feedsFeed"/> elements.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.IfeedsFeedList.Add(NewsComponents.Feed.feedsFeed)">
            <summary>
            Adds a <see cref="T:NewsComponents.Feed.feedsFeed"/> to the end
            of the <see cref="T:NewsComponents.Collections.IfeedsFeedList"/>.
            </summary>
            <param name="value">The <see cref="T:NewsComponents.Feed.feedsFeed"/> object
            to be added to the end of the <see cref="T:NewsComponents.Collections.IfeedsFeedList"/>.
            This argument can be a null reference.
            </param>
            <returns>The <see cref="T:NewsComponents.Collections.IfeedsFeedList"/> index at which
            the <paramref name="value"/> has been added.</returns>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IfeedsFeedList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IfeedsFeedList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Add(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IfeedsFeedList.Clear">
            <summary>
            Removes all elements from the <see cref="T:NewsComponents.Collections.IfeedsFeedList"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IfeedsFeedList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IfeedsFeedList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Clear"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IfeedsFeedList.Contains(NewsComponents.Feed.feedsFeed)">
            <summary>
            Determines whether the <see cref="T:NewsComponents.Collections.IfeedsFeedList"/>
            contains the specified <see cref="T:NewsComponents.Feed.feedsFeed"/> element.
            </summary>
            <param name="value">The <see cref="T:NewsComponents.Feed.feedsFeed"/> object
            to locate in the <see cref="T:NewsComponents.Collections.IfeedsFeedList"/>.
            This argument can be a null reference.
            </param>
            <returns><c>true</c> if <paramref name="value"/> is found in the
            <see cref="T:NewsComponents.Collections.IfeedsFeedList"/>; otherwise, <c>false</c>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Contains(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IfeedsFeedList.IndexOf(NewsComponents.Feed.feedsFeed)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified
            <see cref="T:NewsComponents.Feed.feedsFeed"/> in the <see cref="T:NewsComponents.Collections.IfeedsFeedList"/>.
            </summary>
            <param name="value">The <see cref="T:NewsComponents.Feed.feedsFeed"/> object
            to locate in the <see cref="T:NewsComponents.Collections.IfeedsFeedList"/>.
            This argument can be a null reference.
            </param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="value"/>
            in the <see cref="T:NewsComponents.Collections.IfeedsFeedList"/>, if found; otherwise, -1.
            </returns>
            <remarks>Please refer to <see cref="M:System.Collections.IList.IndexOf(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IfeedsFeedList.Insert(System.Int32,NewsComponents.Feed.feedsFeed)">
            <summary>
            Inserts a <see cref="T:NewsComponents.Feed.feedsFeed"/> element into the
            <see cref="T:NewsComponents.Collections.IfeedsFeedList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which
            <paramref name="value"/> should be inserted.</param>
            <param name="value">The <see cref="T:NewsComponents.Feed.feedsFeed"/> object
            to insert into the <see cref="T:NewsComponents.Collections.IfeedsFeedList"/>.
            This argument can be a null reference.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is greater than
            <see cref="P:NewsComponents.Collections.IfeedsFeedCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IfeedsFeedList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IfeedsFeedList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IfeedsFeedList.Remove(NewsComponents.Feed.feedsFeed)">
            <summary>
            Removes the first occurrence of the specified <see cref="T:NewsComponents.Feed.feedsFeed"/>
            from the <see cref="T:NewsComponents.Collections.IfeedsFeedList"/>.
            </summary>
            <param name="value">The <see cref="T:NewsComponents.Feed.feedsFeed"/> object
            to remove from the <see cref="T:NewsComponents.Collections.IfeedsFeedList"/>.
            This argument can be a null reference.
            </param>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IfeedsFeedList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IfeedsFeedList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Remove(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IfeedsFeedList.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the
            <see cref="T:NewsComponents.Collections.IfeedsFeedList"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than
            <see cref="P:NewsComponents.Collections.IfeedsFeedCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IfeedsFeedList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IfeedsFeedList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.RemoveAt(System.Int32)"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IfeedsFeedList.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:NewsComponents.Collections.IfeedsFeedList"/> has a fixed size.
            </summary>
            <value><c>true</c> if the <see cref="T:NewsComponents.Collections.IfeedsFeedList"/> has a fixed size;
            otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IList.IsFixedSize"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IfeedsFeedList.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:NewsComponents.Collections.IfeedsFeedList"/> is read-only.
            </summary>
            <value><c>true</c> if the <see cref="T:NewsComponents.Collections.IfeedsFeedList"/> is read-only;
            otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IList.IsReadOnly"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IfeedsFeedList.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:NewsComponents.Feed.feedsFeed"/> element at the specified index.
            </summary>
            <param name="index">The zero-based index of the
            <see cref="T:NewsComponents.Feed.feedsFeed"/> element to get or set.</param>
            <value>
            The <see cref="T:NewsComponents.Feed.feedsFeed"/> element at the specified <paramref name="index"/>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than
            <see cref="P:NewsComponents.Collections.IfeedsFeedCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The property is set and the <see cref="T:NewsComponents.Collections.IfeedsFeedList"/> is read-only.</exception>
            <remarks>Please refer to <see cref="P:System.Collections.IList.Item(System.Int32)"/> for details.</remarks>
        </member>
        <member name="T:NewsComponents.Collections.IfeedsFeedEnumerator">
            <summary>
            Supports type-safe iteration over a collection that
            contains <see cref="T:NewsComponents.Feed.feedsFeed"/> elements.
            </summary>
            <remarks>
            <b>IfeedsFeedEnumerator</b> provides an <see cref="T:System.Collections.IEnumerator"/>
            that is strongly typed for <see cref="T:NewsComponents.Feed.feedsFeed"/> elements.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.IfeedsFeedEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><c>true</c> if the enumerator was successfully advanced to the next element;
            <c>false</c> if the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.IEnumerator.MoveNext"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IfeedsFeedEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position,
            which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.IEnumerator.Reset"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IfeedsFeedEnumerator.Current">
            <summary>
            Gets the current <see cref="T:NewsComponents.Feed.feedsFeed"/> element in the collection.
            </summary>
            <value>The current <see cref="T:NewsComponents.Feed.feedsFeed"/> element in the collection.</value>
            <exception cref="T:System.InvalidOperationException"><para>The enumerator is positioned
            before the first element of the collection or after the last element.</para>
            <para>-or-</para>
            <para>The collection was modified after the enumerator was created.</para></exception>
            <remarks>Please refer to <see cref="P:System.Collections.IEnumerator.Current"/> for details, but note
            that <b>Current</b> fails if the collection was modified since the last successful
            call to <see cref="M:NewsComponents.Collections.IfeedsFeedEnumerator.MoveNext"/> or <see cref="M:NewsComponents.Collections.IfeedsFeedEnumerator.Reset"/>.</remarks>
        </member>
        <member name="T:NewsComponents.Collections.IStringfeedsFeedCollection">
            <summary>
            Defines size, enumerators, and synchronization methods for strongly
            typed collections of <see cref="T:NewsComponents.Collections.FeedEntry"/> elements.
            </summary>
            <remarks>
            <b>IStringfeedsFeedCollection</b> provides an <see cref="T:System.Collections.ICollection"/>
            that is strongly typed for <see cref="T:NewsComponents.Collections.FeedEntry"/> elements.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringfeedsFeedCollection.CopyTo(NewsComponents.Collections.FeedEntry[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:NewsComponents.Collections.IStringfeedsFeedCollection"/>
            to a one-dimensional <see cref="T:System.Array"/> of <see cref="T:NewsComponents.Collections.FeedEntry"/> elements,
            starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the
            destination of the <see cref="T:NewsComponents.Collections.FeedEntry"/> elements copied from the
            <see cref="T:NewsComponents.Collections.IStringfeedsFeedCollection"/>.
            The <b>Array</b> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/>
            at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:NewsComponents.Collections.IStringfeedsFeedCollection"/>
            is greater than the available space from <paramref name="arrayIndex"/> to the end of the
            destination <paramref name="array"/>.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringfeedsFeedCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:NewsComponents.Collections.IStringfeedsFeedEnumerator"/> that can
            iterate through the <see cref="T:NewsComponents.Collections.IStringfeedsFeedCollection"/>.
            </summary>
            <returns>An <see cref="T:NewsComponents.Collections.IStringfeedsFeedEnumerator"/>
            for the entire <see cref="T:NewsComponents.Collections.IStringfeedsFeedCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.IEnumerable.GetEnumerator"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringfeedsFeedCollection.Count">
            <summary>
            Gets the number of elements contained in the
            <see cref="T:NewsComponents.Collections.IStringfeedsFeedCollection"/>.
            </summary>
            <value>The number of elements contained in the
            <see cref="T:NewsComponents.Collections.IStringfeedsFeedCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ICollection.Count"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringfeedsFeedCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the
            <see cref="T:NewsComponents.Collections.IStringfeedsFeedCollection"/> is synchronized (thread-safe).
            </summary>
            <value><c>true</c> if access to the <see cref="T:NewsComponents.Collections.IStringfeedsFeedCollection"/>
            is synchronized (thread-safe); otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ICollection.IsSynchronized"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringfeedsFeedCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access
            to the <see cref="T:NewsComponents.Collections.IStringfeedsFeedCollection"/>.
            </summary>
            <value>An object that can be used to synchronize access to the
            <see cref="T:NewsComponents.Collections.IStringfeedsFeedCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ICollection.SyncRoot"/> for details.</remarks>
        </member>
        <member name="T:NewsComponents.Collections.IStringfeedsFeedDictionary">
            <summary>
            Represents a strongly typed collection of
            <see cref="T:NewsComponents.Collections.FeedEntry"/> key-and-value pairs.
            </summary>
            <remarks>
            <b>IStringfeedsFeedDictionary</b> provides an
            <see cref="T:System.Collections.IDictionary"/> that is strongly typed for
            <see cref="T:System.String"/> keys and <see cref="T:NewsComponents.Feed.feedsFeed"/> values.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringfeedsFeedDictionary.Add(System.String,NewsComponents.Feed.feedsFeed)">
            <summary>
            Adds an element with the specified <see cref="T:System.String"/>
            key and <see cref="T:NewsComponents.Feed.feedsFeed"/> value to the
            <see cref="T:NewsComponents.Collections.IStringfeedsFeedDictionary"/>.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key of the element
            to add to the <see cref="T:NewsComponents.Collections.IStringfeedsFeedDictionary"/>.</param>
            <param name="value">The <see cref="T:NewsComponents.Feed.feedsFeed"/> value of the element
            to add to the <see cref="T:NewsComponents.Collections.IStringfeedsFeedDictionary"/>.
            This argument can be a null reference.
            </param>
            <exception cref="T:System.ArgumentException">
            <para>An element with the specified <paramref name="key"/> already exists
            in the <see cref="T:NewsComponents.Collections.IStringfeedsFeedDictionary"/>.</para>
            <para>-or-</para>
            <para>The <b>IStringfeedsFeedDictionary</b> is set to use the
            <see cref="T:System.IComparable"/> interface, and <paramref name="key"/> does not
            implement the <b>IComparable</b> interface.</para></exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">
            The comparer throws an exception.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IStringfeedsFeedDictionary"/> is read-only.
            </para><para>-or-</para>
            <para>The <b>IStringfeedsFeedDictionary</b> has a fixed size.
            </para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringfeedsFeedDictionary.Clear">
            <summary>
            Removes all elements from the <see cref="T:NewsComponents.Collections.IStringfeedsFeedDictionary"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IStringfeedsFeedDictionary"/> is read-only.
            </para><para>-or-</para>
            <para>The <b>IStringfeedsFeedDictionary</b> has a fixed size.
            </para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IDictionary.Clear"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringfeedsFeedDictionary.Contains(System.String)">
            <summary>
            Determines whether the <see cref="T:NewsComponents.Collections.IStringfeedsFeedDictionary"/>
            contains the specified <see cref="T:System.String"/> key.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key to locate
            in the <see cref="T:NewsComponents.Collections.IStringfeedsFeedDictionary"/>.</param>
            <returns><c>true</c> if the <see cref="T:NewsComponents.Collections.IStringfeedsFeedDictionary"/>
            contains an element with the specified <paramref name="key"/>; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">
            The comparer throws an exception.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.IDictionary.Contains(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringfeedsFeedDictionary.Remove(System.String)">
            <summary>
            Removes the element with the specified <see cref="T:System.String"/> key
            from the <see cref="T:NewsComponents.Collections.IStringfeedsFeedDictionary"/>.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key of the element to remove
            from the <see cref="T:NewsComponents.Collections.IStringfeedsFeedDictionary"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">
            The comparer throws an exception.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IStringfeedsFeedDictionary"/> is read-only.
            </para><para>-or-</para>
            <para>The <b>IStringfeedsFeedDictionary</b> has a fixed size.
            </para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IDictionary.Remove(System.Object)"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringfeedsFeedDictionary.IsFixedSize">
            <summary>
            Gets a value indicating whether the
            <see cref="T:NewsComponents.Collections.IStringfeedsFeedDictionary"/> has a fixed size.
            </summary>
            <value><c>true</c> if the <see cref="T:NewsComponents.Collections.IStringfeedsFeedDictionary"/>
            has a fixed size; otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IDictionary.IsFixedSize"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringfeedsFeedDictionary.IsReadOnly">
            <summary>
            Gets a value indicating whether the
            <see cref="T:NewsComponents.Collections.IStringfeedsFeedDictionary"/> is read-only.
            </summary>
            <value><c>true</c> if the <see cref="T:NewsComponents.Collections.IStringfeedsFeedDictionary"/>
            is read-only; otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IDictionary.IsReadOnly"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringfeedsFeedDictionary.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:NewsComponents.Feed.feedsFeed"/> value
            associated with the specified <see cref="T:System.String"/> key.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key
            whose value to get or set.</param>
            <value>The <see cref="T:NewsComponents.Feed.feedsFeed"/> value associated with the specified
            <paramref name="key"/>. If the specified <paramref name="key"/> is not found,
            attempting to get it returns
            a null reference,
            and attempting to set it creates a new element using the specified
            <paramref name="key"/>.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The property is set and the
            <see cref="T:NewsComponents.Collections.IStringfeedsFeedDictionary"/> is read-only.</para>
            <para>-or-</para>
            <para>The property is set, <paramref name="key"/> does not exist in the collection,
            and the <b>IStringfeedsFeedDictionary</b> has a fixed size.</para>
            </exception>
            <remarks>Please refer to <see cref="P:System.Collections.IDictionary.Item(System.Object)"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringfeedsFeedDictionary.Keys">
            <summary>
            Gets an <see cref="T:NewsComponents.Collections.IStringCollection"/> containing the keys
            in the <see cref="T:NewsComponents.Collections.IStringfeedsFeedDictionary"/>.
            </summary>
            <value>An <see cref="T:NewsComponents.Collections.IStringCollection"/> containing the keys
            in the <see cref="T:NewsComponents.Collections.IStringfeedsFeedDictionary"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IDictionary.Keys"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringfeedsFeedDictionary.Values">
            <summary>
            Gets an <see cref="T:NewsComponents.Collections.IfeedsFeedCollection"/> containing the values
            in the <see cref="T:NewsComponents.Collections.IStringfeedsFeedDictionary"/>.
            </summary>
            <value>An <see cref="T:NewsComponents.Collections.IfeedsFeedCollection"/> containing the values
            in the <see cref="T:NewsComponents.Collections.IStringfeedsFeedDictionary"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IDictionary.Values"/> for details.</remarks>
        </member>
        <member name="T:NewsComponents.Collections.IStringfeedsFeedList">
            <summary>
            Represents a strongly typed collection of <see cref="T:NewsComponents.Collections.FeedEntry"/>
            objects that can be individually accessed by index.
            </summary>
            <remarks>
            <b>IStringfeedsFeedList</b> provides an <see cref="T:System.Collections.IList"/>
            that is strongly typed for <see cref="T:NewsComponents.Collections.FeedEntry"/> elements.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringfeedsFeedList.Add(NewsComponents.Collections.FeedEntry)">
            <summary>
            Adds a <see cref="T:NewsComponents.Collections.FeedEntry"/> to the end
            of the <see cref="T:NewsComponents.Collections.IStringfeedsFeedList"/>.
            </summary>
            <param name="entry">The <see cref="T:NewsComponents.Collections.FeedEntry"/> object
            to be added to the end of the <see cref="T:NewsComponents.Collections.IStringfeedsFeedList"/>.
            </param>
            <returns>The <see cref="T:NewsComponents.Collections.IStringfeedsFeedList"/> index at which
            the <paramref name="entry"/> has been added.</returns>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IStringfeedsFeedList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IStringfeedsFeedList</b> has a fixed size.</para>
            </exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Add(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringfeedsFeedList.Clear">
            <summary>
            Removes all elements from the <see cref="T:NewsComponents.Collections.IStringfeedsFeedList"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IStringfeedsFeedList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IStringfeedsFeedList</b> has a fixed size.</para>
            </exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Clear"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringfeedsFeedList.Contains(NewsComponents.Collections.FeedEntry)">
            <summary>
            Determines whether the <see cref="T:NewsComponents.Collections.IStringfeedsFeedList"/>
            contains the specified <see cref="T:NewsComponents.Collections.FeedEntry"/> element.
            </summary>
            <param name="entry">The <see cref="T:NewsComponents.Collections.FeedEntry"/> object
            to locate in the <see cref="T:NewsComponents.Collections.IStringfeedsFeedList"/>.</param>
            <returns><c>true</c> if <paramref name="entry"/> is found in the
            <see cref="T:NewsComponents.Collections.IStringfeedsFeedList"/>; otherwise, <c>false</c>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Contains(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringfeedsFeedList.IndexOf(NewsComponents.Collections.FeedEntry)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified
            <see cref="T:NewsComponents.Collections.FeedEntry"/> in the <see cref="T:NewsComponents.Collections.IStringfeedsFeedList"/>.
            </summary>
            <param name="entry">The <see cref="T:NewsComponents.Collections.FeedEntry"/> object
            to locate in the <see cref="T:NewsComponents.Collections.IStringfeedsFeedList"/>.</param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="entry"/>
            in the <see cref="T:NewsComponents.Collections.IStringfeedsFeedList"/>, if found; otherwise, -1.
            </returns>
            <remarks>Please refer to <see cref="M:System.Collections.IList.IndexOf(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringfeedsFeedList.Insert(System.Int32,NewsComponents.Collections.FeedEntry)">
            <summary>
            Inserts a <see cref="T:NewsComponents.Collections.FeedEntry"/> element into the
            <see cref="T:NewsComponents.Collections.IStringfeedsFeedList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which
            <paramref name="entry"/> should be inserted.</param>
            <param name="entry">The <see cref="T:NewsComponents.Collections.FeedEntry"/> object to insert
            into the <see cref="T:NewsComponents.Collections.IStringfeedsFeedList"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is greater than
            <see cref="P:NewsComponents.Collections.IStringfeedsFeedCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IStringfeedsFeedList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IStringfeedsFeedList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringfeedsFeedList.Remove(NewsComponents.Collections.FeedEntry)">
            <summary>
            Removes the first occurrence of the specified <see cref="T:NewsComponents.Collections.FeedEntry"/>
            from the <see cref="T:NewsComponents.Collections.IStringfeedsFeedList"/>.
            </summary>
            <param name="entry">The <see cref="T:NewsComponents.Collections.FeedEntry"/> object to remove
            from the <see cref="T:NewsComponents.Collections.IStringfeedsFeedList"/>.</param>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IStringfeedsFeedList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IStringfeedsFeedList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Remove(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringfeedsFeedList.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the
            <see cref="T:NewsComponents.Collections.IStringfeedsFeedList"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than
            <see cref="P:NewsComponents.Collections.IStringfeedsFeedCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IStringfeedsFeedList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IStringfeedsFeedList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.RemoveAt(System.Int32)"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringfeedsFeedList.IsFixedSize">
            <summary>
            Gets a value indicating whether the
            <see cref="T:NewsComponents.Collections.IStringfeedsFeedList"/> has a fixed size.
            </summary>
            <value><c>true</c> if the <see cref="T:NewsComponents.Collections.IStringfeedsFeedList"/>
            has a fixed size; otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IList.IsFixedSize"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringfeedsFeedList.IsReadOnly">
            <summary>
            Gets a value indicating whether the
            <see cref="T:NewsComponents.Collections.IStringfeedsFeedList"/> is read-only.
            </summary>
            <value><c>true</c> if the <see cref="T:NewsComponents.Collections.IStringfeedsFeedList"/>
            is read-only; otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IList.IsReadOnly"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringfeedsFeedList.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:NewsComponents.Collections.FeedEntry"/> element at the specified index.
            </summary>
            <param name="index">The zero-based index of the
            <see cref="T:NewsComponents.Collections.FeedEntry"/> element to get or set.</param>
            <value>
            The <see cref="T:NewsComponents.Collections.FeedEntry"/> element at the specified <paramref name="index"/>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than
            <see cref="P:NewsComponents.Collections.IStringfeedsFeedCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">The property is set and the
            <see cref="T:NewsComponents.Collections.IStringfeedsFeedList"/> is read-only.</exception>
            <remarks>Please refer to <see cref="P:System.Collections.IList.Item(System.Int32)"/> for details.</remarks>
        </member>
        <member name="T:NewsComponents.Collections.IStringfeedsFeedEnumerator">
            <summary>
            Supports type-safe iteration over a dictionary that
            contains <see cref="T:NewsComponents.Collections.FeedEntry"/> elements.
            </summary>
            <remarks>
            <b>IStringfeedsFeedEnumerator</b> provides an
            <see cref="T:System.Collections.IDictionaryEnumerator"/> that is strongly typed for
            <see cref="T:System.String"/> keys and <see cref="T:NewsComponents.Feed.feedsFeed"/> values.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringfeedsFeedEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><c>true</c> if the enumerator was successfully advanced to the next element;
            <c>false</c> if the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.IEnumerator.MoveNext"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringfeedsFeedEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position,
            which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.IEnumerator.Reset"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringfeedsFeedEnumerator.Current">
            <summary>
            Gets the current <see cref="T:NewsComponents.Collections.FeedEntry"/> element in the collection.
            </summary>
            <value>The current <see cref="T:NewsComponents.Collections.FeedEntry"/> element in the collection.</value>
            <exception cref="T:System.InvalidOperationException"><para>The enumerator is positioned
            before the first element of the collection or after the last element.</para>
            <para>-or-</para>
            <para>The collection was modified after the enumerator was created.</para></exception>
            <remarks>Please refer to <see cref="P:System.Collections.IEnumerator.Current"/> for details, but note
            that <b>Current</b> fails if the collection was modified since the last successful
            call to <see cref="M:NewsComponents.Collections.IStringfeedsFeedEnumerator.MoveNext"/> or <see cref="M:NewsComponents.Collections.IStringfeedsFeedEnumerator.Reset"/>.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringfeedsFeedEnumerator.Entry">
            <summary>
            Gets a <see cref="T:NewsComponents.Collections.FeedEntry"/> containing both
            the key and the value of the current dictionary entry.
            </summary>
            <value>A <see cref="T:NewsComponents.Collections.FeedEntry"/> containing both
            the key and the value of the current dictionary entry.</value>
            <exception cref="T:System.InvalidOperationException"><para>The enumerator is positioned
            before the first element of the dictionary or after the last element.</para>
            <para>-or-</para>
            <para>The dictionary was modified after the enumerator was created.</para></exception>
            <remarks>Please refer to <see cref="P:System.Collections.IDictionaryEnumerator.Entry"/> for details, but
            note that <b>Entry</b> fails if the collection was modified since the last successful
            call to <see cref="M:NewsComponents.Collections.IStringfeedsFeedEnumerator.MoveNext"/> or <see cref="M:NewsComponents.Collections.IStringfeedsFeedEnumerator.Reset"/>.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringfeedsFeedEnumerator.Key">
            <summary>
            Gets the <see cref="T:System.String"/> key of the current dictionary entry.
            </summary>
            <value>The <see cref="T:System.String"/> key
            of the current element of the enumeration.</value>
            <exception cref="T:System.InvalidOperationException"><para>The enumerator is positioned
            before the first element of the dictionary or after the last element.</para>
            <para>-or-</para>
            <para>The dictionary was modified after the enumerator was created.</para></exception>
            <remarks>Please refer to <see cref="P:System.Collections.IDictionaryEnumerator.Key"/> for details, but
            note that <b>Key</b> fails if the collection was modified since the last successful
            call to <see cref="M:NewsComponents.Collections.IStringfeedsFeedEnumerator.MoveNext"/> or <see cref="M:NewsComponents.Collections.IStringfeedsFeedEnumerator.Reset"/>.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringfeedsFeedEnumerator.Value">
            <summary>
            Gets the <see cref="T:NewsComponents.Feed.feedsFeed"/> value of the current dictionary entry.
            </summary>
            <value>The <see cref="T:NewsComponents.Feed.feedsFeed"/> value
            of the current element of the enumeration.</value>
            <exception cref="T:System.InvalidOperationException"><para>The enumerator is positioned
            before the first element of the dictionary or after the last element.</para>
            <para>-or-</para>
            <para>The dictionary was modified after the enumerator was created.</para></exception>
            <remarks>Please refer to <see cref="P:System.Collections.IDictionaryEnumerator.Value"/> for details, but
            note that <b>Value</b> fails if the collection was modified since the last successful
            call to <see cref="M:NewsComponents.Collections.IStringfeedsFeedEnumerator.MoveNext"/> or <see cref="M:NewsComponents.Collections.IStringfeedsFeedEnumerator.Reset"/>.</remarks>
        </member>
        <member name="T:NewsComponents.Collections.FeedEntry">
            <summary>
            Implements a strongly typed pair of one <see cref="T:System.String"/>
            key and one <see cref="T:NewsComponents.Feed.feedsFeed"/> value.
            </summary>
            <remarks>
            <b>FeedEntry</b> provides a <see cref="T:System.Collections.DictionaryEntry"/> that is strongly
            typed for <see cref="T:System.String"/> keys and <see cref="T:NewsComponents.Feed.feedsFeed"/> values.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedEntry.#ctor(System.String,NewsComponents.Feed.feedsFeed)">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.Collections.FeedEntry"/>
            class with the specified key and value.
            </summary>
            <param name="key">
            The <see cref="T:System.String"/> key in the key-and-value pair.</param>
            <param name="value">
            The <see cref="T:NewsComponents.Feed.feedsFeed"/> value in the key-and-value pair.
            This argument can be a null reference.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
        </member>
        <member name="M:NewsComponents.Collections.FeedEntry.op_Implicit(System.Collections.DictionaryEntry)~NewsComponents.Collections.FeedEntry">
            <summary>
            Converts a <see cref="T:System.Collections.DictionaryEntry"/> to a <see cref="T:NewsComponents.Collections.FeedEntry"/>.
            </summary>
            <param name="entry">A <see cref="T:System.Collections.DictionaryEntry"/> object to convert.</param>
            <returns>A <see cref="T:NewsComponents.Collections.FeedEntry"/> object that represents
            the converted <paramref name="entry"/>.</returns>
            <exception cref="T:System.InvalidCastException">
            <para><paramref name="entry"/> contains a key that is not compatible
            with <see cref="T:System.String"/>.</para>
            <para>-or-</para>
            <para><paramref name="entry"/> contains a value that is not compatible
            with <see cref="T:NewsComponents.Feed.feedsFeed"/>.</para>
            </exception>
        </member>
        <member name="M:NewsComponents.Collections.FeedEntry.op_Implicit(NewsComponents.Collections.FeedEntry)~System.Collections.DictionaryEntry">
            <summary>
            Converts a <see cref="T:NewsComponents.Collections.FeedEntry"/> to a <see cref="T:System.Collections.DictionaryEntry"/>.
            </summary>
            <param name="pair">A <see cref="T:NewsComponents.Collections.FeedEntry"/> object to convert.</param>
            <returns>A <see cref="T:System.Collections.DictionaryEntry"/> object that
            represents the converted <paramref name="pair"/>.</returns>
        </member>
        <member name="P:NewsComponents.Collections.FeedEntry.Key">
            <summary>
            Gets or sets the <see cref="T:System.String"/> key in the key-and-value pair.
            </summary>
            <value>
            The <see cref="T:System.String"/> key in the key-and-value pair.
            The default is a null reference.
            </value>
            <exception cref="T:System.ArgumentNullException">
            <b>Key</b> is set to a null reference.</exception>
            <remarks>
            <see cref="T:NewsComponents.Collections.FeedEntry"/> is a value type and therefore has an implicit default
            constructor that zeroes all data members. This means that the <b>Key</b> property of
            a default-constructed <b>FeedEntry</b> contains a null reference by default,
            even though it is not possible to explicitly set <b>Key</b> to a null reference.
            </remarks>
        </member>
        <member name="P:NewsComponents.Collections.FeedEntry.Value">
            <summary>
            Gets or sets the <see cref="T:NewsComponents.Feed.feedsFeed"/> value in the key-and-value pair.
            </summary>
            <value>
            The <see cref="T:NewsComponents.Feed.feedsFeed"/> value in the key-and-value pair.
            This value can be a null reference, which is also the default.
            </value>
        </member>
        <member name="T:NewsComponents.Collections.FeedsCollection">
            <summary>
            Implements a strongly typed collection of <see cref="T:NewsComponents.Collections.FeedEntry"/>
            key-and-value pairs that are sorted by the keys and are accessible by key and by index.
            </summary>
            <remarks>
            <b>FeedsCollection</b> provides a <see cref="T:System.Collections.SortedList"/> that is strongly typed
            for <see cref="T:System.String"/> keys and <see cref="T:NewsComponents.Feed.feedsFeed"/> values.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedsCollection.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:NewsComponents.Collections.FeedsCollection"/> class.
            </overloads>
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.Collections.FeedsCollection"/> class that is empty,
            has the default initial capacity and is sorted according to the <see cref="T:System.IComparable"/>
            interface implemented by each key added to the <b>FeedsCollection</b>.
            </summary>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.#ctor"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedsCollection.#ctor(System.Collections.IComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.Collections.FeedsCollection"/> class that is empty,
            has the default initial capacity and is sorted according to the specified
            <see cref="T:System.Collections.IComparer"/> interface.
            </summary>
            <param name="comparer">
            <para>The <see cref="T:System.Collections.IComparer"/> implementation to use when comparing keys.</para>
            <para>-or-</para>
            <para>A null reference, to use the <see cref="T:System.IComparable"/> implementation of each key.
            </para></param>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.#ctor(System.Collections.IComparer)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedsCollection.#ctor(System.Collections.IDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.Collections.FeedsCollection"/> class that contains
            elements copied from the specified dictionary, has the same initial capacity as the
            number of elements copied and is sorted according to the <see cref="T:System.IComparable"/>
            interface implemented by each key.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.IDictionary"/>
            whose elements are copied to the new collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dictionary"/> is a null reference.</exception>
            <exception cref="T:System.InvalidCastException">
            <para>One or more elements in <paramref name="dictionary"/> do not implement the
            <see cref="T:System.IComparable"/> interface.</para>
            <para>-or-</para>
            <para><paramref name="dictionary"/> contains keys that are not compatible
            with <see cref="T:System.String"/>.</para>
            <para>-or-</para>
            <para><paramref name="dictionary"/> contains values that are not compatible
            with <see cref="T:NewsComponents.Feed.feedsFeed"/>.</para>
            </exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.#ctor(System.Collections.IDictionary)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedsCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.Collections.FeedsCollection"/> class that is empty,
            has the specified initial capacity and is sorted according to the <see cref="T:System.IComparable"/>
            interface implemented by each key added to the <b>FeedsCollection</b>.
            </summary>
            <param name="capacity">The initial number of elements that the
            <see cref="T:NewsComponents.Collections.FeedsCollection"/> can contain.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is less than zero.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.#ctor(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedsCollection.#ctor(System.Collections.IComparer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.Collections.FeedsCollection"/> class that is empty,
            has the specified initial capacity and is sorted according to the specified
            <see cref="T:System.Collections.IComparer"/> interface.
            </summary>
            <param name="comparer">
            <para>The <see cref="T:System.Collections.IComparer"/> implementation to use when comparing keys.</para>
            <para>-or-</para>
            <para>A null reference to use the <see cref="T:System.IComparable"/> implementation of each key.
            </para></param>
            <param name="capacity">The initial number of elements that the
            <see cref="T:NewsComponents.Collections.FeedsCollection"/> can contain.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is less than zero.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)"/> for details.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedsCollection.#ctor(System.Collections.IDictionary,System.Collections.IComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.Collections.FeedsCollection"/> class that contains
            elements copied from the specified dictionary, has the same initial capacity as the
            number of elements copied and is sorted according to the specified <see cref="T:System.Collections.IComparer"/>
            interface.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.IDictionary"/>
            whose elements are copied to the new collection.</param>
            <param name="comparer">
            <para>The <see cref="T:System.Collections.IComparer"/> implementation to use when comparing keys.</para>
            <para>-or-</para>
            <para>A null reference, to use the <see cref="T:System.IComparable"/> implementation of each key.
            </para></param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dictionary"/> is a null reference.</exception>
            <exception cref="T:System.InvalidCastException">
            <para>One or more elements in <paramref name="dictionary"/> do not implement the
            <see cref="T:System.IComparable"/> interface.</para>
            <para>-or-</para>
            <para><paramref name="dictionary"/> contains keys that are not compatible
            with <see cref="T:System.String"/>.</para>
            <para>-or-</para>
            <para><paramref name="dictionary"/> contains values that are not compatible
            with <see cref="T:NewsComponents.Feed.feedsFeed"/>.</para>
            </exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)"/> for details.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedsCollection.Add(System.String,NewsComponents.Feed.feedsFeed)">
            <summary>
            Adds an element with the specified <see cref="T:System.String"/> key and
            <see cref="T:NewsComponents.Feed.feedsFeed"/> value to the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key of the element
            to add to the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.</param>
            <param name="value">The <see cref="T:NewsComponents.Feed.feedsFeed"/> value of the element
            to add to the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.
            This argument can be a null reference.
            </param>
            <exception cref="T:System.ArgumentException">
            <para>An element with the specified <paramref name="key"/>
            already exists in the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.</para>
            <para>-or-</para>
            <para>The <b>FeedsCollection</b> is set to use the <see cref="T:System.IComparable"/> interface,
            and <paramref name="key"/> does not implement the <b>IComparable</b> interface.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">
            The comparer throws an exception.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.FeedsCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>FeedsCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.Add(System.Object,System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedsCollection.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <summary>
            Adds an element with the specified key and value
            to the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.
            </summary>
            <param name="key">The key of the element to add to the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.
            This argument must be compatible with <see cref="T:System.String"/>.</param>
            <param name="value">The value of the element to add to the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.
            This argument must be compatible with <see cref="T:NewsComponents.Feed.feedsFeed"/>.
            This argument can be a null reference.
            </param>
            <exception cref="T:System.ArgumentException">
            <para>An element with the specified <paramref name="key"/>
            already exists in the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.</para>
            <para>-or-</para>
            <para>The <b>FeedsCollection</b> is set to use the <see cref="T:System.IComparable"/> interface,
            and <paramref name="key"/> does not implement the <b>IComparable</b> interface.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidCastException">
            <para><paramref name="key"/> is not compatible with <see cref="T:System.String"/>.</para>
            <para>-or-</para>
            <para><paramref name="value"/> is not compatible with <see cref="T:NewsComponents.Feed.feedsFeed"/>.</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The comparer throws an exception.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.FeedsCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>FeedsCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.Add(System.Object,System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedsCollection.Clear">
            <summary>
            Removes all elements from the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.FeedsCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>FeedsCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.Clear"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedsCollection.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.
            </summary>
            <returns>A shallow copy of the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.Clone"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedsCollection.Contains(System.String)">
            <summary>
            Determines whether the <see cref="T:NewsComponents.Collections.FeedsCollection"/>
            contains the specified <see cref="T:System.String"/> key.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key
            to locate in the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.</param>
            <returns><c>true</c> if the <see cref="T:NewsComponents.Collections.FeedsCollection"/> contains an element
            with the specified <paramref name="key"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">
            The comparer throws an exception.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.Contains(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedsCollection.Contains(System.Uri)">
            <summary>
            Overloaded.
            </summary>
            <param name="key">Uri</param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Collections.FeedsCollection.System#Collections#IDictionary#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:NewsComponents.Collections.FeedsCollection"/> contains the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.
            This argument must be compatible with <see cref="T:System.String"/>.</param>
            <returns><c>true</c> if the <see cref="T:NewsComponents.Collections.FeedsCollection"/> contains an element
            with the specified <paramref name="key"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidCastException"><paramref name="key"/>
            is not compatible with <see cref="T:System.String"/>.</exception>
            <exception cref="T:System.InvalidOperationException">
            The comparer throws an exception.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.Contains(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedsCollection.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:NewsComponents.Collections.FeedsCollection"/>
            contains the specified <see cref="T:System.String"/> key.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key
            to locate in the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.</param>
            <returns><c>true</c> if the <see cref="T:NewsComponents.Collections.FeedsCollection"/> contains an element
            with the specified <paramref name="key"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">
            The comparer throws an exception.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.ContainsKey(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedsCollection.ContainsKey(System.Uri)">
            <summary>
            Overloaded.
            </summary>
            <param name="key">Uri</param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Collections.FeedsCollection.ContainsValue(NewsComponents.Feed.feedsFeed)">
            <summary>
            Determines whether the <see cref="T:NewsComponents.Collections.FeedsCollection"/>
            contains the specified <see cref="T:NewsComponents.Feed.feedsFeed"/> value.
            </summary>
            <param name="value">The <see cref="T:NewsComponents.Feed.feedsFeed"/> value
            to locate in the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.
            This argument can be a null reference.
            </param>
            <returns><c>true</c> if the <see cref="T:NewsComponents.Collections.FeedsCollection"/> contains an element
            with the specified <paramref name="value"/>; otherwise, <c>false</c>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.ContainsValue(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedsCollection.CopyTo(NewsComponents.Collections.FeedEntry[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:NewsComponents.Collections.FeedsCollection"/> to a one-dimensional <see cref="T:System.Array"/> of
            <see cref="T:NewsComponents.Collections.FeedEntry"/> elements, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the
            <see cref="T:NewsComponents.Collections.FeedEntry"/> elements copied from the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.
            The <b>Array</b> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/>
            at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:NewsComponents.Collections.FeedsCollection"/> is greater than
            the available space from <paramref name="arrayIndex"/> to the end of the destination
            <paramref name="array"/>.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.CopyTo(System.Array,System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedsCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire <see cref="T:NewsComponents.Collections.FeedsCollection"/> to a one-dimensional <see cref="T:System.Array"/>,
            starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the
            <see cref="T:NewsComponents.Collections.FeedEntry"/> elements copied from the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.
            The <b>Array</b> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/>
            at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="array"/> is multidimensional.
            </para><para>-or-</para><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:NewsComponents.Collections.FeedsCollection"/> is greater than
            the available space from <paramref name="arrayIndex"/> to the end of the destination
            <paramref name="array"/>.</para></exception>
            <exception cref="T:System.InvalidCastException">
            The <see cref="T:NewsComponents.Collections.FeedEntry"/> type cannot be cast automatically
            to the type of the destination <paramref name="array"/>.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.CopyTo(System.Array,System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedsCollection.GetByIndex(System.Int32)">
            <summary>
            Gets the <see cref="T:NewsComponents.Feed.feedsFeed"/> value at the
            specified index of the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.
            </summary>
            <param name="index">The zero-based index of the
            <see cref="T:NewsComponents.Feed.feedsFeed"/> value to get.</param>
            <returns>The <see cref="T:NewsComponents.Feed.feedsFeed"/> value at the specified
            <paramref name="index"/> of the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than <see cref="P:NewsComponents.Collections.FeedsCollection.Count"/>.</para>
            </exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.GetByIndex(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedsCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:NewsComponents.Collections.IStringfeedsFeedEnumerator"/> that can
            iterate through the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.
            </summary>
            <returns>An <see cref="T:NewsComponents.Collections.IStringfeedsFeedEnumerator"/>
            for the entire <see cref="T:NewsComponents.Collections.FeedsCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.GetEnumerator"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedsCollection.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator"/> that can
            iterate through the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.IDictionaryEnumerator"/>
            for the entire <see cref="T:NewsComponents.Collections.FeedsCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.GetEnumerator"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedsCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> that can
            iterate through the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/>
            for the entire <see cref="T:NewsComponents.Collections.FeedsCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.GetEnumerator"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedsCollection.GetKey(System.Int32)">
            <summary>
            Gets the <see cref="T:System.String"/> key at the
            specified index of the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.
            </summary>
            <param name="index">The zero-based index of the
            <see cref="T:System.String"/> key to get.</param>
            <returns>The <see cref="T:System.String"/> key at the specified
            <paramref name="index"/> of the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than <see cref="P:NewsComponents.Collections.FeedsCollection.Count"/>.</para>
            </exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.GetKey(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedsCollection.GetKeyList">
            <summary>
            Gets the keys in the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.
            </summary>
            <returns>An <see cref="T:NewsComponents.Collections.IStringList"/> containing the keys
            in the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.GetKeyList"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedsCollection.GetValueList">
            <summary>
            Gets the values in the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.
            </summary>
            <returns>An <see cref="T:NewsComponents.Collections.IfeedsFeedList"/> containing the values
            in the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.GetValueList"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedsCollection.IndexOfKey(System.String)">
            <summary>
            Returns the zero-based index of the specified <see cref="T:System.String"/>
            key in the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key
            to locate in the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.</param>
            <returns>The zero-based index of <paramref name="key"/> in the
            <see cref="T:NewsComponents.Collections.FeedsCollection"/>, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">
            The comparer throws an exception.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.IndexOfKey(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedsCollection.IndexOfValue(NewsComponents.Feed.feedsFeed)">
            <summary>
            Returns the zero-based index of the specified <see cref="T:NewsComponents.Feed.feedsFeed"/>
            value in the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.
            </summary>
            <param name="value">The <see cref="T:NewsComponents.Feed.feedsFeed"/> value
            to locate in the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.
            This argument can be a null reference.
            </param>
            <returns>The zero-based index of <paramref name="value"/> in the
            <see cref="T:NewsComponents.Collections.FeedsCollection"/>, if found; otherwise, -1.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.IndexOfValue(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedsCollection.Remove(System.String)">
            <summary>
            Removes the element with the specified <see cref="T:System.String"/> key
            from the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key of the element
            to remove from the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">
            The comparer throws an exception.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.FeedsCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>FeedsCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.Remove(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedsCollection.System#Collections#IDictionary#Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.
            </summary>
            <param name="key">The key of the element to remove from the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.
            This argument must be compatible with <see cref="T:System.String"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidCastException"><paramref name="key"/>
            is not compatible with <see cref="T:System.String"/>.</exception>
            <exception cref="T:System.InvalidOperationException">
            The comparer throws an exception.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.FeedsCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>FeedsCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.Remove(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedsCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than <see cref="P:NewsComponents.Collections.FeedsCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.FeedsCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>FeedsCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.RemoveAt(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedsCollection.SetByIndex(System.Int32,NewsComponents.Feed.feedsFeed)">
            <summary>
            Sets the <see cref="T:NewsComponents.Feed.feedsFeed"/> value at the
            specified index of the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.
            </summary>
            <param name="index">The zero-based index of the
            <see cref="T:NewsComponents.Feed.feedsFeed"/> value to set.</param>
            <param name="value">The <see cref="T:NewsComponents.Feed.feedsFeed"/> object to store
            at the specified <paramref name="index"/> of the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.
            This argument can be a null reference.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than <see cref="P:NewsComponents.Collections.FeedsCollection.Count"/>.</para>
            </exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.SetByIndex(System.Int32,System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedsCollection.Synchronized(NewsComponents.Collections.FeedsCollection)">
            <summary>
            Returns a synchronized (thread-safe) wrapper
            for the specified <see cref="T:NewsComponents.Collections.FeedsCollection"/>.
            </summary>
            <param name="dictionary">The <see cref="T:NewsComponents.Collections.FeedsCollection"/> to synchronize.</param>
            <returns>
            A synchronized (thread-safe) wrapper around <paramref name="dictionary"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dictionary"/> is a null reference.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.Synchronized(System.Collections.SortedList)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedsCollection.TrimToSize">
            <summary>
            Sets the capacity to the actual number of elements in the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.FeedsCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>FeedsCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.TrimToSize"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.FeedsCollection.Capacity">
            <summary>
            Gets or sets the capacity of the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.
            </summary>
            <value>The number of elements that the
            <see cref="T:NewsComponents.Collections.FeedsCollection"/> can contain.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <b>Capacity</b> is set to a value that is less than <see cref="P:NewsComponents.Collections.FeedsCollection.Count"/>.</exception>
            <remarks>Please refer to <see cref="P:System.Collections.SortedList.Capacity"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.FeedsCollection.Count">
            <summary>
            Gets the number of key-and-value pairs contained
            in the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.
            </summary>
            <value>The number of key-and-value pairs contained
            in the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.SortedList.Count"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.FeedsCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:NewsComponents.Collections.FeedsCollection"/> has a fixed size.
            </summary>
            <value><c>true</c> if the <see cref="T:NewsComponents.Collections.FeedsCollection"/> has a fixed size;
            otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.SortedList.IsFixedSize"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.FeedsCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:NewsComponents.Collections.FeedsCollection"/> is read-only.
            </summary>
            <value><c>true</c> if the <see cref="T:NewsComponents.Collections.FeedsCollection"/> is read-only;
            otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.SortedList.IsReadOnly"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.FeedsCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:NewsComponents.Collections.FeedsCollection"/>
            is synchronized (thread-safe).
            </summary>
            <value><c>true</c> if access to the <see cref="T:NewsComponents.Collections.FeedsCollection"/> is
            synchronized (thread-safe); otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.SortedList.IsSynchronized"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.FeedsCollection.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:NewsComponents.Feed.feedsFeed"/> value
            associated with the specified <see cref="T:System.String"/> key.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key
            whose value to get or set.</param>
            <value>The <see cref="T:NewsComponents.Feed.feedsFeed"/> value associated with the specified
            <paramref name="key"/>. If the specified <paramref name="key"/> is not found,
            attempting to get it returns
            a null reference,
            and attempting to set it creates a new element using the specified
            <paramref name="key"/>.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The property is set and the <see cref="T:NewsComponents.Collections.FeedsCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The property is set, <paramref name="key"/> does not exist in the collection,
            and the <b>FeedsCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="P:System.Collections.SortedList.Item(System.Object)"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.FeedsCollection.System#Collections#IDictionary#Item(System.Object)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get or set.
            This argument must be compatible with <see cref="T:System.String"/>.</param>
            <value>
            The value associated with the specified <paramref name="key"/>. If the specified
            <paramref name="key"/> is not found, attempting to get it returns
            a null reference,
            and attempting to set it creates a new element using the specified <paramref name="key"/>.
            When set, this value must be compatible with <see cref="T:NewsComponents.Feed.feedsFeed"/>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidCastException">
            <para><paramref name="key"/> is not compatible with <see cref="T:System.String"/>.</para>
            <para>-or-</para>
            <para>The property is set to a value that is not compatible with
            <see cref="T:NewsComponents.Feed.feedsFeed"/>.</para></exception>
            <exception cref="T:System.NotSupportedException">
            <para>The property is set and the <see cref="T:NewsComponents.Collections.FeedsCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The property is set, <paramref name="key"/> does not exist in the collection,
            and the <b>FeedsCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="P:System.Collections.SortedList.Item(System.Object)"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.FeedsCollection.Keys">
            <summary>
            Gets an <see cref="T:NewsComponents.Collections.IStringCollection"/> containing
            the keys in the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.
            </summary>
            <value>An <see cref="T:NewsComponents.Collections.IStringCollection"/> containing
            the keys in the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.SortedList.Keys"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.FeedsCollection.System#Collections#IDictionary#Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> containing
            the keys in the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.
            </summary>
            <value>An <see cref="T:System.Collections.ICollection"/> containing
            the keys in the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.SortedList.Keys"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.FeedsCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize
            access to the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.
            </summary>
            <value>An object that can be used to synchronize
            access to the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.SortedList.SyncRoot"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.FeedsCollection.Values">
            <summary>
            Gets an <see cref="T:NewsComponents.Collections.IfeedsFeedCollection"/> containing
            the values in the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.
            </summary>
            <value>An <see cref="T:NewsComponents.Collections.IfeedsFeedCollection"/> containing
            the values in the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.SortedList.Values"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.FeedsCollection.System#Collections#IDictionary#Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> containing
            the values in the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.
            </summary>
            <value>An <see cref="T:System.Collections.ICollection"/> containing
            the values in the <see cref="T:NewsComponents.Collections.FeedsCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.SortedList.Values"/> for details.</remarks>
        </member>
        <member name="T:NewsComponents.Search.IndexOperation">
            <summary>
            This is an enum that describes the set of operations that can be placed in the 
            queue of operations to perform on the search index by the index modifying thread. 
            </summary>
        </member>
        <member name="T:NewsComponents.Search.PendingIndexOperation">
            <summary>
            This is a class that is used to represent a pending operation on the index in 
            that is currently in the pending operation queue. 
            </summary>
        </member>
        <member name="M:NewsComponents.Search.PendingIndexOperation.#ctor">
            <summary>
            No default constructor
            </summary>
        </member>
        <member name="M:NewsComponents.Search.PendingIndexOperation.#ctor(NewsComponents.Search.IndexOperation,System.Object[])">
            <summary>
            Constructor 
            </summary>
            <param name="action">The operation to perform on the index</param>
            <param name="parameters">The parameters to the operation</param>
        </member>
        <member name="T:NewsComponents.Search.LuceneIndexModifier">
            <summary>
            Serialize the index modifications (only one index modifier,
            IndexReader or IndexWriter can change the index at the same directory
            the same time).
            </summary>
        </member>
        <member name="F:NewsComponents.Search.LuceneIndexModifier.SyncRoot">
            <summary>
            To be used to synchronize index modifications. Only one
            IndexWriter/Reader can modify the index at a time!
            </summary>
        </member>
        <member name="M:NewsComponents.Search.LuceneIndexModifier.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.Search.LuceneIndexModifier"/> class.
            </summary>
            <param name="baseDirectory">The index base directory.</param>
        </member>
        <member name="M:NewsComponents.Search.LuceneIndexModifier.Flush">
            <summary> 
            Make sure all changes are written to disk (pending operations
            and index).
            </summary>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:NewsComponents.Search.LuceneIndexModifier.Reset">
            <summary>
            Resets the pending operations (clear) and
            reset the index (re-create new) as one operation.
            </summary>
        </member>
        <member name="M:NewsComponents.Search.LuceneIndexModifier.StopIndexer">
            <summary>
            Stops the indexer (thread),
            performs all pending operations on the index and 
            flushes all pending I/O writes to disk. 
            </summary>
        </member>
        <member name="M:NewsComponents.Search.LuceneIndexModifier.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:NewsComponents.Search.LuceneIndexModifier.Add(Lucene.Net.Documents.Document,System.String)">
            <summary> Adds a document to this index, using the provided culture. 
            If the document contains more than
            {@link #SetMaxFieldLength(int)} terms for a given field, the remainder are
            discarded.
            </summary>
            <remarks>This operation is added to the pending index operations queue.</remarks>
            <exception cref="T:System.InvalidOperationException">If the index is closed </exception>
        </member>
        <member name="M:NewsComponents.Search.LuceneIndexModifier.AddRange(Lucene.Net.Documents.Document[],System.String)">
            <summary> Adds a document to this index, using the provided culture. 
            If the document contains more than
            {@link #SetMaxFieldLength(int)} terms for a given field, the remainder are
            discarded.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the index is closed </exception>
        </member>
        <member name="M:NewsComponents.Search.LuceneIndexModifier.Delete(Lucene.Net.Index.Term)">
            <summary> Deletes all documents containing <code>term</code>.
            This is useful if one uses a document field to hold a unique ID string for
            the document.  Then to delete such a document, one merely constructs a
            term with the appropriate field and the unique ID string as its text and
            passes it to this method.  Returns the number of documents deleted.
            </summary>
            <returns> the number of documents deleted
            </returns>
            <seealso cref="M:Lucene.Net.Index.IndexReader.DeleteDocuments(Lucene.Net.Index.Term)">
            </seealso>
            <exception cref="T:System.InvalidOperationException">If the index is closed </exception>
        </member>
        <member name="M:NewsComponents.Search.LuceneIndexModifier.DeleteFeed(Lucene.Net.Index.Term)">
            <summary>
            Deletes the feed from the index. Same as Delete(Term),
            but with a lower priority.
            </summary>
            <param name="term">The term.</param>
        </member>
        <member name="M:NewsComponents.Search.LuceneIndexModifier.Optimize">
            <summary> Merges all segments together into a single segment, optimizing an index
            for search.
            </summary>
            <seealso cref="M:Lucene.Net.Index.IndexWriter.Optimize">
            </seealso>
            <exception cref="T:System.InvalidOperationException">If the index is closed </exception>
        </member>
        <member name="M:NewsComponents.Search.LuceneIndexModifier.CreateIndex">
            <summary>
            Creates the index.
            </summary>
        </member>
        <member name="M:NewsComponents.Search.LuceneIndexModifier.NumberOfDocuments">
            <summary> Returns the number of documents currently in this index.</summary>
            <seealso cref="M:Lucene.Net.Index.IndexWriter.DocCount">
            </seealso>
            <seealso cref="M:Lucene.Net.Index.IndexReader.NumDocs">
            </seealso>
            <exception cref="T:System.InvalidOperationException">If the index is closed </exception>
        </member>
        <member name="M:NewsComponents.Search.LuceneIndexModifier.ResetIndex">
            <summary>
            Deletes the whole index, then creates a new one 
            without any documents.
            </summary>
        </member>
        <member name="M:NewsComponents.Search.LuceneIndexModifier.Close">
            <summary> 
            Close this index, writing all pending changes to disk.
            </summary>
        </member>
        <member name="M:NewsComponents.Search.LuceneIndexModifier.ThreadRun">
            <summary>
            This thread loops continously popping items from the pendingIndexOperations 
            queue and performing the actions. This ensures that there is only one thread
            modifying the index at any given time. 
            </summary>
        </member>
        <member name="M:NewsComponents.Search.LuceneIndexModifier.PerformOperation(NewsComponents.Search.PendingIndexOperation)">
            <summary>
            Performs the specified PendingIndexOperation.
            </summary>
            <param name="current">The operation to perform</param>
        </member>
        <member name="M:NewsComponents.Search.LuceneIndexModifier.AddSingleDocument(Lucene.Net.Documents.Document,System.String)">
            <summary> Adds a document to this index, using the provided culture. 
            If the document contains more than
            {@link #SetMaxFieldLength(int)} terms for a given field, the remainder are
            discarded.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the index is closed </exception>
        </member>
        <member name="M:NewsComponents.Search.LuceneIndexModifier.AddMultipleDocuments(Lucene.Net.Documents.Document[],System.String)">
            <summary> Adds a document to this index, using the provided culture. 
            If the document contains more than
            {@link #SetMaxFieldLength(int)} terms for a given field, the remainder are
            discarded.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the index is closed </exception>
        </member>
        <member name="M:NewsComponents.Search.LuceneIndexModifier.DeleteTerm(Lucene.Net.Index.Term)">
            <summary> Deletes all documents containing <code>term</code>.
            This is useful if one uses a document field to hold a unique ID string for
            the document.  Then to delete such a document, one merely constructs a
            term with the appropriate field and the unique ID string as its text and
            passes it to this method.  Returns the number of documents deleted.
            </summary>
            <returns> the number of documents deleted
            </returns>
            <seealso cref="!:IndexReader.Delete(Term)">
            </seealso>
            <exception cref="T:System.InvalidOperationException">If the index is closed </exception>
        </member>
        <member name="M:NewsComponents.Search.LuceneIndexModifier.OptimizeIndex">
            <summary> Merges all segments together into a single segment, optimizing an index
            for search.
            </summary>
            <seealso cref="M:Lucene.Net.Index.IndexWriter.Optimize">
            </seealso>
            <exception cref="T:System.InvalidOperationException">If the index is closed </exception>
        </member>
        <member name="M:NewsComponents.Search.LuceneIndexModifier.Init">
            <summary> Initialize an IndexWriter.</summary>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:NewsComponents.Search.LuceneIndexModifier.AssureOpen">
            <summary> Throw an IllegalStateException if the index is closed.</summary>
            <exception cref="T:System.InvalidOperationException"> If index is closed</exception>
        </member>
        <member name="M:NewsComponents.Search.LuceneIndexModifier.CreateIndexWriter">
            <summary> Close the IndexReader and open an IndexWriter.</summary>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:NewsComponents.Search.LuceneIndexModifier.CreateIndexReader">
            <summary> Close the IndexWriter and open an IndexReader.</summary>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="P:NewsComponents.Search.LuceneIndexModifier.BaseDirectory">
            <summary>
            Gets or sets the base directory for the index.
            </summary>
            <value>The base directory.</value>
        </member>
        <member name="P:NewsComponents.Search.LuceneIndexModifier.IndexExists">
            <summary>
            Gets true if an Index exists.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NewsComponents.Search.LuceneInfoWriter">
            Helper class which writes internal Lucene debug info to RSS Bandit trace logs. 
        </member>
        <member name="M:NewsComponents.Search.LuceneInfoWriter.#ctor">
            <summary>
            We don't want a default constructor
            </summary>
        </member>
        <member name="M:NewsComponents.Search.LuceneInfoWriter.#ctor(log4net.ILog)">
            <summary>
            Constructor accepts logger as input
            </summary>
            <param name="logger">The logger to which we'll actually write the information</param>
        </member>
        <member name="P:NewsComponents.Search.LuceneInfoWriter.Encoding">
            <summary>
            
            </summary>
        </member>
        <member name="T:NewsComponents.Net.DownloadFilesCollection">
            <summary>
            Defines a collection of files.
            </summary>
        </member>
        <member name="M:NewsComponents.Net.DownloadFilesCollection.#ctor(NewsComponents.Net.DownloadFile[])">
            <summary>
            Creates a DownloadFilesCollection using the list of FileManifest objects.
            </summary>
            <param name="downloadFiles">The list of files.</param>
        </member>
        <member name="M:NewsComponents.Net.DownloadFilesCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:NewsComponents.Net.DownloadFilesCollection.Contains(NewsComponents.Net.DownloadFile)">
            <summary>
            Allows determining if the file is already contained in the collection.
            </summary>
            <param name="value">The FileManiest instance.</param>
            <returns>A boolean value indicating whether file is in the collection.</returns>
        </member>
        <member name="M:NewsComponents.Net.DownloadFilesCollection.Add(NewsComponents.Net.DownloadFile)">
            <summary>
            Adds a file to the file collection.
            </summary>
            <param name="value">The FileManiest instance.</param>
        </member>
        <member name="M:NewsComponents.Net.DownloadFilesCollection.Remove(NewsComponents.Net.DownloadFile)">
            <summary>
            Removes the file from the file collection.
            </summary>
            <param name="value">The FileManiest instance.</param>
        </member>
        <member name="M:NewsComponents.Net.DownloadFilesCollection.Insert(System.Int32,NewsComponents.Net.DownloadFile)">
            <summary>
            Insert the file at a specific index in the collection.
            </summary>
            <param name="index">The index to insert the file.</param>
            <param name="value">The FileManiest instance.</param>
        </member>
        <member name="P:NewsComponents.Net.DownloadFilesCollection.Item(System.Int32)">
            <summary>
            Indexer that returns a file for a given index.
            </summary>
            <param name="index">The index of the file to locate.</param>
        </member>
        <member name="T:NewsComponents.Net.DownloadFile">
            <summary>
            Defines the information of a file to download.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.DownloadFile.sourceLocation">
            <summary>
            The source location for the file.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.DownloadFile.suggestedMimeType">
            <summary>
            Indicates what MimeType was suggested for the content
            of the file.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.DownloadFile.expectedSize">
            <summary>
            The expected file size
            </summary>
        </member>
        <member name="F:NewsComponents.Net.DownloadFile.localName">
            <summary>
            The file name used for local storage
            </summary>
        </member>
        <member name="M:NewsComponents.Net.DownloadFile.#ctor(NewsComponents.Enclosure)">
            <summary>
            Creates a new FileManifest with the deserialized manifest file information.
            </summary>
            <param name="source">The File source location.</param>
            <param name="suggestedType">MimeType</param>
            <param name="expectedSize">long</param>
        </member>
        <member name="M:NewsComponents.Net.DownloadFile.GuessLocalFileName">
            <summary>
            Guesses the name of the local file.
            </summary>		
        </member>
        <member name="P:NewsComponents.Net.DownloadFile.Source">
            <summary>
            The source location of the file.
            </summary>
        </member>
        <member name="P:NewsComponents.Net.DownloadFile.SuggestedType">
            <summary>
            Suggested MimeType.
            </summary>
        </member>
        <member name="P:NewsComponents.Net.DownloadFile.FileSize">
            <summary>
            The file size
            </summary>
        </member>
        <member name="P:NewsComponents.Net.DownloadFile.LocalName">
            <summary>
            The local name of the file.
            </summary>
        </member>
        <member name="T:Tst.TstDictionaryEntry">
            <summary>
            Defines a Ternary Search Tree node pair that can be set or retrieved.
            </summary>
        </member>
        <member name="M:Tst.TstDictionaryEntry.#ctor(Tst.TstDictionaryEntry,System.Char)">
            <summary>
            Construct a tst node.
            </summary>
            <param name="parent">parent node</param>
            <param name="splitChar">split character</param>
        </member>
        <member name="M:Tst.TstDictionaryEntry.Clone">
            <summary>
            Creates a shallow copy of the entry
            </summary>
            <returns>entry shallow copy</returns>
        </member>
        <member name="P:Tst.TstDictionaryEntry.Parent">
            <summary>
            Gets the parent of the node.
            </summary>	
            <value>
            The parent node.
            </value>	
        </member>
        <member name="P:Tst.TstDictionaryEntry.SplitChar">
            <summary>
            Gets the split character.
            </summary>	
            <value>
            The split character.
            </value>	
        </member>
        <member name="P:Tst.TstDictionaryEntry.IsKey">
            <summary>
            Gets a value indicating wheter the node is a key.
            </summary>	
            <value>
            true is the node is a key, false otherwize.
            </value>	
        </member>
        <member name="P:Tst.TstDictionaryEntry.Key">
            <summary>
            Gets the node key, if it is a key.
            </summary>
            <value>
            The node key.
            </value>
            <exception cref="T:System.InvalidOperationException">The node does not hold a key-value pair.</exception>
        </member>
        <member name="P:Tst.TstDictionaryEntry.Value">
            <summary>
            Gets the node value.
            </summary>	
            <value>
            The node value.
            </value>
            <exception cref="T:System.InvalidOperationException">The node does not hold a key-value pair.</exception>
        </member>
        <member name="P:Tst.TstDictionaryEntry.LowChild">
            <summary>
            Gets the node low child.
            </summary>	
            <value>
            The low child.
            </value>	
        </member>
        <member name="P:Tst.TstDictionaryEntry.EqChild">
            <summary>
            Gets the node ep child.
            </summary>	
            <value>
            The eq child.
            </value>	
        </member>
        <member name="P:Tst.TstDictionaryEntry.HighChild">
            <summary>
            Gets the node high child.
            </summary>	
            <value>
            The high child.
            </value>	
        </member>
        <member name="P:Tst.TstDictionaryEntry.HasChildren">
            <summary>
            Gets a value indicating wheter the node has children.
            </summary>	
            <value>
            true if the node has children, false otherwize.
            </value>	
        </member>
        <member name="P:Tst.TstDictionaryEntry.IsLowChild">
            <summary>
            Gets a value indicating wheter the node is a low child.
            </summary>	
            <value>
            true if the node is a low child, false otherwize.
            </value>
        </member>
        <member name="P:Tst.TstDictionaryEntry.IsHighChild">
            <summary>
            Gets a value indicating wheter the node is a high child.
            </summary>	
            <value>
            true if the node is a high child, false otherwize.
            </value>
        </member>
        <member name="P:Tst.TstDictionaryEntry.IsEqChild">
            <summary>
            Gets a value indicating wheter the node is a eq child.
            </summary>	
            <value>
            true if the node is a eq child, false otherwize.
            </value>
        </member>
        <member name="T:RssBandit.Common.Logging.Log">
            <summary>
             Wrapper around Log4Net.
             For configuration options have a look to http://logging.apache.org/log4net/release/manual/configuration.html.
             For configuration examples have a look to http://logging.apache.org/log4net/release/config-examples.html.
            </summary>
        </member>
        <member name="M:RssBandit.Common.Logging.Log.#cctor">
            <summary>
            statick initializer
            </summary>
        </member>
        <member name="M:RssBandit.Common.Logging.Log.Error(System.String,System.Exception)">
            <summary>
            Log an error. If you don't want to use your own ILog variable returned by
            <see cref="M:RssBandit.Common.Logging.Log.GetLogger(System.Type)">GetLogger</see>, you can call this method.
            </summary>
            <param name="message">Message</param>
            <param name="exception">Exception</param>
            <remarks>The class information included always refer to <c>Common.Logging</c>.</remarks>
        </member>
        <member name="M:RssBandit.Common.Logging.Log.Error(System.String)">
            <summary>
            Log an error. If you don't want to use your own ILog variable returned by
            <see cref="M:RssBandit.Common.Logging.Log.GetLogger(System.Type)">GetLogger</see>, you can call this method.
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="M:RssBandit.Common.Logging.Log.Warning(System.String,System.Exception)">
            <summary>
            Log a warning. If you don't want to use your own ILog variable returned by
            <see cref="M:RssBandit.Common.Logging.Log.GetLogger(System.Type)">GetLogger</see>, you can call this method.
            </summary>
            <param name="message">Message</param>
            <param name="exception">Exception</param>
        </member>
        <member name="M:RssBandit.Common.Logging.Log.Warning(System.String)">
            <summary>
            Log a warning. If you don't want to use your own ILog variable returned by
            <see cref="M:RssBandit.Common.Logging.Log.GetLogger(System.Type)">GetLogger</see>, you can call this method.
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="M:RssBandit.Common.Logging.Log.Fatal(System.String,System.Exception)">
            <summary>
            Log a fatal error. If you don't want to use your own ILog variable returned by
            <see cref="M:RssBandit.Common.Logging.Log.GetLogger(System.Type)">GetLogger</see>, you can call this method.
            </summary>
            <param name="message"> Message</param>
            <param name="exception">Exception</param>
        </member>
        <member name="M:RssBandit.Common.Logging.Log.Fatal(System.String)">
            <summary>
            Log a fatal error. If you don't want to use your own ILog variable returned by
            <see cref="M:RssBandit.Common.Logging.Log.GetLogger(System.Type)">GetLogger</see>, you can call this method.
            </summary>
            <param name="message">Message </param>
        </member>
        <member name="M:RssBandit.Common.Logging.Log.Info(System.String,System.Exception)">
            <summary>
            Log an info error. If you don't want to use your own ILog variable returned by
            <see cref="M:RssBandit.Common.Logging.Log.GetLogger(System.Type)">GetLogger</see>, you can call this method.
            </summary>
            <param name="message">Message</param>
            <param name="exception">Exception</param>
        </member>
        <member name="M:RssBandit.Common.Logging.Log.Info(System.String)">
            <summary>
             Log a info message. If you don't want to use your own ILog variable returned by
            <see cref="M:RssBandit.Common.Logging.Log.GetLogger(System.Type)">GetLogger</see>, you can call this method.
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="M:RssBandit.Common.Logging.Log.Trace(System.String)">
            <summary>
             Log a trace message. If you don't want to use your own ILog variable returned by
            <see cref="M:RssBandit.Common.Logging.Log.GetLogger(System.Type)">GetLogger</see>, you can call this method.
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="M:RssBandit.Common.Logging.Log.Trace(System.String,System.Exception)">
            <summary>
             Log a trace message. If you don't want to use your own ILog variable returned by
            <see cref="M:RssBandit.Common.Logging.Log.GetLogger(System.Type)">GetLogger</see>, you can call this method.
            </summary>
            <param name="message">Message</param>
            <param name="exception">Exception to trace</param>
        </member>
        <member name="M:RssBandit.Common.Logging.Log.Debug(System.String,System.Exception)">
            <summary>
            Log an debug error. If you don't want to use your own ILog variable returned by
            <see cref="M:RssBandit.Common.Logging.Log.GetLogger(System.Type)">GetLogger</see>, you can call this method.
            </summary>
            <param name="message">Message</param>
            <param name="exception">Exception</param>
        </member>
        <member name="M:RssBandit.Common.Logging.Log.Debug(System.String)">
            <summary>
             Log a debug message. If you don't want to use your own ILog variable returned by
            <see cref="M:RssBandit.Common.Logging.Log.GetLogger(System.Type)">GetLogger</see>, you can call this method.
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="M:RssBandit.Common.Logging.Log.GetLogger(System.Type)">
            <summary>
             If you want to use your own ILog variable in your class, initialize
             them with a instance returned by this method.
            </summary>
            <param name="type">System.Type</param>
            <returns>Instance of a logger impl. ILog</returns>
        </member>
        <member name="P:RssBandit.Common.Logging.Log.Log4NetConfigFile">
            <summary>
             The Full Path to the Config File
            </summary>
        </member>
        <member name="T:NewsComponents.Xml.Serialization.XmlAttributeOverridesThumbprinter">
            <summary>
            Helpers to create a normalized thumbprint
            for XmlAttributeOverrides objects.
            </summary>
        </member>
        <member name="M:NewsComponents.Xml.Serialization.XmlAttributeOverridesThumbprinter.GetThumbprint(System.Xml.Serialization.XmlAttributeOverrides)">
            <summary>
            Gets a thumbprint (signature)
            for the content of the XmlAttributeOverrides
            </summary>
            <param name="overrides"></param>
            <returns></returns>
        </member>
        <member name="T:NewsComponents.Utils.Kernel32">
            <summary>
            Wraps the API functions, structures and constants.
            </summary>
        </member>
        <member name="M:NewsComponents.Utils.Kernel32.Access2API(System.IO.FileAccess)">
            <summary>
            Provides a mapping between a System.IO.FileAccess value and a FileAccessAPI value.
            </summary>
            <param name="Access">The <see cref="T:System.IO.FileAccess"/> value to map.</param>
            <returns>The <see cref="T:NewsComponents.Utils.Kernel32.FileAccessAPI"/> value.</returns>
        </member>
        <member name="T:NewsComponents.Utils.StreamInfo">
            <summary>
            Encapsulates a single alternative data stream for a file.
            </summary>
        </member>
        <member name="M:NewsComponents.Utils.StreamInfo.Open">
            <summary>
            Opens or creates the stream in read-write mode, with no sharing.
            </summary>
            <returns>A <see cref="T:System.IO.FileStream"/> wrapper for the stream.</returns>
        </member>
        <member name="M:NewsComponents.Utils.StreamInfo.Open(System.IO.FileMode)">
            <summary>
            Opens or creates the stream in read-write mode with no sharing.
            </summary>
            <param name="Mode">The <see cref="T:System.IO.FileMode"/> action for the stream.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> wrapper for the stream.</returns>
        </member>
        <member name="M:NewsComponents.Utils.StreamInfo.Open(System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens or creates the stream with no sharing.
            </summary>
            <param name="Mode">The <see cref="T:System.IO.FileMode"/> action for the stream.</param>
            <param name="Access">The <see cref="T:System.IO.FileAccess"/> level for the stream.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> wrapper for the stream.</returns>
        </member>
        <member name="M:NewsComponents.Utils.StreamInfo.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens or creates the stream.
            </summary>
            <param name="Mode">The <see cref="T:System.IO.FileMode"/> action for the stream.</param>
            <param name="Access">The <see cref="T:System.IO.FileAccess"/> level for the stream.</param>
            <param name="Share">The <see cref="T:System.IO.FileShare"/> level for the stream.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> wrapper for the stream.</returns>
        </member>
        <member name="M:NewsComponents.Utils.StreamInfo.Delete">
            <summary>
            Deletes the stream from the file.
            </summary>
            <returns>A <see cref="T:System.Boolean"/> value: true if the stream was deleted, false if there was an error.</returns>
        </member>
        <member name="P:NewsComponents.Utils.StreamInfo.Name">
            <summary>
            The name of the stream.
            </summary>
        </member>
        <member name="P:NewsComponents.Utils.StreamInfo.Size">
            <summary>
            The size (in bytes) of the stream.
            </summary>
        </member>
        <member name="T:NewsComponents.Utils.FileStreams">
            <summary>
            Encapsulates the collection of alternative data streams for a file.
            A collection of <see cref="T:NewsComponents.Utils.StreamInfo"/> objects.
            </summary>
        </member>
        <member name="M:NewsComponents.Utils.FileStreams.initStreams">
            <summary>
            Reads the streams from the file.
            </summary>
        </member>
        <member name="M:NewsComponents.Utils.FileStreams.Open">
            <summary>
            Opens or creates the default file stream.
            </summary>
            <returns><see cref="T:System.IO.FileStream"/></returns>
        </member>
        <member name="M:NewsComponents.Utils.FileStreams.Open(System.IO.FileMode)">
            <summary>
            Opens or creates the default file stream.
            </summary>
            <param name="Mode">The <see cref="T:System.IO.FileMode"/> for the stream.</param>
            <returns><see cref="T:System.IO.FileStream"/></returns>
        </member>
        <member name="M:NewsComponents.Utils.FileStreams.Open(System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens or creates the default file stream.
            </summary>
            <param name="Mode">The <see cref="T:System.IO.FileMode"/> for the stream.</param>
            <param name="Access">The <see cref="T:System.IO.FileAccess"/> for the stream.</param>
            <returns><see cref="T:System.IO.FileStream"/></returns>
        </member>
        <member name="M:NewsComponents.Utils.FileStreams.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens or creates the default file stream.
            </summary>
            <param name="Mode">The <see cref="T:System.IO.FileMode"/> for the stream.</param>
            <param name="Access">The <see cref="T:System.IO.FileAccess"/> for the stream.</param>
            <param name="Share">The <see cref="T:System.IO.FileShare"/> for the stream.</param>
            <returns><see cref="T:System.IO.FileStream"/></returns>
        </member>
        <member name="M:NewsComponents.Utils.FileStreams.Delete">
            <summary>
            Deletes the file, and all alternative streams.
            </summary>
        </member>
        <member name="M:NewsComponents.Utils.FileStreams.Add(System.String)">
            <summary>
            Add an alternative data stream to this file.
            </summary>
            <param name="Name">The name for the stream.</param>
            <returns>The index of the new item.</returns>
        </member>
        <member name="M:NewsComponents.Utils.FileStreams.Remove(System.String)">
            <summary>
            Removes the alternative data stream with the specified name.
            </summary>
            <param name="Name">The name of the string to remove.</param>
        </member>
        <member name="M:NewsComponents.Utils.FileStreams.IndexOf(NewsComponents.Utils.StreamInfo)">
            <summary>
            Returns the index of the specified <see cref="T:NewsComponents.Utils.StreamInfo"/> object in the collection.
            </summary>
            <param name="FSI">The object to find.</param>
            <returns>The index of the object, or -1.</returns>
        </member>
        <member name="M:NewsComponents.Utils.FileStreams.IndexOf(System.String)">
            <summary>
            Returns the index of the <see cref="T:NewsComponents.Utils.StreamInfo"/> object with the specified name in the collection.
            </summary>
            <param name="Name">The name of the stream to find.</param>
            <returns>The index of the stream, or -1.</returns>
        </member>
        <member name="M:NewsComponents.Utils.FileStreams.OnInsert(System.Int32,System.Object)">
            <summary>
            Throws an exception if you try to add anything other than a StreamInfo object to the collection.
            </summary>
        </member>
        <member name="M:NewsComponents.Utils.FileStreams.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            Throws an exception if you try to add anything other than a StreamInfo object to the collection.
            </summary>
        </member>
        <member name="M:NewsComponents.Utils.FileStreams.OnRemoveComplete(System.Int32,System.Object)">
            <summary>
            Deletes the stream from the file when you remove it from the list.
            </summary>
        </member>
        <member name="P:NewsComponents.Utils.FileStreams.FileInfo">
            <summary>
            Returns the <see cref="T:System.IO.FileInfo"/> object for the wrapped file. 
            </summary>
        </member>
        <member name="P:NewsComponents.Utils.FileStreams.FileName">
            <summary>
            Returns the full path to the wrapped file.
            </summary>
        </member>
        <member name="P:NewsComponents.Utils.FileStreams.FileSize">
            <summary>
            Returns the size of the main data stream, in bytes.
            </summary>
        </member>
        <member name="P:NewsComponents.Utils.FileStreams.Size">
            <summary>
            Returns the size of all streams for the file, in bytes.
            </summary>
        </member>
        <member name="T:NewsComponents.Search.LuceneNewsItemSearch">
            <summary>
            A utility class for making Lucene Documents from a NewsItem.
            </summary>	
        </member>
        <member name="M:NewsComponents.Search.LuceneNewsItemSearch.Document(NewsComponents.NewsItem)">
            <summary>
            Creates a document for a NewsItem.
            </summary>
        </member>
        <member name="M:NewsComponents.Search.LuceneNewsItemSearch.DateToString(System.DateTime)">
            <summary> 
            Converts a Date to a string suitable for indexing.
            </summary>
            <throws>  RuntimeException if the date specified in the 
            method argument is before 1970</throws>
            <remarks>Check, if we really have to subtract the TimeZone.UtcOffset,
            because the date is already UTC!</remarks>
        </member>
        <member name="M:NewsComponents.Search.LuceneNewsItemSearch.Field.Keyword(System.String,System.String)">
            <summary>
            Field.Keyword() are added and indexed (searchable), but not tokenized
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Search.LuceneNewsItemSearch.Field.Text(System.String,System.String)">
            <summary>
            Field.Text() are added, indexed (searchable) and tokenized  
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Search.LuceneNewsItemSearch.Field.UnIndexed(System.String,System.String)">
            <summary>
            Field.UnIndexed() are added only
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:NewsComponents.Search.BooleanSearch.QueryBuilder">
            <summary>
            QueryBuilder provides facilities for parsing and validating a boolean
            search string and building a QueryTree, which can subsequently be matched
            against one or more objects implenting the IDocument interface.
            </summary>
        </member>
        <member name="T:NewsComponents.Collections.RelationList">
            <summary>
            	A strongly-typed collection of <see cref="T:NewsComponents.RelationCosmos.RelationBase"/> objects.
            </summary>
        </member>
        <member name="M:NewsComponents.Collections.RelationList.Synchronized(NewsComponents.Collections.RelationList)">
            <summary>
            	Creates a synchronized (thread-safe) wrapper for a 
                <c>RelationList</c> instance.
            </summary>
            <returns>
                An <c>RelationList</c> wrapper that is synchronized (thread-safe).
            </returns>
        </member>
        <member name="M:NewsComponents.Collections.RelationList.ReadOnly(NewsComponents.Collections.RelationList)">
            <summary>
            	Creates a read-only wrapper for a 
                <c>RelationList</c> instance.
            </summary>
            <returns>
                An <c>RelationList</c> wrapper that is read-only.
            </returns>
        </member>
        <member name="F:NewsComponents.Collections.RelationList.Empty">
            <summary>
            Gets a shared empty RelationList.
            </summary>
        </member>
        <member name="M:NewsComponents.Collections.RelationList.#ctor">
            <summary>
            	Initializes a new instance of the <c>RelationList</c> class
            	that is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="M:NewsComponents.Collections.RelationList.#ctor(System.Int32)">
            <summary>
            	Initializes a new instance of the <c>RelationList</c> class
            	that has the specified initial capacity.
            </summary>
            <param name="capacity">
            	The number of elements that the new <c>RelationList</c> is initially capable of storing.
            </param>
        </member>
        <member name="M:NewsComponents.Collections.RelationList.#ctor(NewsComponents.Collections.RelationList)">
            <summary>
            	Initializes a new instance of the <c>RelationList</c> class
            	that contains elements copied from the specified <c>RelationList</c>.
            </summary>
            <param name="c">The <c>RelationList</c> whose elements are copied to the new collection.</param>
        </member>
        <member name="M:NewsComponents.Collections.RelationList.#ctor(System.Collections.ICollection)">
            <summary>
            	Initializes a new instance of the <c>RelationList</c> class
            	that contains elements copied from the specified <c>System.Collections.ICollection</c>.
            </summary>
            <param name="c">The <c>System.Collections.ICollection</c> whose elements are copied to the new collection.</param>
        </member>
        <member name="M:NewsComponents.Collections.RelationList.#ctor(NewsComponents.RelationCosmos.RelationBase[])">
            <summary>
            	Initializes a new instance of the <c>RelationList</c> class
            	that contains elements copied from the specified <see cref="T:NewsComponents.RelationCosmos.RelationBase"/> array.
            </summary>
            <param name="a">The <see cref="T:NewsComponents.RelationCosmos.RelationBase"/> array whose elements are copied to the new list.</param>
        </member>
        <member name="M:NewsComponents.Collections.RelationList.CopyTo(NewsComponents.RelationCosmos.RelationBase[])">
            <summary>
            	Copies the entire <c>RelationList</c> to a one-dimensional
            	<see cref="T:NewsComponents.RelationCosmos.RelationBase"/> array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:NewsComponents.RelationCosmos.RelationBase"/> array to copy to.</param>
        </member>
        <member name="M:NewsComponents.Collections.RelationList.CopyTo(NewsComponents.RelationCosmos.RelationBase[],System.Int32)">
            <summary>
            	Copies the entire <c>RelationList</c> to a one-dimensional
            	<see cref="T:NewsComponents.RelationCosmos.RelationBase"/> array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:NewsComponents.RelationCosmos.RelationBase"/> array to copy to.</param>
            <param name="start">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:NewsComponents.Collections.RelationList.Add(NewsComponents.RelationCosmos.RelationBase)">
            <summary>
            	Adds a <see cref="T:NewsComponents.RelationCosmos.RelationBase"/> to the end of the <c>RelationList</c>.
            </summary>
            <param name="item">The <see cref="T:NewsComponents.RelationCosmos.RelationBase"/> to be added to the end of the <c>RelationList</c>.</param>
            <returns>The index at which the value has been added.</returns>
        </member>
        <member name="M:NewsComponents.Collections.RelationList.Clear">
            <summary>
            	Removes all elements from the <c>RelationList</c>.
            </summary>
        </member>
        <member name="M:NewsComponents.Collections.RelationList.Clone">
            <summary>
            	Creates a shallow copy of the <see cref="T:NewsComponents.Collections.RelationList"/>.
            </summary>
        </member>
        <member name="M:NewsComponents.Collections.RelationList.Contains(NewsComponents.RelationCosmos.RelationBase)">
            <summary>
            	Determines whether a given <see cref="T:NewsComponents.RelationCosmos.RelationBase"/> is in the <c>RelationList</c>.
            </summary>
            <param name="item">The <see cref="T:NewsComponents.RelationCosmos.RelationBase"/> to check for.</param>
            <returns><c>true</c> if <paramref name="item"/> is found in the <c>RelationList</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:NewsComponents.Collections.RelationList.IndexOf(NewsComponents.RelationCosmos.RelationBase)">
            <summary>
            	Returns the zero-based index of the first occurrence of a <see cref="T:NewsComponents.RelationCosmos.RelationBase"/>
            	in the <c>RelationList</c>.
            </summary>
            <param name="item">The <see cref="T:NewsComponents.RelationCosmos.RelationBase"/> to locate in the <c>RelationList</c>.</param>
            <returns>
            	The zero-based index of the first occurrence of <paramref name="item"/> 
            	in the entire <c>RelationList</c>, if found; otherwise, -1.
            </returns>
        </member>
        <member name="M:NewsComponents.Collections.RelationList.Insert(System.Int32,NewsComponents.RelationCosmos.RelationBase)">
            <summary>
            	Inserts an element into the <c>RelationList</c> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The <see cref="T:NewsComponents.RelationCosmos.RelationBase"/> to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para><paramref name="index"/> is less than zero</para>
            	<para>-or-</para>
            	<para><paramref name="index"/> is equal to or greater than <see cref="P:NewsComponents.Collections.RelationList.Count"/>.</para>
            </exception>
        </member>
        <member name="M:NewsComponents.Collections.RelationList.Remove(NewsComponents.RelationCosmos.RelationBase)">
            <summary>
            	Removes the first occurrence of a specific <see cref="T:NewsComponents.RelationCosmos.RelationBase"/> from the <c>RelationList</c>.
            </summary>
            <param name="item">The <see cref="T:NewsComponents.RelationCosmos.RelationBase"/> to remove from the <c>RelationList</c>.</param>
            <exception cref="T:System.ArgumentException">
            	The specified <see cref="T:NewsComponents.RelationCosmos.RelationBase"/> was not found in the <c>RelationList</c>.
            </exception>
        </member>
        <member name="M:NewsComponents.Collections.RelationList.RemoveAt(System.Int32)">
            <summary>
            	Removes the element at the specified index of the <c>RelationList</c>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para><paramref name="index"/> is less than zero</para>
            	<para>-or-</para>
            	<para><paramref name="index"/> is equal to or greater than <see cref="P:NewsComponents.Collections.RelationList.Count"/>.</para>
            </exception>
        </member>
        <member name="M:NewsComponents.Collections.RelationList.GetEnumerator">
            <summary>
            	Returns an enumerator that can iterate through the <c>RelationList</c>.
            </summary>
            <returns>An <see cref="T:NewsComponents.Collections.RelationList.Enumerator"/> for the entire <c>RelationList</c>.</returns>
        </member>
        <member name="M:NewsComponents.Collections.RelationList.AddRange(NewsComponents.Collections.RelationList)">
            <summary>
            	Adds the elements of another <c>RelationList</c> to the current <c>RelationList</c>.
            </summary>
            <param name="x">The <c>RelationList</c> whose elements should be added to the end of the current <c>RelationList</c>.</param>
            <returns>The new <see cref="P:NewsComponents.Collections.RelationList.Count"/> of the <c>RelationList</c>.</returns>
        </member>
        <member name="M:NewsComponents.Collections.RelationList.AddRange(System.Collections.ICollection)">
            <summary>
            	Adds the elements of a object implementing <see cref="T:System.Collections.ICollection"/> interface to the current <c>RelationList</c>.
            </summary>
            <param name="c">The <see cref="T:System.Collections.ICollection"/> array whose elements should be added to the end of the <c>RelationList</c>.</param>
            <returns>The new <see cref="P:NewsComponents.Collections.RelationList.Count"/> of the <c>RelationList</c>.</returns>
        </member>
        <member name="M:NewsComponents.Collections.RelationList.AddRange(NewsComponents.RelationCosmos.RelationBase[])">
            <summary>
            	Adds the elements of a <see cref="T:NewsComponents.RelationCosmos.RelationBase"/> array to the current <c>RelationList</c>.
            </summary>
            <param name="x">The <see cref="T:NewsComponents.RelationCosmos.RelationBase"/> array whose elements should be added to the end of the <c>RelationList</c>.</param>
            <returns>The new <see cref="P:NewsComponents.Collections.RelationList.Count"/> of the <c>RelationList</c>.</returns>
        </member>
        <member name="M:NewsComponents.Collections.RelationList.TrimToSize">
            <summary>
            	Sets the capacity to the actual number of elements.
            </summary>
        </member>
        <member name="M:NewsComponents.Collections.RelationList.ValidateIndex(System.Int32)">
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para><paramref name="index"/> is less than zero</para>
            	<para>-or-</para>
            	<para><paramref name="index"/> is equal to or greater than <see cref="P:NewsComponents.Collections.RelationList.Count"/>.</para>
            </exception>
        </member>
        <member name="M:NewsComponents.Collections.RelationList.ValidateIndex(System.Int32,System.Boolean)">
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para><paramref name="index"/> is less than zero</para>
            	<para>-or-</para>
            	<para><paramref name="index"/> is equal to or greater than <see cref="P:NewsComponents.Collections.RelationList.Count"/>.</para>
            </exception>
        </member>
        <member name="P:NewsComponents.Collections.RelationList.Count">
            <summary>
            	Gets the number of elements actually contained in the <c>RelationList</c>.
            </summary>
        </member>
        <member name="P:NewsComponents.Collections.RelationList.IsSynchronized">
            <summary>
            	Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary>
            <returns>true if access to the ICollection is synchronized (thread-safe); otherwise, false.</returns>
        </member>
        <member name="P:NewsComponents.Collections.RelationList.SyncRoot">
            <summary>
            	Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="P:NewsComponents.Collections.RelationList.Item(System.Int32)">
            <summary>
            	Gets or sets the <see cref="T:NewsComponents.RelationCosmos.RelationBase"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para><paramref name="index"/> is less than zero</para>
            	<para>-or-</para>
            	<para><paramref name="index"/> is equal to or greater than <see cref="P:NewsComponents.Collections.RelationList.Count"/>.</para>
            </exception>
        </member>
        <member name="P:NewsComponents.Collections.RelationList.IsFixedSize">
            <summary>
            	Gets a value indicating whether the collection has a fixed size.
            </summary>
            <value>true if the collection has a fixed size; otherwise, false. The default is false</value>
        </member>
        <member name="P:NewsComponents.Collections.RelationList.IsReadOnly">
            <summary>
            	gets a value indicating whether the IList is read-only.
            </summary>
            <value>true if the collection is read-only; otherwise, false. The default is false</value>
        </member>
        <member name="P:NewsComponents.Collections.RelationList.Capacity">
            <summary>
            	Gets or sets the number of elements the <c>RelationList</c> can contain.
            </summary>
        </member>
        <member name="T:NewsComponents.Collections.RelationList.IRelationListEnumerator">
            <summary>
            	Supports type-safe iteration over a <see cref="T:NewsComponents.Collections.RelationList"/>.
            </summary>
        </member>
        <member name="M:NewsComponents.Collections.RelationList.IRelationListEnumerator.MoveNext">
            <summary>
            	Advances the enumerator to the next element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            	The collection was modified after the enumerator was created.
            </exception>
            <returns>
            	<c>true</c> if the enumerator was successfully advanced to the next element; 
            	<c>false</c> if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:NewsComponents.Collections.RelationList.IRelationListEnumerator.Reset">
            <summary>
            	Sets the enumerator to its initial position, before the first element in the collection.
            </summary>
        </member>
        <member name="P:NewsComponents.Collections.RelationList.IRelationListEnumerator.Current">
            <summary>
            	Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:NewsComponents.Collections.RelationList.Enumerator">
            <summary>
            	Supports simple iteration over a <see cref="T:NewsComponents.Collections.RelationList"/>.
            </summary>
        </member>
        <member name="M:NewsComponents.Collections.RelationList.Enumerator.#ctor(NewsComponents.Collections.RelationList)">
            <summary>
            	Initializes a new instance of the <c>Enumerator</c> class.
            </summary>
            <param name="tc"></param>
        </member>
        <member name="M:NewsComponents.Collections.RelationList.Enumerator.MoveNext">
            <summary>
            	Advances the enumerator to the next element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            	The collection was modified after the enumerator was created.
            </exception>
            <returns>
            	<c>true</c> if the enumerator was successfully advanced to the next element; 
            	<c>false</c> if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:NewsComponents.Collections.RelationList.Enumerator.Reset">
            <summary>
            	Sets the enumerator to its initial position, before the first element in the collection.
            </summary>
        </member>
        <member name="P:NewsComponents.Collections.RelationList.Enumerator.Current">
            <summary>
            	Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Tst.TstDictionaryEntryEventArgs">
            <summary>
            Defines an event argument class that holds a <see cref="T:Tst.TstDictionaryEntry"/>.
            </summary>
        </member>
        <member name="M:Tst.TstDictionaryEntryEventArgs.#ctor(Tst.TstDictionaryEntry)">
            <summary>Create a <see cref="T:Tst.TstDictionaryEntry"/> event argument.</summary>
            <param name="entry">A <see cref="T:Tst.TstDictionaryEntry"/> entry to pass as argument.</param>
        </member>
        <member name="P:Tst.TstDictionaryEntryEventArgs.Entry">
            <summary>Gets the <see cref="T:Tst.TstDictionaryEntry"/> entry.</summary>
            <value>The <see cref="T:Tst.TstDictionaryEntry"/> entry.</value>
        </member>
        <member name="T:Tst.TstDictionaryEntryEventHandler">
            <summary>
            A <see cref="T:Tst.TstDictionaryEntry"/> event handler.
            </summary>
        </member>
        <member name="T:NewsComponents.Utils.RelativeUrlExpander">
            <summary>
            helper class used for expanding relative URLs. 
            </summary>
        </member>
        <member name="M:NewsComponents.Utils.RelativeUrlExpander.ConvertToAbsoluteUrl(System.Text.RegularExpressions.Match)">
            <summary>
            Converts the URL in the regex matched to an absolute URL with the base as this.baseUrl 
            then returns the entire match
            </summary>
            <param name="m"></param>
            <returns>The matched string with the contained uRL replaced with its absolute URL</returns>
        </member>
        <member name="T:NewsComponents.Utils.HtmlHelper">
            <summary>
            Helper class to work on HTML content.
            </summary>
        </member>
        <member name="M:NewsComponents.Utils.HtmlHelper.ConvertToAbsoluteUrl(System.String,System.String)">
            <summary>
            Converts a relative url to an absolute one. baseUrl is used as the base to fix the other.
            </summary>
            <param name="url">Url to fix</param>
            <param name="baseUrl">base Url to be used</param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Utils.HtmlHelper.ConvertToAbsoluteUrl(System.String,System.String,System.Boolean)">
            <summary>
            Converts a relative url to an absolute one. baseUrl is used as the base to fix the other.
            </summary>
            <param name="url">Url to fix</param>
            <param name="baseUrl">base Url to be used</param>
            <param name="onlyValid">Provide true, if the url should only be handled if no UriFormatException happens.</param>
            <returns>converted Url</returns>
        </member>
        <member name="M:NewsComponents.Utils.HtmlHelper.ConvertToAbsoluteUrl(System.String,System.Uri,System.Boolean)">
            <summary>
            Converts a relative url to an absolute one. baseUrl is used as the base to fix the other.
            </summary>
            <param name="url">Url to fix</param>
            <param name="baseUri">base Uri to be used</param>
            <param name="onlyValid">Provide true, if the url should only be handled if no UriFormatException happens.</param>
            <returns>converted Url, or null</returns>
        </member>
        <member name="M:NewsComponents.Utils.HtmlHelper.ConvertToAbsoluteUri(System.String,System.Uri,System.Boolean)">
            <summary>
            Converts a relative url to an absolute one. baseUrl is used as the base to fix the other.
            </summary>
            <param name="url">Url to fix</param>
            <param name="baseUri">base Uri to be used</param>
            <param name="onlyValid">Provide true, if the url should only be handled if no UriFormatException happens.</param>
            <returns>converted Url, or null</returns>
        </member>
        <member name="M:NewsComponents.Utils.HtmlHelper.ConvertToAbsoluteUrlPath(System.String)">
            <summary>
            Converts to absolute URL path. 
            E.g. a url "http://www.myserver.com/karli/feed.aspx?q=1"
            will return "http://www.myserver.com/karli/"
            </summary>
            <param name="url">The URL.</param>
            <returns>string</returns>
        </member>
        <member name="M:NewsComponents.Utils.HtmlHelper.ConvertToAbsoluteUriPath(System.Uri)">
            <summary>
            Converts to absolute URI path.
            </summary>
            <param name="uri">The URI.</param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Utils.HtmlHelper.RetrieveLinks(System.String,System.String)">
            <summary>
            Returns a RelationHRefDictionary with links found in HTML &lt;a href=""> attributes.
            </summary>
            <param name="html">String to work on</param>
            <param name="baseUrl">An absolute Url to be used to fix relative links</param>
            <returns>RelationHRefDictionary with string Urls as key(s), and link text as items</returns>
        </member>
        <member name="M:NewsComponents.Utils.HtmlHelper.RetrieveLinks(System.String,System.Uri)">
            <summary>
            Returns a RelationHRefDictionary with links found in HTML &lt;a href=""> attributes.
            </summary>
            <param name="html">String to work on</param>
            <param name="baseUri">An absolute Uri to be used to fix relative links</param>
            <returns>RelationHRefDictionary with string Urls as key(s), and link text as items</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NewsComponents.Utils.HtmlHelper.ExpandRelativeUrls(System.String,System.String)" -->
        <member name="M:NewsComponents.Utils.HtmlHelper.HtmlDecode(System.String)">
            <summary>
            A replacement of the HttpUtility.HtmlDecode() function.
            </summary>
            <param name="s">String to decode</param>
            <returns>Decoded string</returns>
        </member>
        <member name="M:NewsComponents.Utils.HtmlHelper.StripAnyTags(System.String)">
            <summary>
            Removes any tag of the form &lt;xxx> or &lt;/xxx>.
            </summary>
            <param name="html">string to work on</param>
            <returns>A Text-Only version of the provided input.</returns>
        </member>
        <member name="M:NewsComponents.Utils.HtmlHelper.FindTitle(System.String,System.String)">
            <summary>
            Gets the title out of the HTML head section.
            </summary>
            <param name="html">HTML string</param>
            <param name="defaultIfNoMatch">string to return, if no match was found</param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Utils.HtmlHelper.StripBadTags(System.String)">
            <summary>
            Replace any bad tag of the form &lt;object> by &lt;bject> to make
            it does not work on rendering later
            </summary>
            <remarks>THIS METHOD SHOULD NOT BE USED!!! IT CAUSES SCRIPT BLOCKS
            TO SHOW UP IN TEXT OF ITEMS. Users can control bad tags by disabling
            script instead which is more of a complete solution to the problem.</remarks>
            <param name="html">string to work on</param>
            <returns>A cleaner version of the provided input.</returns>
        </member>
        <member name="M:NewsComponents.Utils.HtmlHelper.UrlEncode(System.String)">
            <summary>
            URL-encode a provided string (Does NOT use the
            CLR function to do so).
            </summary>
            <param name="value">The value.</param>
            <returns>Null in case value is null</returns>
        </member>
        <member name="M:NewsComponents.Utils.HtmlHelper.UrlDecode(System.String)">
            <summary>
            URL-decode the provided value. It use the CLR function to do 
            so, but protects against the "+" replacement issue of the
            framework function.
            </summary>
            <param name="value">The value.</param>
            <returns>Null in case value is null</returns>
        </member>
        <member name="T:NewsComponents.Threading.PriorityThread">
            <summary>
            Managed thread(s), that handles all requests posted to the worker queue.
            It executes waiting delegates in order of priority as supplied
            to QueueUserWorkItem. Instances can be created to hold multiple pools with 
            multiple threads. Default is one thread per instance.
            </summary>
        </member>
        <member name="F:NewsComponents.Threading.PriorityThread._defaultMaxWorkerThreads">
            <summary>Default maximum number of threads the thread 
            pool has at its disposal.</summary>
        </member>
        <member name="F:NewsComponents.Threading.PriorityThread._waitingCallbacks">
            <summary>Queue of all the callbacks waiting to be executed.</summary>
        </member>
        <member name="F:NewsComponents.Threading.PriorityThread._workerThreadNeeded">
            <summary>
            Used to signal that a worker thread is needed for processing.  Note that multiple
            threads may be needed simultaneously and as such we use a semaphore instead of
            an auto reset event.
            </summary>
        </member>
        <member name="F:NewsComponents.Threading.PriorityThread._workerThreads">
            <summary>List of all worker threads at the disposal of the thread pool.</summary>
        </member>
        <member name="F:NewsComponents.Threading.PriorityThread._inUseThreads">
            <summary>Number of threads currently active.</summary>
        </member>
        <member name="M:NewsComponents.Threading.PriorityThread.#ctor">
            <summary>Initialize the thread pool with one worker thread and
            ThreadPriority.Normal.</summary>
        </member>
        <member name="M:NewsComponents.Threading.PriorityThread.#ctor(System.Int32,System.Threading.ThreadPriority)">
            <summary>Initialize the thread pool.</summary>
            <param name="workerThreadCount">Amount of worker threads to use</param>
            <param name="priority">ThreadPriority of the worker threads</param>
        </member>
        <member name="M:NewsComponents.Threading.PriorityThread.QueueUserWorkItem(System.Threading.WaitCallback,System.Int32)">
            <summary>Queues a user work item to the thread pool.</summary>
            <param name="callback">
            A WaitCallback representing the delegate to invoke when the thread in the 
            thread pool picks up the work item.
            </param>
            <param name="priority">The priority for this callback.</param>
        </member>
        <member name="M:NewsComponents.Threading.PriorityThread.QueueUserWorkItem(System.Threading.WaitCallback,System.Object,System.Int32)">
            <summary>Queues a user work item to the thread pool.</summary>
            <param name="callback">
            A WaitCallback representing the delegate to invoke when the thread in the 
            thread pool picks up the work item.
            </param>
            <param name="state">
            The object that is passed to the delegate when serviced from the thread pool.
            </param>
            <param name="priority">The priority for this callback.</param>
        </member>
        <member name="M:NewsComponents.Threading.PriorityThread.EmptyQueue">
            <summary>Empties the work queue of any queued work items.</summary>
        </member>
        <member name="M:NewsComponents.Threading.PriorityThread.ProcessQueuedItems">
            <summary>A thread worker function that processes items from the work queue.</summary>
        </member>
        <member name="P:NewsComponents.Threading.PriorityThread.ActiveThreads">
            <summary>Gets the number of currently active threads in the thread pool.</summary>
        </member>
        <member name="P:NewsComponents.Threading.PriorityThread.WaitingCallbacks">
            <summary>Gets the number of callback delegates currently waiting in the thread pool.</summary>
        </member>
        <member name="T:NewsComponents.News.NntpMessage">
            <summary>
            Represents an NNTP message. 
            </summary>
        </member>
        <member name="F:NewsComponents.News.NntpMessage.headers">
            <summary>
            The NNTP headers
            </summary>
        </member>
        <member name="F:NewsComponents.News.NntpMessage.id">
            <summary>
            The message Id
            </summary>
        </member>
        <member name="F:NewsComponents.News.NntpMessage.body">
            <summary>
            The message body
            </summary>
        </member>
        <member name="M:NewsComponents.News.NntpMessage.#ctor">
            <summary>
            Default constructor. 
            </summary>
        </member>
        <member name="M:NewsComponents.News.NntpMessage.SetBody(System.String[])">
            <summary>
            create one body string from the lines returned over the socket
            </summary>
            <param name="sLines">The body response to parse</param>
        </member>
        <member name="M:NewsComponents.News.NntpMessage.SetHeaders(System.String[])">
            <summary>
            Take the headers response, parse it and add it to the headers collection
            </summary>
            <param name="sLines">The headers response to parse</param>
        </member>
        <member name="M:NewsComponents.News.NntpMessage.SetXHeader(System.String,System.String,System.String)">
            <summary>
            Set a particular header. 
            </summary>
            <param name="pseudoId"></param>
            <param name="header"></param>
            <param name="value"></param>
        </member>
        <member name="P:NewsComponents.News.NntpMessage.Headers">
            <summary>
            The message headers
            </summary>
        </member>
        <member name="P:NewsComponents.News.NntpMessage.Id">
            <summary>
            The message ID
            </summary>
        </member>
        <member name="P:NewsComponents.News.NntpMessage.Body">
            <summary>
            The message body. 
            </summary>
        </member>
        <member name="T:NewsComponents.News.NntpMessages">
            <summary>
             A collection of NntpMessage objects
            </summary>
        </member>
        <member name="T:NewsComponents.News.NntpWebException">
            <summary>
            NNTP specific exception class
            </summary>
        </member>
        <member name="M:NewsComponents.News.NntpWebException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.News.NntpWebException"/> class.
            </summary>
        </member>
        <member name="M:NewsComponents.News.NntpWebException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.News.NntpWebException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NewsComponents.News.NntpWebException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.News.NntpWebException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:NewsComponents.News.NntpClient">
             <summary>
             A class that understands the NNTP protocol.
             Could be useful for creating binary news reader,
             or even normal news readers.
             
             Includes support for decoding uuencoded and yencoded single and multipart-message files.
            
             Does not include support for MIME attachments.
            
             Thanks to Patrick Steel (psteele@ipdsolution.co) for publishing code in microsoft.public.dotnet.languages.csharp
             on 2001-09-13 19:26:12 PST for getting me started on using NNTP in C#
             </summary>
             <remarks>
             Old spec. see: http://tools.ietf.org/html/rfc977
             New spec. see: http://tools.ietf.org/html/rfc3977 (replace 977)
             </remarks>
        </member>
        <member name="F:NewsComponents.News.NntpClient.xheaderResult">
            <summary>
            Matches headers
            </summary>
        </member>
        <member name="M:NewsComponents.News.NntpClient.#ctor(System.String,System.Int32)">
            <summary>
            Instantiates class
            </summary>
            <param name="Server">The server to connect to</param>
            <param name="Port">The port to connect on</param>
        </member>
        <member name="M:NewsComponents.News.NntpClient.#ctor(System.String)">
            <summary>
            Instantiates class. Port defaults to 119. 
            </summary>
            <param name="Server">The server to connect to</param>
        </member>
        <member name="M:NewsComponents.News.NntpClient.Dispose">
            <summary>
             Disconnect and cleanup
            </summary>
        </member>
        <member name="M:NewsComponents.News.NntpClient.AuthInfo(System.String,System.String)">
            <summary>
            Tries to authenticate the user
            </summary>
            <param name="userName">The username</param>
            <param name="password">The password</param>
            <returns>true if login was successful</returns>
        </member>
        <member name="M:NewsComponents.News.NntpClient.Groups(System.IO.TextWriter)">
            <summary>
            Writes a list of groups available on the server to the 
            </summary>
            <param name="writer"></param>      
        </member>
        <member name="M:NewsComponents.News.NntpClient.Post(System.String)">
             <summary>
             Posts a message to a particular newgroup 
             </summary>
            <param name="message">The message to send</param>
        </member>
        <member name="M:NewsComponents.News.NntpClient.Send(System.String)">
            <summary>
            send a string of data over the socket
            </summary>
            <param name="sData">The data to send</param>
        </member>
        <member name="M:NewsComponents.News.NntpClient.GetData(System.Boolean)">
            <summary>
             Get data from the socket
            </summary>
            <param name="expectLongResponse">flag indicates whether to expect a long response or not</param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.News.NntpClient.GetData(System.Boolean,System.IO.TextWriter)">
            <summary>
             Get data from the socket
            </summary>
            <param name="expectLongResponse">flag indicates whether to expect a long response or not</param>
            <param name="writer">used for writing the response from the server</param>
            <returns>returns true if the operation was successful and false if an error occured</returns>
        </member>
        <member name="M:NewsComponents.News.NntpClient.GetNntpMessages(System.DateTime,System.Int32,System.IO.TextWriter)">
            <summary>
            Retrieves all the messages posted to the 
            newsgroup since the specified date. 
            </summary>
            <param name="since">The date</param>
            <param name="downloadCount">Indicates the number of articles that should be 
            downloaded if the news server doesn't understand the NEWNEWS request</param>
            <param name="sw">used for writing the server response</param>
        </member>
        <member name="M:NewsComponents.News.NntpClient.GetNntpMessage(System.String,System.IO.TextWriter)">
            <summary>
            Retrieve a message from the server
            </summary>
            <param name="id">the parameter that identifies the message to retrieve</param>
            <param name="sw">used for writing the server response</param>
        </member>
        <member name="M:NewsComponents.News.NntpClient.GetNntpMessages(System.Collections.Specialized.StringCollection,System.Int32,System.IO.TextWriter)">
            <summary>
            Retrieves a list of messages given their message ids. 
            </summary>
            <param name="oMsgs">a list of message ids</param>
            <param name="downloadCount">The maximum number of messages that should be downloaded</param>
            <param name="sw">the TextWriter for writing the servers response</param>
        </member>
        <member name="M:NewsComponents.News.NntpClient.GetNntpMessages(System.Int32,System.Int32,System.IO.TextWriter)">
            <summary>
            Retrieves NNTP messages from the server within a specified range
            </summary>
            <param name="first">the start of the range</param>
            <param name="last">the end of the range</param>
            <param name="sw">the TextWriter for writing the servers response</param>
        </member>
        <member name="M:NewsComponents.News.NntpClient.GetCapabilities(System.String)">
            <summary>
            Gets the capabilities of the NNTP server.
            </summary>
            <param name="additionalExtension">Optional: an additional extension to query for.</param>
            <returns>IDictionary with Capabilities listed in http://tools.ietf.org/html/rfc3977#section-5.2</returns>
        </member>
        <member name="P:NewsComponents.News.NntpClient.ConnectResponse">
            <summary>
            The connection response. 
            </summary>
        </member>
        <member name="P:NewsComponents.News.NntpClient.Timeout">
            <summary>
            Used to set the Send and Receive timeout for the underlying TcpClient. 
            This does not set the connection time out. 
            </summary>
        </member>
        <member name="P:NewsComponents.News.NntpClient.FirstMsg">
            <summary>
            Index of the first message.
            </summary>
        </member>
        <member name="P:NewsComponents.News.NntpClient.LastMsg">
            <summary>
            Index of the last message. 
            </summary>
        </member>
        <member name="T:NewsComponents.Net.TaskEventArgs">
            <summary>
            Used to notify information about an UpdaterTask.
            </summary>
        </member>
        <member name="M:NewsComponents.Net.TaskEventArgs.#ctor(NewsComponents.Net.DownloadTask)">
            <summary>
            Constructor for a TaskEventArgs.
            </summary>
            <param name="task">The DownloadTask for initialization.</param>
        </member>
        <member name="P:NewsComponents.Net.TaskEventArgs.Task">
            <summary>
            Returns the updater task.
            </summary>
        </member>
        <member name="T:NewsComponents.Net.BaseDownloadProgressEventArgs">
            <summary>
            Base class used to provide information about the download progress.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BaseDownloadProgressEventArgs.bytesTotal">
            <summary>
            The total bystes that will be transfered.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BaseDownloadProgressEventArgs.bytesTransferred">
            <summary>
            The amount of bytes that have been transfered.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BaseDownloadProgressEventArgs.filesTotal">
            <summary>
            The total files that will be transfered.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BaseDownloadProgressEventArgs.filesTransferred">
            <summary>
            The files that have been transfered.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BaseDownloadProgressEventArgs.cancel">
            <summary>
            Indicates whether the operation was canceled.
            </summary>
        </member>
        <member name="M:NewsComponents.Net.BaseDownloadProgressEventArgs.#ctor(System.Int64,System.Int64,System.Int32,System.Int32)">
            <summary>
            Constructor for the BaseDownloadProgressEventArgs.
            </summary>
            <param name="bytesTotal">The total bytes to be transferred.</param>
            <param name="bytesTransferred">Number of bytes that have been transferred.</param>
            <param name="filesTotal">The total number of files to be transferred.</param>
            <param name="filesTransferred">Number of files that have been transferred.</param>
        </member>
        <member name="P:NewsComponents.Net.BaseDownloadProgressEventArgs.BytesTotal">
            <summary>
            The total bytes to be transferred.
            </summary>
        </member>
        <member name="P:NewsComponents.Net.BaseDownloadProgressEventArgs.BytesTransferred">
            <summary>
            Number of bytes that have been transferred.
            </summary>
        </member>
        <member name="P:NewsComponents.Net.BaseDownloadProgressEventArgs.FilesTotal">
            <summary>
            The total number of files to be transferred.
            </summary>
        </member>
        <member name="P:NewsComponents.Net.BaseDownloadProgressEventArgs.FilesTransferred">
            <summary>
            Number of files that have been transferred.
            </summary>
        </member>
        <member name="P:NewsComponents.Net.BaseDownloadProgressEventArgs.Cancel">
            <summary>
            Indicates whether the operation was cancelled or not.
            </summary>
        </member>
        <member name="T:NewsComponents.Net.DownloadTaskProgressEventArgs">
            <summary>
            Used to notify events about download progess.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.DownloadTaskProgressEventArgs.task">
            <summary>
            The updater task.
            </summary>
        </member>
        <member name="M:NewsComponents.Net.DownloadTaskProgressEventArgs.#ctor(System.Int64,System.Int64,System.Int32,System.Int32,NewsComponents.Net.DownloadTask)">
            <summary>
            Constructor for the DownloadTaskProgressEventArgs.
            </summary>
            <param name="bytesTotal">The total bytes to be transferred.</param>
            <param name="bytesTransferred">Number of bytes that have been transferred.</param>
            <param name="filesTotal">The total number of files to be transferred.</param>
            <param name="filesTransferred">Number of files that have been transferred.</param>
            <param name="task">The <see cref="T:NewsComponents.Net.DownloadTask"/> instance.</param>
        </member>
        <member name="P:NewsComponents.Net.DownloadTaskProgressEventArgs.Task">
            <summary>
            Returns the DownloadTask.
            </summary>
        </member>
        <member name="T:NewsComponents.Net.DownloadTaskErrorEventArgs">
            <summary>
            Used to provide information about download errors.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.DownloadTaskErrorEventArgs.exception">
            <summary>
            The exception received.
            </summary>
        </member>
        <member name="M:NewsComponents.Net.DownloadTaskErrorEventArgs.#ctor(NewsComponents.Net.DownloadTask,System.Exception)">
            <summary>
            Constructor for the DownloadTaskErrorEventArgs.
            </summary>
            <param name="task">The <see cref="T:NewsComponents.Net.DownloadTask"/> instance.</param>
            <param name="exception">The exception information.</param>
        </member>
        <member name="P:NewsComponents.Net.DownloadTaskErrorEventArgs.Exception">
            <summary>
            The exception received.
            </summary>
        </member>
        <member name="T:NewsComponents.Net.DownloadTaskProgressEventHandler">
            <summary>
            Event handler for the DownloadTaskProgressEvent event.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The information about the event.</param>
        </member>
        <member name="T:NewsComponents.Net.DownloadTaskStartedEventHandler">
            <summary>
            Event handler for the DownloadTaskStarted event.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The information about the event.</param>
        </member>
        <member name="T:NewsComponents.Net.DownloadTaskCompletedEventHandler">
            <summary>
            Event handler for the DownloadTaskCompleted event.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The information about the event.</param>
        </member>
        <member name="T:NewsComponents.Net.DownloadTaskErrorEventHandler">
            <summary>
            Event handler for the DownloadTaskError event.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The information about the event.</param>
        </member>
        <member name="T:NewsComponents.Net.DownloadItemEventArgs">
            <summary>
            Used to provide event information about the manifest.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.DownloadItemEventArgs.manifestInEventsArgs">
            <summary>
            The manifest reference.
            </summary>
        </member>
        <member name="M:NewsComponents.Net.DownloadItemEventArgs.#ctor(NewsComponents.Net.DownloadItem)">
            <summary>
            Constructor for a ManifestEventArgs.
            </summary>
            <param name="manifest">The <see cref="P:NewsComponents.Net.DownloadItemEventArgs.DownloadItem"/> reference.</param>
        </member>
        <member name="P:NewsComponents.Net.DownloadItemEventArgs.DownloadItem">
            <summary>
            Returns the manifest reference.
            </summary>
        </member>
        <member name="T:NewsComponents.Net.DownloadItemErrorEventArgs">
            <summary>
            Used to provide information about manifest download errors.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.DownloadItemErrorEventArgs.exceptionContainedInManifestErrorEventArgs">
            <summary>
            The exception detected.
            </summary>
        </member>
        <member name="M:NewsComponents.Net.DownloadItemErrorEventArgs.#ctor(NewsComponents.Net.DownloadItem,System.Exception)">
            <summary>
            Constructor for the ManifestErrorEventArgs.
            </summary>
            <param name="manifest">The <see cref="T:NewsComponents.Net.DownloadItem"/> reference.</param>
            <param name="exception">The exception information.</param>
        </member>
        <member name="P:NewsComponents.Net.DownloadItemErrorEventArgs.Exception">
            <summary>
            The thrown exception.
            </summary>
        </member>
        <member name="T:NewsComponents.Net.DownloadProgressEventArgs">
            <summary>
            Used to provide information about the download progress.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.DownloadProgressEventArgs.downloadItem">
            <summary>
            The manifest instance.
            </summary>
        </member>
        <member name="M:NewsComponents.Net.DownloadProgressEventArgs.#ctor(System.Int64,System.Int64,System.Int32,System.Int32,NewsComponents.Net.DownloadItem)">
            <summary>
            Constructor for the DownloadProgressEventArgs.
            </summary>
            <param name="bytesTotal">The total bytes to be transferred.</param>
            <param name="bytesTransferred">Number of bytes that have been transferred.</param>
            <param name="filesTotal">The total number of files to be transferred.</param>
            <param name="filesTransferred">Number of files that have been transferred.</param>
            <param name="item">The <see cref="P:NewsComponents.Net.DownloadProgressEventArgs.DownloadItem"/> instance.</param>
        </member>
        <member name="P:NewsComponents.Net.DownloadProgressEventArgs.DownloadItem">
            <summary>
            The DownloadItem instance.
            </summary>
        </member>
        <member name="T:NewsComponents.Net.DownloadStartedEventArgs">
            <summary>
            Used to provide information about download started.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.DownloadStartedEventArgs.cancel">
            <summary>
            Indicates whether the download has been canceled.
            </summary>
        </member>
        <member name="M:NewsComponents.Net.DownloadStartedEventArgs.#ctor(NewsComponents.Net.DownloadItem)">
            <summary>
            Constructor for DownloadStartedEventArgs.
            </summary>
            <param name="item">The <see cref="T:NewsComponents.Net.DownloadItem"/> instance.</param>
        </member>
        <member name="P:NewsComponents.Net.DownloadStartedEventArgs.Cancel">
            <summary>
            Indicates whether the download has been canceled.
            </summary>
        </member>
        <member name="T:NewsComponents.Net.PendingDownloadsDetectedEventArgs">
            <summary>
            Used to provide information about pending downloads.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.PendingDownloadsDetectedEventArgs.pendingDownloads">
            <summary>
            The manifests that are pending.
            </summary>
        </member>
        <member name="M:NewsComponents.Net.PendingDownloadsDetectedEventArgs.#ctor(NewsComponents.Net.DownloadItem[])">
            <summary>
            Constructor for the PendingUpdatesDetectedEventArgs.
            </summary>
            <param name="items">The <see cref="T:NewsComponents.Net.DownloadItem"/> instance array.</param>
        </member>
        <member name="P:NewsComponents.Net.PendingDownloadsDetectedEventArgs.DownloadItems">
            <summary>
            The manifests that are pending.
            </summary>
        </member>
        <member name="T:NewsComponents.Net.PendingDownloadsDetectedEventHandler">
            <summary>
            Delegate for the PendingDownloadsDetected event.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The information about the event.</param>
        </member>
        <member name="T:NewsComponents.Net.DownloadProgressEventHandler">
            <summary>
            Delegate for the DownloadProgress event.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The information about the event.</param>
        </member>
        <member name="T:NewsComponents.Net.DownloadStartedEventHandler">
            <summary>
            Delegate for the DownloadStarted event.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The information about the event.</param>
        </member>
        <member name="T:NewsComponents.Net.DownloadCompletedEventHandler">
            <summary>
            Delegate for the DownloadCompleted event.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The information about the event.</param>
        </member>
        <member name="T:NewsComponents.Net.DownloadErrorEventHandler">
            <summary>
            Delegate for the DownloadError event.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The information about the event.</param>
        </member>
        <member name="T:NewsComponents.Net.DownloadRegistryManager">
            <summary>
            Manages the list of download tasks under progress, from its initial registration when they
            are submitted to download, to their final state when they are successfully downloaded
            or cancelled.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.DownloadRegistryManager.root">
            <summary>
            Root folder name for the registry.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.DownloadRegistryManager.instance">
            <summary>
            The singleton instance stored.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.DownloadRegistryManager.rootDirInfo">
            <summary>
            Helper class for directory information.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.DownloadRegistryManager.registry">
            <summary>
            The in memory registry storage.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.DownloadRegistryManager.loaded">
            <summary>
            Indicates if the list of tasks is loaded
            </summary>
        </member>
        <member name="M:NewsComponents.Net.DownloadRegistryManager.#ctor">
            <summary>
            Default constructor disable because there is a singleton implementation.
            </summary>
        </member>
        <member name="M:NewsComponents.Net.DownloadRegistryManager.SetBaseFolder(System.String)">
            <summary>
            Directs the instance to use a different base path
            than Temp.
            </summary>
            <param name="baseFolder">string</param>
        </member>
        <member name="M:NewsComponents.Net.DownloadRegistryManager.Load">
            <summary>
            Loads all the pending tasks.
            </summary>
        </member>
        <member name="M:NewsComponents.Net.DownloadRegistryManager.UpdateTask(NewsComponents.Net.DownloadTask)">
            <summary>
            Updates the information of an existing stored task.
            </summary>
            <param name="task">The DownloadTask instance.</param>
        </member>
        <member name="M:NewsComponents.Net.DownloadRegistryManager.TaskAlreadyExists(NewsComponents.Net.DownloadTask)">
            <summary>
            Indicates whether a download task already exists that corresponds to the input task
            </summary>
            <param name="task">The DownloadTask instance</param>
            <returns>True if there is already a download task for the enclosure</returns>
        </member>
        <member name="M:NewsComponents.Net.DownloadRegistryManager.RegisterTask(NewsComponents.Net.DownloadTask)">
            <summary>
            Registers the task in the storage.
            </summary>
            <param name="task">The DownloadTask instance.</param>
        </member>
        <member name="M:NewsComponents.Net.DownloadRegistryManager.UnRegisterTask(NewsComponents.Net.DownloadTask)">
            <summary>
            Removes the task from the storage.
            </summary>
            <param name="task">The DownloadTask.</param>
        </member>
        <member name="M:NewsComponents.Net.DownloadRegistryManager.GetTasks">
            <summary>
            Return all the tasks stored in memory.
            </summary>
            <returns>An array of DownloadTask instances.</returns>
        </member>
        <member name="M:NewsComponents.Net.DownloadRegistryManager.GetByOwnerId(System.String)">
            <summary>
            Returns all the stored tasks by a given owner id.
            </summary>
            <param name="ownerId">The owner id.</param>
            <returns>An array of DownloadTask instances.</returns>
        </member>
        <member name="M:NewsComponents.Net.DownloadRegistryManager.GetByOwnerItemId(System.String)">
            <summary>
            Returns all the stored tasks by a given owner item id.
            </summary>
            <param name="ownerItemId">The owner item id.</param>
            <returns>An array of DownloadTask instances.</returns>
        </member>
        <member name="M:NewsComponents.Net.DownloadRegistryManager.GetByItemID(System.Guid)">
            <summary>
            Return the DownloadTask for a given item id.
            </summary>
            <param name="itemId">The item id (Guid).</param>
            <returns>An DownloadTask instance.</returns>
        </member>
        <member name="M:NewsComponents.Net.DownloadRegistryManager.LoadTask(System.String)">
            <summary>
            Load the tasks stored in a specified path.
            </summary>
            <param name="taskFilePath">The base path for the registry storage.</param>
            <returns>An DownloadTask instance.</returns>
        </member>
        <member name="M:NewsComponents.Net.DownloadRegistryManager.SaveTask(NewsComponents.Net.DownloadTask)">
            <summary>
            Stores a task in the registry storage.
            </summary>
            <param name="task">The DownloadTask instance.</param>
        </member>
        <member name="P:NewsComponents.Net.DownloadRegistryManager.Current">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="P:NewsComponents.Net.DownloadRegistryManager.Tasks">
            <summary>
            Gets the list of registered tasks, ensuring the list is loaded
            </summary>
        </member>
        <member name="T:Tst.TstTraverser">
            <summary>
            Defines a <see cref="T:Tst.TstDictionary"/> tree traverser object.
            </summary>
            <remarks>
            <para>
            This class can be used to traverse the ternary tree. It defines two events:
            TreeEntry and DiscoverEntry.
            </para>
            </remarks>
        </member>
        <member name="M:Tst.TstTraverser.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Tst.TstTraverser.Traverse(Tst.TstDictionary)">
            <summary>
            Tarverses the ternary search tree nodes of <paramref name="dic"/>.
            </summary>
            <param name="dic">Tree to explore</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dic"/> is null.</exception>
        </member>
        <member name="M:Tst.TstTraverser.OnTreeEntry(Tst.TstDictionaryEntry)">
            <summary>
            Raises the <see cref="E:Tst.TstTraverser.TreeEntry"/> event.
            </summary>
            <param name="p">tst node added to the tree</param>
        </member>
        <member name="M:Tst.TstTraverser.OnLowChild(Tst.TstDictionaryEntry)">
            <summary>
            Raises the <see cref="E:Tst.TstTraverser.HighChild"/> event.
            </summary>
            <param name="p">high child about to be added to the tree</param>	
        </member>
        <member name="M:Tst.TstTraverser.OnEqChild(Tst.TstDictionaryEntry)">
            <summary>
            Raises the <see cref="E:Tst.TstTraverser.HighChild"/> event.
            </summary>
            <param name="p">high child about to be added to the tree</param>	
        </member>
        <member name="M:Tst.TstTraverser.OnHighChild(Tst.TstDictionaryEntry)">
            <summary>
            Raises the <see cref="E:Tst.TstTraverser.HighChild"/> event.
            </summary>
            <param name="p">high child about to be added to the tree</param>	
        </member>
        <member name="M:Tst.TstTraverser.Traverse(Tst.TstDictionaryEntry)">
            <summary>
            Traverses the <paramref name="p"/> sub-tree.
            </summary>
            <param name="p">node to traverse.</param>
        </member>
        <member name="E:Tst.TstTraverser.TreeEntry">
            <summary>Event called when a node is integrated into the traversed tree.</summary>
        </member>
        <member name="E:Tst.TstTraverser.LowChild">
            <summary>Event called when a node is discovered but not yet in the explore tree.</summary>
        </member>
        <member name="E:Tst.TstTraverser.EqChild">
            <summary>Event called when a node is discovered but not yet in the explore tree.</summary>
        </member>
        <member name="E:Tst.TstTraverser.HighChild">
            <summary>Event called when a node is discovered but not yet in the explore tree.</summary>
        </member>
        <member name="T:NewsComponents.Utils.Common">
            <summary>
            Common static helper functions.
            </summary>
        </member>
        <member name="F:NewsComponents.Utils.Common.ClrVersion">
            <summary>
            Gets the current framework version.
            </summary>
        </member>
        <member name="M:NewsComponents.Utils.Common.#cctor">
            <summary>
            Initializes the <see cref="T:NewsComponents.Utils.Common"/> class.
            </summary>
        </member>
        <member name="T:NewsComponents.Collections.PriorityQueue">
            <summary>A priority queue.</summary>
        </member>
        <member name="F:NewsComponents.Collections.PriorityQueue._heap">
            <summary>The binary heap on which the priority queue is based.</summary>
        </member>
        <member name="M:NewsComponents.Collections.PriorityQueue.#ctor">
            <summary>Initialize the queue.</summary>
        </member>
        <member name="M:NewsComponents.Collections.PriorityQueue.#ctor(NewsComponents.Collections.PriorityQueue)">
            <summary>Initialize the queue.</summary>
            <param name="queue">The queue is intialized with a shalled-copy of this queue.</param>
        </member>
        <member name="M:NewsComponents.Collections.PriorityQueue.Enqueue(System.Int32,System.Object)">
            <summary>Enqueues an item to the priority queue.</summary>
            <param name="priority">The priority of the object to be enqueued.</param>
            <param name="value">The object to be enqueued.</param>
        </member>
        <member name="M:NewsComponents.Collections.PriorityQueue.Dequeue">
            <summary>Dequeues an object from the priority queue.</summary>
            <returns>The top item (max priority) from the queue.</returns>
        </member>
        <member name="M:NewsComponents.Collections.PriorityQueue.Clear">
            <summary>Empties the queue.</summary>
        </member>
        <member name="M:NewsComponents.Collections.PriorityQueue.CopyTo(System.Array,System.Int32)">
            <summary>Copies the priority queue to an array.</summary>
            <param name="array">The array to which the queue should be copied.</param>
            <param name="index">The starting index.</param>
        </member>
        <member name="M:NewsComponents.Collections.PriorityQueue.GetEnumerator">
            <summary>Gets the enumerator for the queue.</summary>
            <returns>An enumerator for the queue.</returns>
        </member>
        <member name="M:NewsComponents.Collections.PriorityQueue.Synchronize(NewsComponents.Collections.PriorityQueue)">
            <summary>Returns a synchronized wrapper around the queue.</summary>
            <param name="queue">The queue to be synchronized.</param>
            <returns>A synchronized priority queue.</returns>
        </member>
        <member name="P:NewsComponents.Collections.PriorityQueue.IsSynchronized">
            <summary>Determines whether the priority queue is synchronized.</summary>
        </member>
        <member name="P:NewsComponents.Collections.PriorityQueue.Count">
            <summary>Gets the number of items in the queue.</summary>
        </member>
        <member name="P:NewsComponents.Collections.PriorityQueue.SyncRoot">
            <summary>Gets the synchronization root object for the queue.</summary>
        </member>
        <member name="T:NewsComponents.Collections.PriorityQueue.SyncPriorityQueue">
            <summary>A synchronized PriorityQueue.</summary>
        </member>
        <member name="M:NewsComponents.Collections.PriorityQueue.SyncPriorityQueue.#ctor(NewsComponents.Collections.PriorityQueue)">
            <summary>Initialize the priority queue.</summary>
            <param name="queue">The queue to be synchronized.</param>
        </member>
        <member name="T:NewsComponents.RelationCosmos.RelationCosmos3">
            <summary>
            RelationCosmos3 provide another alternative impl. to RelationCosmos
            It uses the TstDictionaries/TstDictionary classes to speed up lookups.
            </summary>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationCosmos3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.RelationCosmos.RelationCosmos2"/> class.
            </summary>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationCosmos3.Add(NewsComponents.RelationCosmos.RelationBase)">
            <summary>
            Add a new Relation to the RelationCosmos.
            </summary>
            <param name="relation">Relation to add</param>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationCosmos3.AddRange(NewsComponents.RelationCosmos.RelationBase[])">
            <summary>
            Add a range of <c>RelationBase</c> objects
            </summary>
            <param name="relations">RelationBase[]</param>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationCosmos3.NewsComponents#RelationCosmos#IRelationCosmos#AddRange(System.Collections.IList)">
            <summary>
            Add a range of <c>RelationBase</c> objects
            </summary>
            <param name="relations">IList</param>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationCosmos3.Remove(NewsComponents.RelationCosmos.RelationBase)">
            <summary>
            Remove a relation from the RelationCosmos.
            </summary>
            <param name="relation">Relation to be removed</param>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationCosmos3.RemoveRange(System.Collections.IList)">
            <summary>
            Overloaded. Remove a amount of RelationBase objects from the RelationCosmos.
            </summary>
            <param name="relations">To be removed RelationBase object's</param>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationCosmos3.NewsComponents#RelationCosmos#IRelationCosmos#RemoveRange(NewsComponents.RelationCosmos.RelationBase[])">
            <summary>
            Overloaded. Remove a amount of RelationBase objects from the RelationCosmos.
            </summary>
            <param name="relations">To be removed RelationBase object's</param>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationCosmos3.Clear">
            <summary>
            Clear all internal collections.
            </summary>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationCosmos3.GetIncoming(NewsComponents.RelationCosmos.RelationBase,System.Collections.IList)">
            <summary>
            Returns a list of relations, that are known in RelationCosmos and pointing to
            the relation provided.
            </summary>
            <param name="relation">The object implementing RelationBase</param>
            <param name="excludeRelations">List of relations,
            that should be excluded in that check</param>
            <returns>RelationList</returns>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationCosmos3.GetOutgoing(NewsComponents.RelationCosmos.RelationBase,System.Collections.IList)">
            <summary>
            Returns a list of relations, that are known in RelationCosmos and that
            the relation provided points to.
            </summary>
            <param name="relation">The object implementing RelationBase</param>
            <param name="excludeRelations">List of relations,
            that should be excluded in that check</param>
            <returns>RelationList</returns>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationCosmos3.GetIncomingAndOutgoing(NewsComponents.RelationCosmos.RelationBase,System.Collections.IList)">
            <summary>
            Returns a list merged of incoming and outging relations.
            </summary>
            <param name="relation">The object implementing RelationBase</param>
            <param name="excludeRelations">List of relations,
            that should be excluded in that check</param>
            <returns>RelationList</returns>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationCosmos3.HasIncomingOrOutgoing(NewsComponents.RelationCosmos.RelationBase,System.Collections.IList)">
            <summary>
            Return true, if the <c>relation</c> has any incoming or outgoing relations
            (registered/added to RelationCosmos).
            </summary>
            <param name="relation">Relation to check</param>
            <param name="excludeRelations">List of strings with relation.HRef's,
            that should be excluded in that check</param>
            <returns>
            True, if any relation was found, else false
            </returns>
        </member>
        <member name="P:NewsComponents.RelationCosmos.RelationCosmos3.DeepCosmos">
            <summary>
            Not yet fully implemented/supported!
            </summary>
            <value></value>
        </member>
        <member name="P:NewsComponents.RelationCosmos.RelationCosmos3.AdjustPointInTime">
            <summary>
            Set this to true, if RelationCosmos should try to adjust the PointInTime properties
            of added Relations, if they are adjustable. It can do so, because of the knowledge
            about the other Relations and their relationships to other.
            </summary>
            <value></value>
        </member>
        <member name="T:NewsComponents.RelationCosmos.RelationCosmos1">
            <summary>
            RelationCosmos1: the current impl.
            </summary>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationCosmos1.#ctor">
            <summary>
            Initializer
            </summary>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationCosmos1.Add(NewsComponents.RelationCosmos.RelationBase)">
            <summary>
            Add a new Relation to the RelationCosmos. 
            The relation(s) should be registered in time order oldest first to
            prevent lost relationships.
            </summary>
            <param name="relation">Relation to add</param>
            <exception cref="T:System.ArgumentNullException">If relation or relation.HRef is null</exception>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationCosmos1.AddRange(NewsComponents.RelationCosmos.RelationBase[])">
            <summary>
            Add a range of <c>RelationBase</c> objects
            </summary>
            <param name="relations">RelationBase[]</param>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationCosmos1.AddRange(System.Collections.IList)">
            <summary>
            Add a range of <c>RelationBase</c> objects
            </summary>
            <param name="relations">IList</param>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationCosmos1.InternalAddRange(System.Collections.IList)">
            <summary>
            Add a range of <c>RelationBase</c> objects
            </summary>
            <param name="relations">IList</param>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationCosmos1.Remove(NewsComponents.RelationCosmos.RelationBase)">
            <summary>
            Remove a relation from the RelationCosmos.
            </summary>
            <param name="relation">Relation to be removed</param>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationCosmos1.RemoveRange(System.Collections.IList)">
            <summary>
            Overloaded. Remove a amount of RelationBase objects from the RelationCosmos.
            </summary>
            <param name="relations">To be removed RelationBase object's</param>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationCosmos1.RemoveRange(NewsComponents.RelationCosmos.RelationBase[])">
            <summary>
            Overloaded. Remove a amount of RelationBase objects from the RelationCosmos.
            </summary>
            <param name="relations">To be removed RelationBase object's</param>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationCosmos1.Clear">
            <summary>
            Clear all internal collections.
            </summary>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationCosmos1.GetIncoming(NewsComponents.RelationCosmos.RelationBase,System.Collections.IList)">
            <summary>
            Returns a list of relations, that are known in RelationCosmos and pointing to
            the relation provided.
            </summary>
            <param name="relation">The object implementing RelationBase</param>
            <param name="excludeRelations">List of relations, 
            that should be excluded in that check</param>
            <returns>RelationList</returns>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationCosmos1.GetOutgoing(NewsComponents.RelationCosmos.RelationBase,System.Collections.IList)">
            <summary>
            Returns a list of relations, that are known in RelationCosmos and that 
            the relation provided points to.
            </summary>
            <param name="relation">The object implementing RelationBase</param>
            <param name="excludeRelations">List of relations, 
            that should be excluded in that check</param>
            <returns>RelationList</returns>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationCosmos1.GetIncomingAndOutgoing(NewsComponents.RelationCosmos.RelationBase,System.Collections.IList)">
            <summary>
            Returns a list merged of incoming and outging relations.
            </summary>
            <param name="relation">The object implementing RelationBase</param>
            <param name="excludeRelations">List of relations, 
            that should be excluded in that check</param>
            <returns>RelationList</returns>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationCosmos1.HasIncomingOrOutgoing(NewsComponents.RelationCosmos.RelationBase,System.Collections.IList)">
            <summary>
            Return true, if the <c>relation</c> has any incoming or outgoing relations 
            (registered/added to RelationCosmos). 
            </summary>
            <param name="relation">Relation to check</param>
            <param name="excludeRelations">List of strings with relation.HRef's, 
            that should be excluded in that check</param>
            <returns>True, if any relation was found, else false</returns>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationCosmos1.AdjustRelationPointInTime(NewsComponents.RelationCosmos.RelationBase,NewsComponents.RelationCosmos.RelationBase,System.Boolean)">
            <summary>
            If the PointInTime of parameter <c>relation</c> is greater than <c>registeredRelation</c>,
            we adjust the them. We favor to adjust only relations with <c>PointInTimeIsAdjustable</c> set to true.
            But if <c>force</c> is true, we always adjust <c>relation</c> also if both <c>PointInTimeIsAdjustable</c>
            are false.</summary>
            <param name="relation">Relation to adjust</param>
            <param name="registeredRelation">Relation to compare to</param>
            <param name="force">Force a point in time adjustment.
            <c>PointInTimeIsAdjustable</c> of both <c>relation</c> and <c>registeredRelation</c> are
            considered before this happens</param>
        </member>
        <member name="P:NewsComponents.RelationCosmos.RelationCosmos1.DeepCosmos">
            <summary>
            Not yet fully implemented/supported!
            </summary>
        </member>
        <member name="P:NewsComponents.RelationCosmos.RelationCosmos1.AdjustPointInTime">
            <summary>
            Set this to true, if RelationCosmos should try to adjust the PointInTime properties
            of added Relations, if they are adjustable. It can do so, because of the knowledge
            about the other Relations and their relationships to other.
            </summary>
        </member>
        <member name="T:NewsComponents.FeedListFormat">
            <summary>
            Supported Feedlist Formats (import/export).
            </summary>
        </member>
        <member name="F:NewsComponents.FeedListFormat.OCS">
            <summary>
            Open Content Syndication. See http://internetalchemy.org/ocs/
            </summary>
        </member>
        <member name="F:NewsComponents.FeedListFormat.OPML">
            <summary>
            Outline Processor Markup Language, see http://opml.scripting.com/spec
            </summary>
        </member>
        <member name="F:NewsComponents.FeedListFormat.NewsHandler">
            <summary>
            Native NewsHandler format
            </summary>
        </member>
        <member name="F:NewsComponents.FeedListFormat.NewsHandlerLite">
            <summary>
            Native reduced/light NewsHandler format
            </summary>
        </member>
        <member name="T:NewsComponents.NewsHandler">
            <summary>
            Class for managing News feeds. This class is NOT thread-safe.
            </summary>
        </member>
        <member name="F:NewsComponents.NewsHandler.DefaultUserAgent">
            <summary>
            Our default short HTTP user agent string
            </summary>
        </member>
        <member name="F:NewsComponents.NewsHandler.cacheRelevantPropertyChanges">
            <summary>
            Defines all cache relevant feedsFeed properties, 
            that requires we have to (re-)write the cached file. 
            </summary>
        </member>
        <member name="F:NewsComponents.NewsHandler.subscriptionRelevantPropertyChanges">
            <summary>
            Defines all subscription relevant feedsFeed properties, 
            that requires we have to (re-)write the subscription file. 
            </summary>
        </member>
        <member name="M:NewsComponents.NewsHandler.#cctor">
            <summary>
            Initialize the userAgent template
            </summary>
        </member>
        <member name="M:NewsComponents.NewsHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.NewsHandler"/> class
            with a default configuration.
            </summary>
        </member>
        <member name="M:NewsComponents.NewsHandler.#ctor(NewsComponents.INewsComponentsConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.NewsHandler"/> class.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="F:NewsComponents.NewsHandler.configuration">
            <summary>
            Configuration provider
            </summary>
        </member>
        <member name="M:NewsComponents.NewsHandler.ValidateAndThrow(NewsComponents.INewsComponentsConfiguration)">
            <summary>
            Validates the configuration and throw on errors (required settings).
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="F:NewsComponents.NewsHandler.AsyncWebRequest">
            <summary>
            Used for making asynchronous Web requests
            </summary>
        </member>
        <member name="F:NewsComponents.NewsHandler.enclosureDownloader">
            <summary>
            Downloads enclosures/podcasts in the background using BITS. 
            </summary>
        </member>
        <member name="F:NewsComponents.NewsHandler.rssParser">
            <summary>
            Manages the FeedType.Rss 
            </summary>
        </member>
        <member name="F:NewsComponents.NewsHandler.searchHandler">
            <summary>
            Manage the lucene search 
            </summary>
        </member>
        <member name="F:NewsComponents.NewsHandler.EmptyItemList">
            <summary>
            Gets a empty item list.
            </summary>
        </member>
        <member name="F:NewsComponents.NewsHandler.relationCosmos">
            <summary>
            Manage the NewsItem relations
            </summary>
        </member>
        <member name="F:NewsComponents.NewsHandler.receivingNewsChannel">
            <summary>
            Manage the channel processors working on received items and feeds
            </summary>
        </member>
        <member name="F:NewsComponents.NewsHandler.proxy">
            <summary>
            Proxy server information used for connections when fetching feeds. 
            </summary>
        </member>
        <member name="F:NewsComponents.NewsHandler.setCookies">
            <summary>
            Indicates whether the cookies from IE should be taken over for our own requests. 
            Default is true.
            </summary>
        </member>
        <member name="F:NewsComponents.NewsHandler.buildRelationCosmos">
            <summary>
            Indicates whether the relationship cosmos should be built for incoming news items. 
            </summary>
        </member>
        <member name="F:NewsComponents.NewsHandler.offline">
            <summary>
            Indicates whether the application is offline or not. 
            </summary>
        </member>
        <member name="F:NewsComponents.NewsHandler.categoryMismatch">
            <summary>
            Internal flag used after loading feed list to indicate that a category attribute of a feed is not 
            listed as one of the category elements. 
            </summary>
        </member>
        <member name="M:NewsComponents.NewsHandler.CreateCredentialsFrom(NewsComponents.Feed.feedsFeed)">
            <summary>
            Creates the credentials from a feed.
            </summary>
            <param name="f">The feed</param>
            <returns>ICredentials</returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.CreateCredentialsFrom(System.String,System.String,System.String)">
            <summary>
            Creates the credentials from an url.
            </summary>
            <param name="url">The URL.</param>
            <param name="domainUser">The domain user.</param>
            <param name="password">The password.</param>
            <returns>ICredentials</returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.CreateCredentialsFrom(System.String,System.String)">
            <summary>
            Create and return a ICredentials object with the provided informations.
            </summary>
            <param name="domainUser">username and optional a domain: DOMAIN\user</param>
            <param name="password">the pwd</param>
            <returns>NetworkCredential</returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.SetFeedCredentials(NewsComponents.Feed.feedsFeed,System.String,System.String)">
            <summary>
            Set the authorization credentials for a feed.
            </summary>
            <param name="f">feedsFeed to be modified</param>
            <param name="user">username, identifier</param>
            <param name="pwd">password</param>
        </member>
        <member name="M:NewsComponents.NewsHandler.GetFeedCredentials(NewsComponents.Feed.feedsFeed,System.String@,System.String@)">
            <summary>
            Get the authorization credentials for a feed.
            </summary>
            <param name="f">feedsFeed, where the credentials are taken from</param>
            <param name="user">String return parameter containing the username</param>
            <param name="pwd">String return parameter, containing the password</param>
        </member>
        <member name="M:NewsComponents.NewsHandler.GetFeedCredentials(System.String)">
            <summary>
            Return ICredentials of a feed. 
            </summary>
            <param name="feedUrl">url of the feed</param>
            <returns>null in the case the feed does not have credentials</returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.GetFeedCredentials(NewsComponents.Feed.feedsFeed)">
            <summary>
            Return ICredentials of a feed. 
            </summary>
            <param name="f">feedsFeed</param>
            <returns>null in the case the feed does not have credentials</returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.SetNntpServerCredentials(NewsComponents.Feed.NntpServerDefinition,System.String,System.String)">
            <summary>
            Set the authorization credentials for a Nntp Server.
            </summary>
            <param name="sd">NntpServerDefinition to be modified</param>
            <param name="user">username, identifier</param>
            <param name="pwd">password</param>
        </member>
        <member name="M:NewsComponents.NewsHandler.GetNntpServerCredentials(NewsComponents.Feed.NntpServerDefinition,System.String@,System.String@)">
            <summary>
            Get the authorization credentials for a feed.
            </summary>
            <param name="sd">NntpServerDefinition, where the credentials are taken from</param>
            <param name="user">String return parameter containing the username</param>
            <param name="pwd">String return parameter, containing the password</param>
        </member>
        <member name="M:NewsComponents.NewsHandler.GetNntpServerCredentials(System.String)">
            <summary>
            Return ICredentials of a nntp server. 
            </summary>
            <param name="serverAccountName">account name of the server</param>
            <returns>null in the case the server does not have credentials</returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.GetNntpServerCredentials(NewsComponents.Feed.feedsFeed)">
            <summary>
            Gets the NNTP server credentials for a feed.
            </summary>
            <param name="f">The feed.</param>
            <returns>ICredentials</returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.GetFeedCredentials(NewsComponents.Feed.NntpServerDefinition)">
            <summary>
            Return ICredentials of a feed. 
            </summary>
            <param name="sd">NntpServerDefinition</param>
            <returns>null in the case the nntp server does not have credentials</returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.GetRefreshRate">
            <summary>
            Gets the refresh rate for a particular feed
            </summary>
        </member>
        <member name="M:NewsComponents.NewsHandler.GetUserPath(System.String)">
            <summary>
            Returns the user path used to store the current feed and cached items.
            </summary>
            <param name="appname">The application name that uses the component.</param>
            <returns></returns>
        </member>
        <member name="F:NewsComponents.NewsHandler.maxitemage">
            <summary>
            Maximum item age. Default value is 3 months.
            </summary>
        </member>
        <member name="F:NewsComponents.NewsHandler.stylesheet">
            <summary>
            The stylesheet for displaying feeds.
            </summary>
        </member>
        <member name="F:NewsComponents.NewsHandler.enclosurefolder">
            <summary>
            The folder for downloading enclosures.
            </summary>
        </member>
        <member name="F:NewsComponents.NewsHandler.podcastfileextensions">
            <summary>
            The file extensions of enclosures that should be treated as podcasts. 
            </summary>
        </member>
        <member name="F:NewsComponents.NewsHandler.podcastfolder">
            <summary>
            The folder for downloading podcasts.
            </summary>
        </member>
        <member name="F:NewsComponents.NewsHandler.markitemsreadonexit">
            <summary>
            Indicates whether items in the feed should be marked as read on exiting
            the feed in the UI.
            </summary>
        </member>
        <member name="F:NewsComponents.NewsHandler.downloadenclosures">
            <summary>
            Indicates whether enclosures should be downloaded in the background.
            </summary>
        </member>
        <member name="F:NewsComponents.NewsHandler.enclosurecachesize">
            <summary>
            Indicates the maximum amount of space that enclosures and podcasts can use on disk.
            </summary>
        </member>
        <member name="F:NewsComponents.NewsHandler.numtodownloadonnewfeed">
            <summary>
            Indicates the number of enclosures which should be downloaded automatically from a newly subscribed feed.
            </summary>
        </member>
        <member name="F:NewsComponents.NewsHandler.createsubfoldersforenclosures">
            <summary>
            Indicates whether podcasts and enclosures should be downloaded to a folder 
            named after the feed. 
            </summary>
        </member>
        <member name="F:NewsComponents.NewsHandler.enclosurealert">
            <summary>
            Indicates whether enclosures should be downloaded in the background.
            </summary>
        </member>
        <member name="F:NewsComponents.NewsHandler.listviewlayout">
            <summary>
            Indicates which properties of a NewsItem should be made columns in the RSS Bandit listview
            </summary>
        </member>
        <member name="F:NewsComponents.NewsHandler.userAgentTemplate">
            <summary>
            A template string to assamble a unified user agent string.
            </summary>
        </member>
        <member name="F:NewsComponents.NewsHandler.globalLongUserAgent">
            <summary>
            global long HTTP user agent string
            </summary>
        </member>
        <member name="M:NewsComponents.NewsHandler.UserAgentString(System.String)">
            <summary>
            Build a full user agent string incl. OS and .NET version 
            from the provided userAgent
            </summary>
            <param name="userAgent">string</param>
            <returns>The long HTTP user agent string</returns>
        </member>
        <member name="F:NewsComponents.NewsHandler.useragent">
            <summary>
            The short HTTP user agent string used when requesting feeds
            and the property was not set via 
            </summary>
        </member>
        <member name="F:NewsComponents.NewsHandler._feedsTable">
            <summary>
            FeedsCollection representing subscribed feeds list
            </summary>
        </member>
        <member name="F:NewsComponents.NewsHandler.categories">
            <summary>
            Represents the list of available categories for feeds. 
            </summary>
        </member>
        <member name="F:NewsComponents.NewsHandler.layouts">
            <summary>
            Represents the list of available feed column layouts for feeds. 
            </summary>
        </member>
        <member name="F:NewsComponents.NewsHandler.itemsTable">
            <summary>
            Hashtable representing downloaded feed items
            </summary>
        </member>
        <member name="F:NewsComponents.NewsHandler.nntpServers">
            <summary>
            Collection contains NntpServerDefinition objects.
            Keys are the account name(s) - friendly names for the news server def.:
            NntpServerDefinition.Name's
            </summary>
        </member>
        <member name="F:NewsComponents.NewsHandler.identities">
            <summary>
            Collection contains UserIdentity objects.
            Keys are the UserIdentity.Name's
            </summary>
        </member>
        <member name="M:NewsComponents.NewsHandler.SearchNewsItems(NewsComponents.Search.SearchCriteriaCollection,NewsComponents.Feed.feedsFeed[],System.Object,System.String,System.Boolean)">
            <summary>
            Search for NewsItems, that match a provided criteria collection within a optional search scope.
            </summary>
            <param name="criteria">SearchCriteriaCollection containing the defined search criteria</param>
            <param name="scope">Search scope: an array of feedsFeed</param>
            <param name="tag">optional object to be used by the caller to identify this search</param>
            <param name="cultureName">Name of the culture.</param>
            <param name="returnFullItemText">if set to <c>true</c>, full item texts are returned instead of the summery.</param>
        </member>
        <member name="M:NewsComponents.NewsHandler.CreateHelpNewsItemFromException(System.Exception)">
            <summary>
            Builds a ExceptionalNewsItem from a exception.
            This way it can be displayed in-line with a search result or
            a normal feed to get the user the hint in the news item list.
            to provide help about the error.
            </summary>
            <param name="e">Exception</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If e is null</exception>
        </member>
        <member name="M:NewsComponents.NewsHandler.SearchNewsItems(NewsComponents.Search.SearchCriteriaCollection,NewsComponents.Feed.feedsFeed[],System.Object)">
            <summary>
            Search for NewsItems, that match a provided criteria collection within a optional search scope.
            </summary>
            <param name="criteria">SearchCriteriaCollection containing the defined search criteria</param>
            <param name="scope">Search scope: an array of feedsFeed</param>
            <param name="tag">optional object to be used by the caller to identify this search</param>
        </member>
        <member name="M:NewsComponents.NewsHandler.SearchRemoteFeed(System.String,System.Object)">
            <summary>
            Initiate a remote (web) search using the engine incl. search expression specified
            by searchFeedUrl. We assume, the specified Url will return a RSS feed.
            This can be used e.g. to get a RSS search result from feedster.
            </summary>
            <param name="searchFeedUrl">Complete Url of the search engine incl. search expression</param>
            <param name="tag">optional, can be used by the caller</param>
        </member>
        <member name="M:NewsComponents.NewsHandler.SearchFeeds(NewsComponents.Search.SearchCriteriaCollection,NewsComponents.Feed.feedsFeed[],System.Object)">
            <summary>
            [To be provided]
            </summary>
            <param name="criteria"></param>
            <param name="scope"></param>
            <param name="tag"></param>
        </member>
        <member name="M:NewsComponents.NewsHandler.FindNewsItem(NewsComponents.SearchHitNewsItem)">
            <summary>
            Retrieves a specified NewsItem given the identifying feed URL and Item ID
            </summary>
            <param name="nid">The value used to identify the NewsItem</param>
            <returns>The NewsItem or null if it could not be found</returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.FindNewsItems(NewsComponents.SearchHitNewsItem[])">
            <summary>
            Retrieves a list of NewsItems and their FeedInfo objects
            not regarding their read states.
            </summary>
            <param name="nids">The values used to identify the NewsItems</param>
            <returns>The list of FeedInfo objects containing the NewsItems (content summaries)</returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.FindNewsItems(NewsComponents.SearchHitNewsItem[],NewsComponents.Search.ItemReadState,System.Boolean)">
            <summary>
            Retrieves a list of NewsItems and their FeedInfo objects
            </summary>
            <param name="nids">The values used to identify the NewsItems</param>
            <param name="readState">Indicates how to interpret read state of NewsItems to return</param>
            <param name="returnFullItemText">if set to <c>true</c> we load/return full item texts.</param>
            <returns>
            The list of FeedInfo objects containing the NewsItems
            </returns>
        </member>
        <member name="F:NewsComponents.NewsHandler.applicationName">
            <summary>
            The Application Name or ID that uses the component. This will be used to 
            initialize the user path to store the feeds file and cached items.
            </summary>
        </member>
        <member name="F:NewsComponents.NewsHandler.CategorySeparator">
            <summary>
            The string used to build categories hierarchy
            </summary>
        </member>
        <member name="F:NewsComponents.NewsHandler.refreshrate">
            <summary>
            How often feeds are refreshed by default if no specific rate specified by the feed. 
            The value is specified in milliseconds. 
            </summary>
            <remarks>By default this value is set to one hour. </remarks>
        </member>
        <member name="F:NewsComponents.NewsHandler.validationErrorOccured">
            <summary>
            Internal flag used to track whether the XML in the feed list validated against the schema. 
            </summary>
        </member>
        <member name="F:NewsComponents.NewsHandler.feedsSchema">
            <summary>
            The schema for the RSS feed list format
            </summary>
        </member>
        <member name="M:NewsComponents.NewsHandler.LoadFeedlistSchema">
            <summary>Loads the schema for a feedlist into an XmlSchema object. 
            <seealso cref="F:NewsComponents.NewsHandler.feedsSchema"/></summary>		
        </member>
        <member name="M:NewsComponents.NewsHandler.LoadFeedlist(System.String,System.Xml.Schema.ValidationEventHandler)">
            <summary>
            Loads the RSS feedlist from the given URL and validates it against the schema. 
            </summary>
            <param name="feedListUrl">The URL of the feedlist</param>
            <param name="veh">The event handler that should be invoked on the client if validation errors occur</param>
            <exception cref="T:System.Xml.XmlException">XmlException thrown if XML is not well-formed</exception>
        </member>
        <member name="M:NewsComponents.NewsHandler.LoadFeedlist(System.IO.Stream,System.Xml.Schema.ValidationEventHandler)">
            <summary>
            Loads the RSS feedlist from the given URL and validates it against the schema. 
            </summary>
            <param name="xmlStream">The XML Stream of a feedlist to load</param>
            <param name="veh">The event handler that should be invoked on the client if validation errors occur</param>
            <exception cref="T:System.Xml.XmlException">XmlException thrown if XML is not well-formed</exception>
        </member>
        <member name="M:NewsComponents.NewsHandler.DisableFeed(System.String)">
            <summary>
            Specifies that a feed should be ignored when RefreshFeeds() is called by 
            setting its refresh rate to zero. The feed can still be refreshed manually by 
            calling GetItemsForFeed(). 
            </summary>
            <remarks>If no feed with that URL exists then nothing is done.</remarks>
            <param name="feedUrl">The URL of the feed to ignore. </param>
        </member>
        <member name="M:NewsComponents.NewsHandler.DeleteItem(NewsComponents.NewsItem)">
            <summary>
            Removes all information related to a feed from the NewsHandler. 
            </summary>
            <remarks>If the item doesn't exist in the NewsHandler then nothing is done</remarks>
            <param name="item">the item to delete</param>
        </member>
        <member name="M:NewsComponents.NewsHandler.DeleteAllItemsInFeed(NewsComponents.Feed.feedsFeed)">
            <summary>
            Deletes all the items in a feed
            </summary>
            <param name="feed">the feed</param>
        </member>
        <member name="M:NewsComponents.NewsHandler.DeleteAllItemsInFeed(System.String)">
            <summary>
            Deletes all items in a feed
            </summary>
            <param name="feedUrl">the URL of the feed</param>
        </member>
        <member name="M:NewsComponents.NewsHandler.RestoreDeletedItem(NewsComponents.NewsItem)">
            <summary>
            Undeletes a deleted item
            </summary>
            <remarks>if the parent feed has been deleted then this does nothing</remarks>
            <param name="item">the utem to restore</param>
        </member>
        <member name="M:NewsComponents.NewsHandler.RestoreDeletedItem(System.Collections.ArrayList)">
            <summary>
            Undeletes all the deleted items in the list
            </summary>
            <remarks>if the parent feed has been deleted then this does nothing</remarks>
            <param name="deletedItems">the list of items to restore</param>
        </member>
        <member name="M:NewsComponents.NewsHandler.DeleteFeed(System.String)">
            <summary>
            Removes all information related to a feed from the NewsHandler.   
            </summary>
            <remarks>If no feed with that URL exists then nothing is done.</remarks>
            <param name="feedUrl">The URL of the feed to delete. </param>
            <exception cref="T:System.ApplicationException">If an error occured while 
            attempting to delete the cached feed. Examine the InnerException property 
            for details</exception>
        </member>
        <member name="M:NewsComponents.NewsHandler.SaveFeedList(System.IO.Stream)">
            <summary>
            Saves the feed list to the specified stream. The feed is written in 
            the RSS Bandit feed file format as described in feeds.xsd
            </summary>
            <param name="feedStream">The stream to save the feed list to</param>
        </member>
        <member name="M:NewsComponents.NewsHandler.CreateCategoryHive(System.Xml.XmlElement,System.String)">
            <summary>
            Helper method used for constructing OPML file. It traverses down the tree on the 
            path defined by 'category' starting with 'startNode'. 
            </summary>
            <param name="startNode">Node to start with</param>
            <param name="category">A category path, e.g. 'Category1\SubCategory1'.</param>
            <returns>The leaf category node.</returns>
            <remarks>If one category in the path is not found, it will be created.</remarks>
        </member>
        <member name="M:NewsComponents.NewsHandler.FindLayout(System.String,System.Collections.ArrayList)">
            <summary>
            Helper function that gets the listview layout with the specified ID from the
            Arraylist
            </summary>
            <param name="id"></param>
            <param name="layouts"></param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.buildXPathString(System.String)">
            <summary>
            Helper function breaks up a string containing quote characters into 
            a series of XPath concat() calls. 
            </summary>
            <param name="input">input string</param>
            <returns>broken up string</returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.SaveFeedList(System.IO.Stream,NewsComponents.FeedListFormat)">
            <summary>
            Saves the whole feed list incl. empty categories to the specified stream
            </summary>
            <param name="feedStream">The feedStream to save the feed list to</param>
            <param name="format">The format to save the stream as. </param>
            <exception cref="T:System.InvalidOperationException">If anything wrong goes on with XmlSerializer</exception>
            <exception cref="T:System.ArgumentNullException">If feedStream is null</exception>
        </member>
        <member name="M:NewsComponents.NewsHandler.SaveFeedList(System.IO.Stream,NewsComponents.FeedListFormat,NewsComponents.Collections.FeedsCollection,System.Boolean)">
            <summary>
            Saves the provided feed list to the specified stream
            </summary>
            <param name="feedStream">The feedStream to save the feed list to</param>
            <param name="format">The format to save the stream as. </param>
            <param name="feeds">FeedsCollection containing the feeds to save. 
            Can contain a subset of the owned feeds collection</param>
            <param name="includeEmptyCategories">Set to true, if categories without a contained feed should be included</param>
            <exception cref="T:System.InvalidOperationException">If anything wrong goes on with XmlSerializer</exception>
            <exception cref="T:System.ArgumentNullException">If feedStream is null</exception>
        </member>
        <member name="M:NewsComponents.NewsHandler.MarkForDownload(NewsComponents.Feed.feedsFeed)">
            <summary>
            Used to clear the information about when last the feed was downloaded. This allows
            us to refetch the feed without sending If-Modified-Since or If-None-Match header
            information and thus force a download. 
            </summary>
            <param name="f">The feed to mark for download</param>
        </member>
        <member name="M:NewsComponents.NewsHandler.MarkForDownload">
            <summary>
            Used to clear the information about when last the feeds downloaded. This allows
            us to refetch the feed without sending If-Modified-Since or If-None-Match header
            information and thus force a download. 
            </summary>		
        </member>
        <member name="M:NewsComponents.NewsHandler.ClearItemsCache">
            <summary>
            Removes all the RSS items cached in-memory and on-disk for all feeds. 
            </summary>
        </member>
        <member name="M:NewsComponents.NewsHandler.MarkAllCachedItemsAsRead">
            <summary>
            Marks all items stored in the internal cache of RSS items as read.
            </summary>
        </member>
        <member name="M:NewsComponents.NewsHandler.MarkAllCachedCategoryItemsAsRead(System.String)">
            <summary>
            Marks all items stored in the internal cache of RSS items as read
            for a particular category.
            </summary>
            <param name="category">The category the feeds belong to</param>
        </member>
        <member name="M:NewsComponents.NewsHandler.MarkAllCachedItemsAsRead(System.String)">
            <summary>
            Marks all items stored in the internal cache of RSS items as read
            for a particular feed.
            </summary>
            <param name="feedUrl">The URL of the RSS feed</param>
        </member>
        <member name="M:NewsComponents.NewsHandler.MarkAllCachedItemsAsRead(NewsComponents.Feed.feedsFeed)">
            <summary>
            Marks all items stored in the internal cache of RSS items as read
            for a particular feed.
            </summary>
            <param name="feed">The RSS feed</param>
        </member>
        <member name="M:NewsComponents.NewsHandler.AddFeed(NewsComponents.Feed.feedsFeed,NewsComponents.Feed.FeedInfo)">
            <summary>
            Adds a feed and associated FeedInfo object to the FeedsTable and itemsTable. 
            Any existing feed objects are replaced by the new objects. 
            </summary>
            <param name="f">The feedsFeed object </param>
            <param name="fi">The FeedInfo object</param>
        </member>
        <member name="M:NewsComponents.NewsHandler.IsCacheRelevantChange(NewsComponents.NewsFeedProperty)">
            <summary>
            Determines whether the changed specified properties 
            are cache relevant changes (feed cache file have to be (re-)written.
            </summary>
            <param name="changedProperty">The changed property or properties.</param>
            <returns>
            	<c>true</c> if it is a cache relevant change; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.IsSubscriptionRelevantChange(NewsComponents.NewsFeedProperty)">
            <summary>
            Determines whether the changed specified properties 
            are subscription relevant changes (subscription file have to be (re-)written.
            </summary>
            <param name="changedProperty">The changed property or properties.</param>
            <returns>
            	<c>true</c> if it is a subscription relevant change; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.ApplyFeedModifications(System.String)">
            <summary>
            Do apply any internal work needed after some feed or feed item properties 
            or content was changed outside.
            </summary>
            <param name="feedUrl">The feed to update</param>
            <exception cref="T:System.ArgumentNullException">If feedUrl is null or empty</exception>
        </member>
        <member name="M:NewsComponents.NewsHandler.IsPropertyValueSet(System.Object,System.String,System.Object)">
            <summary>
            Tests whether a particular propery value is set
            </summary>
            <param name="value">the value to test</param>
            <param name="propertyName">Name of the property to set</param>
            <param name="owner">the object which the property comes from</param>
            <returns>true if it is set and false otherwise</returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.GetFeedProperty(System.String,System.String)">
            <summary>
            Gets the value of a feed's property. This does not inherit the properties of parent
            categories. 
            </summary>
            <param name="feedUrl">the feed URL</param>
            <param name="propertyName">the name of the property</param>		
            <returns>the value of the property</returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.GetFeedProperty(System.String,System.String,System.Boolean)">
            <summary>
            Gets the value of a feed's property
            </summary>
            <param name="feedUrl">the feed URL</param>
            <param name="propertyName">the name of the property</param>
            <param name="inheritCategory">indicates whether the settings from the parent category should be inherited or not</param>
            <returns>the value of the property</returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.SetFeedProperty(System.String,System.String,System.Object)">
            <summary>
            Sets the value of a feed property.
            </summary>
            <param name="feedUrl"></param>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="M:NewsComponents.NewsHandler.SetMaxItemAge(System.String,System.TimeSpan)">
            <summary>
             Sets the maximum amount of time an item should be kept in the 
            cache for a particular feed. This overrides the value of the 
            maxItemAge property. 
            </summary>
            <remarks>If the feed URL is not found in the FeedsTable then nothing happens</remarks>
            <param name="feedUrl">The feed</param>
            <param name="age">The maximum amount of time items should be kept for the 
            specified feed.</param>
        </member>
        <member name="M:NewsComponents.NewsHandler.GetMaxItemAge(System.String)">
            <summary>
            Gets the maximum amount of time an item is kept in the 
            cache for a particular feed. 
            </summary>
            <param name="feedUrl">The feed identifier</param>
            <exception cref="T:System.FormatException">if an error occurs while converting the max item age value to a TimeSpan</exception>
        </member>
        <member name="M:NewsComponents.NewsHandler.SetRefreshRate(System.String,System.Int32)">
            <summary>
            Sets the refresh rate for a feed
            </summary>
            <param name="feedUrl">the URL of the feed</param>
            <param name="refreshRate">the new refresh rate</param>
        </member>
        <member name="M:NewsComponents.NewsHandler.GetRefreshRate(System.String)">
            <summary>
            Gets the refresh rate for a feed
            </summary>
            <param name="feedUrl">the URL of the feed</param>
            <returns>the refresh rate</returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.SetStyleSheet(System.String,System.String)">
            <summary>
            Sets the stylesheet for a feed
            </summary>
            <param name="feedUrl">the URL of the feed</param>
            <param name="stylesheet">the new stylesheet</param>
        </member>
        <member name="M:NewsComponents.NewsHandler.GetStyleSheet(System.String)">
            <summary>
            Gets the stylesheet for a feed
            </summary>
            <param name="feedUrl">the URL of the feed</param>
            <returns>the stylesheet</returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.SetEnclosureFolder(System.String,System.String)">
            <summary>
            Sets the enclosure folder for a feed
            </summary>
            <param name="feedUrl">the URL of the feed</param>
            <param name="enclosurefolder">the new enclosure folder </param>
        </member>
        <member name="M:NewsComponents.NewsHandler.GetEnclosureFolder(System.String,System.String)">
            <summary>
            Gets the target folder to download enclosures from a feed. The folder returned 
            may change depending on whether the item is a podcast (i.e. is in the 
            podcastfileextensions ArrayList)
            </summary>
            <param name="feedUrl">the URL of the feed</param>
            <param name="filename">The name of the file</param>
            <returns>the enclosure folder</returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.SetFeedColumnLayout(System.String,System.String)">
            <summary>
            Sets the listview layout for a feed
            </summary>
            <param name="feedUrl">the URL of the feed</param>
            <param name="listviewlayout">the new listview layout </param>
        </member>
        <member name="M:NewsComponents.NewsHandler.GetFeedColumnLayout(System.String)">
            <summary>
            Gets the listview layout for a feed
            </summary>
            <param name="feedUrl">the URL of the feed</param>
            <returns>the listview layout</returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.SetMarkItemsReadOnExit(System.String,System.Boolean)">
            <summary>
            Sets whether to mark items as read on exiting the feed in the UI
            </summary>
            <param name="feedUrl">the URL of the feed</param>
            <param name="markitemsreadonexit">the new value for markitemsreadonexit</param>
        </member>
        <member name="M:NewsComponents.NewsHandler.GetMarkItemsReadOnExit(System.String)">
            <summary>
            Gets whether to mark items as read on exiting the feed in the UI
            </summary>
            <param name="feedUrl">the URL of the feed</param>
            <returns>whether to mark items as read on exit</returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.SetDownloadEnclosures(System.String,System.Boolean)">
            <summary>
            Sets whether to download enclosures for this feed
            </summary>
            <param name="feedUrl">the URL of the feed</param>
            <param name="downloadenclosures">the new value for downloadenclosures</param>
        </member>
        <member name="M:NewsComponents.NewsHandler.GetDownloadEnclosures(System.String)">
            <summary>
            Gets whether to download enclosures for this feed
            </summary>
            <param name="feedUrl">the URL of the feed</param>
            <returns>hether to download enclosures for this feed</returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.SetEnclosureAlert(System.String,System.Boolean)">
            <summary>
            Sets whether to display an alert when an enclosure is successfully
            downloaded for this feed
            </summary>
            <param name="feedUrl">the URL of the feed</param>
            <param name="enclosurealert">if set to <c>true</c> [enclosurealert].</param>
        </member>
        <member name="M:NewsComponents.NewsHandler.GetEnclosureAlert(System.String)">
            <summary>
            Gets whether to display an alert when an enclosure is successfully 
            downloaded for this feed
            </summary>
            <param name="feedUrl">the URL of the feed</param>
            <returns>hether to download enclosures for this feed</returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.GetCategoryProperty(System.String,System.String)">
            <summary>
            Gets the value of a category's property
            </summary>
            <param name="category">the category name</param>
            <param name="propertyName">the name of the property</param>
            <returns>the value of the property</returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.SetCategoryProperty(System.String,System.String,System.Object)">
            <summary>
            Sets the value of a category's property.
            </summary>
            <param name="category">the category's name</param>
            <param name="propertyName">the name of the property</param>
            <param name="value">the new value</param>
        </member>
        <member name="M:NewsComponents.NewsHandler.SetCategoryMaxItemAge(System.String,System.TimeSpan)">
            <summary>
             Sets the maximum amount of time an item should be kept in the 
            cache for a particular category. This overrides the value of the 
            maxItemAge property. 
            </summary>
            <remarks>If the feed URL is not found in the FeedsTable then nothing happens</remarks>
            <param name="category">The feed</param>
            <param name="age">The maximum amount of time items should be kept for the 
            specified feed.</param>
        </member>
        <member name="M:NewsComponents.NewsHandler.GetCategoryMaxItemAge(System.String)">
            <summary>
            Gets the maximum amount of time an item is kept in the 
            cache for a particular feed. 
            </summary>
            <param name="category">The name of the category</param>
            <exception cref="T:System.FormatException">if an error occurs while converting the max item age value to a TimeSpan</exception>
        </member>
        <member name="M:NewsComponents.NewsHandler.SetCategoryRefreshRate(System.String,System.Int32)">
            <summary>
            Sets the refresh rate for a category
            </summary>
            <param name="category">the name of the category</param>
            <param name="refreshRate">the new refresh rate</param>
        </member>
        <member name="M:NewsComponents.NewsHandler.GetCategoryRefreshRate(System.String)">
            <summary>
            Gets the refresh rate for a category
            </summary>
            <param name="category">the name of the category</param>
            <returns>the refresh rate</returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.SetCategoryStyleSheet(System.String,System.String)">
            <summary>
            Sets the stylesheet for a category
            </summary>
            <param name="category">the name of the category</param>
            <param name="stylesheet">the new stylesheet</param>
        </member>
        <member name="M:NewsComponents.NewsHandler.GetCategoryStyleSheet(System.String)">
            <summary>
            Gets the stylesheet for a category
            </summary>
            <param name="category">the name of the category</param>
            <returns>the stylesheet</returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.SetCategoryEnclosureFolder(System.String,System.String)">
            <summary>
            Sets the enclosure folder for a category
            </summary>
            <param name="category">the name of the category</param>
            <param name="enclosurefolder">the new enclosure folder </param>
        </member>
        <member name="M:NewsComponents.NewsHandler.GetCategoryEnclosureFolder(System.String)">
            <summary>
            Gets the enclosure folder for a category
            </summary>
            <param name="category">the name of the category</param>
            <returns>the enclosure folder</returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.SetCategoryFeedColumnLayout(System.String,System.String)">
            <summary>
            Sets the listview layout for a category
            </summary>
            <param name="category">the name of the category</param>
            <param name="listviewlayout">the new listview layout </param>
        </member>
        <member name="M:NewsComponents.NewsHandler.GetCategoryFeedColumnLayout(System.String)">
            <summary>
            Gets the listview layout for a category
            </summary>
            <param name="category">the name of the category</param>
            <returns>the listview layout</returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.SetCategoryMarkItemsReadOnExit(System.String,System.Boolean)">
            <summary>
            Sets whether to mark items as read on exiting the feed in the UI
            </summary>
            <param name="category">the name of the category</param>
            <param name="markitemsreadonexit">the new value for markitemsreadonexit</param>
        </member>
        <member name="M:NewsComponents.NewsHandler.GetCategoryMarkItemsReadOnExit(System.String)">
            <summary>
            Gets whether to mark items as read on exiting the feed in the UI
            </summary>
            <param name="category">the name of the category</param>
            <returns>whether to mark items as read on exit</returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.SetCategoryDownloadEnclosures(System.String,System.Boolean)">
            <summary>
            Sets whether to download enclosures for this category
            </summary>
            <param name="category">the name of the category</param>
            <param name="downloadenclosures">the new value for downloadenclosures</param>
        </member>
        <member name="M:NewsComponents.NewsHandler.GetCategoryDownloadEnclosures(System.String)">
            <summary>
            Gets whether to download enclosures for this category
            </summary>
            <param name="category">the name of the category</param>
            <returns>the refresh rate</returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.SetCategoryEnclosureAlert(System.String,System.Boolean)">
            <summary>
            Sets whether to display an alert when an enclosure is successfully downloaded
            </summary>
            <param name="category">the name of the category</param>
            <param name="enclosurealert">if set to <c>true</c> [enclosurealert].</param>
        </member>
        <member name="M:NewsComponents.NewsHandler.GetCategoryEnclosureAlert(System.String)">
            <summary>
            Gets whether to display an alert when an enclosure is successfully downloaded
            </summary>
            <param name="category">the name of the category</param>
            <returns>the refresh rate</returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.GetFeedInfo(System.String)">
            <summary>
            Returns the FeedDetails of a feed.
            </summary>
            <param name="feedUrl">string feed's Url</param>
            <returns>FeedInfo or null, if feed was removed or parameter is invalid</returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.GetFeedInfo(System.String,System.Net.ICredentials)">
            <summary>
            Returns the FeedDetails of a feed.
            </summary>
            <param name="feedUrl">string feed's Url</param>
            <param name="credentials">ICredentials, optional. Can be null</param>
            <returns>FeedInfo or null, if feed was removed or parameter is invalid</returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.GetItemsForFeed(NewsComponents.Feed.feedsFeed)">
            <summary>
            Reads the RSS feed from the feedsFeed link then caches and returns the feed items 
            in an array list.
            </summary>
            <param name="f">Information about the feed. This information is updated based
            on the results of processing the feed. </param>
            <returns>An arraylist of News items (i.e. instances of the NewsItem class)</returns>
            <exception cref="T:System.ApplicationException">If the RSS feed is not 
            version 0.91, 1.0 or 2.0</exception>
            <exception cref="T:System.Xml.XmlException">If an error occured parsing the 
            RSS feed</exception>	
        </member>
        <member name="M:NewsComponents.NewsHandler.GetItemsForFeed(System.String)">
            <summary>
            Reads the RSS feed from the feedsFeed link then caches and returns the feed items 
            in an array list.
            </summary>
            <param name="feedUrl">The feed Url.</param>
            <returns>An arraylist of RSS items (i.e. instances of the NewsItem class)</returns>
            <exception cref="T:System.ApplicationException">If the RSS feed is not 
            version 0.91, 1.0 or 2.0</exception>
            <exception cref="T:System.Xml.XmlException">If an error occured parsing the 
            RSS feed</exception>	
        </member>
        <member name="M:NewsComponents.NewsHandler.GetItemsForFeed(NewsComponents.Feed.feedsFeed,System.Xml.XmlReader,System.Boolean)">
            <summary>
            Reads the feed from the stream then caches and returns the feed items 
            in an array list.
            </summary>
            <remarks>If the feedUrl is currently not stored in this object's internal table 
            then it is added/</remarks>		
            <param name="f">Information about the feed. This information is updated based
            on the results of processing the feed. </param>
            <param name="feedReader">A reader containing an feed.</param>				
            <param name="cachedStream">Flag states update last retrieved date on feed only 
            if the item was not cached. Indicates whether the lastretrieved date is updated
            on the feedsFeed object passed in. </param>
            <returns>A FeedDetails object which represents the feed</returns>
            <exception cref="T:System.ApplicationException">If the feed cannot be processed</exception>
            <exception cref="T:System.Xml.XmlException">If an error occured parsing the feed</exception>	
        </member>
        <member name="M:NewsComponents.NewsHandler.GetItemsForFeed(NewsComponents.Feed.feedsFeed,System.IO.Stream,System.Boolean)">
            <summary>
            Reads a feed from the stream then caches and returns the feed items 
            in an array list.
            </summary>
            <remarks>If the feedUrl is currently not stored in this object's internal table 
            then it is added/</remarks>		
            <param name="f">Information about the feed. This information is updated based
            on the results of processing the feed. </param>
            <param name="feedStream">A stream containing an feed.</param>				
            <param name="cachedStream">Flag states update last retrieved date on feed only 
            if the item was not cached. Indicates whether the lastretrieved date is updated
            on the feedsFeed object passed in. </param>
            <returns>A FeedDetails object which represents the feed</returns>
            <exception cref="T:System.ApplicationException">If the feed cannot be processed</exception>
            <exception cref="T:System.Xml.XmlException">If an error occured parsing the RSS feed</exception>	
        </member>
        <member name="M:NewsComponents.NewsHandler.GetItemsForFeed(System.String,System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Reads the RSS feed from the stream then caches and returns the feed items 
            in an array list.
            </summary>
            <remarks>If the feedUrl is currently not stored in this object's internal table 
            then it is added/</remarks>
            <param name="feedUrl">The URL of the feed to download</param>
            <param name="feedStream">A stream containing an RSS feed.</param>
            <param name="id">A unique identifier for an RSS feed. This typically is the ETag returned if 
            the feed was fetched via HTTP.</param>
            <param name="cachedStream">Flag states update last retrieved date on feed only 
            if the item was not cached.</param>
            <exception cref="T:System.ApplicationException">If the RSS feed is not 
            version 0.91, 1.0 or 2.0</exception>
            <exception cref="T:System.Xml.XmlException">If an error occured parsing the 
            RSS feed</exception>	
            <returns>An arraylist of RSS items (i.e. instances of the NewsItem class)</returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.GetItemsForFeed(System.String,System.Boolean)">
            <summary>
            Retrieves the RSS feed for a particular subscription then converts 
            the blog posts or articles to an arraylist of items. 
            </summary>
            <param name="feedUrl">The URL of the feed to download</param>
            <param name="force_download">Flag indicates whether cached feed items 
            can be returned or whether the application must fetch resources from 
            the web</param>
            <exception cref="T:System.ApplicationException">If the RSS feed is not 
            version 0.91, 1.0 or 2.0</exception>
            <exception cref="T:System.Xml.XmlException">If an error occured parsing the 
            RSS feed</exception>
            <exception cref="T:System.Net.WebException">If an error occurs while attempting to download from the URL</exception>
            <exception cref="T:System.UriFormatException">If an error occurs while attempting to format the URL as an Uri</exception>
            <returns>An arraylist of News items (i.e. instances of the NewsItem class)</returns>		
        </member>
        <member name="M:NewsComponents.NewsHandler.AsyncRequestsPending">
            <summary>
            Returns the number of pending async. requests in the queue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.CopyNewsItemTo(NewsComponents.NewsItem,NewsComponents.Feed.feedsFeed)">
            <summary>
            Creates a copy of the specified NewsItem with the specified feedsFeed as its owner 
            </summary>
            <param name="item">The item to copy</param>
            <param name="f">The owner feed</param>
            <returns>A copy of the specified news item</returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.GetCachedContentForItem(NewsComponents.NewsItem)">
            <summary>
            Loads the content of the NewsItem from the binary file containing 
            item content from disk. 
            </summary>
            <remarks>This should be called when a user clicks on an item which 
            had previously been read and thus wasn't loaded from disk on startup. </remarks>
            <param name="item"></param>
        </member>
        <member name="M:NewsComponents.NewsHandler.GetCachedItemsForFeed(System.String)">
            <summary>
            Retrieves items from local cache. 
            </summary>
            <param name="feedUrl"></param>
            <returns>A ArrayList of NewsItem objects</returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.AsyncGetItemsForFeed(System.String,System.Boolean)">
            <summary>
            Retrieves the RSS feed for a particular subscription then converts 
            the blog posts or articles to an arraylist of items. The http requests are async calls.
            </summary>
            <param name="feedUrl">The URL of the feed to download</param>
            <param name="force_download">Flag indicates whether cached feed items 
            can be returned or whether the application must fetch resources from 
            the web</param>
            <exception cref="T:System.ApplicationException">If the RSS feed is not 
            version 0.91, 1.0 or 2.0</exception>
            <exception cref="T:System.Xml.XmlException">If an error occured parsing the 
            RSS feed</exception>
            <exception cref="T:System.ArgumentNullException">If feedUrl is a null reference</exception>
            <exception cref="T:System.UriFormatException">If an error occurs while attempting to format the URL as an Uri</exception>
            <returns>true, if the request really was queued up</returns>
            <remarks>Result arraylist is returned by OnUpdatedFeed event within UpdatedFeedEventArgs</remarks>		
        </member>
        <member name="M:NewsComponents.NewsHandler.AsyncGetItemsForFeed(System.String,System.Boolean,System.Boolean)">
            <summary>
            Retrieves the RSS feed for a particular subscription then converts 
            the blog posts or articles to an arraylist of items. The http requests are async calls.
            </summary>
            <param name="feedUrl">The URL of the feed to download</param>
            <param name="force_download">Flag indicates whether cached feed items 
            can be returned or whether the application must fetch resources from 
            the web</param>
            <param name="manual">Flag indicates whether the call was initiated by user (true), or
            by automatic refresh timer (false)</param>
            <exception cref="T:System.ApplicationException">If the RSS feed is not version 0.91, 1.0 or 2.0</exception>
            <exception cref="T:System.Xml.XmlException">If an error occured parsing the RSS feed</exception>
            <exception cref="T:System.ArgumentNullException">If feedUrl is a null reference</exception>
            <exception cref="T:System.UriFormatException">If an error occurs while attempting to format the URL as an Uri</exception>
            <returns>true, if the request really was queued up</returns>
            <remarks>Result arraylist is returned by OnUpdatedFeed event within UpdatedFeedEventArgs</remarks>		
        </member>
        <member name="M:NewsComponents.NewsHandler.GetFailureContext(System.Uri)">
            <summary>
            Populates a hashtable with additional feed infos 
            we need to provide useful error infos to a user.
            It is only fully populated, if we have it allready read from cache.
            </summary>
            <remarks>
            Currently we populate the following keys:
            * TECH_CONTACT	(opt.; mail address from: 'webMaster' (RSS) or 'errorReportsTo' (Atom) )
            * PUBLISHER			(opt.; mail address from: 'managingEditor' (RSS)
            * PUBLISHER_HOMEPAGE	(opt.; additional info link)
            * GENERATOR			(opt.; generator software)
            * FULL_TITLE			(allways there; category and title as it is used in the UI)
            * FAILURE_OBJECT 	(allways there; feedsFeed | nntpFeed)
            </remarks>
            <param name="feedUri">Uri</param>
            <returns>Hashtable</returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.GetFailureContext(System.String)">
            <summary>
            Overloaded.
            </summary>
            <param name="feedUri">The feed URI.</param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.GetFailureContext(NewsComponents.Feed.feedsFeed)">
            <summary>
            Overloaded.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.GetFailureContext(NewsComponents.Feed.feedsFeed,NewsComponents.IFeedDetails)">
            <summary>
            Overloaded.
            </summary>
            <param name="f"></param>
            <param name="fi"></param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.GetExtensionForDetectedImage(System.Byte[])">
            <summary>
            Gets the file extension for a detected image 
            </summary>
            <param name="bytes">Not null and length > 4!</param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.GenerateFaviconUrl(System.Uri,System.String)">
            <summary>
            Uses a deterministic algorithm to generate a name for a favicon file from
            the domain name of the site that it belongs to.
            </summary>
            <param name="uri">The URL to the favicon</param>
            <param name="extension">The file extension.</param>
            <returns>A name for the favicon file</returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.IsPodcast(System.String)">
            <summary>
            Determines whether the file should be treated as a podcast or just as a regular enclosure.
            </summary>
            <param name="filename">The name of the file</param>
            <returns>Returns true if the file extension is one of those in the podcastfileextensions ArrayList</returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.MarkEnclosuresDownloaded(NewsComponents.NewsItem)">
            <summary>
            Helper function that marks all of an items enclosures as downloaded. 
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:NewsComponents.NewsHandler.DownloadEnclosure(NewsComponents.NewsItem,System.Int32)">
            <summary>
            Downloads all the enclosures associated with the specified NewsItem
            </summary>
            <param name="item">The newsitem whose enclosures are being downloaded</param>
            <param name="maxNumToDownload">The maximum number of enclosures that can be downloaded from this item</param>
            <returns>The number of downloaded enclosures</returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.DownloadEnclosure(NewsComponents.NewsItem)">
            <summary>
            Downloads all the enclosures associated with the specified NewsItem
            </summary>
            <param name="item">The newsitem whose enclosures are being downloaded</param>
        </member>
        <member name="M:NewsComponents.NewsHandler.DownloadEnclosure(NewsComponents.NewsItem,System.String)">
            <summary>
            Download the specified enclosure associated with the specified NewsItem. 
            </summary>
            <remarks>The enclosure will be downloaded ONLY IF it is found as the Url 
            field of one of the Enclosure objects in the Enclosures collection of the specified NewsItem</remarks>
            <param name="item"></param>
            <param name="fileName">The name of the enclosure file to download</param>
        </member>
        <member name="M:NewsComponents.NewsHandler.ResumePendingDownloads">
            <summary>
            Resumes pending BITS downloads from a if any exist. 
            </summary>
        </member>
        <member name="M:NewsComponents.NewsHandler.RefreshFavicons">
            <summary>
            Downloads the favicons for the various feeds. 
            </summary>
        </member>
        <member name="M:NewsComponents.NewsHandler.RefreshFeeds(System.Boolean)">
            <summary>
            Downloads every feed that has either never been downloaded before or 
            whose elapsed time since last download indicates a fresh attempt should be made. 
            </summary>
            <param name="force_download">A flag that indicates whether download attempts should be made 
            or whether the cache can be used.</param>
            <remarks>This method uses the cache friendly If-None-Match and If-modified-Since
            HTTP headers when downloading feeds.</remarks>	
        </member>
        <member name="M:NewsComponents.NewsHandler.RefreshFeeds(System.String,System.Boolean)">
            <summary>
            Downloads every feed that has either never been downloaded before or 
            whose elapsed time since last download indicates a fresh attempt should be made. 
            </summary>
            <param name="category">Refresh all feeds, that are part of the category</param>
            <param name="force_download">A flag that indicates whether download attempts should be made 
            or whether the cache can be used.</param>
            <remarks>This method uses the cache friendly If-None-Match and If-modified-Since
            HTTP headers when downloading feeds.</remarks>	
        </member>
        <member name="M:NewsComponents.NewsHandler.IsChildOrSameCategory(System.String,System.String)">
            <summary>
            Determines whether two categories are the same or are whether 
            </summary>
            <param name="category">The category we are testing against</param>
            <param name="testCategory">The category being tested</param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.ConvertFeedList(System.Xml.XmlDocument)">
            <summary>
            Converts the input XML document from OCS, OPML or SIAM to the RSS Bandit feed list 
            format. 
            </summary>
            <param name="doc">The input feed list</param>
            <returns>The converted feed list</returns>
            <exception cref="T:System.ApplicationException">if the feed list format is unknown</exception>
        </member>
        <member name="M:NewsComponents.NewsHandler.ReplaceFeedlist(System.IO.Stream)">
            <summary>
            Replaces the existing list of feeds used by the application with the list of 
            feeds in the specified XML document. The file must be an RSS Bandit feed list
            or a SIAM file. 
            </summary>
            <param name="feedlist">The list of feeds</param>
            <exception cref="T:System.ApplicationException">If the file is not a SIAM, OPML or RSS bandit feedlist</exception>		
        </member>
        <member name="M:NewsComponents.NewsHandler.ImportFeedlist(System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Replaces or imports the existing list of feeds used by the application with the list of 
            feeds in the specified XML document. The file must be an RSS Bandit feed list
            or a SIAM file. 
            </summary>
            <param name="feedlist">The list of feeds</param>
            <param name="category">The category to import the feeds into</param>
            <param name="replace">Indicates whether the feedlist should be replaced or not</param>
            <exception cref="T:System.ApplicationException">If the file is not a SIAM, OPML or RSS bandit feedlist</exception>		
        </member>
        <member name="M:NewsComponents.NewsHandler.ImportFeedlist(NewsComponents.Feed.feeds,System.String,System.Boolean,System.Boolean)">
            <summary>
            Replaces or imports the existing list of feeds used by the application with the list of 
            feeds in the specified XML document. The file must be an RSS Bandit feed list
            or a SIAM file. 
            </summary>
            <param name="myFeeds">The list of feeds</param>
            <param name="category">The category to import the feeds into</param>
            <param name="replace">Indicates whether the feedlist should be replaced or not</param>
            <param name="keepLocalSettings">Indicates that the local feed specific settings should not be overwritten 
            by the imported settings</param>
            <exception cref="T:System.ApplicationException">If the file is not a SIAM, OPML or RSS bandit feedlist</exception>		
        </member>
        <member name="M:NewsComponents.NewsHandler.ImportFeedlist(System.IO.Stream)">
            <summary>
            Merges the list of feeds in the specified XML document with that currently 
            used by the application. The file can either be an RSS Bandit feed list or an 
            OPML file. 
            </summary>
            <param name="feedlist">The list of feeds</param>
            <exception cref="T:System.ApplicationException">If the file is neither an OPML file or RSS bandit feedlist</exception>		
        </member>
        <member name="M:NewsComponents.NewsHandler.ImportFeedlist(System.IO.Stream,System.String)">
            <summary>
            Merges the list of feeds in the specified XML document with that currently 
            used by the application. The file can either be an RSS Bandit feed list or an 
            OPML file. 
            </summary>
            <param name="feedlist">The list of feeds</param>
            <param name="category">The category to import the feeds into</param>
            <exception cref="T:System.ApplicationException">If the file is neither an OPML file or RSS bandit feedlist</exception>		
        </member>
        <member name="M:NewsComponents.NewsHandler.ValidationCallbackOne(System.Object,System.Xml.Schema.ValidationEventArgs)">
            <summary>
            Handles errors that occur during schema validation of RSS feed list
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:NewsComponents.NewsHandler.SaveFeed(NewsComponents.Feed.feedsFeed)">
            <summary>
            Saves a particular RSS feed.
            </summary>
            <remarks>This method should be thread-safe</remarks>
            <param name="feed">The the feed to save. This is an identifier
            and not used to actually fetch the feed from the WWW.</param>
            <returns>An identifier for the saved feed. </returns>		
        </member>
        <member name="M:NewsComponents.NewsHandler.GetFeed(NewsComponents.Feed.feedsFeed)">
            <summary>
            Returns an RSS feed. 
            </summary>
            <param name="feed">The feed whose FeedInfo is required.</param>
            <returns>The requested feed or null if it doesn't exist</returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.MergeAndPurgeItems(System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Collections.IList@,System.Boolean)">
            <summary>
            Merge and purge items.
            </summary>
            <param name="oldItems">IList with the old items</param>
            <param name="newItems">IList with the new items</param>
            <param name="deletedItems">IList with the IDs of deleted items</param>
            <param name="receivedNewItems">IList with the really new (received) items.</param>
            <param name="onlyKeepNewItems">Indicates that we only want the items from newItems to be kept. If this value is true 
            then this method merely copies over item state of any oldItems that are in newItems then returns newItems</param>
            <returns>IList merge/purge result</returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.PostComment(System.String,NewsComponents.NewsItem,NewsComponents.NewsItem)">
            <summary>
            Posts a comment in reply to an item using either NNTP or the CommentAPI 
            </summary>
            <param name="url">The URL to post the comment to</param>
            <param name="item2post">An RSS item that will be posted to the website</param>
            <param name="inReply2item">An RSS item that is the post parent</param>		
            <exception cref="T:System.Net.WebException">If an error occurs when the POSTing the 
            comment</exception>
        </member>
        <member name="M:NewsComponents.NewsHandler.PostComment(NewsComponents.NewsItem,NewsComponents.Feed.feedsFeed)">
            <summary>
            Posts a new item to a feed (currently only NNTP feeds) 
            </summary>
            <remarks>How about Atom feed posting?</remarks>
            <param name="item2post">An RSS item that will be posted to the website/NNTP Group</param>
            <param name="postTarget">An feedsFeed as the post target</param>		
            <exception cref="T:System.Net.WebException">If an error occurs when the POSTing the 
            comment</exception>
        </member>
        <member name="M:NewsComponents.NewsHandler.GetItemsWithIncomingLinks(NewsComponents.NewsItem,System.Collections.IList)">
            <summary>
            </summary>
            <param name="item"></param>
            <param name="excludeItemsList"></param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.GetItemsFromOutGoingLinks(NewsComponents.NewsItem,System.Collections.IList)">
            <summary>
            </summary>
            <param name="item"></param>
            <param name="excludeItemsList"></param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.HasItemAnyRelations(NewsComponents.NewsItem,System.Collections.IList)">
            <summary>
            </summary>
            <param name="item"></param>
            <param name="excludeItemsList"></param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.NewsHandler.RelationCosmosAdd(NewsComponents.RelationCosmos.RelationBase)">
            <summary>
            Internal used accessor
            </summary>
            <param name="relation"></param>
        </member>
        <member name="M:NewsComponents.NewsHandler.RegisterReceivingNewsChannel(NewsComponents.INewsChannel)">
            <summary>
            Register INewsChannel processing services 
            </summary>
        </member>
        <member name="M:NewsComponents.NewsHandler.UnregisterReceivingNewsChannel(NewsComponents.INewsChannel)">
            <summary>
            Unregister INewsChannel processing services 
            </summary>
        </member>
        <member name="P:NewsComponents.NewsHandler.Configuration">
            <summary>
            Gets the NewsComponents configuration.
            </summary>
            <value>The configuration.</value>
        </member>
        <member name="P:NewsComponents.NewsHandler.CacheHandler">
            <summary>
            Gets the cache manager.
            </summary>
            <value>The cache manager.</value>
        </member>
        <member name="P:NewsComponents.NewsHandler.CacheLocation">
            <summary>
            The location where feed items are cached.
            </summary>
        </member>
        <member name="P:NewsComponents.NewsHandler.RssParser">
            <summary>
            Provide access to the RssParser for Rss specific tasks
            </summary>
        </member>
        <member name="P:NewsComponents.NewsHandler.SearchHandler">
            <summary>
            Gets or sets the search index handler.
            </summary>
            <value>The search handler.</value>
        </member>
        <member name="P:NewsComponents.NewsHandler.Proxy">
            <summary>
            Proxy server information used for connections when fetching feeds. 
            </summary>
        </member>
        <member name="P:NewsComponents.NewsHandler.SetCookies">
            <summary>
            Indicates whether the cookies from IE should be taken over for our own requests. 
            Default is true.
            </summary>
        </member>
        <member name="P:NewsComponents.NewsHandler.BuildRelationCosmos">
            <summary>
            Indicates whether the relationship cosmos should be built for incoming news items. 
            </summary>
        </member>
        <member name="P:NewsComponents.NewsHandler.Offline">
            <summary>
            Indicates whether the application is offline or not. 
            </summary>
        </member>
        <member name="P:NewsComponents.NewsHandler.TraceMode">
            <summary>
            Boolean flag indicates whether errors should be written to a logfile 
            using Trace.Write(); 
            </summary>
        </member>
        <member name="P:NewsComponents.NewsHandler.UnconditionalCommentRss">
            <summary>
            Boolean flag indicates whether the commentCount should be considered
            for NewsItem.HasExternalRelations() tests.
             Default is false and will test both the CommentRssUrl as a non-empty string
             and commentCount > 0 (zero)
            </summary>
        </member>
        <member name="P:NewsComponents.NewsHandler.MaxItemAge">
            <summary>
            Gets or sets the maximum amount of time an item should be kept in the 
            cache. This value is used for all feeds unless one is specified on 
            the particular feed or its category
            </summary>
        </member>
        <member name="P:NewsComponents.NewsHandler.Stylesheet">
            <summary>
            Gets or sets the stylesheet for displaying feeds
            </summary>
        </member>
        <member name="P:NewsComponents.NewsHandler.EnclosureFolder">
            <summary>
            Gets or sets the folder for downloading enclosures
            </summary>
        </member>
        <member name="P:NewsComponents.NewsHandler.PodcastFileExtensionsAsString">
            <summary>
            Gets the list of file extensions of enclosures that should be treated as podcasts
            as a string. 
            </summary>
        </member>
        <member name="P:NewsComponents.NewsHandler.PodcastFolder">
            <summary>
            Gets or sets the folder for downloading podcasts
            </summary>
        </member>
        <member name="P:NewsComponents.NewsHandler.MarkItemsReadOnExit">
            <summary>
            Gets or sets whether items in the feed should be marked as read on exiting
            the feed in the UI
            </summary>
        </member>
        <member name="P:NewsComponents.NewsHandler.DownloadEnclosures">
            <summary>
            Gets or sets whether enclosures should be downloaded in the background
            </summary>
        </member>
        <member name="P:NewsComponents.NewsHandler.EnclosureCacheSize">
            <summary>
            Indicates the maximum amount of space that enclosures and podcasts can use on disk.
            </summary>
        </member>
        <member name="P:NewsComponents.NewsHandler.NumEnclosuresToDownloadOnNewFeed">
            <summary>
            Indicates the number of enclosures which should be downloaded automatically from a newly subscribed feed.
            </summary>
        </member>
        <member name="P:NewsComponents.NewsHandler.CreateSubfoldersForEnclosures">
            <summary>
            Gets or sets whether  podcasts and enclosures should be downloaded to a folder 
            named after the feed
            </summary>
        </member>
        <member name="P:NewsComponents.NewsHandler.EnclosureAlert">
            <summary>
            Gets or sets whether a toast windows should be displayed on a successful download
            of an enclosure.
            </summary>
        </member>
        <member name="P:NewsComponents.NewsHandler.FeedColumnLayout">
            <summary>
            Gets or sets wwhich properties of a NewsItem should be made columns in the RSS Bandit listview
            </summary>
        </member>
        <member name="P:NewsComponents.NewsHandler.GlobalUserAgentString">
            <summary>
            Returns a global long HTTP user agent string build from the
            instance setting. 
            To be used by sub-components that do not have a instance variable 
            of the NewsHandler.
            </summary>
        </member>
        <member name="P:NewsComponents.NewsHandler.UserAgent">
            <summary>
            The short HTTP user agent string used when requesting feeds. 
            </summary>
        </member>
        <member name="P:NewsComponents.NewsHandler.FullUserAgent">
            <summary>
            The long HTTP user agent string used when requesting feeds. 
            </summary>
        </member>
        <member name="E:NewsComponents.NewsHandler.BeforeDownloadFeedStarted">
            <summary>
            The event that will be invoked on clients to notify them that 
            when a feed starts to be downloaded (AsyncWebRequest). 
            </summary>
        </member>
        <member name="E:NewsComponents.NewsHandler.OnUpdatedFeed">
            <summary>
            Event called on every updated feed.
            </summary>
        </member>
        <member name="E:NewsComponents.NewsHandler.OnDownloadedEnclosure">
            <summary>
            Event called on every completed enclosure download. 
            </summary>
        </member>
        <member name="E:NewsComponents.NewsHandler.OnUpdatedFavicon">
            <summary>
            Event called on every updated favicon.
            </summary>
        </member>
        <member name="E:NewsComponents.NewsHandler.OnUpdateFeedException">
            <summary>
            Event called, if the WebRequest fails with any exception.
            </summary>
        </member>
        <member name="E:NewsComponents.NewsHandler.UpdateFeedsStarted">
            <summary>
            Called if RefreshFeeds() was initiated (all feeds).
            </summary>
        </member>
        <member name="E:NewsComponents.NewsHandler.UpdateFeedStarted">
            <summary>
            Called as each individual feed start to refresh
            </summary>
        </member>
        <member name="E:NewsComponents.NewsHandler.OnAllAsyncRequestsCompleted">
            <summary>
            Called if all async. requests are done.
            </summary>
        </member>
        <member name="E:NewsComponents.NewsHandler.NewsItemSearchResult">
            <summary>Called if NewsItems are found, that match the search criteria(s)</summary>
        </member>
        <member name="E:NewsComponents.NewsHandler.FeedSearchResult">
            <summary>Called if feedsFeed(s) are found, that match the search criteria(s)</summary>
        </member>
        <member name="E:NewsComponents.NewsHandler.SearchFinished">
            <summary>Called on a search finished</summary>
        </member>
        <member name="P:NewsComponents.NewsHandler.ColumnLayouts">
            <summary>
            Accesses the list of user specified layouts (currently listview only) 
            </summary>
        </member>
        <member name="P:NewsComponents.NewsHandler.Categories">
            <summary>
            Accesses the list of user specified categories used for organizing 
            feeds. 
            </summary>
        </member>
        <member name="P:NewsComponents.NewsHandler.FeedsTable">
            <summary>
            Accesses the table of RSS feed objects. 
            </summary>
            <exception cref="T:System.InvalidOperationException">If some error occurs on converting 
            XML feed list to feed table</exception>
        </member>
        <member name="P:NewsComponents.NewsHandler.NntpServers">
            <summary>
            Accesses the list of NntpServerDefinition objects 
            Keys are the account name(s) - friendly names for the news server def.:
            NewsServerDefinition.Name's
            </summary>
        </member>
        <member name="P:NewsComponents.NewsHandler.UserIdentity">
            <summary>
            Accesses the list of UserIdentity objects.
            Keys are the UserIdentity.Name's
            </summary>
        </member>
        <member name="P:NewsComponents.NewsHandler.RefreshRate">
            <summary>
             How often feeds are refreshed by default if no specific rate specified by the feed. 
             Setting this property resets the refresh rate for all feeds. 
            </summary>
            <remarks>If set to a negative value then the old value remains. Setting the 
            value to zero means feeds are no longer updated.</remarks>
        </member>
        <member name="P:NewsComponents.NewsHandler.FeedsListOK">
            <summary>
            Boolean flag indicates whether the feeds list was loaded 
            successfully during the last call to LoadFeedlist()
            </summary>
        </member>
        <member name="P:NewsComponents.NewsHandler.ReceivingNewsChannelServices">
            <summary>
            Gets the receiving news channel.
            </summary>
            <value>The receiving news channel services.</value>
        </member>
        <member name="T:NewsComponents.NewsHandler.DownloadFeedStartedCallback">
            <summary>
            The callback used within the BeforeDownloadFeedStarted event.
            </summary>
        </member>
        <member name="T:NewsComponents.NewsHandler.DownloadFeedCancelEventArgs">
            <summary>
            BeforeDownloadFeedStarted event argument class.
            </summary>
        </member>
        <member name="M:NewsComponents.NewsHandler.DownloadFeedCancelEventArgs.#ctor(System.Uri,System.Boolean)">
            <summary>
            Class initializer.
            </summary>
            <param name="feed">feed Uri</param>
            <param name="cancel">bool, set to true, if you want to cancel further processing</param>
        </member>
        <member name="P:NewsComponents.NewsHandler.DownloadFeedCancelEventArgs.FeedUri">
            <summary>
            The related feed Uri.
            </summary>
        </member>
        <member name="T:NewsComponents.NewsHandler.UpdatedFeedCallback">
            <summary>
            Callback delegate used on event OnUpdatedFeed.
            </summary>
        </member>
        <member name="T:NewsComponents.NewsHandler.DownloadedEnclosureCallback">
            <summary>
            Callback delegate used on event OnDownloadedEnclosure.
            </summary>
        </member>
        <member name="T:NewsComponents.NewsHandler.UpdatedFaviconCallback">
            <summary>
            Callback delegate used on event OnUpdatedFavicon.
            </summary>
        </member>
        <member name="T:NewsComponents.NewsHandler.UpdatedFaviconEventArgs">
            <summary>
            OnUpdatedFavicon event argument class.
            </summary>
        </member>
        <member name="M:NewsComponents.NewsHandler.UpdatedFaviconEventArgs.#ctor(System.String,System.Collections.Specialized.StringCollection)">
            <summary>
            Called on every updated favicon.
            </summary>
            <param name="favicon"> The name of the favicon file</param> 
            <param name="feedUrls">The list of URLs that will utilize this favicon</param>		
        </member>
        <member name="P:NewsComponents.NewsHandler.UpdatedFaviconEventArgs.Favicon">
            <summary>
            The name of the favicon file. 
            </summary>
        </member>
        <member name="P:NewsComponents.NewsHandler.UpdatedFaviconEventArgs.FeedUrls">
            <summary>
            The URLs of the feeds that will utilize this favicon. 
            </summary>
        </member>
        <member name="T:NewsComponents.NewsHandler.UpdatedFeedEventArgs">
            <summary>
            OnUpdatedFeed event argument class.
            </summary>
        </member>
        <member name="M:NewsComponents.NewsHandler.UpdatedFeedEventArgs.#ctor(System.Uri,System.Uri,NewsComponents.Net.RequestResult,System.Int32,System.Boolean)">
            <summary>
            Called on every updated feed.
            </summary>
            <param name="requestUri">Original requested Uri of the feed</param>
            <param name="newUri">The (maybe) new feed location. This could be set on a redirect or other mechanism.
            If the location was not changed, this parameter is left null</param>
            <param name="result">If result is <c>NotModified</c>, the conditional GET succeeds and no items are returned.</param>
            <param name="priority">Priority of the request</param>
            <param name="firstSuccessfulDownload">Indicates whether this is the first time the feed has been successfully downloaded
            to the cache</param>
        </member>
        <member name="P:NewsComponents.NewsHandler.UpdatedFeedEventArgs.UpdatedFeedUri">
            <summary>
            Uri of the feed, that was updated
            </summary>
        </member>
        <member name="P:NewsComponents.NewsHandler.UpdatedFeedEventArgs.NewFeedUri">
            <summary>
            Uri of the feed, if it was moved on the Web to a new location.
            </summary>
        </member>
        <member name="P:NewsComponents.NewsHandler.UpdatedFeedEventArgs.UpdateState">
            <summary>
            RequestResult: OK or NotModified
            </summary>
        </member>
        <member name="P:NewsComponents.NewsHandler.UpdatedFeedEventArgs.Priority">
            <summary>
            Gets the queued priority
            </summary>
        </member>
        <member name="P:NewsComponents.NewsHandler.UpdatedFeedEventArgs.FirstSuccessfulDownload">
            <summary>
            Indicates whether this is the first time the feed has been downloaded to 
            the cache. 
            </summary>
        </member>
        <member name="T:NewsComponents.NewsHandler.UpdateFeedExceptionCallback">
            <summary>
            Callback delegate used for event OnUpdateFeedException
            </summary>
        </member>
        <member name="T:NewsComponents.NewsHandler.UpdateFeedExceptionEventArgs">
            <summary>
            Event argument class used in OnUpdateFeedException.
            </summary>
        </member>
        <member name="M:NewsComponents.NewsHandler.UpdateFeedExceptionEventArgs.#ctor(System.String,System.Exception,System.Int32)">
            <summary>
            Initializer
            </summary>
            <param name="requestUri">feed Uri, that was requested</param>
            <param name="e">Exception caused by the request</param>
            <param name="priority">int</param>
        </member>
        <member name="P:NewsComponents.NewsHandler.UpdateFeedExceptionEventArgs.FeedUri">
            <summary>
            feed Uri.
            </summary>
        </member>
        <member name="P:NewsComponents.NewsHandler.UpdateFeedExceptionEventArgs.ExceptionThrown">
            <summary>
            caused exception
            </summary>
        </member>
        <member name="P:NewsComponents.NewsHandler.UpdateFeedExceptionEventArgs.Priority">
            <summary>
            Gets the queued priority
            </summary>
        </member>
        <member name="T:NewsComponents.NewsHandler.UpdateFeedsEventArgs">
            <summary>
            UpdateFeedsStarted event argument class. Multiple feeds update.
            </summary>
        </member>
        <member name="M:NewsComponents.NewsHandler.UpdateFeedsEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializer
            </summary>
            <param name="forced">true, if it was a forced (manually initiated) request</param>
        </member>
        <member name="P:NewsComponents.NewsHandler.UpdateFeedsEventArgs.ForcedRefresh">
            <summary>
            True, if it was a manually forced request
            </summary>
        </member>
        <member name="T:NewsComponents.NewsHandler.UpdateFeedEventArgs">
            <summary>
            UpdateFeedStarted event argument class. Single feed update.
            </summary>
        </member>
        <member name="M:NewsComponents.NewsHandler.UpdateFeedEventArgs.#ctor(System.Uri,System.Boolean,System.Int32)">
            <summary>
            Initializer
            </summary>
            <param name="feed">feed Uri</param>
            <param name="forced">true, if it was a forced (manually initiated) request</param>
            <param name="priority">Priority of the request</param>
        </member>
        <member name="P:NewsComponents.NewsHandler.UpdateFeedEventArgs.FeedUri">
            <summary>
            Feed Uri.
            </summary>
        </member>
        <member name="P:NewsComponents.NewsHandler.UpdateFeedEventArgs.Priority">
            <summary>
            Gets the queued priority
            </summary>
        </member>
        <member name="T:NewsComponents.NewsHandler.UpdateFeedsStartedHandler">
            <summary>
            Delegate used for UpdateFeedsStarted event.
            </summary>
        </member>
        <member name="T:NewsComponents.NewsHandler.UpdateFeedStartedHandler">
            <summary>
            Delegate used for UpdateFeedStarted event.
            </summary>
        </member>
        <member name="T:NewsComponents.NewsHandler.NewsItemSearchResultEventHandler">
            <summary>Signature for <see cref="E:NewsComponents.NewsHandler.NewsItemSearchResult">NewsItemSearchResult</see>  event</summary>
        </member>
        <member name="T:NewsComponents.NewsHandler.FeedSearchResultEventHandler">
            <summary>Signature for <see cref="E:NewsComponents.NewsHandler.FeedSearchResult">FeedSearchResult</see>  event</summary>
        </member>
        <member name="T:NewsComponents.NewsHandler.SearchFinishedEventHandler">
            <summary>Signature for <see cref="E:NewsComponents.NewsHandler.SearchFinished">SearchFinished</see>  event</summary>
        </member>
        <member name="T:NewsComponents.NewsHandler.FeedSearchResultEventArgs">
            <summary>
            Contains the search result, if feedsFeed's are found. Used on FeedSearchResult event.
            </summary>
        </member>
        <member name="M:NewsComponents.NewsHandler.FeedSearchResultEventArgs.#ctor(NewsComponents.Feed.feedsFeed,System.Object,System.Boolean)">
            <summary>
            Initializer
            </summary>
            <param name="f">feedsFeed</param>
            <param name="tag">object, used by the caller only</param>
            <param name="cancel">true, if the search request should be cancelled</param>
        </member>
        <member name="F:NewsComponents.NewsHandler.FeedSearchResultEventArgs.Feed">
            <summary>
            feedsFeed.
            </summary>
        </member>
        <member name="F:NewsComponents.NewsHandler.FeedSearchResultEventArgs.Tag">
            <summary>
            Object used by the caller only
            </summary>
        </member>
        <member name="T:NewsComponents.NewsHandler.NewsItemSearchResultEventArgs">
            <summary>
            Contains the search result, if NewsItem's are found. Used on NewsItemSearchResult event.
            </summary>
        </member>
        <member name="M:NewsComponents.NewsHandler.NewsItemSearchResultEventArgs.#ctor(System.Collections.ArrayList,System.Object,System.Boolean)">
            <summary>
            Initializer
            </summary>
            <param name="items">ArrayList of NewsItems</param>
            <param name="tag">Object used by caller</param>
            <param name="cancel"></param>
        </member>
        <member name="F:NewsComponents.NewsHandler.NewsItemSearchResultEventArgs.NewsItems">
            <summary>
            NewsItem list
            </summary>
        </member>
        <member name="F:NewsComponents.NewsHandler.NewsItemSearchResultEventArgs.Tag">
            <summary>
            Object used by caller
            </summary>
        </member>
        <member name="T:NewsComponents.NewsHandler.SearchFinishedEventArgs">
            <summary>
            Provide informations about a finished search. Used on SearchFinished event.
            </summary>
        </member>
        <member name="M:NewsComponents.NewsHandler.SearchFinishedEventArgs.#ctor(System.Object,NewsComponents.Feed.FeedInfoList,System.Int32,System.Int32)">
            <summary>
            Initializer
            </summary>
            <remarks>This modifies the input FeedInfoList by replacing its NewsItem contents 
            with SearchHitNewsItems</remarks>
            <param name="tag">Object used by caller</param>
            <param name="matchingFeeds"></param>
            <param name="matchingFeedsCount">integer stores the count of matching feeds</param>
            <param name="matchingItemsCount">integer stores the count of matching NewsItem's (over all feeds)</param>
        </member>
        <member name="M:NewsComponents.NewsHandler.SearchFinishedEventArgs.#ctor(System.Object,NewsComponents.Feed.FeedInfoList,System.Collections.ArrayList,System.Int32,System.Int32)">
            <summary>
            Initializer
            </summary>
            <param name="tag">Object used by caller</param>
            <param name="matchingFeeds">The matching feeds.</param>
            <param name="matchingNewsItems">The matching news items.</param>
            <param name="matchingFeedsCount">integer stores the count of matching feeds</param>
            <param name="matchingItemsCount">integer stores the count of matching NewsItem's (over all feeds)</param>
        </member>
        <member name="F:NewsComponents.NewsHandler.SearchFinishedEventArgs.MatchingFeedsCount">
            <summary></summary>
        </member>
        <member name="F:NewsComponents.NewsHandler.SearchFinishedEventArgs.MatchingItemsCount">
            <summary></summary>
        </member>
        <member name="F:NewsComponents.NewsHandler.SearchFinishedEventArgs.Tag">
            <summary></summary>
        </member>
        <member name="F:NewsComponents.NewsHandler.SearchFinishedEventArgs.MatchingFeeds">
            <summary></summary>
        </member>
        <member name="F:NewsComponents.NewsHandler.SearchFinishedEventArgs.MatchingItems">
            <summary></summary>
        </member>
        <member name="T:NewsComponents.NewsFeedProperty">
            <summary>
            Defines all storage relevant feedsFeed properties. On any change
            of a feedsFeed property, that feed requires to be saved with the
            subscriptions list, to the cache or re-indexed!
            </summary>
        </member>
        <member name="F:NewsComponents.NewsFeedProperty.FeedLink">
            <summary>Requires subscriptions update/save, re-index</summary>
        </member>
        <member name="F:NewsComponents.NewsFeedProperty.FeedUrl">
            <summary>Requires re-index</summary>
        </member>
        <member name="F:NewsComponents.NewsFeedProperty.FeedTitle">
            <summary>Requires subscriptions update/save, re-index</summary>
        </member>
        <member name="F:NewsComponents.NewsFeedProperty.FeedCategory">
            <summary>Requires subscriptions update/save, re-index</summary>
        </member>
        <member name="F:NewsComponents.NewsFeedProperty.FeedDescription">
            <summary>Requires re-index</summary>
        </member>
        <member name="F:NewsComponents.NewsFeedProperty.FeedType">
            <summary>Requires cache update/save, re-index</summary>
        </member>
        <member name="F:NewsComponents.NewsFeedProperty.FeedItemsDeleteUndelete">
            <summary>Requires subscriptions update/save, re-index</summary>
        </member>
        <member name="F:NewsComponents.NewsFeedProperty.FeedItemFlag">
            <summary>Requires cache update/save</summary>
        </member>
        <member name="F:NewsComponents.NewsFeedProperty.FeedItemReadState">
            <summary>Requires subscriptions and cache update/save</summary>
        </member>
        <member name="F:NewsComponents.NewsFeedProperty.FeedItemCommentCount">
            <summary>Requires cache update/save</summary>
        </member>
        <member name="F:NewsComponents.NewsFeedProperty.FeedMaxItemAge">
            <summary>Requires subscriptions update/save</summary>
        </member>
        <member name="F:NewsComponents.NewsFeedProperty.FeedItemWatchComments">
            <summary>Requires cache update/save</summary>
        </member>
        <member name="F:NewsComponents.NewsFeedProperty.FeedRefreshRate">
            <summary>Requires subscriptions update/save</summary>
        </member>
        <member name="F:NewsComponents.NewsFeedProperty.FeedCacheUrl">
            <summary>Requires subscriptions update/save</summary>
        </member>
        <member name="F:NewsComponents.NewsFeedProperty.FeedAdded">
            <summary>Requires subscriptions update/save</summary>
        </member>
        <member name="F:NewsComponents.NewsFeedProperty.FeedRemoved">
            <summary>Requires subscriptions update/save</summary>
        </member>
        <member name="F:NewsComponents.NewsFeedProperty.FeedCategoryRemoved">
            <summary>Requires subscriptions update/save</summary>
        </member>
        <member name="F:NewsComponents.NewsFeedProperty.FeedCategoryAdded">
            <summary>Requires subscriptions update/save</summary>
        </member>
        <member name="F:NewsComponents.NewsFeedProperty.FeedCredentials">
            <summary>Requires cache update/save </summary>
        </member>
        <member name="F:NewsComponents.NewsFeedProperty.FeedAlertOnNewItemsReceived">
            <summary>Requires subscriptions update/save </summary>
        </member>
        <member name="F:NewsComponents.NewsFeedProperty.FeedMarkItemsReadOnExit">
            <summary>Requires subscriptions update/save </summary>
        </member>
        <member name="F:NewsComponents.NewsFeedProperty.FeedStylesheet">
            <summary>Requires subscriptions update/save </summary>
        </member>
        <member name="F:NewsComponents.NewsFeedProperty.FeedItemNewCommentsRead">
            <summary>Requires cache update/save</summary>
        </member>
        <member name="F:NewsComponents.NewsFeedProperty.General">
            <summary> General change, requires subscriptions update/save</summary>
        </member>
        <member name="T:NewsComponents.RssBanditXmlNamespaceResolver">
            <summary>
            Helper class used for treating v1.2.* RSS Bandit feedlist.xml files as RSS Bandit v1.3.* 
            subscriptions.xml files
            </summary>
        </member>
        <member name="T:NewsComponents.RssBanditXmlValidatingReader">
            <summary>
            Helper class used for treating v1.2.* RSS Bandit feedlist.xml files as RSS Bandit v1.3.* 
            subscriptions.xml files
            </summary>
        </member>
        <member name="T:NewsComponents.Threading.PriorityThreadPool">
            <summary>Managed thread pool.</summary>
        </member>
        <member name="F:NewsComponents.Threading.PriorityThreadPool._maxWorkerThreads">
            <summary>Maximum number of threads the thread pool has at its disposal.</summary>
        </member>
        <member name="F:NewsComponents.Threading.PriorityThreadPool._waitingCallbacks">
            <summary>Queue of all the callbacks waiting to be executed.</summary>
        </member>
        <member name="F:NewsComponents.Threading.PriorityThreadPool._workerThreadNeeded">
            <summary>
            Used to signal that a worker thread is needed for processing.  Note that multiple
            threads may be needed simultaneously and as such we use a semaphore instead of
            an auto reset event.
            </summary>
        </member>
        <member name="F:NewsComponents.Threading.PriorityThreadPool._workerThreads">
            <summary>List of all worker threads at the disposal of the thread pool.</summary>
        </member>
        <member name="F:NewsComponents.Threading.PriorityThreadPool._inUseThreads">
            <summary>Number of threads currently active.</summary>
        </member>
        <member name="M:NewsComponents.Threading.PriorityThreadPool.#cctor">
            <summary>Initialize the thread pool.</summary>
        </member>
        <member name="M:NewsComponents.Threading.PriorityThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Int32)">
            <summary>Queues a user work item to the thread pool.</summary>
            <param name="callback">
            A WaitCallback representing the delegate to invoke when the thread in the 
            thread pool picks up the work item.
            </param>
            <param name="priority">The priority for this callback.</param>
        </member>
        <member name="M:NewsComponents.Threading.PriorityThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object,System.Int32)">
            <summary>Queues a user work item to the thread pool.</summary>
            <param name="callback">
            A WaitCallback representing the delegate to invoke when the thread in the 
            thread pool picks up the work item.
            </param>
            <param name="state">
            The object that is passed to the delegate when serviced from the thread pool.
            </param>
            <param name="priority">The priority for this callback.</param>
        </member>
        <member name="M:NewsComponents.Threading.PriorityThreadPool.EmptyQueue">
            <summary>Empties the work queue of any queued work items.</summary>
        </member>
        <member name="M:NewsComponents.Threading.PriorityThreadPool.ProcessQueuedItems">
            <summary>A thread worker function that processes items from the work queue.</summary>
        </member>
        <member name="P:NewsComponents.Threading.PriorityThreadPool.MaxThreads">
            <summary>Gets the number of threads at the disposal of the thread pool.</summary>
        </member>
        <member name="P:NewsComponents.Threading.PriorityThreadPool.ActiveThreads">
            <summary>Gets the number of currently active threads in the thread pool.</summary>
        </member>
        <member name="P:NewsComponents.Threading.PriorityThreadPool.WaitingCallbacks">
            <summary>Gets the number of callback delegates currently waiting in the thread pool.</summary>
        </member>
        <member name="T:NewsComponents.Threading.PriorityThreadPool.WaitingCallback">
            <summary>Used to hold a callback delegate and the state for that delegate.</summary>
        </member>
        <member name="F:NewsComponents.Threading.PriorityThreadPool.WaitingCallback._callback">
            <summary>Callback delegate for the callback.</summary>
        </member>
        <member name="F:NewsComponents.Threading.PriorityThreadPool.WaitingCallback._state">
            <summary>State with which to call the callback delegate.</summary>
        </member>
        <member name="M:NewsComponents.Threading.PriorityThreadPool.WaitingCallback.#ctor(System.Threading.WaitCallback,System.Object)">
            <summary>Initialize the callback holding object.</summary>
            <param name="callback">Callback delegate for the callback.</param>
            <param name="state">State with which to call the callback delegate.</param>
        </member>
        <member name="M:NewsComponents.Threading.PriorityThreadPool.WaitingCallback.Dispose">
            <summary>Disposes of the contained state if it is disposable.</summary>
        </member>
        <member name="P:NewsComponents.Threading.PriorityThreadPool.WaitingCallback.Callback">
            <summary>Gets the callback delegate for the callback.</summary>
        </member>
        <member name="P:NewsComponents.Threading.PriorityThreadPool.WaitingCallback.State">
            <summary>Gets the state with which to call the callback delegate.</summary>
        </member>
        <member name="T:NewsComponents.Storage.FileCacheManager">
            <summary>
            An implementation of the CacheManager that uses the file system as a cache. 
            </summary>
        </member>
        <member name="T:NewsComponents.Storage.CacheManager">
            <summary>
            Abstract base class for classes that manage the cache.  
            A Cache can be managed by any backing store.  A file based 
            cache manager is included as <see cref="T:NewsComponents.Storage.FileCacheManager"/>
            </summary>
        </member>
        <member name="M:NewsComponents.Storage.CacheManager.GetFeed(NewsComponents.Feed.feedsFeed)">
            <summary>
            Returns an RSS feed as an XmlReader. 
            </summary>
            <param name="feed">The feed whose FeedInfo is required.</param>
            <returns>The requested feed</returns>
        </member>
        <member name="M:NewsComponents.Storage.CacheManager.SaveFeed(NewsComponents.FeedDetailsInternal)">
            <summary>
            Saves a particular RSS feed.
            </summary>
            <remarks>This method should be thread-safe</remarks>
            <param name="feed">The feed to save. This is an identifier
            and not used to actually fetch the feed from the WWW.</param>
            <returns>The feed ID</returns>
        </member>
        <member name="M:NewsComponents.Storage.CacheManager.RemoveFeed(NewsComponents.Feed.feedsFeed)">
            <summary>
            Removes a feed from the cache
            </summary>
            <param name="feed">The feed to remove</param>
        </member>
        <member name="M:NewsComponents.Storage.CacheManager.FeedExists(NewsComponents.Feed.feedsFeed)">
            <summary>
            Tests whether a feed with the given ID exists in the cache
            </summary>
            <param name="feed">The feed being searched for</param>
            <returns>True if a feed with that ID exists in the cache</returns>
        </member>
        <member name="M:NewsComponents.Storage.CacheManager.ClearCache">
            <summary>
            Removes every item in the cache. 
            </summary>
        </member>
        <member name="M:NewsComponents.Storage.CacheManager.LoadItemContent(NewsComponents.NewsItem)">
            <summary>
            Loads the contents of the NewsItem from the cache. The provided NewsItem must have 
            non-null value for its Id property. 
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:NewsComponents.Storage.CacheManager.CacheLocation">
            <summary>
            Returns the location of the cache. The format of the location is dependent 
            on the CacheManager implementation. 
            </summary>
        </member>
        <member name="M:NewsComponents.Storage.FileCacheManager.#ctor">
            <summary>
            Default constructor initializes class. 
            </summary>
        </member>
        <member name="M:NewsComponents.Storage.FileCacheManager.#ctor(System.String)">
            <summary>
            Constructor initializes class and sets the cache directory
            </summary>
            <param name="cacheDirectory">The cache directory</param>
            <exception cref="T:System.IO.IOException">If the directory doesn't exist</exception>
        </member>
        <member name="M:NewsComponents.Storage.FileCacheManager.GetFeed(NewsComponents.Feed.feedsFeed)">
            <summary>
            Returns an RSS feed. 
            </summary>
            <param name="feed">The feed whose FeedInfo is required.</param>
            <returns>The requested feed or null if it doesn't exist</returns>
        </member>
        <member name="M:NewsComponents.Storage.FileCacheManager.SaveFeed(NewsComponents.FeedDetailsInternal)">
            <summary>
            Saves a particular RSS feed.
            </summary>
            <remarks>This method should be thread-safe</remarks>
            <param name="feed">The feed to save. This is an identifier
            and not used to actually fetch the feed from the WWW.</param>
            <returns>An identifier for the saved feed. </returns>		
        </member>
        <member name="M:NewsComponents.Storage.FileCacheManager.RemoveFeed(NewsComponents.Feed.feedsFeed)">
            <summary>
            Removes a feed from the cache
            </summary>
            <param name="feed">The feed to remove</param>
        </member>
        <member name="M:NewsComponents.Storage.FileCacheManager.ClearCache">
            <summary>
            Removes every item in the cache. 
            </summary>
        </member>
        <member name="M:NewsComponents.Storage.FileCacheManager.FeedExists(NewsComponents.Feed.feedsFeed)">
            <summary>
            Tests whether a feed with the given ID exists in the cache
            </summary>
            <param name="feed">The feed</param>
            <returns>True if a feed with that ID exists in the cache</returns>
        </member>
        <member name="M:NewsComponents.Storage.FileCacheManager.LoadItemContent(NewsComponents.NewsItem)">
            <summary>
            Loads the contents of the NewsItem from the cache. The provided NewsItem must have 
            non-null value for its Id property. 
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:NewsComponents.Storage.FileCacheManager.LoadItemContent(NewsComponents.Feed.FeedInfo)">
            <summary>
            Loads the content of the unread NewsItems from the binary file 
            where item contents are contained. This is a memory-saving performance 
            optimization so we only have the content of items that are unread on load.  
            </summary>
            <param name="fi"></param>
        </member>
        <member name="M:NewsComponents.Storage.FileCacheManager.GetCacheUrlName(System.String,System.Uri)">
            <summary>
            Get a file name that the file can be cached.
            </summary>
            <param name="id">Id to be used to build</param>
            <param name="uri">The uri of the rss document.</param>
            <returns>a filename that may be used to save the cached file.</returns>
        </member>
        <member name="P:NewsComponents.Storage.FileCacheManager.CacheLocation">
            <summary>
            Returns the directory path to the Cache.
            </summary>
        </member>
        <member name="T:NewsComponents.RelationCosmos.RelationCosmos2">
            <summary>
            RelationCosmos2 provide a alternative impl. to RelationCosmos
            </summary>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationCosmos2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.RelationCosmos.RelationCosmos2"/> class.
            </summary>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationCosmos2.Add(NewsComponents.RelationCosmos.RelationBase)">
            <summary>
            Add a new Relation to the RelationCosmos.
            </summary>
            <param name="relation">Relation to add</param>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationCosmos2.AddRange(NewsComponents.RelationCosmos.RelationBase[])">
            <summary>
            Add a range of <c>RelationBase</c> objects
            </summary>
            <param name="relations">RelationBase[]</param>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationCosmos2.NewsComponents#RelationCosmos#IRelationCosmos#AddRange(System.Collections.IList)">
            <summary>
            Add a range of <c>RelationBase</c> objects
            </summary>
            <param name="relations">IList</param>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationCosmos2.Remove(NewsComponents.RelationCosmos.RelationBase)">
            <summary>
            Remove a relation from the RelationCosmos.
            </summary>
            <param name="relation">Relation to be removed</param>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationCosmos2.RemoveRange(System.Collections.IList)">
            <summary>
            Overloaded. Remove a amount of RelationBase objects from the RelationCosmos.
            </summary>
            <param name="relations">To be removed RelationBase object's</param>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationCosmos2.NewsComponents#RelationCosmos#IRelationCosmos#RemoveRange(NewsComponents.RelationCosmos.RelationBase[])">
            <summary>
            Overloaded. Remove a amount of RelationBase objects from the RelationCosmos.
            </summary>
            <param name="relations">To be removed RelationBase object's</param>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationCosmos2.Clear">
            <summary>
            Clear all internal collections.
            </summary>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationCosmos2.GetIncoming(NewsComponents.RelationCosmos.RelationBase,System.Collections.IList)">
            <summary>
            Returns a list of relations, that are known in RelationCosmos and pointing to
            the relation provided.
            </summary>
            <param name="relation">The object implementing RelationBase</param>
            <param name="excludeRelations">List of relations,
            that should be excluded in that check</param>
            <returns>RelationList</returns>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationCosmos2.GetOutgoing(NewsComponents.RelationCosmos.RelationBase,System.Collections.IList)">
            <summary>
            Returns a list of relations, that are known in RelationCosmos and that
            the relation provided points to.
            </summary>
            <param name="relation">The object implementing RelationBase</param>
            <param name="excludeRelations">List of relations,
            that should be excluded in that check</param>
            <returns>RelationList</returns>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationCosmos2.GetIncomingAndOutgoing(NewsComponents.RelationCosmos.RelationBase,System.Collections.IList)">
            <summary>
            Returns a list merged of incoming and outging relations.
            </summary>
            <param name="relation">The object implementing RelationBase</param>
            <param name="excludeRelations">List of relations,
            that should be excluded in that check</param>
            <returns>RelationList</returns>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationCosmos2.HasIncomingOrOutgoing(NewsComponents.RelationCosmos.RelationBase,System.Collections.IList)">
            <summary>
            Return true, if the <c>relation</c> has any incoming or outgoing relations
            (registered/added to RelationCosmos).
            </summary>
            <param name="relation">Relation to check</param>
            <param name="excludeRelations">List of strings with relation.HRef's,
            that should be excluded in that check</param>
            <returns>
            True, if any relation was found, else false
            </returns>
        </member>
        <member name="P:NewsComponents.RelationCosmos.RelationCosmos2.DeepCosmos">
            <summary>
            Not yet fully implemented/supported!
            </summary>
            <value></value>
        </member>
        <member name="P:NewsComponents.RelationCosmos.RelationCosmos2.AdjustPointInTime">
            <summary>
            Set this to true, if RelationCosmos should try to adjust the PointInTime properties
            of added Relations, if they are adjustable. It can do so, because of the knowledge
            about the other Relations and their relationships to other.
            </summary>
            <value></value>
        </member>
        <member name="T:NewsComponents.Collections.StringTable">
            <summary>
            This is a table of atomized strings that is used similarly to the String.Intern method
            </summary>
            <remarks>
            This is set to ComVisible(false) because XmlNameTable is not ComVisible.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.StringTable.#ctor">
            <summary>
            Constructor initializes object 
            </summary>
        </member>
        <member name="M:NewsComponents.Collections.StringTable.Add(System.String)">
            <summary>
            Atomizes the specified string and adds it to the StringTable
            </summary>
            <param name="key">The string to atomize</param>
            <returns>the atomized string</returns>
        </member>
        <member name="M:NewsComponents.Collections.StringTable.TextEquals(System.String,System.Char[],System.Int32)">
            <summary>
            Compares the content of the char array with the string
            </summary>
            <param name="array"></param>
            <param name="text"></param>
            <param name="start"></param>
            <returns>true if equal and false otherwise</returns>
        </member>
        <member name="T:NewsComponents.Collections.StringTable.Entry">
            <summary>
            Hashtable entry within the string table
            </summary>
        </member>
        <member name="T:NewsComponents.Net.RequestQueuedCallback">
            <summary>
            Called on every web request, that was queued.
            </summary>
        </member>
        <member name="T:NewsComponents.Net.RequestStartCallback">
            <summary>
            Called on every queued web request, that is now about to really make the request to 
            destination server.
            </summary>
        </member>
        <member name="T:NewsComponents.Net.RequestExceptionCallback">
            <summary>
            Called, if the web request caused an exception, that is not yet handled by the class itself.
            </summary>
        </member>
        <member name="T:NewsComponents.Net.RequestCompleteCallback">
            <summary>
            Called on every queued request, when the real fetch is finished.
            </summary>
        </member>
        <member name="T:NewsComponents.Net.RequestProgressCallback">
            <summary>
            Called infrequently as bytes are transferred for the file. 
            </summary>
        </member>
        <member name="T:NewsComponents.Net.RequestResult">
            <summary>
            State of a successfully made web request.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.RequestResult.OK">
            <summary>
            Request returns a new response stream.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.RequestResult.NotModified">
            <summary>
            Web request results in a not modfied response.
            </summary>
        </member>
        <member name="T:NewsComponents.Net.RequestParameter">
            <summary>
            Class is a container for a all the needed web request parameter.
            </summary>
        </member>
        <member name="M:NewsComponents.Net.RequestParameter.#ctor(System.Uri,System.String,System.Net.IWebProxy,System.Net.ICredentials,System.DateTime,System.String)">
            <summary>
            Constructor initialize a RequestParameter instance. 
            </summary>
            <param name="address">Requested Web Url</param>
            <param name="userAgent">User Agent string the request should send</param>
            <param name="proxy">IWebProxy instance, if a proxy should be used</param>
            <param name="credentials">ICredentials instance, if credentials have to be used</param>
            <param name="ifModifiedSince">Advanced Request Header info</param>
            <param name="eTag">Advanced Request Header info</param>
            <remarks><see cref="P:NewsComponents.Net.RequestParameter.SetCookies">SetCookies</see> is true by default</remarks>
        </member>
        <member name="M:NewsComponents.Net.RequestParameter.#ctor(System.Uri,System.String,System.Net.IWebProxy,System.Net.ICredentials,System.DateTime,System.String,System.Boolean)">
            <summary>
            Constructor initialize a RequestParameter instance.
            </summary>
            <param name="address">Requested Web Url</param>
            <param name="userAgent">User Agent string the request should send</param>
            <param name="proxy">IWebProxy instance, if a proxy should be used</param>
            <param name="credentials">ICredentials instance, if credentials have to be used</param>
            <param name="ifModifiedSince">Advanced Request Header info</param>
            <param name="eTag">Advanced Request Header info</param>
            <param name="setCookies">Set cookies on request</param>
        </member>
        <member name="M:NewsComponents.Net.RequestParameter.Create(System.String,System.String,System.Net.IWebProxy,System.Net.ICredentials,System.DateTime,System.String)">
            <summary>
            To be provided
            </summary>
            <param name="address"></param>
            <param name="userAgent"></param>
            <param name="proxy"></param>
            <param name="credentials"></param>
            <param name="ifModifiedSince"></param>
            <param name="eTag"></param>
            <returns></returns>
            <exception cref="T:System.UriFormatException">The URI specified in requestUriString is not a valid URI.</exception>
        </member>
        <member name="M:NewsComponents.Net.RequestParameter.Create(System.String,System.String,System.Net.IWebProxy,System.Net.ICredentials,System.DateTime,System.String,System.Boolean)">
            <summary>
            To be provided
            </summary>
            <param name="address"></param>
            <param name="userAgent"></param>
            <param name="proxy"></param>
            <param name="credentials"></param>
            <param name="ifModifiedSince"></param>
            <param name="eTag"></param>
            <param name="setCookies"></param>
            <returns></returns>
            <exception cref="T:System.UriFormatException">The URI specified in requestUriString is not a valid URI.</exception>
        </member>
        <member name="M:NewsComponents.Net.RequestParameter.Create(System.Uri,System.String,System.Net.IWebProxy,System.Net.ICredentials,System.DateTime,System.String)">
            <summary>
            To be provided
            </summary>
            <param name="address"></param>
            <param name="userAgent"></param>
            <param name="proxy"></param>
            <param name="credentials"></param>
            <param name="ifModifiedSince"></param>
            <param name="eTag"></param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Net.RequestParameter.Create(System.String,NewsComponents.Net.RequestParameter)">
            <summary>
            Creates a new RequestParameter instance.
            </summary>
            <param name="address"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Net.RequestParameter.Create(System.Net.ICredentials,NewsComponents.Net.RequestParameter)">
            <summary>
            Creates a new RequestParameter instance.
            </summary>
            <param name="credentials"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Net.RequestParameter.Create(System.Boolean,NewsComponents.Net.RequestParameter)">
            <summary>
            Creates a new RequestParameter instance.
            </summary>
            <param name="setCookies"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Net.RequestParameter.Create(System.String,System.Net.ICredentials,NewsComponents.Net.RequestParameter)">
            <summary>
            Creates a new RequestParameter instance.
            </summary>
            <param name="address">request url</param>
            <param name="credentials">The credentials.</param>
            <param name="p">The RequestParameter.</param>
            <returns></returns>
        </member>
        <member name="P:NewsComponents.Net.RequestParameter.RequestUri">
            <summary>
            Gets the Request Uri.
            </summary>
        </member>
        <member name="P:NewsComponents.Net.RequestParameter.UserAgent">
            <summary>
            Gets the Request user agent string
            </summary>
        </member>
        <member name="P:NewsComponents.Net.RequestParameter.Proxy">
            <summary>
            Gets the proxy.
            </summary>
        </member>
        <member name="P:NewsComponents.Net.RequestParameter.Credentials">
            <summary>
            Gets the credentials.
            </summary>
        </member>
        <member name="P:NewsComponents.Net.RequestParameter.LastModified">
            <summary>
            Gets the "last modified since" date
            </summary>
        </member>
        <member name="P:NewsComponents.Net.RequestParameter.ETag">
            <summary>
            Gets ETag header info
            </summary>
        </member>
        <member name="P:NewsComponents.Net.RequestParameter.SetCookies">
            <summary>
            Gets/Set if cookies should be set on request (taken from IE)
            </summary>
        </member>
        <member name="T:NewsComponents.RelationCosmos.RelationProxy">
            <summary>
            A base impl. of RelationBase.
            </summary>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationProxy.#ctor">
            <summary>
            Internal initializer
            </summary>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationProxy.#ctor(System.String,System.DateTime)">
            <summary>
            Public Initializer
            </summary>
            <param name="href"></param>
            <param name="pointInTime"></param>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationProxy.#ctor(System.String,System.Object,System.DateTime)">
            <summary>
            Public Initializer
            </summary>
            <param name="href"></param>
            <param name="realObject"></param>
            <param name="pointInTime"></param>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationProxy.#ctor(System.String,System.DateTime,System.Boolean)">
            <summary>
            Public Initializer
            </summary>
            <param name="href"></param>
            <param name="pointInTime"></param>
            <param name="adjustablePointInTime"></param>
        </member>
        <member name="M:NewsComponents.RelationCosmos.RelationProxy.#ctor(System.String,System.Object,System.DateTime,System.Boolean)">
            <summary>
            Public designated initializer
            </summary>
            <param name="href"></param>
            <param name="realObject"></param>
            <param name="pointInTime"></param>
            <param name="adjustablePointInTime"></param>
        </member>
        <member name="P:NewsComponents.RelationCosmos.RelationProxy.RealObject">
            <summary>
            The accessor to the real object
            </summary>
        </member>
        <member name="T:NewsComponents.Net.DownloadTaskState">
            <summary>
            The enumeration of DownloadTask states.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.DownloadTaskState.None">
            <summary>
            No state specified.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.DownloadTaskState.Downloading">
            <summary>
            Downloader is starting the download process.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.DownloadTaskState.Downloaded">
            <summary>
            Downloader has completed the download.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.DownloadTaskState.DownloadError">
            <summary>
            A download error occurred.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.DownloadTaskState.Cancelled">
            <summary>
            A new download was cancelled.
            </summary>
        </member>
        <member name="T:NewsComponents.Net.BITSDownloader">
            <summary>
            This downloader uses BITS technology to download files.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BITSDownloader.TimeToWaitDuringSynchronousDownload">
            <summary>
            This is used to wait for some time between checking the download status to avoid CPU consumtion.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BITSDownloader.BitsNoProgressTimeout">
            <summary>
            Maximum time to wait for a pregress event.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BITSDownloader.BitsMinimumRetryDelay">
            <summary>
            The delay between reties.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BITSDownloader.ExceptionCodeNotAnError">
            <summary>
            Constant for the COM error when an error is requested and no error have been raised.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BITSDownloader.TASK_JOBID_KEY">
            <summary>
            The key to the job Id to be stored in the task state
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BITSDownloader.CultureIdForGettingComErrorMessages">
            <summary>
            The culture Id.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BITSDownloader.bitsDownloaderJobs">
            <summary>
            Keeps all the pending downloader jobs.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BITSDownloader.cumulativeErrorMessage">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="M:NewsComponents.Net.BITSDownloader.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:NewsComponents.Net.BITSDownloader.OnDownloadStarted(NewsComponents.Net.TaskEventArgs)">
            <summary>
            Helper method to fire the event.
            </summary>
            <param name="e">The event information.</param>
        </member>
        <member name="M:NewsComponents.Net.BITSDownloader.OnDownloadProgress(NewsComponents.Net.DownloadTaskProgressEventArgs)">
            <summary>
            Helper method to fire the event.
            </summary>
            <param name="e">The event information.</param>
        </member>
        <member name="M:NewsComponents.Net.BITSDownloader.OnDownloadCompleted(NewsComponents.Net.TaskEventArgs)">
            <summary>
            Helper method to fire the event.
            </summary>
            <param name="e">The event information.</param>
        </member>
        <member name="M:NewsComponents.Net.BITSDownloader.OnDownloadError(NewsComponents.Net.DownloadTaskErrorEventArgs)">
            <summary>
            Helper method to fire the event.
            </summary>
            <param name="e">The event information.</param>
        </member>
        <member name="M:NewsComponents.Net.BITSDownloader.Download(NewsComponents.Net.DownloadTask,System.TimeSpan)">
            <summary>
            Synchronous download method implementation.
            </summary>
            <param name="task">The DownloadTask to process.</param>
            <param name="maxWaitTime">The maximum wait time.</param>
        </member>
        <member name="M:NewsComponents.Net.BITSDownloader.BeginDownload(NewsComponents.Net.DownloadTask)">
            <summary>
            Asynchronous download method implementation.
            </summary>
            <param name="task">The DownloadTask to process.</param>
        </member>
        <member name="M:NewsComponents.Net.BITSDownloader.CancelDownload(NewsComponents.Net.DownloadTask)">
            <summary>
            Cancels an asynhronous download operation.
            </summary>
            <param name="task">The <see cref="T:NewsComponents.Net.DownloadTask"/> for the operation.</param>
            <returns>Indicates whether the operation was canceled.</returns>
        </member>
        <member name="M:NewsComponents.Net.BITSDownloader.CheckForResumeAndProceed(NewsComponents.Net.IBackgroundCopyManager,NewsComponents.Net.DownloadTask,NewsComponents.Net.IBackgroundCopyJob@)">
            <summary>
            Verifies if the task has a download job assigned, meaning this is a retry.
            If a transferred job is detected, the job is completed and the event
            OnDownloadCompleted is raised.
            </summary>
            <param name="copyManager">The BITS background copy manager to use</param>
            <param name="task">The DownloadTask to get the data from</param>
            <param name="copyJob">If an in progress BITS job is found for this task, this job is returned on this parameter</param>
            <returns>A Boolean value indicating whether the job is completed or not.
            A True value means that the job has been completed by BITS while a False value
            means that the job doesn't exists or can be resumed.
            </returns>
        </member>
        <member name="M:NewsComponents.Net.BITSDownloader.FindTask(NewsComponents.Net.IBackgroundCopyJob)">
            <summary>
            Locate the DownloadTask associated with the given background job.
            </summary>
            <param name="pJob">The job reference.</param>
            <returns>The DownloadTask for that job.</returns>
        </member>
        <member name="M:NewsComponents.Net.BITSDownloader.WaitForDownload(NewsComponents.Net.DownloadTask,NewsComponents.Net.IBackgroundCopyJob,System.TimeSpan)">
            <summary>
            Waits for the download to complete, for the synchronous usage of the downloader.
            </summary>
            <param name="backgroundCopyJob">The job instance reference.</param>
            <param name="maxWaitTime">The maximum wait time.</param>
            <param name="task">The updater task instance.</param>
        </member>
        <member name="M:NewsComponents.Net.BITSDownloader.PrepareJob(NewsComponents.Net.IBackgroundCopyJob,NewsComponents.Net.DownloadTask)">
            <summary>
            Prepares a BITS job adding the files and creating the required folders.
            </summary>
            <param name="backgroundCopyJob">The BITS job information.</param>
            <param name="task">The DownloadTask instace.</param>
        </member>
        <member name="M:NewsComponents.Net.BITSDownloader.CreateCopyJob(NewsComponents.Net.IBackgroundCopyManager,NewsComponents.Net.IBackgroundCopyJob@,System.Guid@,System.String,System.String,NewsComponents.Net.DownloadTask)">
            <summary>
            Internal copy-job factory method.  Used to coordinate all aspects of a job set-up, 
            which includes creating a copy manager, creating a job within it, setting download
            parameters, and adding the job to our tracking collection for cleanup later
            </summary>
            <param name="copyManager">null reference to copy manager</param>
            <param name="copyJob">null reference to copy job</param>
            <param name="jobID">null reference to job id guid</param>
            <param name="jobName">string. Job name</param>
            <param name="jobDesc">string. Job description</param>
            <param name="task">DownloadTask. Used to get infos about credentials, proxy, etc.</param>
        </member>
        <member name="M:NewsComponents.Net.BITSDownloader.VerifyAndSetBackgroundCopyJobProxy(NewsComponents.Net.IBackgroundCopyJob,NewsComponents.Net.DownloadTask)">
            <summary>
            Method responsible for checking the proxy and proxy authentication type and setting the 
            appropriate credentials. If the NTLM authentication is used then 
            if the username and password are not provided then we use null values. For
            all other authentication schemes we need a username and password.
            </summary>
            <param name="backgroundCopyJob">BackgroundJob on which we need to set the credentials.</param>
            <param name="task">DownloadTask. Provides the infos about download credentials</param>
        </member>
        <member name="M:NewsComponents.Net.BITSDownloader.VerifyAndSetBackgroundCopyJobCredentials(NewsComponents.Net.IBackgroundCopyJob,NewsComponents.Net.DownloadTask)">
            <summary>
            Method responsible for checking the authentication type and setting the 
            appropriate credentials. If the NTLM authentication is used then 
            if the username and password are not provided then we use null values. For
            all other authentication schemes we need a username and password.
            </summary>
            <param name="backgroundCopyJob">BackgroundJob on which we need to set the credentials.</param>
            <param name="task">DownloadTask. Provides the infos about download credentials</param>
        </member>
        <member name="M:NewsComponents.Net.BITSDownloader.RemoveCopyJobEntry(System.Guid)">
            <summary>
            Removes a copy job from the internal lookup collection.
            </summary>
            <param name="jobID">GUID identifies of a job (job id).</param>
        </member>
        <member name="M:NewsComponents.Net.BITSDownloader.OnJobModification(NewsComponents.Net.DownloadTask,NewsComponents.Net.IBackgroundCopyJob)">
            <summary>
            Method called by BITS when the job is modified, this method is used to notify progress.
            </summary>
            <param name="task">The DownloadTask instance.</param>
            <param name="pJob">The BITS job reference.</param>
        </member>
        <member name="M:NewsComponents.Net.BITSDownloader.OnJobError(NewsComponents.Net.DownloadTask,NewsComponents.Net.IBackgroundCopyJob,NewsComponents.Net.IBackgroundCopyError,System.Exception)">
            <summary>
            Centralizes all chores related to stopping and cancelling a copy job, and getting back
            from BITS the errors incurred during the job.
            </summary>
            <param name="task">reference to the job associated task</param>
            <param name="pJob">reference to the copy job object (not job id)</param>
            <param name="pError">reference to the COM error reported by bits (might be null)</param>
            <param name="ex">reference to an exception cosidered as an error (might be null)</param>
        </member>
        <member name="M:NewsComponents.Net.BITSDownloader.OnJobTransferred(NewsComponents.Net.DownloadTask,NewsComponents.Net.IBackgroundCopyJob)">
            <summary>
            Method called by BITS when the job is completed.
            </summary>
            <param name="task">The Updater task instance.</param>
            <param name="pJob">The BITS job reeference.</param>
        </member>
        <member name="M:NewsComponents.Net.BITSDownloader.Dispose">
            <summary>
            Allows graceful cleanup of hard resources
            </summary>
        </member>
        <member name="M:NewsComponents.Net.BITSDownloader.Dispose(System.Boolean)">
            <summary>
            used by externally visible overload.
            </summary>
            <param name="isDisposing">whether or not to clean up managed + unmanaged/large (true) or just unmanaged(false)</param>
        </member>
        <member name="M:NewsComponents.Net.BITSDownloader.Finalize">
            <summary>
            Destructor/Finalizer
            </summary>
        </member>
        <member name="M:NewsComponents.Net.BITSDownloader.NewsComponents#Net#IBackgroundCopyCallback#JobTransferred(NewsComponents.Net.IBackgroundCopyJob)">
            <summary>
            BITS notifies about job finished using this method.
            </summary>
            <param name="pJob">The BITS job reference.</param>
        </member>
        <member name="M:NewsComponents.Net.BITSDownloader.NewsComponents#Net#IBackgroundCopyCallback#JobError(NewsComponents.Net.IBackgroundCopyJob,NewsComponents.Net.IBackgroundCopyError)">
            <summary>
            BITS notifies about job error using this method.
            </summary>
            <param name="pJob">The BITS job reference.</param>
            <param name="pError">The error information.</param>
        </member>
        <member name="M:NewsComponents.Net.BITSDownloader.NewsComponents#Net#IBackgroundCopyCallback#JobModification(NewsComponents.Net.IBackgroundCopyJob,System.UInt32)">
            <summary>
            BITS notifies about job finished using this method.
            </summary>
            <param name="pJob">The BITS job reference.</param>
            <param name="dwReserved">Reserved for BITS.</param>
        </member>
        <member name="E:NewsComponents.Net.BITSDownloader.DownloadProgress">
            <summary>
            Notifies the application of the download progress. 
            </summary>
        </member>
        <member name="E:NewsComponents.Net.BITSDownloader.DownloadCompleted">
            <summary>
            Notifies the application when the download is complete.
            </summary>
        </member>
        <member name="E:NewsComponents.Net.BITSDownloader.DownloadError">
            <summary>
            Notifies the application when there is a download error. 
            </summary>
        </member>
        <member name="E:NewsComponents.Net.BITSDownloader.DownloadStarted">
            <summary>
            Notifies the application that the download has started. 
            </summary>
        </member>
        <member name="T:NewsComponents.Net.BitsDownloadErrorException">
            <summary>
            Exception thrown by BITS downloader when an error is found.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BitsDownloadErrorException.contextForError">
            <summary>
            The context for the error.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BitsDownloadErrorException.errorCode">
            <summary>
            The error code detected.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BitsDownloadErrorException.contextDescription">
            <summary>
            The description of the context.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BitsDownloadErrorException.errorDescription">
            <summary>
            The description of the error.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BitsDownloadErrorException.protocol">
            <summary>
            The protocol name.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BitsDownloadErrorException.fileLocalName">
            <summary>
            The file name where the file will be copied.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.BitsDownloadErrorException.fileRemoteName">
            <summary>
            The remote file name that was downloaded.
            </summary>
        </member>
        <member name="M:NewsComponents.Net.BitsDownloadErrorException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:NewsComponents.Net.BitsDownloadErrorException.#ctor(NewsComponents.Net.IBackgroundCopyError,System.UInt32)">
            <summary>
            Creates an exception with the BITS error reference and a language id.
            </summary>
            <param name="error">The BITS error reference.</param>
            <param name="langID">The language Id.</param>
        </member>
        <member name="M:NewsComponents.Net.BitsDownloadErrorException.#ctor(System.String)">
            <summary>
            Creates an exception with the specified message.
            </summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:NewsComponents.Net.BitsDownloadErrorException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an exception with the specified message and the inner exception detected.
            </summary>
            <param name="message">The message string.</param>
            <param name="innerException">The inner exception reference.</param>
        </member>
        <member name="M:NewsComponents.Net.BitsDownloadErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor used by the serialization infrastructure.
            </summary>
            <param name="info">The serialization information for the object.</param>
            <param name="context">The context for the serialization.</param>
        </member>
        <member name="M:NewsComponents.Net.BitsDownloadErrorException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Used by the serialization infrastructure.
            </summary>
            <param name="info">The serialization information.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="P:NewsComponents.Net.BitsDownloadErrorException.Code">
            <summary>
            The error code.
            </summary>
        </member>
        <member name="P:NewsComponents.Net.BitsDownloadErrorException.Context">
            <summary>
            The error context.
            </summary>
        </member>
        <member name="P:NewsComponents.Net.BitsDownloadErrorException.ContextDescription">
            <summary>
            The context description.
            </summary>
        </member>
        <member name="P:NewsComponents.Net.BitsDownloadErrorException.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="P:NewsComponents.Net.BitsDownloadErrorException.Protocol">
            <summary>
            The protocol used.
            </summary>
        </member>
        <member name="P:NewsComponents.Net.BitsDownloadErrorException.LocalFileName">
            <summary>
            The local file name.
            </summary>
        </member>
        <member name="P:NewsComponents.Net.BitsDownloadErrorException.RemoteFileName">
            <summary>
            The remote file name.
            </summary>
        </member>
        <member name="T:NewsComponents.Search.LuceneSettings">
            <summary>
            LuceneSettings implements a persistent storage of
            settings to keep longer than the current session/application
            lifetime.
            </summary>
        </member>
        <member name="M:NewsComponents.Search.LuceneSettings.#ctor(NewsComponents.INewsComponentsConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.Search.LuceneSettings"/> class.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:NewsComponents.Search.LuceneSettings.GetIndexDirectory">
            <summary>
            Gets the index directory (returns a new object instance).
            </summary>
            <value>The index directory.</value>
        </member>
        <member name="M:NewsComponents.Search.LuceneSettings.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:NewsComponents.Search.LuceneSettings.IsFileBasedSearch">
            <summary>
            Gets a value indicating whether this search behavior is a file based search.
            </summary>
            <value>
            	<c>true</c> if this a is file based search config; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NewsComponents.Search.LuceneSettings.IsRAMBasedSearch">
            <summary>
            Gets a value indicating whether this search behavior is a RAM based search.
            </summary>
            <value>
            	<c>true</c> if this instance is RAM based search; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NewsComponents.Search.LuceneSettings.IndexPath">
            <summary>
            Gets the index path.
            </summary>
            <value>The index path.</value>
        </member>
        <member name="P:NewsComponents.Search.LuceneSettings.SearchIndexBehavior">
            <summary>
            Gets the search index behavior.
            </summary>
            <value>The search index behavior.</value>
        </member>
        <member name="P:NewsComponents.Search.LuceneSettings.LastIndexOptimization">
            <summary>
            Gets or sets the last index optimization date time.
            </summary>
            <value>The last index optimization.</value>
        </member>
        <member name="T:NewsComponents.Search.BooleanSearch.XMLDocument">
            <summary>
            XMLDocument is a concrete implementation of IDocument
            for searching XML-based resources.
            </summary>
        </member>
        <member name="T:NewsComponents.News.NntpWebRequest">
            <summary>
            Provides an NNTP-specific implementation of the WebRequest class. This class is 
            NOT thread safe. 
            </summary>
        </member>
        <member name="F:NewsComponents.News.NntpWebRequest.NntpUriScheme">
            <summary>
            Allowed/known NNTP Uri Scheme
            </summary>
        </member>
        <member name="F:NewsComponents.News.NntpWebRequest.NntpsUriScheme">
            <summary>
            Allowed/known NNTP Uri Scheme
            </summary>
        </member>
        <member name="F:NewsComponents.News.NntpWebRequest.NewsUriScheme">
            <summary>
            Allowed/known NNTP Uri Scheme
            </summary>
        </member>
        <member name="F:NewsComponents.News.NntpWebRequest.NntpDefaultServerPort">
            <summary>
            Default Nntp server port.
            </summary>
        </member>
        <member name="F:NewsComponents.News.NntpWebRequest.delegateTable">
            <summary>
            Hashtable used to store delegates between BeginXXX and EndXXX calls.
            </summary>
        </member>
        <member name="F:NewsComponents.News.NntpWebRequest.timeout">
            <summary>
            The length of time before the request times out. 
            </summary>
        </member>
        <member name="F:NewsComponents.News.NntpWebRequest.method">
            <summary>
            The protocol method to use in a request
            </summary>
        </member>
        <member name="F:NewsComponents.News.NntpWebRequest.downloadCount">
            <summary>
            The number of articles the NntpWebRequest should fetch from the server on a 
            NEWNEWS request. 
            </summary>
        </member>
        <member name="F:NewsComponents.News.NntpWebRequest.credentials">
            <summary>
            The credentials associated with this request.
            </summary>
        </member>
        <member name="F:NewsComponents.News.NntpWebRequest.requestUri">
            <summary>
            The URI of the request.
            </summary>
        </member>
        <member name="F:NewsComponents.News.NntpWebRequest.requestStream">
            <summary>
            Stream for writing output to the server.  
            </summary>
        </member>
        <member name="F:NewsComponents.News.NntpWebRequest.ifModifiedSince">
            <summary>
            Used to specify the age of messages that should be retrieved. Default value is 
            one year. 
            </summary>
        </member>
        <member name="M:NewsComponents.News.NntpWebRequest.#ctor">
            <summary>
            Must alkways specify a URI when creating an NNTP web request
            </summary>
        </member>
        <member name="M:NewsComponents.News.NntpWebRequest.#ctor(System.Uri)">
            <summary>
            Creates an NntpWebRequest with the specified request URI
            </summary>
            <param name="requestUri">The request URI</param>
        </member>
        <member name="M:NewsComponents.News.NntpWebRequest.Connect">
            <summary>
            Connects to the server and returns the connected NntpClient
            </summary>
            <returns>the connected NntpClient</returns>
        </member>
        <member name="M:NewsComponents.News.NntpWebRequest.Dispose">
            <summary>
            Close memory stream and open connections
            </summary>
        </member>
        <member name="M:NewsComponents.News.NntpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)">
            <summary>
            Provides an asynchronous version of the GetResponse method.
            </summary>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <returns>An IAsyncResult that references the asynchronous request</returns>
        </member>
        <member name="M:NewsComponents.News.NntpWebRequest.EndGetResponse(System.IAsyncResult)">
            <summary>
             Returns the NntpWebResponse 
            </summary>
            <param name="asyncResult">An IAsyncResult that references a pending request for a response</param>
            <returns>the NNTP response</returns>
        </member>
        <member name="M:NewsComponents.News.NntpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)">
            <summary>
            Provides an asynchronous version of the GetRequestStream method.
            </summary>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <returns>An IAsyncResult that references the asynchronous request</returns>
        </member>
        <member name="M:NewsComponents.News.NntpWebRequest.EndGetRequestStream(System.IAsyncResult)">
            <summary>
            Returns a Stream for writing data to the NNTP server.
            </summary>
            <param name="asyncResult">An IAsyncResult that references a pending request for a stream. </param>
            <returns>A Stream to write data to.</returns>
        </member>
        <member name="M:NewsComponents.News.NntpWebRequest.Create(System.Uri)">
            <summary>
            Used to create an NntpWebRequest class for agiven 'news' or 'nntp' URI
            </summary>
            <param name="uri">The 'news' or 'nntp' URI</param>
            <returns>An NntpWebRequest</returns>
        </member>
        <member name="M:NewsComponents.News.NntpWebRequest.Create(System.String)">
            <summary>
            Used to create an NntpWebRequest class for agiven 'news' or 'nntp' URI
            </summary>
            <param name="uri">The 'news' or 'nntp' URI</param>
            <returns>An NntpWebRequest</returns>
        </member>
        <member name="M:NewsComponents.News.NntpWebRequest.GetRequestStream">
            <summary>
            Returns a Stream for writing data to the Internet resource. 
            </summary>
            <remarks> Requesting the request stream causes a request to be sent to the server.
             The reason for doing this is so the user writes directly to the network stream.
             An alternate implementation could involve creating a memory stream and then copying
             that to the network stream but that is inefficient. </remarks>
            <returns>A Stream for writing data to the Internet resource</returns>
        </member>
        <member name="M:NewsComponents.News.NntpWebRequest.GetResponse">
            <summary>
            Returns the response to the NNTP request
            </summary>
            <returns>The NNTP response</returns>
        </member>
        <member name="M:NewsComponents.News.NntpWebRequest.GetResponse(System.Boolean)">
            <summary>
            Returns the response to the NNTP request
            </summary>
            <param name="asyncRequest">Indicates whether this method is being called as part of
            an async request. This tells us whether to use the Timeout value or not.</param>
            <returns>The NNTP response</returns>
        </member>
        <member name="P:NewsComponents.News.NntpWebRequest.Method">
            <summary>
            Gets or sets the protocol method to use in this request. The valid values for 
            this property are POST, NEWNEWS and LIST. 
            </summary>
            <remarks>The following are the results of the various NNTP methods 
                     POST - posts a message to a newsgroup
                     LIST - lists all the newsgroups available on the server
                     NEWNEWS - gets recent posts to the newsgroup
            </remarks>
        </member>
        <member name="P:NewsComponents.News.NntpWebRequest.IfModifiedSince">
            <summary>
            Used to inidcate the minimum age of messages that should be returned by the 
            response to this request. 
            </summary>
        </member>
        <member name="P:NewsComponents.News.NntpWebRequest.DownloadCount">
            <summary>
            The number of articles the NntpWebRequest should fetch from the server on a 
            NEWNEWS request. This property is only used if the news server doesn't understand
            how to process NEWNEWS requests that specify a date. 
            </summary>
        </member>
        <member name="P:NewsComponents.News.NntpWebRequest.Credentials">
            <summary>
            Gets or sets the credentials associated with this request.
            </summary>
        </member>
        <member name="P:NewsComponents.News.NntpWebRequest.RequestUri">
            <summary>
            The URI of the request. It should either be a 'news' or 'nntp' URI. Examples include
            news://news.microsoft.com/microsoft.public.xml and 
            nntp://news.microsoft.com/microsoft.public.test.here
            </summary>
        </member>
        <member name="P:NewsComponents.News.NntpWebRequest.Timeout">
            <summary>
            Gets or sets the length of time, in milliseconds, before the request times out.
            </summary>
            <remarks>The Timeout property indicates the length of time, in milliseconds, 
            until the request times out and throws a WebException. The Timeout property 
            affects only synchronous requests made with the GetResponse method. To time 
            out asynchronous requests, use the Abort method.</remarks>
        </member>
        <member name="P:NewsComponents.News.NntpWebRequest.CanGetRequestStream">
             <summary>
            This read-only propery does a test against the object to verify that
            we can send data. We can only send data with a POST everything else is disallowed.
            </summary>		 		         
        </member>
        <member name="P:NewsComponents.News.NntpWebRequest.CanGetResponseStream">
             <summary>
            This read-only propery does a test against the object to verify that
            we can receive data as opposed to just a status code. Only LIST and 
            GROUP requests send back a result stream. 
            </summary>	
        </member>
        <member name="T:NewsComponents.News.NntpWebRequest.GetRequestStreamDelegate">
            <summary>
            Delegate for calling GetRequestStream(). 
            </summary>
        </member>
        <member name="T:NewsComponents.News.NntpWebRequest.GetResponseDelegate">
            <summary>
            Delegate for calling GetResponse().
            </summary>
        </member>
        <member name="T:NewsComponents.Net.ResourceAuthorizationException">
            <summary>
            ResourceAuthorizationException is raised if a HTTP request results in a statuscode 401.
            </summary>
        </member>
        <member name="M:NewsComponents.Net.ResourceAuthorizationException.#ctor">
            <summary></summary>
        </member>
        <member name="M:NewsComponents.Net.ResourceAuthorizationException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:NewsComponents.Net.ResourceAuthorizationException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="T:NewsComponents.Net.ResourceGoneException">
            <summary>
            ResourceGoneException is raised if a HTTP request results in a statuscode 410.
            </summary>
        </member>
        <member name="M:NewsComponents.Net.ResourceGoneException.#ctor">
            <summary></summary>
        </member>
        <member name="M:NewsComponents.Net.ResourceGoneException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:NewsComponents.Net.ResourceGoneException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="T:NewsComponents.Net.FeedRequestException">
            <summary>
            FeedRequestException is raised if a feed request fails.
            </summary>
        </member>
        <member name="M:NewsComponents.Net.FeedRequestException.#ctor">
            <summary></summary>
        </member>
        <member name="M:NewsComponents.Net.FeedRequestException.#ctor(System.String,System.Collections.Hashtable)">
            <summary></summary>
        </member>
        <member name="M:NewsComponents.Net.FeedRequestException.#ctor(System.String,System.Exception,System.Collections.Hashtable)">
            <summary></summary>
        </member>
        <member name="M:NewsComponents.Net.FeedRequestException.#ctor(System.String,System.Net.WebExceptionStatus,System.Collections.Hashtable)">
            <summary></summary>
        </member>
        <member name="M:NewsComponents.Net.FeedRequestException.#ctor(System.String,System.Exception,System.Net.WebExceptionStatus,System.Collections.Hashtable)">
            <summary></summary>
        </member>
        <member name="P:NewsComponents.Net.FeedRequestException.TechnicalContact">
            <summary>
            Gets the technical contact info (e-mail)
            </summary>
        </member>
        <member name="P:NewsComponents.Net.FeedRequestException.Publisher">
            <summary>
            Gets the publisher contact info (e-mail)
            </summary>
        </member>
        <member name="P:NewsComponents.Net.FeedRequestException.FullTitle">
            <summary>
            Gets the full path and title of the feed within the treeview (UI)
            </summary>
        </member>
        <member name="P:NewsComponents.Net.FeedRequestException.PublisherHomepage">
            <summary>
            Gets the publisher homepage (HTML Url)
            </summary>
        </member>
        <member name="P:NewsComponents.Net.FeedRequestException.Generator">
            <summary>
            Gets the generator info (usually generator software name and version)
            </summary>
        </member>
        <member name="P:NewsComponents.Net.FeedRequestException.Feed">
            <summary>
            Gets the feedsFeed causing the exception
            </summary>
        </member>
        <member name="T:NewsComponents.Feed.SyndicationFormat">
            <summary>
            Supported Feed Formats (subscription).
            </summary>
        </member>
        <member name="F:NewsComponents.Feed.SyndicationFormat.Rss">
            <summary>
            Dave Winer's Family of specs including RSS 0.91 &amp; RSS 2.0
            </summary>
        </member>
        <member name="F:NewsComponents.Feed.SyndicationFormat.Rdf">
            <summary>
            The RDF based syndication formats such as RSS 0.9 and RSS 1.0 
            </summary>
        </member>
        <member name="F:NewsComponents.Feed.SyndicationFormat.Atom">
            <summary>
            The Atom syndication format
            </summary>
        </member>
        <member name="F:NewsComponents.Feed.SyndicationFormat.Unknown">
            <summary>
            An unknown and hence unsupported feed format
            </summary>
        </member>
        <member name="T:NewsComponents.Feed.RssParser">
            <summary>
            Class for managing RSS feeds. This class is NOT thread-safe.
            </summary>
        </member>
        <member name="F:NewsComponents.Feed.RssParser.global_proxy">
            <summary>
            Proxy server information used for connections when fetching feeds. 
            </summary>
        </member>
        <member name="F:NewsComponents.Feed.RssParser.offline">
            <summary>
            Indicates whether the application is offline or not. 
            </summary>
        </member>
        <member name="M:NewsComponents.Feed.RssParser.CanProcessUrl(System.String)">
            <summary>
            Returns true, if the RssParser is able to process the url
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="F:NewsComponents.Feed.RssParser.owner">
            <summary>
            The owner, used for internal callbacks
            </summary>
        </member>
        <member name="M:NewsComponents.Feed.RssParser.#ctor">
            <summary>
            Initializes class. 
            </summary>
        </member>
        <member name="M:NewsComponents.Feed.RssParser.MakeRssItem(NewsComponents.Feed.feedsFeed,System.Xml.XmlReader)">
            <summary>
            Constructs an NewsItem object out of an XmlNode containing an RSS &lt;item&gt;
            </summary>
            <param name="f">The feed object the NewsItem being created belongs to</param>
            <param name="reader">XmlReader</param>
            <returns>An NewsItem object containing the information in the XML node passed in.</returns>
        </member>
        <member name="M:NewsComponents.Feed.RssParser.MakeRssItem(NewsComponents.Feed.feedsFeed,System.Xml.XmlReader,System.Object[],System.DateTime)">
            <summary>
            Constructs an NewsItem object out of an XmlReader positioned on an RSS &lt;item&gt;
            </summary>
            <param name="f">The feed object the NewsItem being created belongs to</param>
            <param name="reader">The RSS item</param>
            <param name="atomized_strings">An object array containing the common element names that will be tested for in the feed. The objects in 
            the array are from the XmlReader's nametable</param>
            <param name="defaultItemDate">The default item date to be used if there is no/invalid date information on an item.</param>
            <returns>An NewsItem object containing the information in the XmlReader passed in.</returns>
        </member>
        <member name="M:NewsComponents.Feed.RssParser.MakeAtomItem(NewsComponents.Feed.feedsFeed,System.Xml.XmlReader)">
            <summary>
            Constructs an NewsItem object out of an XmlNode containing an ATOM &lt;entry&gt;
            </summary>
            <param name="f">The feed object the NewsItem being created belongs to</param>
            <param name="reader">XmlReader</param>
            <returns>An NewsItem object containing the information in the XML node passed in.</returns>
        </member>
        <member name="M:NewsComponents.Feed.RssParser.ResolveRelativeUrl(System.Xml.XmlReader,System.String)">
            <summary>
            Resolves a relative URL using the Base URI of the input of XmlReader only if 
            it is an XmlBaseAwareXmlValidatingReader.
            </summary>
            <param name="reader">The input XmlReader</param>
            <param name="url">The URL to resolve</param>
            <returns>The resolved URL</returns>
        </member>
        <member name="M:NewsComponents.Feed.RssParser.MakeAtomItem(NewsComponents.Feed.feedsFeed,System.Xml.XmlReader,System.Object[],System.DateTime)">
            <summary>
            Constructs an NewsItem object out of an XmlReader positioned on an RSS &lt;item&gt;
            </summary>
            <param name="f">The feed object the NewsItem being created belongs to</param>
            <param name="reader">The RSS item</param>
            <param name="atomized_strings">An object array containing the common element names that will be tested for in the feed. The objects in 
            the array are from the XmlReader's nametable</param>
            <param name="defaultItemDate">The default item date to be used if there is no/invalid date information on an item.</param>
            <returns>An NewsItem object containing the information in the XmlReader passed in.</returns>
        </member>
        <member name="M:NewsComponents.Feed.RssParser.GetItemsForFeed(NewsComponents.Feed.feedsFeed)">
            <summary>
            Reads the RSS feed from the feedsFeed link then caches and returns the feed items 
            in an array list.
            </summary>
            <param name="f">Information about the feed. This information is updated based
            on the results of processing the feed. </param>
            <returns>An arraylist of RSS items (i.e. instances of the NewsItem class)</returns>
            <exception cref="T:System.ApplicationException">If the RSS feed is not 
            version 0.91, 1.0 or 2.0</exception>
            <exception cref="T:System.Xml.XmlException">If an error occured parsing the 
            RSS feed</exception>	
        </member>
        <member name="M:NewsComponents.Feed.RssParser.GetItemsForFeed(System.String)">
            <summary>
            Reads the RSS feed from the feedsFeed link then caches and returns the feed items 
            in an array list.
            </summary>
            <param name="feedUrl">The feed Url.</param>
            <returns>An arraylist of RSS items (i.e. instances of the NewsItem class)</returns>
            <exception cref="T:System.ApplicationException">If the RSS feed is not 
            version 0.91, 1.0 or 2.0</exception>
            <exception cref="T:System.Xml.XmlException">If an error occured parsing the 
            RSS feed</exception>	
        </member>
        <member name="M:NewsComponents.Feed.RssParser.GetItemsForFeed(NewsComponents.Feed.feedsFeed,System.Xml.XmlReader,System.Boolean)">
            <summary>
            Reads the RSS feed from the stream then caches and returns the feed items 
            in an array list.
            </summary>
            <remarks>If the feedUrl is currently not stored in this object's internal table 
            then it is added/</remarks>		
            <param name="f">Information about the feed. This information is updated based
            on the results of processing the feed. </param>
            <param name="feedReader">A reader containing an RSS feed.</param>				
            <param name="cachedStream">Flag states update last retrieved date on feed only 
            if the item was not cached. Indicates whether the lastretrieved date is updated
            on the feedsFeed object passed in. </param>
            <returns>A FeedInfo object which represents the feed</returns>
            <exception cref="T:System.ApplicationException">If the RSS feed is not 
            version 0.91, 1.0 or 2.0</exception>
            <exception cref="T:System.Xml.XmlException">If an error occured parsing the 
            RSS feed</exception>	
        </member>
        <member name="M:NewsComponents.Feed.RssParser.FillNameTable(System.Xml.XmlNameTable)">
            <summary>
            This method fills a particular NameTable with the element names from RSS and
            ATOM that RSS Bandit checks for. After filling the name table it returns an 
            array containing the atomized strings.
            </summary>
            <param name="nt">The name table to fill</param>
            <returns>An array containing the atomized strings added to the name table</returns>
        </member>
        <member name="M:NewsComponents.Feed.RssParser.GetItemsForFeed(NewsComponents.Feed.feedsFeed,System.IO.Stream,System.Boolean)">
            <summary>
            Reads the RSS feed from the stream then caches and returns the feed items 
            in an array list.
            </summary>
            <remarks>If the feedUrl is currently not stored in this object's internal table 
            then it is added/</remarks>		
            <param name="f">Information about the feed. This information is updated based
            on the results of processing the feed. </param>
            <param name="feedStream">A stream containing an RSS feed.</param>				
            <param name="cachedStream">Flag states update last retrieved date on feed only 
            if the item was not cached. Indicates whether the lastretrieved date is updated
            on the feedsFeed object passed in. </param>
            <returns>A FeedInfo object which represents the feed</returns>
            <exception cref="T:System.ApplicationException">If the RSS feed is not 
            version 0.91, 1.0 or 2.0</exception>
            <exception cref="T:System.Xml.XmlException">If an error occured parsing the 
            RSS feed</exception>	
        </member>
        <member name="M:NewsComponents.Feed.RssParser.GetContentFromAtomElement(System.Xml.XmlReader,System.Boolean@)">
            <summary>
            Figures out how to process an ATOM content construct which is an element 
            that may have a specified MIME type and escaping mode. 
            </summary>
            <param name="element">The element whose string contents are being extracted</param>
            <param name="onNextElement">indicates whether the XML reader is positioned on the end element of 
            the content or on next element</param>
            <returns>The string content of the element after relevant escaping has been done</returns>
        </member>
        <member name="M:NewsComponents.Feed.RssParser.GetMimeTypeOfAtomElement(System.Xml.XmlReader)">
            <summary>
            Returns the MIME type of an ATOM content node
            </summary>
            <param name="element">The ATOM element</param>
            <returns>The MIME type of the node's content</returns>
        </member>
        <member name="M:NewsComponents.Feed.RssParser.ReadElementString(System.Xml.XmlReader)">
            <summary>
            This is a helper method to get around the fact that XmlReader.ReadString and 
            XmlReader.ReadElementString don't work in the face of nested markup. 
            </summary>
            <remarks>It is assumed that the XmlReader is positioned within the element</remarks>
            <param name="reader">The input XmlReader positioned within the element</param>
            <returns>The string content of the element</returns>
        </member>
        <member name="M:NewsComponents.Feed.RssParser.ReadElementUrl(System.Xml.XmlReader)">
            <summary>
            This is a helper method to get a valid url from element content. 
            </summary>
            <remarks>It is assumed that the XmlReader is positioned within the element</remarks>
            <param name="reader">The input XmlReader positioned within the element</param>
            <returns>The url (string) content of the element</returns>
        </member>
        <member name="M:NewsComponents.Feed.RssParser.ProcessFeedElements(NewsComponents.Feed.feedsFeed,System.Xml.XmlReader,System.Object[],System.String,NewsComponents.Feed.SyndicationFormat,System.String@,System.String@,System.String@,System.String@,System.DateTime@,System.Collections.Hashtable,System.Collections.ArrayList,System.DateTime,System.String@)">
            <summary>
             Processes the channel level elements of the feed. 
            </summary>
            <param name="f">The object which contains information about the feed</param>
            <param name="reader">The XML reader positioned within the feed. It should be positioned on the channel element.</param>
            <param name="atomized_strings">An object array containing the common element names that will be tested for in the feed. The objects in 
            the array are from the XmlReader's nametable</param>
            <param name="rssNamespaceUri"></param>
            <param name="format">The syndication format of the feed</param>
            <param name="feedDescription">Description of the feed</param>
            <param name="feedLink">The link to the homepage syndicated in the feed</param>
            <param name="feedTitle">The title of the homepage syndicated by the feed</param>
            <param name="maxItemAge">Maximum amount of time to keep items</param>
            <param name="channelBuildDate">The value of the lastBuildDate for the feed</param>
            <param name="optionalElements">Any other optional elements in the feed such as images</param>
            <param name="items">Items in the feed</param>
            <param name="defaultItemDate">Default DateTime for the items</param>
            <param name="language">The language of the feed</param>
        </member>
        <member name="M:NewsComponents.Feed.RssParser.PostCommentViaCommentAPI(System.String,NewsComponents.NewsItem,NewsComponents.NewsItem,System.Net.ICredentials)">
            <summary>
            Posts a comment to a website using the CommentAPI specification described at 
            http://wellformedweb.org/story/9 
            </summary>
            <param name="url">The URL to post the comment to</param>
            <param name="item2post">An RSS item that will be posted to the website</param>
            <param name="inReply2item">An RSS item that is the post parent</param>
            <param name="credentials">Credentials to use.</param>
            <returns>The HTTP Status code returned</returns>
            <exception cref="T:System.Net.WebException">If an error occurs when the POSTing the 
            comment</exception>
        </member>
        <member name="P:NewsComponents.Feed.RssParser.GlobalProxy">
            <summary>
            Proxy server information used for connections when fetching feeds. 
            </summary>
        </member>
        <member name="P:NewsComponents.Feed.RssParser.Offline">
            <summary>
            Indicates whether the application is offline or not. 
            </summary>
        </member>
        <member name="T:NewsComponents.Feed.XmlBaseAwareXmlValidatingReader">
            <summary>
            An XmlValidatingReader that knows how to process xml:base and always provide the correct base URI
            </summary>
            <remarks>Originally obtained from http://www.tkachenko.com/blog/archives/000333.html</remarks>
        </member>
        <member name="T:NewsComponents.Feed.XmlBaseState">
            <summary>
            Helper class used by XmlBaseAwareXmlValidatingReader. 
            </summary>
        </member>
        <member name="T:NewsComponents.Feed.ProxyXmlUrlResolver">
            <summary>
            Helper class for resolving DTDs in feeds when connecting through a proxy 
            </summary>
        </member>
        <member name="M:NewsComponents.Feed.ProxyXmlUrlResolver.#ctor(System.Net.IWebProxy)">
            <summary>
            Initializes the ProxyXmlUrlResolver with the specified proxy settings.
            </summary>
            <param name="proxy">The proxy connection used when resolving feeds</param>
        </member>
        <member name="F:NewsComponents.Feed.ProxyXmlUrlResolver.proxy">
            <summary>
            The proxy used when connecting. 
            </summary>
        </member>
        <member name="M:NewsComponents.Feed.ProxyXmlUrlResolver.GetEntity(System.Uri,System.String,System.Type)">
            <summary>
            Maps a URI to an object containing the actual resource.
            </summary>
            <param name="absoluteUri">The URI to fetch the entity from</param>
            <param name="role">The current implementation does not use this parameter when resolving URIs. This is provided for future extensibility purposes. For example, this can be mapped to the 
             xlink:role and used as an implementation specific argument in other scenarios. </param>
            <param name="ofObjectToReturn">The type of object to return. The current implementation only returns System.IO.Stream objects.</param>
            <returns>A stream containing the requested entity</returns>
        </member>
        <member name="T:NewsComponents.Feed.feeds">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feeds.feed">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feeds.categories">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feeds.listviewLayouts">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feeds.nntpservers">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feeds.identities">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feeds.refreshrate">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feeds.refreshrateSpecified">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feeds.createsubfoldersforenclosures">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feeds.createsubfoldersforenclosuresSpecified">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feeds.downloadenclosures">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feeds.downloadenclosuresSpecified">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feeds.enclosurecachesize">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feeds.enclosurecachesizeSpecified">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feeds.numtodownloadonnewfeed">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feeds.numtodownloadonnewfeedSpecified">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feeds.enclosurealert">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feeds.enclosurealertSpecified">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feeds.markitemsreadonexit">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feeds.markitemsreadonexitSpecified">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feeds.enclosurefolder">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feeds.podcastfolder">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feeds.podcastfileexts">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feeds.listviewlayout">
            <summary>ID to an FeedColumnLayout</summary>
             <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feeds.maxitemage">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feeds.stylesheet">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feeds.AnyAttr">
            <remarks/>
        </member>
        <member name="T:NewsComponents.Feed.listviewLayout">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.listviewLayout.ID">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.listviewLayout.AnyAttr">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.listviewLayout.FeedColumnLayout">
            <remarks/>
        </member>
        <member name="T:NewsComponents.Feed.IFeedColumnLayout">
            <summary>
            Summary description for IFeedColumnLayout.
            </summary>
        </member>
        <member name="M:NewsComponents.Feed.FeedColumnLayout.Equals(System.Object)">
            <summary>
            Compares two layouts for equality. This method also compares the column widths 
            when determining equality. 
            </summary>
            <param name="obj">the object to compare</param>
            <returns>true if they are equal</returns>
        </member>
        <member name="M:NewsComponents.Feed.FeedColumnLayout.Equals(System.Object,System.Boolean)">
            <summary>
            Compares  two layouts for equality.
            </summary>
            <param name="obj">the objects to compare</param>
            <param name="ignoreColumnWidths">indicates whether column widths should be ignored</param>
            <returns>true if they are equal</returns>
        </member>
        <member name="M:NewsComponents.Feed.FeedColumnLayout.IsSimilarFeedLayout(NewsComponents.Feed.FeedColumnLayout)">
            <summary>
            Returns true, if the layout is a kind of a feed layout (global, individual) and
            they are equal except for column widhts.
            </summary>
            <param name="layout"></param>
            <returns>bool</returns>
        </member>
        <member name="M:NewsComponents.Feed.FeedColumnLayout.IsSimilarCategoryLayout(NewsComponents.Feed.FeedColumnLayout)">
            <summary>
            Returns true, if the layout is a kind of a category layout (global, individual) and
            they are equal except for column widhts.
            </summary>
            <param name="layout"></param>
            <returns>bool</returns>
        </member>
        <member name="T:NewsComponents.Feed.category">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.category.markitemsreadonexit">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.category.markitemsreadonexitSpecified">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.category.downloadenclosures">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.category.downloadenclosuresSpecified">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.category.enclosurefolder">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.category.listviewlayout">
            <summary>ID to an FeedColumnLayout</summary>
             <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.category.stylesheet">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.category.refreshrate">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.category.refreshrateSpecified">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.category.maxitemage">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.category.Value">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.category.parent">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.category.enclosurealert">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.category.enclosurealertSpecified">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.category.AnyAttr">
            <remarks/>
        </member>
        <member name="T:NewsComponents.Feed.feedsFeed">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feedsFeed.title">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feedsFeed.link">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feedsFeed.refreshrate">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feedsFeed.refreshrateSpecified">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feedsFeed.lastretrieved">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feedsFeed.lastretrievedSpecified">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feedsFeed.etag">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feedsFeed.cacheurl">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feedsFeed.maxitemage">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feedsFeed.storiesrecentlyviewed">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feedsFeed.deletedstories">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feedsFeed.lastmodified">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feedsFeed.lastmodifiedSpecified">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feedsFeed.authUser">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feedsFeed.authPassword">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feedsFeed.listviewlayout">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feedsFeed.favicon">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feedsFeed.downloadenclosures">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feedsFeed.downloadenclosuresSpecified">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feedsFeed.enclosurefolder">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feedsFeed.replaceitemsonrefresh">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feedsFeed.replaceitemsonrefreshSpecified">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feedsFeed.stylesheet">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feedsFeed.newsaccount">
            <remarks>Reference the corresponding NntpServerDefinition</remarks>
        </member>
        <member name="F:NewsComponents.Feed.feedsFeed.markitemsreadonexit">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feedsFeed.markitemsreadonexitSpecified">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feedsFeed.Any">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feedsFeed.alertEnabled">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feedsFeed.alertEnabledSpecified">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feedsFeed.enclosurealert">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feedsFeed.enclosurealertSpecified">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feedsFeed.category">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feedsFeed.AnyAttr">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feedsFeed.causedExceptionCount">
            <remarks>Number of exceptions caused on requests</remarks>
        </member>
        <member name="F:NewsComponents.Feed.feedsFeed.Tag">
            <remarks>Can be used to store any attached data</remarks>
        </member>
        <member name="F:NewsComponents.Feed.feedsFeed.containsNewMessages">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.feedsFeed.containsNewComments">
            <remarks/>
        </member>
        <member name="M:NewsComponents.Feed.feedsFeed.GetElementWildCardValue(System.String,System.String)">
            <summary>
            Gets the value of a particular wildcard element. If the element is not found then 
            null is returned
            </summary>
            <param name="namespaceUri"></param>
            <param name="localName"></param>
            <returns>The value of the wildcard element obtained by calling XmlElement.InnerText
            or null if the element is not found. </returns>
        </member>
        <member name="P:NewsComponents.Feed.feedsFeed.id">
            <remarks/>
        </member>
        <member name="P:NewsComponents.Feed.feedsFeed.causedException">
            <remarks>True, if the feed caused an exception on request to prevent sequenced
            error reports on every automatic download</remarks>
        </member>
        <member name="T:NewsComponents.Feed.UserIdentity">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.UserIdentity.AnyAttr">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.UserIdentity.Any">
            <remarks/>
        </member>
        <member name="P:NewsComponents.Feed.UserIdentity.Name">
            <remarks/>
        </member>
        <member name="P:NewsComponents.Feed.UserIdentity.RealName">
            <remarks/>
        </member>
        <member name="P:NewsComponents.Feed.UserIdentity.Organization">
            <remarks/>
        </member>
        <member name="P:NewsComponents.Feed.UserIdentity.MailAddress">
            <remarks/>
        </member>
        <member name="P:NewsComponents.Feed.UserIdentity.ResponseAddress">
            <remarks/>
        </member>
        <member name="P:NewsComponents.Feed.UserIdentity.ReferrerUrl">
            <remarks/>
        </member>
        <member name="P:NewsComponents.Feed.UserIdentity.Signature">
            <remarks/>
        </member>
        <member name="T:NewsComponents.Feed.NntpServerDefinition">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.NntpServerDefinition.PreventDownloadOnRefreshSpecified">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.NntpServerDefinition.UseSecurePasswordAuthenticationSpecified">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.NntpServerDefinition.PortSpecified">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.NntpServerDefinition.UseSSLSpecified">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.NntpServerDefinition.TimeoutSpecified">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.NntpServerDefinition.AnyAttr">
            <remarks/>
        </member>
        <member name="F:NewsComponents.Feed.NntpServerDefinition.Any">
            <remarks/>
        </member>
        <member name="P:NewsComponents.Feed.NntpServerDefinition.Name">
            <remarks/>
        </member>
        <member name="P:NewsComponents.Feed.NntpServerDefinition.DefaultIdentity">
            <remarks/>
        </member>
        <member name="P:NewsComponents.Feed.NntpServerDefinition.PreventDownloadOnRefresh">
            <remarks/>
        </member>
        <member name="P:NewsComponents.Feed.NntpServerDefinition.Server">
            <remarks/>
        </member>
        <member name="P:NewsComponents.Feed.NntpServerDefinition.AuthUser">
            <remarks/>
        </member>
        <member name="P:NewsComponents.Feed.NntpServerDefinition.AuthPassword">
            <remarks/>
        </member>
        <member name="P:NewsComponents.Feed.NntpServerDefinition.UseSecurePasswordAuthentication">
            <remarks/>
        </member>
        <member name="P:NewsComponents.Feed.NntpServerDefinition.Port">
            <remarks/>
        </member>
        <member name="P:NewsComponents.Feed.NntpServerDefinition.UseSSL">
            <remarks>Makes the 'nntp:' a 'nntps:'</remarks>
        </member>
        <member name="P:NewsComponents.Feed.NntpServerDefinition.Timeout">
            <remarks/>
        </member>
        <member name="T:NewsComponents.Collections.IFeedColumnLayoutCollection">
            <summary>
            Defines size, enumerators, and synchronization methods for strongly
            typed collections of <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> elements.
            </summary>
            <remarks>
            <b>IFeedColumnLayoutCollection</b> provides an <see cref="T:System.Collections.ICollection"/>
            that is strongly typed for <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> elements.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.IFeedColumnLayoutCollection.CopyTo(NewsComponents.Feed.FeedColumnLayout[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:NewsComponents.Collections.IFeedColumnLayoutCollection"/> to a one-dimensional <see cref="T:System.Array"/>
            of <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> elements, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the
            <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> elements copied from the <see cref="T:NewsComponents.Collections.IFeedColumnLayoutCollection"/>.
            The <b>Array</b> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/>
            at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:NewsComponents.Collections.IFeedColumnLayoutCollection"/> is greater
            than the available space from <paramref name="arrayIndex"/> to the end of the destination
            <paramref name="array"/>.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IFeedColumnLayoutCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:NewsComponents.Collections.IFeedColumnLayoutEnumerator"/> that can
            iterate through the <see cref="T:NewsComponents.Collections.IFeedColumnLayoutCollection"/>.
            </summary>
            <returns>An <see cref="T:NewsComponents.Collections.IFeedColumnLayoutEnumerator"/>
            for the entire <see cref="T:NewsComponents.Collections.IFeedColumnLayoutCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.IEnumerable.GetEnumerator"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IFeedColumnLayoutCollection.Count">
            <summary>
            Gets the number of elements contained in the
            <see cref="T:NewsComponents.Collections.IFeedColumnLayoutCollection"/>.
            </summary>
            <value>The number of elements contained in the
            <see cref="T:NewsComponents.Collections.IFeedColumnLayoutCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ICollection.Count"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IFeedColumnLayoutCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the
            <see cref="T:NewsComponents.Collections.IFeedColumnLayoutCollection"/> is synchronized (thread-safe).
            </summary>
            <value><c>true</c> if access to the <see cref="T:NewsComponents.Collections.IFeedColumnLayoutCollection"/> is
            synchronized (thread-safe); otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ICollection.IsSynchronized"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IFeedColumnLayoutCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access
            to the <see cref="T:NewsComponents.Collections.IFeedColumnLayoutCollection"/>.
            </summary>
            <value>An object that can be used to synchronize access
            to the <see cref="T:NewsComponents.Collections.IFeedColumnLayoutCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ICollection.SyncRoot"/> for details.</remarks>
        </member>
        <member name="T:NewsComponents.Collections.IFeedColumnLayoutList">
            <summary>
            Represents a strongly typed collection of <see cref="T:NewsComponents.Feed.FeedColumnLayout"/>
            objects that can be individually accessed by index.
            </summary>
            <remarks>
            <b>IFeedColumnLayoutList</b> provides an <see cref="T:System.Collections.IList"/>
            that is strongly typed for <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> elements.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.IFeedColumnLayoutList.Add(NewsComponents.Feed.FeedColumnLayout)">
            <summary>
            Adds a <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> to the end
            of the <see cref="T:NewsComponents.Collections.IFeedColumnLayoutList"/>.
            </summary>
            <param name="value">The <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> object
            to be added to the end of the <see cref="T:NewsComponents.Collections.IFeedColumnLayoutList"/>.
            This argument can be a null reference.
            </param>
            <returns>The <see cref="T:NewsComponents.Collections.IFeedColumnLayoutList"/> index at which
            the <paramref name="value"/> has been added.</returns>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IFeedColumnLayoutList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IFeedColumnLayoutList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Add(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IFeedColumnLayoutList.Clear">
            <summary>
            Removes all elements from the <see cref="T:NewsComponents.Collections.IFeedColumnLayoutList"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IFeedColumnLayoutList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IFeedColumnLayoutList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Clear"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IFeedColumnLayoutList.Contains(NewsComponents.Feed.FeedColumnLayout)">
            <summary>
            Determines whether the <see cref="T:NewsComponents.Collections.IFeedColumnLayoutList"/>
            contains the specified <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> element.
            </summary>
            <param name="value">The <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> object
            to locate in the <see cref="T:NewsComponents.Collections.IFeedColumnLayoutList"/>.
            This argument can be a null reference.
            </param>
            <returns><c>true</c> if <paramref name="value"/> is found in the
            <see cref="T:NewsComponents.Collections.IFeedColumnLayoutList"/>; otherwise, <c>false</c>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Contains(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IFeedColumnLayoutList.IndexOf(NewsComponents.Feed.FeedColumnLayout)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified
            <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> in the <see cref="T:NewsComponents.Collections.IFeedColumnLayoutList"/>.
            </summary>
            <param name="value">The <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> object
            to locate in the <see cref="T:NewsComponents.Collections.IFeedColumnLayoutList"/>.
            This argument can be a null reference.
            </param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="value"/>
            in the <see cref="T:NewsComponents.Collections.IFeedColumnLayoutList"/>, if found; otherwise, -1.
            </returns>
            <remarks>Please refer to <see cref="M:System.Collections.IList.IndexOf(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IFeedColumnLayoutList.Insert(System.Int32,NewsComponents.Feed.FeedColumnLayout)">
            <summary>
            Inserts a <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> element into the
            <see cref="T:NewsComponents.Collections.IFeedColumnLayoutList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which
            <paramref name="value"/> should be inserted.</param>
            <param name="value">The <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> object
            to insert into the <see cref="T:NewsComponents.Collections.IFeedColumnLayoutList"/>.
            This argument can be a null reference.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is greater than
            <see cref="P:NewsComponents.Collections.IFeedColumnLayoutCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IFeedColumnLayoutList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IFeedColumnLayoutList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IFeedColumnLayoutList.Remove(NewsComponents.Feed.FeedColumnLayout)">
            <summary>
            Removes the first occurrence of the specified <see cref="T:NewsComponents.Feed.FeedColumnLayout"/>
            from the <see cref="T:NewsComponents.Collections.IFeedColumnLayoutList"/>.
            </summary>
            <param name="value">The <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> object
            to remove from the <see cref="T:NewsComponents.Collections.IFeedColumnLayoutList"/>.
            This argument can be a null reference.
            </param>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IFeedColumnLayoutList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IFeedColumnLayoutList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Remove(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IFeedColumnLayoutList.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the
            <see cref="T:NewsComponents.Collections.IFeedColumnLayoutList"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than
            <see cref="P:NewsComponents.Collections.IFeedColumnLayoutCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IFeedColumnLayoutList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IFeedColumnLayoutList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.RemoveAt(System.Int32)"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IFeedColumnLayoutList.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:NewsComponents.Collections.IFeedColumnLayoutList"/> has a fixed size.
            </summary>
            <value><c>true</c> if the <see cref="T:NewsComponents.Collections.IFeedColumnLayoutList"/> has a fixed size;
            otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IList.IsFixedSize"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IFeedColumnLayoutList.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:NewsComponents.Collections.IFeedColumnLayoutList"/> is read-only.
            </summary>
            <value><c>true</c> if the <see cref="T:NewsComponents.Collections.IFeedColumnLayoutList"/> is read-only;
            otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IList.IsReadOnly"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IFeedColumnLayoutList.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> element at the specified index.
            </summary>
            <param name="index">The zero-based index of the
            <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> element to get or set.</param>
            <value>
            The <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> element at the specified <paramref name="index"/>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than
            <see cref="P:NewsComponents.Collections.IFeedColumnLayoutCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The property is set and the <see cref="T:NewsComponents.Collections.IFeedColumnLayoutList"/> is read-only.</exception>
            <remarks>Please refer to <see cref="P:System.Collections.IList.Item(System.Int32)"/> for details.</remarks>
        </member>
        <member name="T:NewsComponents.Collections.IFeedColumnLayoutEnumerator">
            <summary>
            Supports type-safe iteration over a collection that
            contains <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> elements.
            </summary>
            <remarks>
            <b>IFeedColumnLayoutEnumerator</b> provides an <see cref="T:System.Collections.IEnumerator"/>
            that is strongly typed for <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> elements.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.IFeedColumnLayoutEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><c>true</c> if the enumerator was successfully advanced to the next element;
            <c>false</c> if the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.IEnumerator.MoveNext"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IFeedColumnLayoutEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position,
            which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.IEnumerator.Reset"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IFeedColumnLayoutEnumerator.Current">
            <summary>
            Gets the current <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> element in the collection.
            </summary>
            <value>The current <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> element in the collection.</value>
            <exception cref="T:System.InvalidOperationException"><para>The enumerator is positioned
            before the first element of the collection or after the last element.</para>
            <para>-or-</para>
            <para>The collection was modified after the enumerator was created.</para></exception>
            <remarks>Please refer to <see cref="P:System.Collections.IEnumerator.Current"/> for details, but note
            that <b>Current</b> fails if the collection was modified since the last successful
            call to <see cref="M:NewsComponents.Collections.IFeedColumnLayoutEnumerator.MoveNext"/> or <see cref="M:NewsComponents.Collections.IFeedColumnLayoutEnumerator.Reset"/>.</remarks>
        </member>
        <member name="T:NewsComponents.Collections.IStringFeedColumnLayoutCollection">
            <summary>
            Defines size, enumerators, and synchronization methods for strongly
            typed collections of <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> elements.
            </summary>
            <remarks>
            <b>IStringFeedColumnLayoutCollection</b> provides an <see cref="T:System.Collections.ICollection"/>
            that is strongly typed for <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> elements.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringFeedColumnLayoutCollection.CopyTo(NewsComponents.Collections.FeedColumnLayoutEntry[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutCollection"/>
            to a one-dimensional <see cref="T:System.Array"/> of <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> elements,
            starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the
            destination of the <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> elements copied from the
            <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutCollection"/>.
            The <b>Array</b> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/>
            at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutCollection"/>
            is greater than the available space from <paramref name="arrayIndex"/> to the end of the
            destination <paramref name="array"/>.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringFeedColumnLayoutCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutEnumerator"/> that can
            iterate through the <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutCollection"/>.
            </summary>
            <returns>An <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutEnumerator"/>
            for the entire <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.IEnumerable.GetEnumerator"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringFeedColumnLayoutCollection.Count">
            <summary>
            Gets the number of elements contained in the
            <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutCollection"/>.
            </summary>
            <value>The number of elements contained in the
            <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ICollection.Count"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringFeedColumnLayoutCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the
            <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutCollection"/> is synchronized (thread-safe).
            </summary>
            <value><c>true</c> if access to the <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutCollection"/>
            is synchronized (thread-safe); otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ICollection.IsSynchronized"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringFeedColumnLayoutCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access
            to the <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutCollection"/>.
            </summary>
            <value>An object that can be used to synchronize access to the
            <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ICollection.SyncRoot"/> for details.</remarks>
        </member>
        <member name="T:NewsComponents.Collections.IStringFeedColumnLayoutDictionary">
            <summary>
            Represents a strongly typed collection of
            <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> key-and-value pairs.
            </summary>
            <remarks>
            <b>IStringFeedColumnLayoutDictionary</b> provides an
            <see cref="T:System.Collections.IDictionary"/> that is strongly typed for
            <see cref="T:System.String"/> keys and <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> values.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringFeedColumnLayoutDictionary.Add(System.String,NewsComponents.Feed.FeedColumnLayout)">
            <summary>
            Adds an element with the specified <see cref="T:System.String"/>
            key and <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> value to the
            <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutDictionary"/>.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key of the element
            to add to the <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutDictionary"/>.</param>
            <param name="value">The <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> value of the element
            to add to the <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutDictionary"/>.
            This argument can be a null reference.
            </param>
            <exception cref="T:System.ArgumentException">
            <para>An element with the specified <paramref name="key"/> already exists
            in the <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutDictionary"/>.</para>
            <para>-or-</para>
            <para>The <b>IStringFeedColumnLayoutDictionary</b> is set to use the
            <see cref="T:System.IComparable"/> interface, and <paramref name="key"/> does not
            implement the <b>IComparable</b> interface.</para></exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">
            The comparer throws an exception.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutDictionary"/> is read-only.
            </para><para>-or-</para>
            <para>The <b>IStringFeedColumnLayoutDictionary</b> has a fixed size.
            </para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringFeedColumnLayoutDictionary.Clear">
            <summary>
            Removes all elements from the <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutDictionary"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutDictionary"/> is read-only.
            </para><para>-or-</para>
            <para>The <b>IStringFeedColumnLayoutDictionary</b> has a fixed size.
            </para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IDictionary.Clear"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringFeedColumnLayoutDictionary.Contains(System.String)">
            <summary>
            Determines whether the <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutDictionary"/>
            contains the specified <see cref="T:System.String"/> key.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key to locate
            in the <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutDictionary"/>.</param>
            <returns><c>true</c> if the <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutDictionary"/>
            contains an element with the specified <paramref name="key"/>; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">
            The comparer throws an exception.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.IDictionary.Contains(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringFeedColumnLayoutDictionary.Remove(System.String)">
            <summary>
            Removes the element with the specified <see cref="T:System.String"/> key
            from the <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutDictionary"/>.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key of the element to remove
            from the <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutDictionary"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">
            The comparer throws an exception.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutDictionary"/> is read-only.
            </para><para>-or-</para>
            <para>The <b>IStringFeedColumnLayoutDictionary</b> has a fixed size.
            </para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IDictionary.Remove(System.Object)"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringFeedColumnLayoutDictionary.IsFixedSize">
            <summary>
            Gets a value indicating whether the
            <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutDictionary"/> has a fixed size.
            </summary>
            <value><c>true</c> if the <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutDictionary"/>
            has a fixed size; otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IDictionary.IsFixedSize"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringFeedColumnLayoutDictionary.IsReadOnly">
            <summary>
            Gets a value indicating whether the
            <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutDictionary"/> is read-only.
            </summary>
            <value><c>true</c> if the <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutDictionary"/>
            is read-only; otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IDictionary.IsReadOnly"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringFeedColumnLayoutDictionary.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> value
            associated with the specified <see cref="T:System.String"/> key.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key
            whose value to get or set.</param>
            <value>The <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> value associated with the specified
            <paramref name="key"/>. If the specified <paramref name="key"/> is not found,
            attempting to get it returns
            a null reference,
            and attempting to set it creates a new element using the specified
            <paramref name="key"/>.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The property is set and the
            <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutDictionary"/> is read-only.</para>
            <para>-or-</para>
            <para>The property is set, <paramref name="key"/> does not exist in the collection,
            and the <b>IStringFeedColumnLayoutDictionary</b> has a fixed size.</para>
            </exception>
            <remarks>Please refer to <see cref="P:System.Collections.IDictionary.Item(System.Object)"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringFeedColumnLayoutDictionary.Keys">
            <summary>
            Gets an <see cref="T:NewsComponents.Collections.IStringCollection"/> containing the keys
            in the <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutDictionary"/>.
            </summary>
            <value>An <see cref="T:NewsComponents.Collections.IStringCollection"/> containing the keys
            in the <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutDictionary"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IDictionary.Keys"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringFeedColumnLayoutDictionary.Values">
            <summary>
            Gets an <see cref="T:NewsComponents.Collections.IFeedColumnLayoutCollection"/> containing the values
            in the <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutDictionary"/>.
            </summary>
            <value>An <see cref="T:NewsComponents.Collections.IFeedColumnLayoutCollection"/> containing the values
            in the <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutDictionary"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IDictionary.Values"/> for details.</remarks>
        </member>
        <member name="T:NewsComponents.Collections.IStringFeedColumnLayoutList">
            <summary>
            Represents a strongly typed collection of <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/>
            objects that can be individually accessed by index.
            </summary>
            <remarks>
            <b>IStringFeedColumnLayoutList</b> provides an <see cref="T:System.Collections.IList"/>
            that is strongly typed for <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> elements.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringFeedColumnLayoutList.Add(NewsComponents.Collections.FeedColumnLayoutEntry)">
            <summary>
            Adds a <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> to the end
            of the <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutList"/>.
            </summary>
            <param name="entry">The <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> object
            to be added to the end of the <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutList"/>.
            </param>
            <returns>The <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutList"/> index at which
            the <paramref name="entry"/> has been added.</returns>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IStringFeedColumnLayoutList</b> has a fixed size.</para>
            </exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Add(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringFeedColumnLayoutList.Clear">
            <summary>
            Removes all elements from the <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutList"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IStringFeedColumnLayoutList</b> has a fixed size.</para>
            </exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Clear"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringFeedColumnLayoutList.Contains(NewsComponents.Collections.FeedColumnLayoutEntry)">
            <summary>
            Determines whether the <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutList"/>
            contains the specified <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> element.
            </summary>
            <param name="entry">The <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> object
            to locate in the <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutList"/>.</param>
            <returns><c>true</c> if <paramref name="entry"/> is found in the
            <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutList"/>; otherwise, <c>false</c>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Contains(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringFeedColumnLayoutList.IndexOf(NewsComponents.Collections.FeedColumnLayoutEntry)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified
            <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> in the <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutList"/>.
            </summary>
            <param name="entry">The <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> object
            to locate in the <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutList"/>.</param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="entry"/>
            in the <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutList"/>, if found; otherwise, -1.
            </returns>
            <remarks>Please refer to <see cref="M:System.Collections.IList.IndexOf(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringFeedColumnLayoutList.Insert(System.Int32,NewsComponents.Collections.FeedColumnLayoutEntry)">
            <summary>
            Inserts a <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> element into the
            <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which
            <paramref name="entry"/> should be inserted.</param>
            <param name="entry">The <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> object to insert
            into the <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutList"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is greater than
            <see cref="P:NewsComponents.Collections.IStringFeedColumnLayoutCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IStringFeedColumnLayoutList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringFeedColumnLayoutList.Remove(NewsComponents.Collections.FeedColumnLayoutEntry)">
            <summary>
            Removes the first occurrence of the specified <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/>
            from the <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutList"/>.
            </summary>
            <param name="entry">The <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> object to remove
            from the <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutList"/>.</param>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IStringFeedColumnLayoutList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Remove(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringFeedColumnLayoutList.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the
            <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutList"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than
            <see cref="P:NewsComponents.Collections.IStringFeedColumnLayoutCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IStringFeedColumnLayoutList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.RemoveAt(System.Int32)"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringFeedColumnLayoutList.IsFixedSize">
            <summary>
            Gets a value indicating whether the
            <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutList"/> has a fixed size.
            </summary>
            <value><c>true</c> if the <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutList"/>
            has a fixed size; otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IList.IsFixedSize"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringFeedColumnLayoutList.IsReadOnly">
            <summary>
            Gets a value indicating whether the
            <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutList"/> is read-only.
            </summary>
            <value><c>true</c> if the <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutList"/>
            is read-only; otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IList.IsReadOnly"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringFeedColumnLayoutList.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> element at the specified index.
            </summary>
            <param name="index">The zero-based index of the
            <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> element to get or set.</param>
            <value>
            The <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> element at the specified <paramref name="index"/>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than
            <see cref="P:NewsComponents.Collections.IStringFeedColumnLayoutCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">The property is set and the
            <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutList"/> is read-only.</exception>
            <remarks>Please refer to <see cref="P:System.Collections.IList.Item(System.Int32)"/> for details.</remarks>
        </member>
        <member name="T:NewsComponents.Collections.IStringFeedColumnLayoutEnumerator">
            <summary>
            Supports type-safe iteration over a dictionary that
            contains <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> elements.
            </summary>
            <remarks>
            <b>IStringFeedColumnLayoutEnumerator</b> provides an
            <see cref="T:System.Collections.IDictionaryEnumerator"/> that is strongly typed for
            <see cref="T:System.String"/> keys and <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> values.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringFeedColumnLayoutEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><c>true</c> if the enumerator was successfully advanced to the next element;
            <c>false</c> if the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.IEnumerator.MoveNext"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.IStringFeedColumnLayoutEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position,
            which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.IEnumerator.Reset"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringFeedColumnLayoutEnumerator.Current">
            <summary>
            Gets the current <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> element in the collection.
            </summary>
            <value>The current <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> element in the collection.</value>
            <exception cref="T:System.InvalidOperationException"><para>The enumerator is positioned
            before the first element of the collection or after the last element.</para>
            <para>-or-</para>
            <para>The collection was modified after the enumerator was created.</para></exception>
            <remarks>Please refer to <see cref="P:System.Collections.IEnumerator.Current"/> for details, but note
            that <b>Current</b> fails if the collection was modified since the last successful
            call to <see cref="M:NewsComponents.Collections.IStringFeedColumnLayoutEnumerator.MoveNext"/> or <see cref="M:NewsComponents.Collections.IStringFeedColumnLayoutEnumerator.Reset"/>.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringFeedColumnLayoutEnumerator.Entry">
            <summary>
            Gets a <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> containing both
            the key and the value of the current dictionary entry.
            </summary>
            <value>A <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> containing both
            the key and the value of the current dictionary entry.</value>
            <exception cref="T:System.InvalidOperationException"><para>The enumerator is positioned
            before the first element of the dictionary or after the last element.</para>
            <para>-or-</para>
            <para>The dictionary was modified after the enumerator was created.</para></exception>
            <remarks>Please refer to <see cref="P:System.Collections.IDictionaryEnumerator.Entry"/> for details, but
            note that <b>Entry</b> fails if the collection was modified since the last successful
            call to <see cref="M:NewsComponents.Collections.IStringFeedColumnLayoutEnumerator.MoveNext"/> or <see cref="M:NewsComponents.Collections.IStringFeedColumnLayoutEnumerator.Reset"/>.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringFeedColumnLayoutEnumerator.Key">
            <summary>
            Gets the <see cref="T:System.String"/> key of the current dictionary entry.
            </summary>
            <value>The <see cref="T:System.String"/> key
            of the current element of the enumeration.</value>
            <exception cref="T:System.InvalidOperationException"><para>The enumerator is positioned
            before the first element of the dictionary or after the last element.</para>
            <para>-or-</para>
            <para>The dictionary was modified after the enumerator was created.</para></exception>
            <remarks>Please refer to <see cref="P:System.Collections.IDictionaryEnumerator.Key"/> for details, but
            note that <b>Key</b> fails if the collection was modified since the last successful
            call to <see cref="M:NewsComponents.Collections.IStringFeedColumnLayoutEnumerator.MoveNext"/> or <see cref="M:NewsComponents.Collections.IStringFeedColumnLayoutEnumerator.Reset"/>.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.IStringFeedColumnLayoutEnumerator.Value">
            <summary>
            Gets the <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> value of the current dictionary entry.
            </summary>
            <value>The <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> value
            of the current element of the enumeration.</value>
            <exception cref="T:System.InvalidOperationException"><para>The enumerator is positioned
            before the first element of the dictionary or after the last element.</para>
            <para>-or-</para>
            <para>The dictionary was modified after the enumerator was created.</para></exception>
            <remarks>Please refer to <see cref="P:System.Collections.IDictionaryEnumerator.Value"/> for details, but
            note that <b>Value</b> fails if the collection was modified since the last successful
            call to <see cref="M:NewsComponents.Collections.IStringFeedColumnLayoutEnumerator.MoveNext"/> or <see cref="M:NewsComponents.Collections.IStringFeedColumnLayoutEnumerator.Reset"/>.</remarks>
        </member>
        <member name="T:NewsComponents.Collections.FeedColumnLayoutEntry">
            <summary>
            Implements a strongly typed pair of one <see cref="T:System.String"/>
            key and one <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> value.
            </summary>
            <remarks>
            <b>FeedColumnLayoutEntry</b> provides a <see cref="T:System.Collections.DictionaryEntry"/> that is strongly
            typed for <see cref="T:System.String"/> keys and <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> values.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedColumnLayoutEntry.#ctor(System.String,NewsComponents.Feed.FeedColumnLayout)">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/>
            class with the specified key and value.
            </summary>
            <param name="key">
            The <see cref="T:System.String"/> key in the key-and-value pair.</param>
            <param name="value">
            The <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> value in the key-and-value pair.
            This argument can be a null reference.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
        </member>
        <member name="M:NewsComponents.Collections.FeedColumnLayoutEntry.op_Implicit(System.Collections.DictionaryEntry)~NewsComponents.Collections.FeedColumnLayoutEntry">
            <summary>
            Converts a <see cref="T:System.Collections.DictionaryEntry"/> to a <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/>.
            </summary>
            <param name="entry">A <see cref="T:System.Collections.DictionaryEntry"/> object to convert.</param>
            <returns>A <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> object that represents
            the converted <paramref name="entry"/>.</returns>
            <exception cref="T:System.InvalidCastException">
            <para><paramref name="entry"/> contains a key that is not compatible
            with <see cref="T:System.String"/>.</para>
            <para>-or-</para>
            <para><paramref name="entry"/> contains a value that is not compatible
            with <see cref="T:NewsComponents.Feed.FeedColumnLayout"/>.</para>
            </exception>
        </member>
        <member name="M:NewsComponents.Collections.FeedColumnLayoutEntry.op_Implicit(NewsComponents.Collections.FeedColumnLayoutEntry)~System.Collections.DictionaryEntry">
            <summary>
            Converts a <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> to a <see cref="T:System.Collections.DictionaryEntry"/>.
            </summary>
            <param name="pair">A <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> object to convert.</param>
            <returns>A <see cref="T:System.Collections.DictionaryEntry"/> object that
            represents the converted <paramref name="pair"/>.</returns>
        </member>
        <member name="P:NewsComponents.Collections.FeedColumnLayoutEntry.Key">
            <summary>
            Gets or sets the <see cref="T:System.String"/> key in the key-and-value pair.
            </summary>
            <value>
            The <see cref="T:System.String"/> key in the key-and-value pair.
            The default is a null reference.
            </value>
            <exception cref="T:System.ArgumentNullException">
            <b>Key</b> is set to a null reference.</exception>
            <remarks>
            <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> is a value type and therefore has an implicit default
            constructor that zeroes all data members. This means that the <b>Key</b> property of
            a default-constructed <b>FeedColumnLayoutEntry</b> contains a null reference by default,
            even though it is not possible to explicitly set <b>Key</b> to a null reference.
            </remarks>
        </member>
        <member name="P:NewsComponents.Collections.FeedColumnLayoutEntry.Value">
            <summary>
            Gets or sets the <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> value in the key-and-value pair.
            </summary>
            <value>
            The <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> value in the key-and-value pair.
            This value can be a null reference, which is also the default.
            </value>
        </member>
        <member name="T:NewsComponents.Collections.FeedColumnLayoutCollection">
            <summary>
            Implements a strongly typed collection of <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> key-and-value
            pairs that retain their insertion order and are accessible by index and by key.
            </summary>
            <remarks><para>
            <b>FeedColumnLayoutCollection</b> provides an <see cref="T:System.Collections.ArrayList"/> that is strongly
            typed for <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> elements and allows direct access to
            its <see cref="T:System.String"/> keys and <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> values.
            </para><para>
            The collection may contain multiple identical keys. All key access methods return the
            first occurrence of the specified key, if found. Access by index is an O(1) operation
            but access by key or value are both O(<em>N</em>) operations, where <em>N</em> is the
            current value of the <see cref="P:NewsComponents.Collections.FeedColumnLayoutCollection.Count"/> property.
            </para></remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedColumnLayoutCollection.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> class.
            </overloads>
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> class
            that is empty and has the default initial capacity.
            </summary>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.#ctor"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedColumnLayoutCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> class
            that is empty and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of elements that the new
            <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> is initially capable of storing.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is less than zero.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.#ctor(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedColumnLayoutCollection.#ctor(NewsComponents.Collections.FeedColumnLayoutCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> class
            that contains elements copied from the specified collection and
            that has the same initial capacity as the number of elements copied.
            </summary>
            <param name="collection">The <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>
            whose elements are copied to the new collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is a null reference.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.#ctor(System.Collections.ICollection)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedColumnLayoutCollection.#ctor(NewsComponents.Collections.FeedColumnLayoutEntry[])">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> class
            that contains elements copied from the specified <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/>
            array and that has the same initial capacity as the number of elements copied.
            </summary>
            <param name="array">An <see cref="T:System.Array"/> of <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/>
            elements that are copied to the new collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.#ctor(System.Collections.ICollection)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedColumnLayoutCollection.IndexOfSimilar(NewsComponents.Feed.FeedColumnLayout)">
            <summary>
            Returns the first similar FeedColumnLayout by calling 
            FeedColumnLayout.Equals(layout, true) - ignoring the
            ColumnWidths.
            </summary>
            <param name="layout">FeedColumnLayout</param>
            <returns>int index or -1 if not found</returns>
        </member>
        <member name="M:NewsComponents.Collections.FeedColumnLayoutCollection.Add(NewsComponents.Collections.FeedColumnLayoutEntry)">
            <overloads>
            Adds an element to the end of the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.
            </overloads>
            <summary>
            Adds a <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> to the end of the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.
            </summary>
            <param name="entry">The <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> object
            to be added to the end of the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.</param>
            <returns>The <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> index at which the
            <paramref name="entry"/> has been added.</returns>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>FeedColumnLayoutCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Add(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedColumnLayoutCollection.Add(System.String,NewsComponents.Feed.FeedColumnLayout)">
            <summary>
            Adds an element with the specified <see cref="T:System.String"/> key and
            <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> value to the end of the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key of the element
            to add to the end of the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.</param>
            <param name="value">The <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> value of the element
            to add to the end of the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.
            This argument can be a null reference.
            </param>
            <returns>The <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> index at which the
            new element has been added.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>FeedColumnLayoutCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.Add(System.Object,System.Object)"/> for details but note that
            the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> may contain multiple identical keys.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedColumnLayoutCollection.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an <see cref="T:System.Object"/> to the end of the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.
            </summary>
            <param name="entry">
            The object to be added to the end of the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.
            This argument must be compatible with <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/>.</param>
            <returns>The <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> index at which the
            <paramref name="entry"/> has been added.</returns>
            <exception cref="T:System.InvalidCastException"><paramref name="entry"/>
            is not compatible with <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>FeedColumnLayoutCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Add(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedColumnLayoutCollection.AddRange(NewsComponents.Collections.FeedColumnLayoutCollection)">
            <overloads>
            Adds a range of elements to the end of the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.
            </overloads>
            <summary>
            Adds the elements of another collection to the end of the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.
            </summary>
            <param name="collection">The <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> whose elements
            should be added to the end of the current collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is a null reference.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>FeedColumnLayoutCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedColumnLayoutCollection.AddRange(NewsComponents.Collections.FeedColumnLayoutEntry[])">
            <summary>
            Adds the elements of a <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> array
            to the end of the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.
            </summary>
            <param name="array">An <see cref="T:System.Array"/> of <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> elements
            that should be added to the end of the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>FeedColumnLayoutCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedColumnLayoutCollection.Clear">
            <summary>
            Removes all elements from the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>FeedColumnLayoutCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Clear"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedColumnLayoutCollection.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.
            </summary>
            <returns>A shallow copy of the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Clone"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedColumnLayoutCollection.Contains(NewsComponents.Collections.FeedColumnLayoutEntry)">
            <summary>
            Determines whether the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>
            contains the specified <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> element.
            </summary>
            <param name="entry">The <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> object
            to locate in the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.</param>
            <returns><c>true</c> if <paramref name="entry"/> is found in the
            <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>; otherwise, <c>false</c>.</returns>
            <remarks><para>
            Please refer to <see cref="M:System.Collections.ArrayList.Contains(System.Object)"/> for details.
            </para><para>
            <b>Contains</b> uses the equality operators defined by <see cref="T:System.String"/>
            and <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> to locate the specified <paramref name="entry"/>.
            </para></remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedColumnLayoutCollection.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> contains the specified element.
            </summary>
            <param name="entry">The object to locate in the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.
            This argument must be compatible with <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/>.</param>
            <returns><c>true</c> if <paramref name="entry"/> is found in the
            <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.InvalidCastException"><paramref name="entry"/>
            is not compatible with <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/>.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Contains(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedColumnLayoutCollection.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>
            contains the specified <see cref="T:System.String"/> key.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key
            to locate in the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.</param>
            <returns><c>true</c> if the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> contains an element
            with the specified <paramref name="key"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.ContainsKey(System.Object)"/> for details but note
            that the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> requires linear time to locate a key.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedColumnLayoutCollection.ContainsValue(NewsComponents.Feed.FeedColumnLayout)">
            <summary>
            Determines whether the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>
            contains the specified <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> value.
            </summary>
            <param name="value">The <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> value
            to locate in the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.
            This argument can be a null reference.
            </param>
            <returns><c>true</c> if the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> contains an element
            with the specified <paramref name="value"/>; otherwise, <c>false</c>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.ContainsValue(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedColumnLayoutCollection.CopyTo(NewsComponents.Collections.FeedColumnLayoutEntry[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> to a one-dimensional <see cref="T:System.Array"/> of
            <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> elements, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the
            <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> elements copied from the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.
            The <b>Array</b> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/>
            at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> is greater than
            the available space from <paramref name="arrayIndex"/> to the end of the destination
            <paramref name="array"/>.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.CopyTo(System.Array)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedColumnLayoutCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> to a one-dimensional <see cref="T:System.Array"/>,
            starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the
            <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> elements copied from the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.
            The <b>Array</b> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/>
            at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="array"/> is multidimensional.
            </para><para>-or-</para><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> is greater than
            the available space from <paramref name="arrayIndex"/> to the end of the destination
            <paramref name="array"/>.</para></exception>
            <exception cref="T:System.InvalidCastException">
            The <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> type cannot be cast automatically
            to the type of the destination <paramref name="array"/>.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.CopyTo(System.Array)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedColumnLayoutCollection.Equals(NewsComponents.Collections.FeedColumnLayoutCollection)">
            <summary>
            Determines whether the specified <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>
            is equal to the current <b>FeedColumnLayoutCollection</b>.
            </summary>
            <param name="collection">The <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>
            to compare with the current <b>FeedColumnLayoutCollection</b>.</param>
            <returns><c>true</c> if the specified <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> is equal
            to the current <b>FeedColumnLayoutCollection</b>; otherwise, <c>false</c>.</returns>
            <remarks><para>
            This <b>Equals</b> overload tests for value equality of all <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/>
            elements contained in the two <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> collections.
            </para><para>
            <b>Equals</b> returns <c>false</c> if <paramref name="collection"/> is a null
            reference, holds a different number of elements, or holds at least one
            <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> element at a given index position whose key and/or
            value is different from that of the element at the same index position in this
            <b>FeedColumnLayoutCollection</b>, as determined by the inequality operators defined by
            <see cref="T:System.String"/> and <see cref="T:NewsComponents.Feed.FeedColumnLayout"/>.
            </para></remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedColumnLayoutCollection.GetByIndex(System.Int32)">
            <summary>
            Gets the <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> value at the
            specified index of the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.
            </summary>
            <param name="index">The zero-based index of the
            <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> value to get.</param>
            <returns>The <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> value at the specified
            <paramref name="index"/> of the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than <see cref="P:NewsComponents.Collections.FeedColumnLayoutCollection.Count"/>.</para>
            </exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.GetByIndex(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedColumnLayoutCollection.GetByKey(System.String)">
            <summary>
            Gets the <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> value associated with the
            first occurrence of the specified <see cref="T:System.String"/> key.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key whose value to get.</param>
            <returns>The <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> value associated with the first occurrence
            of the specified <paramref name="key"/>, if found; otherwise,
            a null reference.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <remarks><b>GetByKey</b> and <see cref="M:NewsComponents.Collections.FeedColumnLayoutCollection.SetByKey(System.String,NewsComponents.Feed.FeedColumnLayout)"/> emulate the indexer of the
            <see cref="T:System.Collections.SortedList"/> class but require linear time to locate a key.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedColumnLayoutCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutEnumerator"/> that can
            iterate through the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.
            </summary>
            <returns>An <see cref="T:NewsComponents.Collections.IStringFeedColumnLayoutEnumerator"/>
            for the entire <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.GetEnumerator"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedColumnLayoutCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> that can
            iterate through the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/>
            for the entire <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.GetEnumerator"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedColumnLayoutCollection.GetKey(System.Int32)">
            <summary>
            Gets the <see cref="T:System.String"/> key at the
            specified index of the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.
            </summary>
            <param name="index">The zero-based index of the
            <see cref="T:System.String"/> key to get.</param>
            <returns>The <see cref="T:System.String"/> key at the specified
            <paramref name="index"/> of the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than <see cref="P:NewsComponents.Collections.FeedColumnLayoutCollection.Count"/>.</para>
            </exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.GetKey(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedColumnLayoutCollection.GetKeyList">
            <summary>
            Gets the keys in the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.
            </summary>
            <returns>An <see cref="T:NewsComponents.Collections.IStringList"/> containing the keys
            in the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.GetKeyList"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedColumnLayoutCollection.GetValueList">
            <summary>
            Gets the values in the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.
            </summary>
            <returns>An <see cref="T:NewsComponents.Collections.IFeedColumnLayoutList"/> containing the values
            in the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.GetValueList"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedColumnLayoutCollection.IndexOf(NewsComponents.Collections.FeedColumnLayoutEntry)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified
            <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> in the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.
            </summary>
            <param name="entry">The <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> object
            to locate in the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.</param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="entry"/>
            in the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>, if found; otherwise, -1.
            </returns>
            <remarks><para>
            Please refer to <see cref="M:System.Collections.ArrayList.IndexOf(System.Object)"/> for details.
            </para><para>
            <b>IndexOf</b> uses the equality operators defined by <see cref="T:System.String"/>
            and <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> to locate the specified <paramref name="entry"/>.
            </para></remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedColumnLayoutCollection.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified
            <see cref="T:System.Object"/> in the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.
            </summary>
            <param name="entry">The object to locate in the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.
            This argument must be compatible with <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/>.</param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="entry"/>
            in the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>, if found; otherwise, -1.
            </returns>
            <exception cref="T:System.InvalidCastException"><paramref name="entry"/>
            is not compatible with <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/>.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.IndexOf(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedColumnLayoutCollection.IndexOfKey(System.String)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified
            <see cref="T:System.String"/> key in the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key
            to locate in the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.</param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="key"/>
            in the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>, if found; otherwise, -1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.IndexOfKey(System.Object)"/> for details but note
            that the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> requires linear time to locate a key.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedColumnLayoutCollection.IndexOfValue(NewsComponents.Feed.FeedColumnLayout)">
            <summary>
            Returns the zero-based index of first occurrence of the specified
            <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> value in the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.
            </summary>
            <param name="value">The <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> value
            to locate in the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.
            This argument can be a null reference.
            </param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="value"/>
            in the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>, if found; otherwise, -1.
            </returns>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.IndexOfValue(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedColumnLayoutCollection.Insert(System.Int32,NewsComponents.Collections.FeedColumnLayoutEntry)">
            <summary>
            Inserts a <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> element into the
            <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="entry"/>
            should be inserted.</param>
            <param name="entry">The <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> object
            to insert into the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is greater than <see cref="P:NewsComponents.Collections.FeedColumnLayoutCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>FeedColumnLayoutCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedColumnLayoutCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts an element into the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="entry"/>
            should be inserted.</param>
            <param name="entry">The object to insert into the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.
            This argument must be compatible with <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is greater than <see cref="P:NewsComponents.Collections.FeedColumnLayoutCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.InvalidCastException"><paramref name="entry"/>
            is not compatible with <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>FeedColumnLayoutCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedColumnLayoutCollection.Remove(NewsComponents.Collections.FeedColumnLayoutEntry)">
            <summary>
            Removes the first occurrence of the specified <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/>
            from the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.
            </summary>
            <param name="entry">The <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> object
            to remove from the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.</param>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>FeedColumnLayoutCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Remove(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedColumnLayoutCollection.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of the specified <see cref="T:System.Object"/>
            from the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.
            </summary>
            <param name="entry">The object to remove from the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.
            This argument must be compatible with <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/>.</param>
            <exception cref="T:System.InvalidCastException"><paramref name="entry"/>
            is not compatible with <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>FeedColumnLayoutCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Remove(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedColumnLayoutCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than <see cref="P:NewsComponents.Collections.FeedColumnLayoutCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>FeedColumnLayoutCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.RemoveAt(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedColumnLayoutCollection.SetByIndex(System.Int32,NewsComponents.Feed.FeedColumnLayout)">
            <summary>
            Sets the <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> value at the
            specified index of the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.
            </summary>
            <param name="index">The zero-based index of the
            <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> value to set.</param>
            <param name="value">The <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> object to store
            at the specified <paramref name="index"/> of the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.
            This argument can be a null reference.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than <see cref="P:NewsComponents.Collections.FeedColumnLayoutCollection.Count"/>.</para>
            </exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.SetByIndex(System.Int32,System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedColumnLayoutCollection.SetByKey(System.String,NewsComponents.Feed.FeedColumnLayout)">
            <summary>
            Sets the <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> value associated with the
            first occurrence of the specified <see cref="T:System.String"/> key.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key whose value to set.</param>
            <param name="value">The <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> object to associate with
            the first occurrence of the specified <paramref name="key"/>.
            This argument can be a null reference.
            If the specified <paramref name="key"/> is not found, <b>SetByKey</b> adds a new element
            with the specified <paramref name="key"/> and <paramref name="value"/> to the end of the
            <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.</param>
            <returns>The <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> index of the element
            that was changed or added.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> is read-only.</para>
            <para>-or-</para>
            <para><paramref name="key"/> does not exist in the collection,
            and the <b>FeedColumnLayoutCollection</b> has a fixed size.</para></exception>
            <remarks><b>SetByKey</b> and <see cref="M:NewsComponents.Collections.FeedColumnLayoutCollection.GetByKey(System.String)"/> emulate the indexer of the
            <see cref="T:System.Collections.SortedList"/> class but require linear time to locate a key.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedColumnLayoutCollection.Synchronized(NewsComponents.Collections.FeedColumnLayoutCollection)">
            <summary>
            Returns a synchronized (thread-safe) wrapper
            for the specified <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.
            </summary>
            <param name="collection">The <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> to synchronize.</param>
            <returns>
            A synchronized (thread-safe) wrapper around <paramref name="collection"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is a null reference.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.Synchronized(System.Collections.IList)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedColumnLayoutCollection.ToArray">
            <summary>
            Copies the elements of the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> to a new
            <see cref="T:System.Array"/> of <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> elements.
            </summary>
            <returns>A one-dimensional <see cref="T:System.Array"/> of <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/>
            elements containing copies of the elements of the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.
            </returns>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.ToArray"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.FeedColumnLayoutCollection.TrimToSize">
            <summary>
            Sets the capacity to the actual number of elements in the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>FeedColumnLayoutCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ArrayList.TrimToSize"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.FeedColumnLayoutCollection.InnerKeys">
            <summary>
            Gets the list of keys contained in the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> instance.
            </summary>
            <value>
            A one-dimensional <see cref="T:System.Array"/> with zero-based indexing that contains all 
            <see cref="T:System.String"/> elements in the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.
            </value>
            <remarks>
            Use <b>InnerKeys</b> to access the key array of a <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>
            instance that might be a read-only or synchronized wrapper. This is necessary 
            because the key and value arrays of wrapper classes are always null references.
            </remarks>
        </member>
        <member name="P:NewsComponents.Collections.FeedColumnLayoutCollection.InnerValues">
            <summary>
            Gets the list of values contained in the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> instance.
            </summary>
            <value>
            A one-dimensional <see cref="T:System.Array"/> with zero-based indexing that contains all 
            <see cref="T:NewsComponents.Feed.FeedColumnLayout"/> elements in the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.
            </value>
            <remarks>
            Use <b>InnerValues</b> to access the value array of a <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>
            instance that might be a read-only or synchronized wrapper. This is necessary
            because the key and value arrays of wrapper classes are always null references.
            </remarks>
        </member>
        <member name="P:NewsComponents.Collections.FeedColumnLayoutCollection.Capacity">
            <summary>
            Gets or sets the capacity of the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.
            </summary>
            <value>The number of elements that the
            <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> can contain.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <b>Capacity</b> is set to a value that is less than <see cref="P:NewsComponents.Collections.FeedColumnLayoutCollection.Count"/>.</exception>
            <remarks>Please refer to <see cref="P:System.Collections.ArrayList.Capacity"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.FeedColumnLayoutCollection.Count">
            <summary>
            Gets the number of key-and-value pairs contained
            in the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.
            </summary>
            <value>The number of key-and-value pairs contained
            in the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ArrayList.Count"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.FeedColumnLayoutCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> has a fixed size.
            </summary>
            <value><c>true</c> if the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> has a fixed size;
            otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ArrayList.IsFixedSize"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.FeedColumnLayoutCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> is read-only.
            </summary>
            <value><c>true</c> if the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> is read-only;
            otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ArrayList.IsReadOnly"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.FeedColumnLayoutCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>
            is synchronized (thread-safe).
            </summary>
            <value><c>true</c> if access to the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> is
            synchronized (thread-safe); otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ArrayList.IsSynchronized"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.FeedColumnLayoutCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> element at the specified index.
            </summary>
            <param name="index">The zero-based index of the
            <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> element to get or set.</param>
            <value>
            The <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/> element at the specified <paramref name="index"/>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than <see cref="P:NewsComponents.Collections.FeedColumnLayoutCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The property is set and the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> is read-only.</exception>
            <remarks>Please refer to <see cref="P:System.Collections.ArrayList.Item(System.Int32)"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.FeedColumnLayoutCollection.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <value>
            The element at the specified <paramref name="index"/>, returned as a boxed
            <see cref="T:System.Collections.DictionaryEntry"/> value. When the property is set, this value 
            must be compatible with <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than <see cref="P:NewsComponents.Collections.FeedColumnLayoutCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.InvalidCastException">The property is set to a value
            that is not compatible with <see cref="T:NewsComponents.Collections.FeedColumnLayoutEntry"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            The property is set and the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/> is read-only.</exception>
            <remarks>Please refer to <see cref="P:System.Collections.ArrayList.Item(System.Int32)"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.FeedColumnLayoutCollection.Keys">
            <summary>
            Gets an <see cref="T:NewsComponents.Collections.IStringCollection"/> containing
            the keys in the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.
            </summary>
            <value>An <see cref="T:NewsComponents.Collections.IStringCollection"/> containing
            the keys in the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.SortedList.Keys"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.FeedColumnLayoutCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize
            access to the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.
            </summary>
            <value>An object that can be used to synchronize
            access to the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.SortedList.SyncRoot"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.FeedColumnLayoutCollection.Values">
            <summary>
            Gets an <see cref="T:NewsComponents.Collections.IFeedColumnLayoutCollection"/> containing
            the values in the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.
            </summary>
            <value>An <see cref="T:NewsComponents.Collections.IFeedColumnLayoutCollection"/> containing
            the values in the <see cref="T:NewsComponents.Collections.FeedColumnLayoutCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.SortedList.Values"/> for details.</remarks>
        </member>
        <member name="T:NewsComponents.Collections.Old.IlistviewLayoutCollection">
            <summary>
            Defines size, enumerators, and synchronization methods for strongly
            typed collections of <see cref="T:NewsComponents.Feed.listviewLayout"/> elements.
            </summary>
            <remarks>
            <b>IlistviewLayoutCollection</b> provides an <see cref="T:System.Collections.ICollection"/>
            that is strongly typed for <see cref="T:NewsComponents.Feed.listviewLayout"/> elements.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.IlistviewLayoutCollection.CopyTo(NewsComponents.Feed.listviewLayout[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:NewsComponents.Collections.Old.IlistviewLayoutCollection"/> to a one-dimensional <see cref="T:System.Array"/>
            of <see cref="T:NewsComponents.Feed.listviewLayout"/> elements, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the
            <see cref="T:NewsComponents.Feed.listviewLayout"/> elements copied from the <see cref="T:NewsComponents.Collections.Old.IlistviewLayoutCollection"/>.
            The <b>Array</b> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/>
            at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:NewsComponents.Collections.Old.IlistviewLayoutCollection"/> is greater
            than the available space from <paramref name="arrayIndex"/> to the end of the destination
            <paramref name="array"/>.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.IlistviewLayoutCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:NewsComponents.Collections.Old.IlistviewLayoutEnumerator"/> that can
            iterate through the <see cref="T:NewsComponents.Collections.Old.IlistviewLayoutCollection"/>.
            </summary>
            <returns>An <see cref="T:NewsComponents.Collections.Old.IlistviewLayoutEnumerator"/>
            for the entire <see cref="T:NewsComponents.Collections.Old.IlistviewLayoutCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.IEnumerable.GetEnumerator"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.Old.IlistviewLayoutCollection.Count">
            <summary>
            Gets the number of elements contained in the
            <see cref="T:NewsComponents.Collections.Old.IlistviewLayoutCollection"/>.
            </summary>
            <value>The number of elements contained in the
            <see cref="T:NewsComponents.Collections.Old.IlistviewLayoutCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ICollection.Count"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.Old.IlistviewLayoutCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the
            <see cref="T:NewsComponents.Collections.Old.IlistviewLayoutCollection"/> is synchronized (thread-safe).
            </summary>
            <value><c>true</c> if access to the <see cref="T:NewsComponents.Collections.Old.IlistviewLayoutCollection"/> is
            synchronized (thread-safe); otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ICollection.IsSynchronized"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.Old.IlistviewLayoutCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access
            to the <see cref="T:NewsComponents.Collections.Old.IlistviewLayoutCollection"/>.
            </summary>
            <value>An object that can be used to synchronize access
            to the <see cref="T:NewsComponents.Collections.Old.IlistviewLayoutCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ICollection.SyncRoot"/> for details.</remarks>
        </member>
        <member name="T:NewsComponents.Collections.Old.IlistviewLayoutList">
            <summary>
            Represents a strongly typed collection of <see cref="T:NewsComponents.Feed.listviewLayout"/>
            objects that can be individually accessed by index.
            </summary>
            <remarks>
            <b>IlistviewLayoutList</b> provides an <see cref="T:System.Collections.IList"/>
            that is strongly typed for <see cref="T:NewsComponents.Feed.listviewLayout"/> elements.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.IlistviewLayoutList.Add(NewsComponents.Feed.listviewLayout)">
            <summary>
            Adds a <see cref="T:NewsComponents.Feed.listviewLayout"/> to the end
            of the <see cref="T:NewsComponents.Collections.Old.IlistviewLayoutList"/>.
            </summary>
            <param name="value">The <see cref="T:NewsComponents.Feed.listviewLayout"/> object
            to be added to the end of the <see cref="T:NewsComponents.Collections.Old.IlistviewLayoutList"/>.
            This argument can be a null reference.
            </param>
            <returns>The <see cref="T:NewsComponents.Collections.Old.IlistviewLayoutList"/> index at which
            the <paramref name="value"/> has been added.</returns>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.Old.IlistviewLayoutList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IlistviewLayoutList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Add(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.IlistviewLayoutList.Clear">
            <summary>
            Removes all elements from the <see cref="T:NewsComponents.Collections.Old.IlistviewLayoutList"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.Old.IlistviewLayoutList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IlistviewLayoutList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Clear"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.IlistviewLayoutList.Contains(NewsComponents.Feed.listviewLayout)">
            <summary>
            Determines whether the <see cref="T:NewsComponents.Collections.Old.IlistviewLayoutList"/>
            contains the specified <see cref="T:NewsComponents.Feed.listviewLayout"/> element.
            </summary>
            <param name="value">The <see cref="T:NewsComponents.Feed.listviewLayout"/> object
            to locate in the <see cref="T:NewsComponents.Collections.Old.IlistviewLayoutList"/>.
            This argument can be a null reference.
            </param>
            <returns><c>true</c> if <paramref name="value"/> is found in the
            <see cref="T:NewsComponents.Collections.Old.IlistviewLayoutList"/>; otherwise, <c>false</c>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Contains(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.IlistviewLayoutList.IndexOf(NewsComponents.Feed.listviewLayout)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified
            <see cref="T:NewsComponents.Feed.listviewLayout"/> in the <see cref="T:NewsComponents.Collections.Old.IlistviewLayoutList"/>.
            </summary>
            <param name="value">The <see cref="T:NewsComponents.Feed.listviewLayout"/> object
            to locate in the <see cref="T:NewsComponents.Collections.Old.IlistviewLayoutList"/>.
            This argument can be a null reference.
            </param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="value"/>
            in the <see cref="T:NewsComponents.Collections.Old.IlistviewLayoutList"/>, if found; otherwise, -1.
            </returns>
            <remarks>Please refer to <see cref="M:System.Collections.IList.IndexOf(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.IlistviewLayoutList.Insert(System.Int32,NewsComponents.Feed.listviewLayout)">
            <summary>
            Inserts a <see cref="T:NewsComponents.Feed.listviewLayout"/> element into the
            <see cref="T:NewsComponents.Collections.Old.IlistviewLayoutList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which
            <paramref name="value"/> should be inserted.</param>
            <param name="value">The <see cref="T:NewsComponents.Feed.listviewLayout"/> object
            to insert into the <see cref="T:NewsComponents.Collections.Old.IlistviewLayoutList"/>.
            This argument can be a null reference.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is greater than
            <see cref="P:NewsComponents.Collections.Old.IlistviewLayoutCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.Old.IlistviewLayoutList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IlistviewLayoutList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.IlistviewLayoutList.Remove(NewsComponents.Feed.listviewLayout)">
            <summary>
            Removes the first occurrence of the specified <see cref="T:NewsComponents.Feed.listviewLayout"/>
            from the <see cref="T:NewsComponents.Collections.Old.IlistviewLayoutList"/>.
            </summary>
            <param name="value">The <see cref="T:NewsComponents.Feed.listviewLayout"/> object
            to remove from the <see cref="T:NewsComponents.Collections.Old.IlistviewLayoutList"/>.
            This argument can be a null reference.
            </param>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.Old.IlistviewLayoutList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IlistviewLayoutList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Remove(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.IlistviewLayoutList.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the
            <see cref="T:NewsComponents.Collections.Old.IlistviewLayoutList"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than
            <see cref="P:NewsComponents.Collections.Old.IlistviewLayoutCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.Old.IlistviewLayoutList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IlistviewLayoutList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.RemoveAt(System.Int32)"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.Old.IlistviewLayoutList.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:NewsComponents.Collections.Old.IlistviewLayoutList"/> has a fixed size.
            </summary>
            <value><c>true</c> if the <see cref="T:NewsComponents.Collections.Old.IlistviewLayoutList"/> has a fixed size;
            otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IList.IsFixedSize"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.Old.IlistviewLayoutList.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:NewsComponents.Collections.Old.IlistviewLayoutList"/> is read-only.
            </summary>
            <value><c>true</c> if the <see cref="T:NewsComponents.Collections.Old.IlistviewLayoutList"/> is read-only;
            otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IList.IsReadOnly"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.Old.IlistviewLayoutList.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:NewsComponents.Feed.listviewLayout"/> element at the specified index.
            </summary>
            <param name="index">The zero-based index of the
            <see cref="T:NewsComponents.Feed.listviewLayout"/> element to get or set.</param>
            <value>
            The <see cref="T:NewsComponents.Feed.listviewLayout"/> element at the specified <paramref name="index"/>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than
            <see cref="P:NewsComponents.Collections.Old.IlistviewLayoutCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The property is set and the <see cref="T:NewsComponents.Collections.Old.IlistviewLayoutList"/> is read-only.</exception>
            <remarks>Please refer to <see cref="P:System.Collections.IList.Item(System.Int32)"/> for details.</remarks>
        </member>
        <member name="T:NewsComponents.Collections.Old.IlistviewLayoutEnumerator">
            <summary>
            Supports type-safe iteration over a collection that
            contains <see cref="T:NewsComponents.Feed.listviewLayout"/> elements.
            </summary>
            <remarks>
            <b>IlistviewLayoutEnumerator</b> provides an <see cref="T:System.Collections.IEnumerator"/>
            that is strongly typed for <see cref="T:NewsComponents.Feed.listviewLayout"/> elements.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.IlistviewLayoutEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><c>true</c> if the enumerator was successfully advanced to the next element;
            <c>false</c> if the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.IEnumerator.MoveNext"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.IlistviewLayoutEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position,
            which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.IEnumerator.Reset"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.Old.IlistviewLayoutEnumerator.Current">
            <summary>
            Gets the current <see cref="T:NewsComponents.Feed.listviewLayout"/> element in the collection.
            </summary>
            <value>The current <see cref="T:NewsComponents.Feed.listviewLayout"/> element in the collection.</value>
            <exception cref="T:System.InvalidOperationException"><para>The enumerator is positioned
            before the first element of the collection or after the last element.</para>
            <para>-or-</para>
            <para>The collection was modified after the enumerator was created.</para></exception>
            <remarks>Please refer to <see cref="P:System.Collections.IEnumerator.Current"/> for details, but note
            that <b>Current</b> fails if the collection was modified since the last successful
            call to <see cref="M:NewsComponents.Collections.Old.IlistviewLayoutEnumerator.MoveNext"/> or <see cref="M:NewsComponents.Collections.Old.IlistviewLayoutEnumerator.Reset"/>.</remarks>
        </member>
        <member name="T:NewsComponents.Collections.Old.IStringlistviewLayoutCollection">
            <summary>
            Defines size, enumerators, and synchronization methods for strongly
            typed collections of <see cref="T:NewsComponents.Collections.Old.listviewLayoutEntry"/> elements.
            </summary>
            <remarks>
            <b>IStringlistviewLayoutCollection</b> provides an <see cref="T:System.Collections.ICollection"/>
            that is strongly typed for <see cref="T:NewsComponents.Collections.Old.listviewLayoutEntry"/> elements.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.IStringlistviewLayoutCollection.CopyTo(NewsComponents.Collections.Old.listviewLayoutEntry[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutCollection"/>
            to a one-dimensional <see cref="T:System.Array"/> of <see cref="T:NewsComponents.Collections.Old.listviewLayoutEntry"/> elements,
            starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the
            destination of the <see cref="T:NewsComponents.Collections.Old.listviewLayoutEntry"/> elements copied from the
            <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutCollection"/>.
            The <b>Array</b> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/>
            at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutCollection"/>
            is greater than the available space from <paramref name="arrayIndex"/> to the end of the
            destination <paramref name="array"/>.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.IStringlistviewLayoutCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutEnumerator"/> that can
            iterate through the <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutCollection"/>.
            </summary>
            <returns>An <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutEnumerator"/>
            for the entire <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.IEnumerable.GetEnumerator"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.Old.IStringlistviewLayoutCollection.Count">
            <summary>
            Gets the number of elements contained in the
            <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutCollection"/>.
            </summary>
            <value>The number of elements contained in the
            <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ICollection.Count"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.Old.IStringlistviewLayoutCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the
            <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutCollection"/> is synchronized (thread-safe).
            </summary>
            <value><c>true</c> if access to the <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutCollection"/>
            is synchronized (thread-safe); otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ICollection.IsSynchronized"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.Old.IStringlistviewLayoutCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access
            to the <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutCollection"/>.
            </summary>
            <value>An object that can be used to synchronize access to the
            <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.ICollection.SyncRoot"/> for details.</remarks>
        </member>
        <member name="T:NewsComponents.Collections.Old.IStringlistviewLayoutDictionary">
            <summary>
            Represents a strongly typed collection of
            <see cref="T:NewsComponents.Collections.Old.listviewLayoutEntry"/> key-and-value pairs.
            </summary>
            <remarks>
            <b>IStringlistviewLayoutDictionary</b> provides an
            <see cref="T:System.Collections.IDictionary"/> that is strongly typed for
            <see cref="T:System.String"/> keys and <see cref="T:NewsComponents.Feed.listviewLayout"/> values.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.IStringlistviewLayoutDictionary.Add(System.String,NewsComponents.Feed.listviewLayout)">
            <summary>
            Adds an element with the specified <see cref="T:System.String"/>
            key and <see cref="T:NewsComponents.Feed.listviewLayout"/> value to the
            <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutDictionary"/>.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key of the element
            to add to the <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutDictionary"/>.</param>
            <param name="value">The <see cref="T:NewsComponents.Feed.listviewLayout"/> value of the element
            to add to the <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutDictionary"/>.
            This argument can be a null reference.
            </param>
            <exception cref="T:System.ArgumentException">
            <para>An element with the specified <paramref name="key"/> already exists
            in the <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutDictionary"/>.</para>
            <para>-or-</para>
            <para>The <b>IStringlistviewLayoutDictionary</b> is set to use the
            <see cref="T:System.IComparable"/> interface, and <paramref name="key"/> does not
            implement the <b>IComparable</b> interface.</para></exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">
            The comparer throws an exception.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutDictionary"/> is read-only.
            </para><para>-or-</para>
            <para>The <b>IStringlistviewLayoutDictionary</b> has a fixed size.
            </para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.IStringlistviewLayoutDictionary.Clear">
            <summary>
            Removes all elements from the <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutDictionary"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutDictionary"/> is read-only.
            </para><para>-or-</para>
            <para>The <b>IStringlistviewLayoutDictionary</b> has a fixed size.
            </para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IDictionary.Clear"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.IStringlistviewLayoutDictionary.Contains(System.String)">
            <summary>
            Determines whether the <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutDictionary"/>
            contains the specified <see cref="T:System.String"/> key.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key to locate
            in the <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutDictionary"/>.</param>
            <returns><c>true</c> if the <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutDictionary"/>
            contains an element with the specified <paramref name="key"/>; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">
            The comparer throws an exception.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.IDictionary.Contains(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.IStringlistviewLayoutDictionary.Remove(System.String)">
            <summary>
            Removes the element with the specified <see cref="T:System.String"/> key
            from the <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutDictionary"/>.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key of the element to remove
            from the <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutDictionary"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">
            The comparer throws an exception.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutDictionary"/> is read-only.
            </para><para>-or-</para>
            <para>The <b>IStringlistviewLayoutDictionary</b> has a fixed size.
            </para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IDictionary.Remove(System.Object)"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.Old.IStringlistviewLayoutDictionary.IsFixedSize">
            <summary>
            Gets a value indicating whether the
            <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutDictionary"/> has a fixed size.
            </summary>
            <value><c>true</c> if the <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutDictionary"/>
            has a fixed size; otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IDictionary.IsFixedSize"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.Old.IStringlistviewLayoutDictionary.IsReadOnly">
            <summary>
            Gets a value indicating whether the
            <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutDictionary"/> is read-only.
            </summary>
            <value><c>true</c> if the <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutDictionary"/>
            is read-only; otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IDictionary.IsReadOnly"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.Old.IStringlistviewLayoutDictionary.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:NewsComponents.Feed.listviewLayout"/> value
            associated with the specified <see cref="T:System.String"/> key.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key
            whose value to get or set.</param>
            <value>The <see cref="T:NewsComponents.Feed.listviewLayout"/> value associated with the specified
            <paramref name="key"/>. If the specified <paramref name="key"/> is not found,
            attempting to get it returns
            a null reference,
            and attempting to set it creates a new element using the specified
            <paramref name="key"/>.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The property is set and the
            <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutDictionary"/> is read-only.</para>
            <para>-or-</para>
            <para>The property is set, <paramref name="key"/> does not exist in the collection,
            and the <b>IStringlistviewLayoutDictionary</b> has a fixed size.</para>
            </exception>
            <remarks>Please refer to <see cref="P:System.Collections.IDictionary.Item(System.Object)"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.Old.IStringlistviewLayoutDictionary.Keys">
            <summary>
            Gets an <see cref="T:NewsComponents.Collections.IStringCollection"/> containing the keys
            in the <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutDictionary"/>.
            </summary>
            <value>An <see cref="T:NewsComponents.Collections.IStringCollection"/> containing the keys
            in the <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutDictionary"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IDictionary.Keys"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.Old.IStringlistviewLayoutDictionary.Values">
            <summary>
            Gets an <see cref="T:NewsComponents.Collections.Old.IlistviewLayoutCollection"/> containing the values
            in the <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutDictionary"/>.
            </summary>
            <value>An <see cref="T:NewsComponents.Collections.Old.IlistviewLayoutCollection"/> containing the values
            in the <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutDictionary"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IDictionary.Values"/> for details.</remarks>
        </member>
        <member name="T:NewsComponents.Collections.Old.IStringlistviewLayoutList">
            <summary>
            Represents a strongly typed collection of <see cref="T:NewsComponents.Collections.Old.listviewLayoutEntry"/>
            objects that can be individually accessed by index.
            </summary>
            <remarks>
            <b>IStringlistviewLayoutList</b> provides an <see cref="T:System.Collections.IList"/>
            that is strongly typed for <see cref="T:NewsComponents.Collections.Old.listviewLayoutEntry"/> elements.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.IStringlistviewLayoutList.Add(NewsComponents.Collections.Old.listviewLayoutEntry)">
            <summary>
            Adds a <see cref="T:NewsComponents.Collections.Old.listviewLayoutEntry"/> to the end
            of the <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutList"/>.
            </summary>
            <param name="entry">The <see cref="T:NewsComponents.Collections.Old.listviewLayoutEntry"/> object
            to be added to the end of the <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutList"/>.
            </param>
            <returns>The <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutList"/> index at which
            the <paramref name="entry"/> has been added.</returns>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IStringlistviewLayoutList</b> has a fixed size.</para>
            </exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Add(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.IStringlistviewLayoutList.Clear">
            <summary>
            Removes all elements from the <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutList"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IStringlistviewLayoutList</b> has a fixed size.</para>
            </exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Clear"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.IStringlistviewLayoutList.Contains(NewsComponents.Collections.Old.listviewLayoutEntry)">
            <summary>
            Determines whether the <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutList"/>
            contains the specified <see cref="T:NewsComponents.Collections.Old.listviewLayoutEntry"/> element.
            </summary>
            <param name="entry">The <see cref="T:NewsComponents.Collections.Old.listviewLayoutEntry"/> object
            to locate in the <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutList"/>.</param>
            <returns><c>true</c> if <paramref name="entry"/> is found in the
            <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutList"/>; otherwise, <c>false</c>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Contains(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.IStringlistviewLayoutList.IndexOf(NewsComponents.Collections.Old.listviewLayoutEntry)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified
            <see cref="T:NewsComponents.Collections.Old.listviewLayoutEntry"/> in the <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutList"/>.
            </summary>
            <param name="entry">The <see cref="T:NewsComponents.Collections.Old.listviewLayoutEntry"/> object
            to locate in the <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutList"/>.</param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="entry"/>
            in the <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutList"/>, if found; otherwise, -1.
            </returns>
            <remarks>Please refer to <see cref="M:System.Collections.IList.IndexOf(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.IStringlistviewLayoutList.Insert(System.Int32,NewsComponents.Collections.Old.listviewLayoutEntry)">
            <summary>
            Inserts a <see cref="T:NewsComponents.Collections.Old.listviewLayoutEntry"/> element into the
            <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which
            <paramref name="entry"/> should be inserted.</param>
            <param name="entry">The <see cref="T:NewsComponents.Collections.Old.listviewLayoutEntry"/> object to insert
            into the <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutList"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is greater than
            <see cref="P:NewsComponents.Collections.Old.IStringlistviewLayoutCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IStringlistviewLayoutList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.IStringlistviewLayoutList.Remove(NewsComponents.Collections.Old.listviewLayoutEntry)">
            <summary>
            Removes the first occurrence of the specified <see cref="T:NewsComponents.Collections.Old.listviewLayoutEntry"/>
            from the <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutList"/>.
            </summary>
            <param name="entry">The <see cref="T:NewsComponents.Collections.Old.listviewLayoutEntry"/> object to remove
            from the <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutList"/>.</param>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IStringlistviewLayoutList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.Remove(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.IStringlistviewLayoutList.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the
            <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutList"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than
            <see cref="P:NewsComponents.Collections.Old.IStringlistviewLayoutCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutList"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>IStringlistviewLayoutList</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.IList.RemoveAt(System.Int32)"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.Old.IStringlistviewLayoutList.IsFixedSize">
            <summary>
            Gets a value indicating whether the
            <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutList"/> has a fixed size.
            </summary>
            <value><c>true</c> if the <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutList"/>
            has a fixed size; otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IList.IsFixedSize"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.Old.IStringlistviewLayoutList.IsReadOnly">
            <summary>
            Gets a value indicating whether the
            <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutList"/> is read-only.
            </summary>
            <value><c>true</c> if the <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutList"/>
            is read-only; otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.IList.IsReadOnly"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.Old.IStringlistviewLayoutList.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:NewsComponents.Collections.Old.listviewLayoutEntry"/> element at the specified index.
            </summary>
            <param name="index">The zero-based index of the
            <see cref="T:NewsComponents.Collections.Old.listviewLayoutEntry"/> element to get or set.</param>
            <value>
            The <see cref="T:NewsComponents.Collections.Old.listviewLayoutEntry"/> element at the specified <paramref name="index"/>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than
            <see cref="P:NewsComponents.Collections.Old.IStringlistviewLayoutCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">The property is set and the
            <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutList"/> is read-only.</exception>
            <remarks>Please refer to <see cref="P:System.Collections.IList.Item(System.Int32)"/> for details.</remarks>
        </member>
        <member name="T:NewsComponents.Collections.Old.IStringlistviewLayoutEnumerator">
            <summary>
            Supports type-safe iteration over a dictionary that
            contains <see cref="T:NewsComponents.Collections.Old.listviewLayoutEntry"/> elements.
            </summary>
            <remarks>
            <b>IStringlistviewLayoutEnumerator</b> provides an
            <see cref="T:System.Collections.IDictionaryEnumerator"/> that is strongly typed for
            <see cref="T:System.String"/> keys and <see cref="T:NewsComponents.Feed.listviewLayout"/> values.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.IStringlistviewLayoutEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><c>true</c> if the enumerator was successfully advanced to the next element;
            <c>false</c> if the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.IEnumerator.MoveNext"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.IStringlistviewLayoutEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position,
            which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.IEnumerator.Reset"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.Old.IStringlistviewLayoutEnumerator.Current">
            <summary>
            Gets the current <see cref="T:NewsComponents.Collections.Old.listviewLayoutEntry"/> element in the collection.
            </summary>
            <value>The current <see cref="T:NewsComponents.Collections.Old.listviewLayoutEntry"/> element in the collection.</value>
            <exception cref="T:System.InvalidOperationException"><para>The enumerator is positioned
            before the first element of the collection or after the last element.</para>
            <para>-or-</para>
            <para>The collection was modified after the enumerator was created.</para></exception>
            <remarks>Please refer to <see cref="P:System.Collections.IEnumerator.Current"/> for details, but note
            that <b>Current</b> fails if the collection was modified since the last successful
            call to <see cref="M:NewsComponents.Collections.Old.IStringlistviewLayoutEnumerator.MoveNext"/> or <see cref="M:NewsComponents.Collections.Old.IStringlistviewLayoutEnumerator.Reset"/>.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.Old.IStringlistviewLayoutEnumerator.Entry">
            <summary>
            Gets a <see cref="T:NewsComponents.Collections.Old.listviewLayoutEntry"/> containing both
            the key and the value of the current dictionary entry.
            </summary>
            <value>A <see cref="T:NewsComponents.Collections.Old.listviewLayoutEntry"/> containing both
            the key and the value of the current dictionary entry.</value>
            <exception cref="T:System.InvalidOperationException"><para>The enumerator is positioned
            before the first element of the dictionary or after the last element.</para>
            <para>-or-</para>
            <para>The dictionary was modified after the enumerator was created.</para></exception>
            <remarks>Please refer to <see cref="P:System.Collections.IDictionaryEnumerator.Entry"/> for details, but
            note that <b>Entry</b> fails if the collection was modified since the last successful
            call to <see cref="M:NewsComponents.Collections.Old.IStringlistviewLayoutEnumerator.MoveNext"/> or <see cref="M:NewsComponents.Collections.Old.IStringlistviewLayoutEnumerator.Reset"/>.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.Old.IStringlistviewLayoutEnumerator.Key">
            <summary>
            Gets the <see cref="T:System.String"/> key of the current dictionary entry.
            </summary>
            <value>The <see cref="T:System.String"/> key
            of the current element of the enumeration.</value>
            <exception cref="T:System.InvalidOperationException"><para>The enumerator is positioned
            before the first element of the dictionary or after the last element.</para>
            <para>-or-</para>
            <para>The dictionary was modified after the enumerator was created.</para></exception>
            <remarks>Please refer to <see cref="P:System.Collections.IDictionaryEnumerator.Key"/> for details, but
            note that <b>Key</b> fails if the collection was modified since the last successful
            call to <see cref="M:NewsComponents.Collections.Old.IStringlistviewLayoutEnumerator.MoveNext"/> or <see cref="M:NewsComponents.Collections.Old.IStringlistviewLayoutEnumerator.Reset"/>.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.Old.IStringlistviewLayoutEnumerator.Value">
            <summary>
            Gets the <see cref="T:NewsComponents.Feed.listviewLayout"/> value of the current dictionary entry.
            </summary>
            <value>The <see cref="T:NewsComponents.Feed.listviewLayout"/> value
            of the current element of the enumeration.</value>
            <exception cref="T:System.InvalidOperationException"><para>The enumerator is positioned
            before the first element of the dictionary or after the last element.</para>
            <para>-or-</para>
            <para>The dictionary was modified after the enumerator was created.</para></exception>
            <remarks>Please refer to <see cref="P:System.Collections.IDictionaryEnumerator.Value"/> for details, but
            note that <b>Value</b> fails if the collection was modified since the last successful
            call to <see cref="M:NewsComponents.Collections.Old.IStringlistviewLayoutEnumerator.MoveNext"/> or <see cref="M:NewsComponents.Collections.Old.IStringlistviewLayoutEnumerator.Reset"/>.</remarks>
        </member>
        <member name="T:NewsComponents.Collections.Old.listviewLayoutEntry">
            <summary>
            Implements a strongly typed pair of one <see cref="T:System.String"/>
            key and one <see cref="T:NewsComponents.Feed.listviewLayout"/> value.
            </summary>
            <remarks>
            <b>listviewLayoutEntry</b> provides a <see cref="T:System.Collections.DictionaryEntry"/> that is strongly
            typed for <see cref="T:System.String"/> keys and <see cref="T:NewsComponents.Feed.listviewLayout"/> values.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.listviewLayoutEntry.#ctor(System.String,NewsComponents.Feed.listviewLayout)">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.Collections.Old.listviewLayoutEntry"/>
            class with the specified key and value.
            </summary>
            <param name="key">
            The <see cref="T:System.String"/> key in the key-and-value pair.</param>
            <param name="value">
            The <see cref="T:NewsComponents.Feed.listviewLayout"/> value in the key-and-value pair.
            This argument can be a null reference.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
        </member>
        <member name="M:NewsComponents.Collections.Old.listviewLayoutEntry.op_Implicit(System.Collections.DictionaryEntry)~NewsComponents.Collections.Old.listviewLayoutEntry">
            <summary>
            Converts a <see cref="T:System.Collections.DictionaryEntry"/> to a <see cref="T:NewsComponents.Collections.Old.listviewLayoutEntry"/>.
            </summary>
            <param name="entry">A <see cref="T:System.Collections.DictionaryEntry"/> object to convert.</param>
            <returns>A <see cref="T:NewsComponents.Collections.Old.listviewLayoutEntry"/> object that represents
            the converted <paramref name="entry"/>.</returns>
            <exception cref="T:System.InvalidCastException">
            <para><paramref name="entry"/> contains a key that is not compatible
            with <see cref="T:System.String"/>.</para>
            <para>-or-</para>
            <para><paramref name="entry"/> contains a value that is not compatible
            with <see cref="T:NewsComponents.Feed.listviewLayout"/>.</para>
            </exception>
        </member>
        <member name="M:NewsComponents.Collections.Old.listviewLayoutEntry.op_Implicit(NewsComponents.Collections.Old.listviewLayoutEntry)~System.Collections.DictionaryEntry">
            <summary>
            Converts a <see cref="T:NewsComponents.Collections.Old.listviewLayoutEntry"/> to a <see cref="T:System.Collections.DictionaryEntry"/>.
            </summary>
            <param name="pair">A <see cref="T:NewsComponents.Collections.Old.listviewLayoutEntry"/> object to convert.</param>
            <returns>A <see cref="T:System.Collections.DictionaryEntry"/> object that
            represents the converted <paramref name="pair"/>.</returns>
        </member>
        <member name="P:NewsComponents.Collections.Old.listviewLayoutEntry.Key">
            <summary>
            Gets or sets the <see cref="T:System.String"/> key in the key-and-value pair.
            </summary>
            <value>
            The <see cref="T:System.String"/> key in the key-and-value pair.
            The default is a null reference.
            </value>
            <exception cref="T:System.ArgumentNullException">
            <b>Key</b> is set to a null reference.</exception>
            <remarks>
            <see cref="T:NewsComponents.Collections.Old.listviewLayoutEntry"/> is a value type and therefore has an implicit default
            constructor that zeroes all data members. This means that the <b>Key</b> property of
            a default-constructed <b>listviewLayoutEntry</b> contains a null reference by default,
            even though it is not possible to explicitly set <b>Key</b> to a null reference.
            </remarks>
        </member>
        <member name="P:NewsComponents.Collections.Old.listviewLayoutEntry.Value">
            <summary>
            Gets or sets the <see cref="T:NewsComponents.Feed.listviewLayout"/> value in the key-and-value pair.
            </summary>
            <value>
            The <see cref="T:NewsComponents.Feed.listviewLayout"/> value in the key-and-value pair.
            This value can be a null reference, which is also the default.
            </value>
        </member>
        <member name="T:NewsComponents.Collections.Old.listviewLayoutCollection">
            <summary>
            Implements a strongly typed collection of <see cref="T:NewsComponents.Collections.Old.listviewLayoutEntry"/>
            key-and-value pairs that are sorted by the keys and are accessible by key and by index.
            </summary>
            <remarks>
            <b>listviewLayoutCollection</b> provides a <see cref="T:System.Collections.SortedList"/> that is strongly typed
            for <see cref="T:System.String"/> keys and <see cref="T:NewsComponents.Feed.listviewLayout"/> values.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.listviewLayoutCollection.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/> class.
            </overloads>
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/> class that is empty,
            has the default initial capacity and is sorted according to the <see cref="T:System.IComparable"/>
            interface implemented by each key added to the <b>listviewLayoutCollection</b>.
            </summary>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.#ctor"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.listviewLayoutCollection.#ctor(System.Collections.IComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/> class that is empty,
            has the default initial capacity and is sorted according to the specified
            <see cref="T:System.Collections.IComparer"/> interface.
            </summary>
            <param name="comparer">
            <para>The <see cref="T:System.Collections.IComparer"/> implementation to use when comparing keys.</para>
            <para>-or-</para>
            <para>A null reference, to use the <see cref="T:System.IComparable"/> implementation of each key.
            </para></param>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.#ctor(System.Collections.IComparer)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.listviewLayoutCollection.#ctor(System.Collections.IDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/> class that contains
            elements copied from the specified dictionary, has the same initial capacity as the
            number of elements copied and is sorted according to the <see cref="T:System.IComparable"/>
            interface implemented by each key.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.IDictionary"/>
            whose elements are copied to the new collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dictionary"/> is a null reference.</exception>
            <exception cref="T:System.InvalidCastException">
            <para>One or more elements in <paramref name="dictionary"/> do not implement the
            <see cref="T:System.IComparable"/> interface.</para>
            <para>-or-</para>
            <para><paramref name="dictionary"/> contains keys that are not compatible
            with <see cref="T:System.String"/>.</para>
            <para>-or-</para>
            <para><paramref name="dictionary"/> contains values that are not compatible
            with <see cref="T:NewsComponents.Feed.listviewLayout"/>.</para>
            </exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.#ctor(System.Collections.IDictionary)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.listviewLayoutCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/> class that is empty,
            has the specified initial capacity and is sorted according to the <see cref="T:System.IComparable"/>
            interface implemented by each key added to the <b>listviewLayoutCollection</b>.
            </summary>
            <param name="capacity">The initial number of elements that the
            <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/> can contain.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is less than zero.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.#ctor(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.listviewLayoutCollection.#ctor(System.Collections.IComparer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/> class that is empty,
            has the specified initial capacity and is sorted according to the specified
            <see cref="T:System.Collections.IComparer"/> interface.
            </summary>
            <param name="comparer">
            <para>The <see cref="T:System.Collections.IComparer"/> implementation to use when comparing keys.</para>
            <para>-or-</para>
            <para>A null reference to use the <see cref="T:System.IComparable"/> implementation of each key.
            </para></param>
            <param name="capacity">The initial number of elements that the
            <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/> can contain.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is less than zero.</exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)"/> for details.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.listviewLayoutCollection.#ctor(System.Collections.IDictionary,System.Collections.IComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/> class that contains
            elements copied from the specified dictionary, has the same initial capacity as the
            number of elements copied and is sorted according to the specified <see cref="T:System.Collections.IComparer"/>
            interface.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.IDictionary"/>
            whose elements are copied to the new collection.</param>
            <param name="comparer">
            <para>The <see cref="T:System.Collections.IComparer"/> implementation to use when comparing keys.</para>
            <para>-or-</para>
            <para>A null reference, to use the <see cref="T:System.IComparable"/> implementation of each key.
            </para></param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dictionary"/> is a null reference.</exception>
            <exception cref="T:System.InvalidCastException">
            <para>One or more elements in <paramref name="dictionary"/> do not implement the
            <see cref="T:System.IComparable"/> interface.</para>
            <para>-or-</para>
            <para><paramref name="dictionary"/> contains keys that are not compatible
            with <see cref="T:System.String"/>.</para>
            <para>-or-</para>
            <para><paramref name="dictionary"/> contains values that are not compatible
            with <see cref="T:NewsComponents.Feed.listviewLayout"/>.</para>
            </exception>
            <remarks>
            Please refer to <see cref="M:System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)"/> for details.
            </remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.listviewLayoutCollection.Add(System.String,NewsComponents.Feed.listviewLayout)">
            <summary>
            Adds an element with the specified <see cref="T:System.String"/> key and
            <see cref="T:NewsComponents.Feed.listviewLayout"/> value to the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key of the element
            to add to the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.</param>
            <param name="value">The <see cref="T:NewsComponents.Feed.listviewLayout"/> value of the element
            to add to the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.
            This argument can be a null reference.
            </param>
            <exception cref="T:System.ArgumentException">
            <para>An element with the specified <paramref name="key"/>
            already exists in the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.</para>
            <para>-or-</para>
            <para>The <b>listviewLayoutCollection</b> is set to use the <see cref="T:System.IComparable"/> interface,
            and <paramref name="key"/> does not implement the <b>IComparable</b> interface.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">
            The comparer throws an exception.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>listviewLayoutCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.Add(System.Object,System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.listviewLayoutCollection.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <summary>
            Adds an element with the specified key and value
            to the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.
            </summary>
            <param name="key">The key of the element to add to the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.
            This argument must be compatible with <see cref="T:System.String"/>.</param>
            <param name="value">The value of the element to add to the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.
            This argument must be compatible with <see cref="T:NewsComponents.Feed.listviewLayout"/>.
            This argument can be a null reference.
            </param>
            <exception cref="T:System.ArgumentException">
            <para>An element with the specified <paramref name="key"/>
            already exists in the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.</para>
            <para>-or-</para>
            <para>The <b>listviewLayoutCollection</b> is set to use the <see cref="T:System.IComparable"/> interface,
            and <paramref name="key"/> does not implement the <b>IComparable</b> interface.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidCastException">
            <para><paramref name="key"/> is not compatible with <see cref="T:System.String"/>.</para>
            <para>-or-</para>
            <para><paramref name="value"/> is not compatible with <see cref="T:NewsComponents.Feed.listviewLayout"/>.</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The comparer throws an exception.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>listviewLayoutCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.Add(System.Object,System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.listviewLayoutCollection.Clear">
            <summary>
            Removes all elements from the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>listviewLayoutCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.Clear"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.listviewLayoutCollection.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.
            </summary>
            <returns>A shallow copy of the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.Clone"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.listviewLayoutCollection.Contains(System.String)">
            <summary>
            Determines whether the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>
            contains the specified <see cref="T:System.String"/> key.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key
            to locate in the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.</param>
            <returns><c>true</c> if the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/> contains an element
            with the specified <paramref name="key"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">
            The comparer throws an exception.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.Contains(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.listviewLayoutCollection.Contains(System.Uri)">
            <summary>
            Overloaded.
            </summary>
            <param name="key">Uri</param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Collections.Old.listviewLayoutCollection.System#Collections#IDictionary#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/> contains the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.
            This argument must be compatible with <see cref="T:System.String"/>.</param>
            <returns><c>true</c> if the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/> contains an element
            with the specified <paramref name="key"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidCastException"><paramref name="key"/>
            is not compatible with <see cref="T:System.String"/>.</exception>
            <exception cref="T:System.InvalidOperationException">
            The comparer throws an exception.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.Contains(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.listviewLayoutCollection.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>
            contains the specified <see cref="T:System.String"/> key.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key
            to locate in the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.</param>
            <returns><c>true</c> if the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/> contains an element
            with the specified <paramref name="key"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">
            The comparer throws an exception.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.ContainsKey(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.listviewLayoutCollection.ContainsKey(System.Uri)">
            <summary>
            Overloaded.
            </summary>
            <param name="key">Uri</param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Collections.Old.listviewLayoutCollection.ContainsValue(NewsComponents.Feed.listviewLayout)">
            <summary>
            Determines whether the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>
            contains the specified <see cref="T:NewsComponents.Feed.listviewLayout"/> value.
            </summary>
            <param name="value">The <see cref="T:NewsComponents.Feed.listviewLayout"/> value
            to locate in the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.
            This argument can be a null reference.
            </param>
            <returns><c>true</c> if the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/> contains an element
            with the specified <paramref name="value"/>; otherwise, <c>false</c>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.ContainsValue(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.listviewLayoutCollection.CopyTo(NewsComponents.Collections.Old.listviewLayoutEntry[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/> to a one-dimensional <see cref="T:System.Array"/> of
            <see cref="T:NewsComponents.Collections.Old.listviewLayoutEntry"/> elements, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the
            <see cref="T:NewsComponents.Collections.Old.listviewLayoutEntry"/> elements copied from the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.
            The <b>Array</b> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/>
            at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/> is greater than
            the available space from <paramref name="arrayIndex"/> to the end of the destination
            <paramref name="array"/>.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.CopyTo(System.Array,System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.listviewLayoutCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/> to a one-dimensional <see cref="T:System.Array"/>,
            starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the
            <see cref="T:NewsComponents.Collections.Old.listviewLayoutEntry"/> elements copied from the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.
            The <b>Array</b> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/>
            at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><para>
            <paramref name="array"/> is multidimensional.
            </para><para>-or-</para><para>
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            </para><para>-or-</para><para>
            The number of elements in the source <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/> is greater than
            the available space from <paramref name="arrayIndex"/> to the end of the destination
            <paramref name="array"/>.</para></exception>
            <exception cref="T:System.InvalidCastException">
            The <see cref="T:NewsComponents.Collections.Old.listviewLayoutEntry"/> type cannot be cast automatically
            to the type of the destination <paramref name="array"/>.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.CopyTo(System.Array,System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.listviewLayoutCollection.GetByIndex(System.Int32)">
            <summary>
            Gets the <see cref="T:NewsComponents.Feed.listviewLayout"/> value at the
            specified index of the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.
            </summary>
            <param name="index">The zero-based index of the
            <see cref="T:NewsComponents.Feed.listviewLayout"/> value to get.</param>
            <returns>The <see cref="T:NewsComponents.Feed.listviewLayout"/> value at the specified
            <paramref name="index"/> of the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than <see cref="P:NewsComponents.Collections.Old.listviewLayoutCollection.Count"/>.</para>
            </exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.GetByIndex(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.listviewLayoutCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutEnumerator"/> that can
            iterate through the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.
            </summary>
            <returns>An <see cref="T:NewsComponents.Collections.Old.IStringlistviewLayoutEnumerator"/>
            for the entire <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.GetEnumerator"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.listviewLayoutCollection.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator"/> that can
            iterate through the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.IDictionaryEnumerator"/>
            for the entire <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.GetEnumerator"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.listviewLayoutCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> that can
            iterate through the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/>
            for the entire <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.GetEnumerator"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.listviewLayoutCollection.GetKey(System.Int32)">
            <summary>
            Gets the <see cref="T:System.String"/> key at the
            specified index of the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.
            </summary>
            <param name="index">The zero-based index of the
            <see cref="T:System.String"/> key to get.</param>
            <returns>The <see cref="T:System.String"/> key at the specified
            <paramref name="index"/> of the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than <see cref="P:NewsComponents.Collections.Old.listviewLayoutCollection.Count"/>.</para>
            </exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.GetKey(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.listviewLayoutCollection.GetKeyList">
            <summary>
            Gets the keys in the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.
            </summary>
            <returns>An <see cref="T:NewsComponents.Collections.IStringList"/> containing the keys
            in the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.GetKeyList"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.listviewLayoutCollection.GetValueList">
            <summary>
            Gets the values in the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.
            </summary>
            <returns>An <see cref="T:NewsComponents.Collections.Old.IlistviewLayoutList"/> containing the values
            in the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.GetValueList"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.listviewLayoutCollection.IndexOfKey(System.String)">
            <summary>
            Returns the zero-based index of the specified <see cref="T:System.String"/>
            key in the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key
            to locate in the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.</param>
            <returns>The zero-based index of <paramref name="key"/> in the
            <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">
            The comparer throws an exception.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.IndexOfKey(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.listviewLayoutCollection.IndexOfValue(NewsComponents.Feed.listviewLayout)">
            <summary>
            Returns the zero-based index of the specified <see cref="T:NewsComponents.Feed.listviewLayout"/>
            value in the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.
            </summary>
            <param name="value">The <see cref="T:NewsComponents.Feed.listviewLayout"/> value
            to locate in the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.
            This argument can be a null reference.
            </param>
            <returns>The zero-based index of <paramref name="value"/> in the
            <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>, if found; otherwise, -1.</returns>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.IndexOfValue(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.listviewLayoutCollection.Remove(System.String)">
            <summary>
            Removes the element with the specified <see cref="T:System.String"/> key
            from the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key of the element
            to remove from the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">
            The comparer throws an exception.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>listviewLayoutCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.Remove(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.listviewLayoutCollection.System#Collections#IDictionary#Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.
            </summary>
            <param name="key">The key of the element to remove from the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.
            This argument must be compatible with <see cref="T:System.String"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidCastException"><paramref name="key"/>
            is not compatible with <see cref="T:System.String"/>.</exception>
            <exception cref="T:System.InvalidOperationException">
            The comparer throws an exception.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>listviewLayoutCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.Remove(System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.listviewLayoutCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than <see cref="P:NewsComponents.Collections.Old.listviewLayoutCollection.Count"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>listviewLayoutCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.RemoveAt(System.Int32)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.listviewLayoutCollection.SetByIndex(System.Int32,NewsComponents.Feed.listviewLayout)">
            <summary>
            Sets the <see cref="T:NewsComponents.Feed.listviewLayout"/> value at the
            specified index of the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.
            </summary>
            <param name="index">The zero-based index of the
            <see cref="T:NewsComponents.Feed.listviewLayout"/> value to set.</param>
            <param name="value">The <see cref="T:NewsComponents.Feed.listviewLayout"/> object to store
            at the specified <paramref name="index"/> of the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.
            This argument can be a null reference.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than <see cref="P:NewsComponents.Collections.Old.listviewLayoutCollection.Count"/>.</para>
            </exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.SetByIndex(System.Int32,System.Object)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.listviewLayoutCollection.Synchronized(NewsComponents.Collections.Old.listviewLayoutCollection)">
            <summary>
            Returns a synchronized (thread-safe) wrapper
            for the specified <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.
            </summary>
            <param name="dictionary">The <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/> to synchronize.</param>
            <returns>
            A synchronized (thread-safe) wrapper around <paramref name="dictionary"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is a null reference.</exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.Synchronized(System.Collections.SortedList)"/> for details.</remarks>
        </member>
        <member name="M:NewsComponents.Collections.Old.listviewLayoutCollection.TrimToSize">
            <summary>
            Sets the capacity to the actual number of elements in the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            <para>The <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The <b>listviewLayoutCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="M:System.Collections.SortedList.TrimToSize"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.Old.listviewLayoutCollection.Capacity">
            <summary>
            Gets or sets the capacity of the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.
            </summary>
            <value>The number of elements that the
            <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/> can contain.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <b>Capacity</b> is set to a value that is less than <see cref="P:NewsComponents.Collections.Old.listviewLayoutCollection.Count"/>.</exception>
            <remarks>Please refer to <see cref="P:System.Collections.SortedList.Capacity"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.Old.listviewLayoutCollection.Count">
            <summary>
            Gets the number of key-and-value pairs contained
            in the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.
            </summary>
            <value>The number of key-and-value pairs contained
            in the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.SortedList.Count"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.Old.listviewLayoutCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/> has a fixed size.
            </summary>
            <value><c>true</c> if the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/> has a fixed size;
            otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.SortedList.IsFixedSize"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.Old.listviewLayoutCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/> is read-only.
            </summary>
            <value><c>true</c> if the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/> is read-only;
            otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.SortedList.IsReadOnly"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.Old.listviewLayoutCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>
            is synchronized (thread-safe).
            </summary>
            <value><c>true</c> if access to the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/> is
            synchronized (thread-safe); otherwise, <c>false</c>. The default is <c>false</c>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.SortedList.IsSynchronized"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.Old.listviewLayoutCollection.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:NewsComponents.Feed.listviewLayout"/> value
            associated with the specified <see cref="T:System.String"/> key.
            </summary>
            <param name="key">The <see cref="T:System.String"/> key
            whose value to get or set.</param>
            <value>The <see cref="T:NewsComponents.Feed.listviewLayout"/> value associated with the specified
            <paramref name="key"/>. If the specified <paramref name="key"/> is not found,
            attempting to get it returns
            a null reference,
            and attempting to set it creates a new element using the specified
            <paramref name="key"/>.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>The property is set and the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The property is set, <paramref name="key"/> does not exist in the collection,
            and the <b>listviewLayoutCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="P:System.Collections.SortedList.Item(System.Object)"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.Old.listviewLayoutCollection.System#Collections#IDictionary#Item(System.Object)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get or set.
            This argument must be compatible with <see cref="T:System.String"/>.</param>
            <value>
            The value associated with the specified <paramref name="key"/>. If the specified
            <paramref name="key"/> is not found, attempting to get it returns
            a null reference,
            and attempting to set it creates a new element using the specified <paramref name="key"/>.
            When set, this value must be compatible with <see cref="T:NewsComponents.Feed.listviewLayout"/>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference.</exception>
            <exception cref="T:System.InvalidCastException">
            <para><paramref name="key"/> is not compatible with <see cref="T:System.String"/>.</para>
            <para>-or-</para>
            <para>The property is set to a value that is not compatible with
            <see cref="T:NewsComponents.Feed.listviewLayout"/>.</para></exception>
            <exception cref="T:System.NotSupportedException">
            <para>The property is set and the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/> is read-only.</para>
            <para>-or-</para>
            <para>The property is set, <paramref name="key"/> does not exist in the collection,
            and the <b>listviewLayoutCollection</b> has a fixed size.</para></exception>
            <remarks>Please refer to <see cref="P:System.Collections.SortedList.Item(System.Object)"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.Old.listviewLayoutCollection.Keys">
            <summary>
            Gets an <see cref="T:NewsComponents.Collections.IStringCollection"/> containing
            the keys in the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.
            </summary>
            <value>An <see cref="T:NewsComponents.Collections.IStringCollection"/> containing
            the keys in the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.SortedList.Keys"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.Old.listviewLayoutCollection.System#Collections#IDictionary#Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> containing
            the keys in the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.
            </summary>
            <value>An <see cref="T:System.Collections.ICollection"/> containing
            the keys in the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.SortedList.Keys"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.Old.listviewLayoutCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize
            access to the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.
            </summary>
            <value>An object that can be used to synchronize
            access to the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.SortedList.SyncRoot"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.Old.listviewLayoutCollection.Values">
            <summary>
            Gets an <see cref="T:NewsComponents.Collections.Old.IlistviewLayoutCollection"/> containing
            the values in the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.
            </summary>
            <value>An <see cref="T:NewsComponents.Collections.Old.IlistviewLayoutCollection"/> containing
            the values in the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.SortedList.Values"/> for details.</remarks>
        </member>
        <member name="P:NewsComponents.Collections.Old.listviewLayoutCollection.System#Collections#IDictionary#Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> containing
            the values in the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.
            </summary>
            <value>An <see cref="T:System.Collections.ICollection"/> containing
            the values in the <see cref="T:NewsComponents.Collections.Old.listviewLayoutCollection"/>.</value>
            <remarks>Please refer to <see cref="P:System.Collections.SortedList.Values"/> for details.</remarks>
        </member>
        <member name="T:NewsComponents.NamespaceCore">
            <summary>
            NewsComponents Namespaces.
            </summary>
        </member>
        <member name="T:NewsComponents.NamespaceXml">
            <summary>
            Provides public constants for wellknown XML namespaces.
            </summary>
            <remarks>Author: Daniel Cazzulino, kzu.net@gmail.com</remarks>
        </member>
        <member name="F:NewsComponents.NamespaceXml.Xml">
            <summary>
            The public XML 1.0 namespace. 
            </summary>
            <remarks>See http://www.w3.org/TR/2004/REC-xml-20040204/</remarks>
        </member>
        <member name="F:NewsComponents.NamespaceXml.XmlNs">
            <summary>
            Public Xml Namespaces specification namespace. 
            </summary>
            <remarks>See http://www.w3.org/TR/REC-xml-names/</remarks>
        </member>
        <member name="F:NewsComponents.NamespaceXml.XmlNsPrefix">
            <summary>
            Public Xml Namespaces prefix. 
            </summary>
            <remarks>See http://www.w3.org/TR/REC-xml-names/</remarks>
        </member>
        <member name="F:NewsComponents.NamespaceXml.Xsi">
            <summary>
            XML Schema instance namespace.
            </summary>
            <remarks>See http://www.w3.org/TR/xmlschema-1/</remarks>
        </member>
        <member name="F:NewsComponents.NamespaceXml.Xsd">
            <summary>
            XML 1.0 Schema namespace.
            </summary>
            <remarks>See http://www.w3.org/TR/xmlschema-1/</remarks>
        </member>
        <member name="T:NewsComponents.XmlHelper">
            <summary>
            Provides a instance of the XmlSerializerCache 
            </summary>
        </member>
        <member name="P:NewsComponents.XmlHelper.SerializerCache">
            <summary>
            Returns a instance of XmlSerializerCache.
            </summary>
            <returns>Instance of the XmlSerializerCache class</returns>
        </member>
        <member name="T:NewsComponents.XmlHelper.InstanceHelper">
            <summary>
            Private instance helper class to impl. Singleton
            </summary>
        </member>
        <member name="T:NewsComponents.Utils.SerializationInfoReader">
            <summary>
            Simple class that reads a SerializationInfo object 
            with default values
            </summary>
        </member>
        <member name="M:NewsComponents.Utils.SerializationInfoReader.#ctor(System.Runtime.Serialization.SerializationInfo)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:NewsComponents.Utils.SerializationInfoReader"/> class.
            </summary>
            <param name="info">The info.</param>
        </member>
        <member name="M:NewsComponents.Utils.SerializationInfoReader.Contains(System.String)">
            <summary>
            Determines whether it contains the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if it contains the specified key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NewsComponents.Utils.SerializationInfoReader.GetBoolean(System.String,System.Boolean)">
            <summary>
            Gets a boolean.
            </summary>
            <param name="name">The name.</param>
            <param name="defaultValue">the default value.</param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Utils.SerializationInfoReader.GetByte(System.String,System.Byte)">
            <summary>
            Get Byte
            </summary>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Utils.SerializationInfoReader.GetChar(System.String,System.Char)">
            <summary>
            Get Char
            </summary>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Utils.SerializationInfoReader.GetDateTime(System.String,System.DateTime)">
            <summary>
            Get Date Time
            </summary>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Utils.SerializationInfoReader.GetDecimal(System.String,System.Decimal)">
            <summary>
            Get Decimal
            </summary>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Utils.SerializationInfoReader.GetDouble(System.String,System.Double)">
            <summary>
            Get Double
            </summary>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Utils.SerializationInfoReader.GetShort(System.String,System.Int16)">
            <summary>
            Get Short
            </summary>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Utils.SerializationInfoReader.GetInt(System.String,System.Int32)">
            <summary>
            Get Int
            </summary>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Utils.SerializationInfoReader.GetLong(System.String,System.Int64)">
            <summary>
            Get Long
            </summary>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Utils.SerializationInfoReader.GetSingle(System.String,System.Single)">
            <summary>
            Get Single
            </summary>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Utils.SerializationInfoReader.GetString(System.String,System.String)">
            <summary>
            GetString
            </summary>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Utils.SerializationInfoReader.GetValue(System.String,System.Type,System.Object)">
            <summary>
            Get Value
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Utils.SerializationInfoReader.GetFont(System.String,System.Drawing.Font)">
            <summary>
            Gets a Font, but only if it was serialized with a call to
            SerializationInfoReader.ConvertFont().
            </summary>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Utils.SerializationInfoReader.GetImage(System.String,System.Drawing.Image)">
            <summary>
            Gets a image.
            </summary>
            <param name="name">The name.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Utils.SerializationInfoReader.VersionNumber">
            <summary>
            Returns the Version Number of the assembly
            </summary>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Utils.SerializationInfoReader.GetVersion(System.Runtime.Serialization.SerializationInfo)">
            <summary>
            Gets the version.
            </summary>
            <param name="info">The info.</param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Utils.SerializationInfoReader.ConvertFont(System.Drawing.Font)">
            <summary>
            Convert Font to a serializable string
            </summary>
            <param name="font"></param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Utils.SerializationInfoReader.ConvertBytesToImage(System.Byte[])">
            <summary>
            Converts byte array to an image.
            </summary>
            <param name="bytes">The bytes.</param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Utils.SerializationInfoReader.ConvertImageToBytes(System.Drawing.Image)">
            <summary>
            Converts the image to byte array.
            </summary>
            <param name="image">The image.</param>
            <returns></returns>
        </member>
        <member name="P:NewsComponents.Utils.SerializationInfoReader.Keys">
            <summary>
            Gets access to the keys.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="P:NewsComponents.Utils.SerializationInfoReader.Info">
            <summary>
            Gets the Serialization Info.
            </summary>
            <value>The info.</value>
        </member>
        <member name="T:NewsComponents.Utils.ImportFeedFormat">
            <summary>
            Supported feed formats to import
            </summary>
        </member>
        <member name="F:NewsComponents.Utils.ImportFeedFormat.Unknown">
            <summary>
            Unknown or not supported
            </summary>
        </member>
        <member name="F:NewsComponents.Utils.ImportFeedFormat.Bandit">
            <summary>
            Native RSS Bandit import format
            </summary>
        </member>
        <member name="F:NewsComponents.Utils.ImportFeedFormat.OCS">
            <summary>
            Open Content Syndication. See http://internetalchemy.org/ocs/
            </summary>
        </member>
        <member name="F:NewsComponents.Utils.ImportFeedFormat.OPML">
            <summary>
            Outline Processor Markup Language, see http://opml.scripting.com/spec
            </summary>
        </member>
        <member name="F:NewsComponents.Utils.ImportFeedFormat.SIAM">
            <summary>
            Synchronization of Information Aggregators using Markup (SIAM),
            see http://www.25hoursaday.com/draft-obasanjo-siam-01.html
            </summary>
        </member>
        <member name="T:NewsComponents.Utils.ImportFilter">
            <summary>
            The ImportFilter class provides methods to assist in importing Rss Feed lists from other formats.
            </summary>
        </member>
        <member name="M:NewsComponents.Utils.ImportFilter.#ctor">
            <summary>
            This ctor instantiates a new ImportFilter without initializing the feed list.
            Sets this.Format = ImportFeedFormat.Unknown
            </summary>
        </member>
        <member name="M:NewsComponents.Utils.ImportFilter.#ctor(System.Xml.XmlDocument)">
            <summary>
            Instantiates a new ImportFilter from an XmlDocument containing the
            feed list
            </summary>
            <param name="FeedList">System.Xml.XmlDocument containing the Xml of the feed list to process</param>
        </member>
        <member name="M:NewsComponents.Utils.ImportFilter.#ctor(System.String)">
            <summary>
            Instantiates a new ImportFilter from a string containing Xml text
            of the feed list
            </summary>
            <param name="FeedList">System.String containing Xml text of the feed list to process</param>
        </member>
        <member name="M:NewsComponents.Utils.ImportFilter.GetImportXsl">
            <summary>
            Get the filter (XslTransform) to use for import.
            </summary>
            <returns>System.Xml.Xsl.XslTransform containing the transform that will convert the input to the native feedlist format</returns>
        </member>
        <member name="M:NewsComponents.Utils.ImportFilter.DetectFormat">
            <summary>
            Detects the format of the feed list.
            </summary>
            <returns>System.String indicating the format.  If the format can not be determined, then this value
            will be ImportFeedFormat.Unknown</returns>
        </member>
        <member name="P:NewsComponents.Utils.ImportFilter.FeedList">
            <summary>
            Get/Set the feedlist as a XmlDocument.
            </summary>
        </member>
        <member name="P:NewsComponents.Utils.ImportFilter.Format">
            <summary>
            State variable representing the format of the feed.  This is valued
            upon instantiation using the parameterized constructors.
            It is also valued after the GetImportXsl() method is called or when the 
            value of FeedList is changed.
            </summary>
        </member>
        <member name="T:NewsComponents.Collections.BinaryHeap">
            <summary>Collection implemented with the properties of a binary heap.</summary>
        </member>
        <member name="F:NewsComponents.Collections.BinaryHeap._list">
            <summary>The underlying array for the heap (ArrayList gives us resizing capability).</summary>
        </member>
        <member name="M:NewsComponents.Collections.BinaryHeap.#ctor(NewsComponents.Collections.BinaryHeap)">
            <summary>Initialize the heap with another heap.</summary>
            <param name="heap">The heap on which to perform a shallow-copy.</param>
        </member>
        <member name="M:NewsComponents.Collections.BinaryHeap.#ctor(System.Int32)">
            <summary>Initialize the heap.</summary>
            <param name="capacity">The initial size of the heap.</param>
        </member>
        <member name="M:NewsComponents.Collections.BinaryHeap.#ctor">
            <summary>Initialize the heap.</summary>
        </member>
        <member name="M:NewsComponents.Collections.BinaryHeap.Clear">
            <summary>Empties the heap.</summary>
        </member>
        <member name="M:NewsComponents.Collections.BinaryHeap.Clone">
            <summary>Performs a shallow-copy of the heap.</summary>
            <returns>A shallow-copy of the heap.</returns>
        </member>
        <member name="M:NewsComponents.Collections.BinaryHeap.Contains(System.Object)">
            <summary>Determines whether an object is in the heap.</summary>
            <param name="value">The object for which we want to search.</param>
            <returns>Whether the object is in the heap.</returns>
        </member>
        <member name="M:NewsComponents.Collections.BinaryHeap.Insert(System.IComparable,System.Object)">
            <summary>Adds an item to the heap.</summary>
            <param name="key">The key for this entry.</param>
            <param name="value">The value for this entry.</param>
        </member>
        <member name="M:NewsComponents.Collections.BinaryHeap.Remove">
            <summary>Removes the entry at the top of the heap.</summary>
            <returns>The removed entry.</returns>
        </member>
        <member name="M:NewsComponents.Collections.BinaryHeap.System#ICloneable#Clone">
            <summary>Performs a shallow-copy of the heap.</summary>
            <returns>A shallow-copy of the heap.</returns>
        </member>
        <member name="M:NewsComponents.Collections.BinaryHeap.CopyTo(System.Array,System.Int32)">
            <summary>Copies the entire heap to a compatible one-dimensional array, starting at the given index.</summary>
            <param name="array">The array to which the heap should be copied.</param>
            <param name="index">The starting index.</param>
        </member>
        <member name="M:NewsComponents.Collections.BinaryHeap.GetEnumerator">
            <summary>Gets an enumerator for the heap.</summary>
            <returns>An enumerator for all elements of the heap.</returns>
        </member>
        <member name="M:NewsComponents.Collections.BinaryHeap.Synchronize(NewsComponents.Collections.BinaryHeap)">
            <summary>Ensures that heap is wrapped in a synchronous wrapper.</summary>
            <param name="heap">The heap to be wrapped.</param>
            <returns>A synchronized wrapper for the heap.</returns>
        </member>
        <member name="P:NewsComponents.Collections.BinaryHeap.IsSynchronized">
            <summary>Gets a value indicating whether this heap is synchronized.</summary>
        </member>
        <member name="P:NewsComponents.Collections.BinaryHeap.Count">
            <summary>Gets the number of objects stored in the heap.</summary>
        </member>
        <member name="P:NewsComponents.Collections.BinaryHeap.SyncRoot">
            <summary>Gets an object which can be locked in order to synchronize this class.</summary>
        </member>
        <member name="T:NewsComponents.Collections.BinaryHeap.BinaryHeapEnumerator">
            <summary>Enumerator for entries in the heap.</summary>
        </member>
        <member name="F:NewsComponents.Collections.BinaryHeap.BinaryHeapEnumerator._enumerator">
            <summary>The enumerator of the array list containing BinaryHeapEntry objects.</summary>
        </member>
        <member name="M:NewsComponents.Collections.BinaryHeap.BinaryHeapEnumerator.#ctor(System.Collections.IEnumerator)">
            <summary>Initialize the enumerator</summary>
            <param name="enumerator">The array list enumerator.</param>
        </member>
        <member name="M:NewsComponents.Collections.BinaryHeap.BinaryHeapEnumerator.Reset">
            <summary>Resets the enumerator.</summary>
        </member>
        <member name="M:NewsComponents.Collections.BinaryHeap.BinaryHeapEnumerator.MoveNext">
            <summary>Moves to the next item in the list.</summary>
            <returns>Whether there are more items in the list.</returns>
        </member>
        <member name="P:NewsComponents.Collections.BinaryHeap.BinaryHeapEnumerator.Current">
            <summary>Gets the current object in the list.</summary>
        </member>
        <member name="T:NewsComponents.Collections.BinaryHeap.BinaryHeapEntry">
            <summary>Represents an entry in a binary heap.</summary>
        </member>
        <member name="F:NewsComponents.Collections.BinaryHeap.BinaryHeapEntry._key">
            <summary>The key for this entry.</summary>
        </member>
        <member name="F:NewsComponents.Collections.BinaryHeap.BinaryHeapEntry._value">
            <summary>The value for this entry.</summary>
        </member>
        <member name="M:NewsComponents.Collections.BinaryHeap.BinaryHeapEntry.#ctor(System.IComparable,System.Object)">
            <summary>Initializes an entry to be used in a binary heap.</summary>
            <param name="key">The key for this entry.</param>
            <param name="value">The value for this entry.</param>
        </member>
        <member name="M:NewsComponents.Collections.BinaryHeap.BinaryHeapEntry.CompareTo(NewsComponents.Collections.BinaryHeap.BinaryHeapEntry)">
            <summary>Compares the current instance with another object of the same type.</summary>
            <param name="entry">An object to compare with this instance.</param>
            <returns>
            Less than 0 if this instance is less than the argument,
            0 if the instances are equal,
            Greater than 0 if this instance is greater than the argument.
            </returns>
        </member>
        <member name="M:NewsComponents.Collections.BinaryHeap.BinaryHeapEntry.System#IComparable#CompareTo(System.Object)">
            <summary>Compares the current instance with another object of the same type.</summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            Less than 0 if this instance is less than the argument,
            0 if the instances are equal,
            Greater than 0 if this instance is greater than the argument.
            </returns>
        </member>
        <member name="M:NewsComponents.Collections.BinaryHeap.BinaryHeapEntry.Clone">
            <summary>Shallow-copy of the object.</summary>
            <returns>A shallow-copy of the object.</returns>
        </member>
        <member name="M:NewsComponents.Collections.BinaryHeap.BinaryHeapEntry.System#ICloneable#Clone">
            <summary>Shallow-copy of the object.</summary>
            <returns>A shallow-copy of the object.</returns>
        </member>
        <member name="P:NewsComponents.Collections.BinaryHeap.BinaryHeapEntry.Key">
            <summary>Gets the key for this entry.</summary>
        </member>
        <member name="P:NewsComponents.Collections.BinaryHeap.BinaryHeapEntry.Value">
            <summary>Gets the value for this entry.</summary>
        </member>
        <member name="T:NewsComponents.Collections.BinaryHeap.SyncBinaryHeap">
            <summary>A synchronized BinaryHeap.</summary>
        </member>
        <member name="F:NewsComponents.Collections.BinaryHeap.SyncBinaryHeap._heap">
            <summary>The heap to synchronize.</summary>
        </member>
        <member name="M:NewsComponents.Collections.BinaryHeap.SyncBinaryHeap.#ctor(NewsComponents.Collections.BinaryHeap)">
            <summary>Initialize the synchronized heap.</summary>
            <param name="heap">The heap to synchronize.</param>
        </member>
        <member name="M:NewsComponents.Collections.BinaryHeap.SyncBinaryHeap.Clone">
            <summary>Performs a shallow-copy of the heap.</summary>
            <returns>A shallow-copy of the heap.</returns>
        </member>
        <member name="M:NewsComponents.Collections.BinaryHeap.SyncBinaryHeap.Clear">
            <summary>Empties the heap.</summary>
        </member>
        <member name="M:NewsComponents.Collections.BinaryHeap.SyncBinaryHeap.Contains(System.Object)">
            <summary>Determines whether an object is in the heap.</summary>
            <param name="value">The object for which we want to search.</param>
            <returns>Whether the object is in the heap.</returns>
        </member>
        <member name="M:NewsComponents.Collections.BinaryHeap.SyncBinaryHeap.Insert(System.IComparable,System.Object)">
            <summary>Adds an item to the heap.</summary>
            <param name="key">The key for this entry.</param>
            <param name="value">The value for this entry.</param>
        </member>
        <member name="M:NewsComponents.Collections.BinaryHeap.SyncBinaryHeap.Remove">
            <summary>Removes the entry at the top of the heap.</summary>
            <returns>The removed entry.</returns>
        </member>
        <member name="M:NewsComponents.Collections.BinaryHeap.SyncBinaryHeap.CopyTo(System.Array,System.Int32)">
            <summary>Copies the entire heap to a compatible one-dimensional array, starting at the given index.</summary>
            <param name="array">The array to which the heap should be copied.</param>
            <param name="index">The starting index.</param>
        </member>
        <member name="M:NewsComponents.Collections.BinaryHeap.SyncBinaryHeap.GetEnumerator">
            <summary>Gets an enumerator for the heap.</summary>
            <returns>An enumerator for all elements of the heap.</returns>
        </member>
        <member name="P:NewsComponents.Collections.BinaryHeap.SyncBinaryHeap.IsSynchronized">
            <summary>Gets a value indicating whether this heap is synchronized.</summary>
        </member>
        <member name="P:NewsComponents.Collections.BinaryHeap.SyncBinaryHeap.Count">
            <summary>Gets the number of objects stored in the heap.</summary>
        </member>
        <member name="T:NewsComponents.Search.ISearchCriteria">
            <summary>
            Interface to abstract a search criteria implementation
            </summary>
        </member>
        <member name="M:NewsComponents.Search.ISearchCriteria.Match(NewsComponents.NewsItem)">
            <summary>
            Method to implement for a single NewsItem compare. Should return true,
            if the criteria match that item.
            </summary>
            <param name="item">NewsItem to comapre (work on)</param>
            <returns>true, if this criteria match that item</returns>
        </member>
        <member name="M:NewsComponents.Search.ISearchCriteria.Match(NewsComponents.Feed.FeedInfo)">
            <summary>
            Method to implement for a feed compare. Should return true,
            if the criteria match that feed.
            </summary>
            <param name="feed">FeedInfo to compare (work on)</param>
            <returns>true, if the feed match</returns>
        </member>
        <member name="T:NewsComponents.Search.SearchStringElement">
            <summary>
            Defines the properties (where) to search on an NewsItem.
            </summary>
        </member>
        <member name="F:NewsComponents.Search.SearchStringElement.Undefined">
            <summary>
            None, undefined state
            </summary>
        </member>
        <member name="F:NewsComponents.Search.SearchStringElement.Title">
            <summary>
            Search within an NewsItem title.
            </summary>
        </member>
        <member name="F:NewsComponents.Search.SearchStringElement.Content">
            <summary>
            Search within an NewsItem content (description).
            </summary>
        </member>
        <member name="F:NewsComponents.Search.SearchStringElement.Subject">
            <summary>
            Search within an NewsItem subject (topic or category).
            </summary>
        </member>
        <member name="F:NewsComponents.Search.SearchStringElement.Link">
            <summary>
            Search within an NewsItem link
            </summary>
        </member>
        <member name="F:NewsComponents.Search.SearchStringElement.Author">
            <summary>
            Search within an NewsItem author
            </summary>
        </member>
        <member name="F:NewsComponents.Search.SearchStringElement.All">
            <summary>
            Search within all (title and content and subject and link)
            </summary>
        </member>
        <member name="T:NewsComponents.Search.StringExpressionKind">
            <summary>
            Defines the kind of the search expression
            </summary>
        </member>
        <member name="F:NewsComponents.Search.StringExpressionKind.Text">
            <summary>Simple text expression</summary>
        </member>
        <member name="F:NewsComponents.Search.StringExpressionKind.LuceneExpression">
            <summary>Lucene search expression</summary>
        </member>
        <member name="F:NewsComponents.Search.StringExpressionKind.RegularExpression">
            <summary>Regular text expression</summary>
        </member>
        <member name="F:NewsComponents.Search.StringExpressionKind.XPathExpression">
            <summary>XPath expression</summary>
        </member>
        <member name="T:NewsComponents.Search.DateExpressionKind">
            <summary>
            Defines the Date comparison operator to be used.
            </summary>
        </member>
        <member name="F:NewsComponents.Search.DateExpressionKind.Equal">
            <summary>Dates of NewsItem's (Time is ignored) have to be equal</summary>
        </member>
        <member name="F:NewsComponents.Search.DateExpressionKind.OlderThan">
            <summary>Dates of NewsItem's (Time is ignored) have to be older than the specified</summary>
        </member>
        <member name="F:NewsComponents.Search.DateExpressionKind.NewerThan">
            <summary>Dates of NewsItem's (Time is ignored) have to be newer than the specified</summary>
        </member>
        <member name="T:NewsComponents.Search.PropertyExpressionKind">
            <summary>
            Defines, what other properties of an NewsItem should be considered in a search
            </summary>
        </member>
        <member name="F:NewsComponents.Search.PropertyExpressionKind.Unread">
            <summary>Consider read state on NewsItem's</summary>
        </member>
        <member name="F:NewsComponents.Search.PropertyExpressionKind.Flagged">
            <summary>Consider flag state on NewsItem's</summary>
        </member>
        <member name="T:NewsComponents.Search.ItemReadState">
            <summary>
            Defines how to handle the NewsItem read state
            </summary>
        </member>
        <member name="T:NewsComponents.Search.SearchCriteriaCollection">
            <summary>
            Implements a collection of ISearchCriteria's
            </summary>
        </member>
        <member name="M:NewsComponents.Search.SearchCriteriaCollection.Match(NewsComponents.NewsItem)">
            <summary>
            Method applies the match call to all contained search criteria's for the
            specified NewsItem. It will only return true, if ALL criteria match on that item!
            </summary>
            <param name="item">NewsItem</param>
            <returns>true, if ALL criteria matches that item, else false</returns>
        </member>
        <member name="M:NewsComponents.Search.SearchCriteriaCollection.Match(NewsComponents.Feed.FeedInfo)">
            <summary>
            Method applies the match call to all contained search criteria's for the
            specified feed. It will only return true, if ALL criteria match on that feed!
            </summary>
            <param name="feed">FeedInfo</param>
            <returns>true, if ALL criteria matches that feed, else false</returns>
        </member>
        <member name="M:NewsComponents.Search.SearchCriteriaCollection.Add(NewsComponents.Search.ISearchCriteria)">
            <summary>
            Add a criteria to the list
            </summary>
            <param name="criteria">ISearchCriteria to add</param>
        </member>
        <member name="M:NewsComponents.Search.SearchCriteriaCollection.Remove(NewsComponents.Search.ISearchCriteria)">
            <summary>
            Removes a criteria from the list
            </summary>
            <param name="criteria">ISearchCriteria to remove</param>
        </member>
        <member name="P:NewsComponents.Search.SearchCriteriaCollection.Item(System.Int32)">
            <summary>
            Get/Set a specific criteria at the defined position
            </summary>
        </member>
        <member name="P:NewsComponents.Search.SearchCriteriaCollection.Count">
            <summary>
            Returns the count of contained criteria
            </summary>
        </member>
        <member name="T:NewsComponents.Search.SearchCriteriaAge">
            <summary>
            Class impl. ISearchCriteria to compare item ages (or: dates)
            </summary>
            <remarks>Either <c>What</c> or <c>WhatRelativeToToday</c> have to be
            specified!</remarks>
        </member>
        <member name="F:NewsComponents.Search.SearchCriteriaAge.WhatKind">
            <summary>
            Defines, how the comparison works
            </summary>
        </member>
        <member name="M:NewsComponents.Search.SearchCriteriaAge.#ctor">
            <summary>
            Default initializer
            </summary>
        </member>
        <member name="M:NewsComponents.Search.SearchCriteriaAge.#ctor(NewsComponents.Search.DateExpressionKind)">
            <summary>
            Overloaded initializer
            </summary>
            <param name="whatKind"></param>
        </member>
        <member name="M:NewsComponents.Search.SearchCriteriaAge.#ctor(System.DateTime,NewsComponents.Search.DateExpressionKind)">
            <summary>
            Overloaded initializer
            </summary>
            <param name="what"></param>
            <param name="whatKind"></param>
        </member>
        <member name="M:NewsComponents.Search.SearchCriteriaAge.#ctor(System.TimeSpan,NewsComponents.Search.DateExpressionKind)">
            <summary>
            Overloaded initializer
            </summary>
            <param name="whatRelative"></param>
            <param name="whatKind"></param>
        </member>
        <member name="M:NewsComponents.Search.SearchCriteriaAge.Match(NewsComponents.NewsItem)">
            <summary>
            interface impl. ISearchCriteria
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Search.SearchCriteriaAge.Match(NewsComponents.Feed.FeedInfo)">
            <summary>
            [Not yet implemented]
            </summary>
            <param name="feed"></param>
            <returns></returns>
        </member>
        <member name="P:NewsComponents.Search.SearchCriteriaAge.WhatRelativeToTodayString">
            <summary>
            This is a string version of the WhatRelativeToToday property because instances of 
            System.TimeSpan cannot be serialized by the XmlSerializer. 
            </summary>
        </member>
        <member name="P:NewsComponents.Search.SearchCriteriaAge.WhatRelativeToToday">
            <summary>
            TimeSpan specifies a relative date or time to compare an NewsItem published date/time to.
            </summary>
        </member>
        <member name="P:NewsComponents.Search.SearchCriteriaAge.What">
            <summary>
             Defines the Date to compare to.
            </summary>
        </member>
        <member name="T:NewsComponents.Search.SearchCriteriaDateRange">
            <summary>
            Class impl. ISearchCriteria to compare item ages (or: dates)
            </summary>
            <remarks>Both <c>Bottom</c> and <c>Top</c> have to be
            specified!</remarks>
        </member>
        <member name="F:NewsComponents.Search.SearchCriteriaDateRange.MinValue">
            <summary>
            Defines the minimum range value: Jan., 1. 1980
            </summary>
        </member>
        <member name="M:NewsComponents.Search.SearchCriteriaDateRange.#ctor">
            <summary>
            Default initializer
            </summary>
        </member>
        <member name="M:NewsComponents.Search.SearchCriteriaDateRange.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Overloaded initializer
            </summary>
            <param name="bottom"></param>
            <param name="top"></param>
        </member>
        <member name="M:NewsComponents.Search.SearchCriteriaDateRange.Match(NewsComponents.NewsItem)">
            <summary>
            interface impl. ISearchCriteria
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:NewsComponents.Search.SearchCriteriaDateRange.Match(NewsComponents.Feed.FeedInfo)">
            <summary>
            [Not yet implemented]
            </summary>
            <param name="feed"></param>
            <returns></returns>
        </member>
        <member name="P:NewsComponents.Search.SearchCriteriaDateRange.Bottom">
            <summary>
             Defines the lower Date of the range.
            </summary>
        </member>
        <member name="P:NewsComponents.Search.SearchCriteriaDateRange.Top">
            <summary>
             Defines the upper Date of the range.
            </summary>
        </member>
        <member name="T:NewsComponents.Search.SearchCriteriaProperty">
            <summary>
            Implements ISearchCriteria to compare specific NewsItem properties
            </summary>
        </member>
        <member name="T:NewsComponents.Search.SearchRssDocument">
            <summary>
            Impl. BooleanSearch.IDocument to use more complicated queries
            </summary>
        </member>
        <member name="T:NewsComponents.Search.SearchCriteriaString">
            <summary>
            Impl. ISearchCriteria to compare an expression to specific NewsItems fields,
            that contains usually strings.
            </summary>
        </member>
        <member name="T:NewsComponents.Search.LuceneIndexer">
            <summary>
            LuceneIndexer helps to process/index NewsItems and feedFeeds.
            </summary>
        </member>
        <member name="M:NewsComponents.Search.LuceneIndexer.IndexAll(System.Collections.IDictionary,System.Collections.DictionaryEntry)">
            <summary>
            Indexes all feeds with all items.
            </summary>
            <param name="restartInfo">The restart info.</param>
            <param name="lastIndexed">The last indexed feed.</param>
        </member>
        <member name="M:NewsComponents.Search.LuceneIndexer.RemoveNewsItems(System.Collections.IList)">
            <summary>
            Removes the index documents of the news items.
            </summary>
            <param name="newsItems">The news items.</param>
            <returns>Number of index documents removed</returns>
        </member>
        <member name="M:NewsComponents.Search.LuceneIndexer.RemoveNewsItems(System.String)">
            <summary>
            Removes the index documents for news items of a feed.
            </summary>
            <param name="feedID">The feed ID.</param>
            <returns>Number of index documents removed</returns>
        </member>
        <member name="M:NewsComponents.Search.LuceneIndexer.RemoveFeed(System.String)">
            <summary>
            Removes the index documents for news items of a feed and
            the feed itself.
            </summary>
            <param name="feedID">The feed ID.</param>
        </member>
        <member name="T:NewsComponents.Net.DownloadItem">
            <summary>
            This class mantains all the information needed to describe
            a downloadable item.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.DownloadItem.downloadInfo">
            <summary>
            Information needed to download the file such as credentials, proxy information, etc
            </summary>
        </member>
        <member name="F:NewsComponents.Net.DownloadItem.file">
            <summary>
            This represents the local file and also contains information about where it was downloaded from. 
            </summary>
        </member>
        <member name="F:NewsComponents.Net.DownloadItem.enclosure">
            <summary>
            The enclosure that is being downloaded. 
            </summary>
        </member>
        <member name="F:NewsComponents.Net.DownloadItem.ownerFeedId">
            <summary>
            The ID for a DownloadItem owner, such as a feed.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.DownloadItem.ownerItemId">
            <summary>
            Additional ID of a DownloadItem owner, such as a feed item.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.DownloadItem.downloadItemId">
            <summary>
            The download item id.
            </summary>
        </member>
        <member name="F:NewsComponents.Net.DownloadItem.ownerFeed">
            <summary>
            The feed this object is associated with. 
            </summary>
        </member>
        <member name="M:NewsComponents.Net.DownloadItem.#ctor(System.String,System.String,NewsComponents.Enclosure,NewsComponents.IDownloadInfoProvider)">
            <summary>
            Creates a DownloadItem using the owner ID of the creating instance.
            </summary>
            <param name="ownerFeedId">The download owner ID.</param>
            <param name="ownerItemId">The download item ID</param>
            <param name="enclosure">Information about the item to download</param>
            <param name="downloadInfo">Information needed to download the files that is independent of the file</param>
        </member>
        <member name="M:NewsComponents.Net.DownloadItem.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor used by the serialization infrastructure.
            </summary>
            <param name="info">The serialization information.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="M:NewsComponents.Net.DownloadItem.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method used by the serialization infrastructure.
            </summary>
            <param name="info">The serialization information.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="M:NewsComponents.Net.DownloadItem.Init(NewsComponents.IDownloadInfoProvider)">
            <summary>
            Initializes the IDownloadInfoProvider for this object. This is needed if this DownloadItem is deserialized from disk. 
            </summary>
            <param name="downloadInfo"></param>
        </member>
        <member name="P:NewsComponents.Net.DownloadItem.ItemId">
            <summary>
            The DownloadItem ID.
            </summary>
        </member>
        <member name="P:NewsComponents.Net.DownloadItem.OwnerFeedId">
            <summary>
            The owner of the download item.
            </summary>
        </member>
        <member name="P:NewsComponents.Net.DownloadItem.OwnerFeed">
            <summary>
            The feed that this item belongs to. 
            </summary>
        </member>
        <member name="P:NewsComponents.Net.DownloadItem.OwnerItemId">
            <summary>
            The owner item of the download item.
            </summary>
        </member>
        <member name="P:NewsComponents.Net.DownloadItem.TargetFolder">
            <summary>
            The target folder to place the downloaded file
            </summary>
        </member>
        <member name="P:NewsComponents.Net.DownloadItem.Enclosure">
            <summary>
            The enclosure being downloaded. 
            </summary>
        </member>
        <member name="P:NewsComponents.Net.DownloadItem.File">
            <summary>
            This represents the local file and also contains information about where it was downloaded from. 
            </summary>
        </member>
        <member name="P:NewsComponents.Net.DownloadItem.Credentials">
            <summary>
            The credentials needed to download the file.
            </summary>
        </member>
        <member name="P:NewsComponents.Net.DownloadItem.Proxy">
            <summary>
            The proxy information
            </summary>
        </member>
    </members>
</doc>
