<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InfragisticsWPF4.v10.3</name>
    </assembly>
    <members>
        <member name="T:Infragistics.InfragisticsFeatureAttribute">
            <summary>
            Indicates an exposed type or member which was added as part of a new feature.
            </summary>
        </member>
        <member name="M:Infragistics.InfragisticsFeatureAttribute.#ctor">
            <summary>
            Creates a new <see cref="T:Infragistics.InfragisticsFeatureAttribute"/> instance.
            </summary>
        </member>
        <member name="P:Infragistics.InfragisticsFeatureAttribute.Exclude">
            <summary>
            Gets or sets the value indicating whether member or type should be excluded from the internal feature documentation.
            </summary>
        </member>
        <member name="P:Infragistics.InfragisticsFeatureAttribute.FeatureName">
            <summary>
            Gets or sets a short name description of the feature.
            </summary>
        </member>
        <member name="P:Infragistics.InfragisticsFeatureAttribute.SubFeatureName">
            <summary>
            Gets or sets a more granular sub-feature name description of the feature.
            </summary>
        </member>
        <member name="P:Infragistics.InfragisticsFeatureAttribute.Version">
            <summary>
            Gets or sets the version in which the feature was added.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.DayOfWeekFlags">
            <summary>
            A flagged enumeration used to identify days of the week.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.DayOfWeekFlags.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Infragistics.Controls.DayOfWeekFlags.Sunday">
            <summary>
            Sunday
            </summary>
        </member>
        <member name="F:Infragistics.Controls.DayOfWeekFlags.Monday">
            <summary>
            Monday
            </summary>
        </member>
        <member name="F:Infragistics.Controls.DayOfWeekFlags.Tuesday">
            <summary>
            Tuesday
            </summary>
        </member>
        <member name="F:Infragistics.Controls.DayOfWeekFlags.Wednesday">
            <summary>
            Wednesday
            </summary>
        </member>
        <member name="F:Infragistics.Controls.DayOfWeekFlags.Thursday">
            <summary>
            Thursday
            </summary>
        </member>
        <member name="F:Infragistics.Controls.DayOfWeekFlags.Friday">
            <summary>
            Friday
            </summary>
        </member>
        <member name="F:Infragistics.Controls.DayOfWeekFlags.Saturday">
            <summary>
            Saturday
            </summary>
        </member>
        <member name="M:Infragistics.Controls.CalendarHelper.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Controls.CalendarHelper"/>
            </summary>
            <param name="culture">The culture whose Calendar and DateTimeFormat are used to initialize the object</param>
        </member>
        <member name="M:Infragistics.Controls.CalendarHelper.#ctor(System.Globalization.Calendar,System.Globalization.DateTimeFormatInfo)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Controls.CalendarHelper"/>
            </summary>
            <param name="calendar">The Calendar used to perform date manipulations/calculations</param>
            <param name="formatInfo">The format info used to provide week rule and other information</param>
        </member>
        <member name="M:Infragistics.Controls.CalendarHelper.VerifyCanChange">
            <summary>
            Used to ensure that the instance is allowed to be modified
            </summary>
        </member>
        <member name="M:Infragistics.Controls.CalendarHelper.Initialize(System.Globalization.Calendar,System.Globalization.DateTimeFormatInfo)">
            <summary>
            Provides the Calendar and DateTimeFormatInfo instances used by the object for its calculations.
            </summary>
            <param name="calendar">The calendar used to perform the date manipulations/calculations</param>
            <param name="formatInfo">The object used to provide formatting information such as the first DayOfWeek</param>
        </member>
        <member name="M:Infragistics.Controls.CalendarHelper.CoerceMinMaxDate(System.DateTime)">
            <summary>
            Ensures that the date is within the date range supported by the associated <see cref="P:Infragistics.Controls.CalendarHelper.Calendar"/>
            </summary>
            <param name="date">The date to evaluate</param>
            <returns>The specified date if it is within the allowed range; otherwise the min or max support DateTime of the associated Calendar if the specified date is beyond that supported by the calendar.</returns>
        </member>
        <member name="M:Infragistics.Controls.CalendarHelper.GetVisibleDayCount(Infragistics.Controls.DayOfWeekFlags,System.DayOfWeek,System.DayOfWeek)">
            <summary>
            Calculates the number of visible days of the week between the specified day of the week and the 
            </summary>
            <param name="hiddenDays">The hidden days</param>
            <param name="firstDayOfWeek">Day considered the start of the week</param>
            <param name="dayOfWeek">Day of the week to evaluate</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.CalendarHelper.IsSet(Infragistics.Controls.DayOfWeekFlags,System.DayOfWeek)">
            <summary>
            Indicates if the specified day of the week is set in the specified day of week flags.
            </summary>
            <param name="days">The flags to evaluate</param>
            <param name="day">The day of week to evaluate</param>
            <returns>True if the day is included in the specified flags, otherwise false is returned.</returns>
        </member>
        <member name="M:Infragistics.Controls.CalendarHelper.AddDays(System.DateTime,System.Int32)">
            <summary>
            Adds the specified number of days to the specified date
            </summary>
            <param name="date">The source date to which the offset will be added</param>
            <param name="days">The number of days by which to adjust the <paramref name="date"/></param>
            <returns>The adjusted date or the max/min supported date of the calendar if the result was outside the allowed range</returns>
        </member>
        <member name="M:Infragistics.Controls.CalendarHelper.AddHours(System.DateTime,System.Int32)">
            <summary>
            Adds the specified number of hours to the specified date
            </summary>
            <param name="date">The source date to which the offset will be added</param>
            <param name="hours">The number of hours by which to adjust the <paramref name="date"/></param>
            <returns>The adjusted date or the max/min supported date of the calendar if the result was outside the allowed range</returns>
        </member>
        <member name="M:Infragistics.Controls.CalendarHelper.AddMinutes(System.DateTime,System.Int32)">
            <summary>
            Adds the specified number of minutes to the specified date
            </summary>
            <param name="date">The source date to which the offset will be added</param>
            <param name="minutes">The number of minutes by which to adjust the <paramref name="date"/></param>
            <returns>The adjusted date or the max/min supported date of the calendar if the result was outside the allowed range</returns>
        </member>
        <member name="M:Infragistics.Controls.CalendarHelper.AddMonths(System.DateTime,System.Int32)">
            <summary>
            Adds the specified number of months to the specified date
            </summary>
            <param name="date">The source date to which the offset will be added</param>
            <param name="months">The number of months by which to adjust the <paramref name="date"/></param>
            <returns>The adjusted date or the max/min supported date of the calendar if the result was outside the allowed range</returns>
        </member>
        <member name="M:Infragistics.Controls.CalendarHelper.AddSeconds(System.DateTime,System.Int32)">
            <summary>
            Adds the specified number of seconds to the specified date
            </summary>
            <param name="date">The source date to which the offset will be added</param>
            <param name="seconds">The number of seconds by which to adjust the <paramref name="date"/></param>
            <returns>The adjusted date or the max/min supported date of the calendar if the result was outside the allowed range</returns>
        </member>
        <member name="M:Infragistics.Controls.CalendarHelper.AddWeeks(System.DateTime,System.Int32)">
            <summary>
            Adds the specified number of weeks to the specified date
            </summary>
            <param name="date">The source date to which the offset will be added</param>
            <param name="weeks">The number of weeks by which to adjust the <paramref name="date"/></param>
            <returns>The adjusted date or the max/min supported date of the calendar if the result was outside the allowed range</returns>
        </member>
        <member name="M:Infragistics.Controls.CalendarHelper.AddYears(System.DateTime,System.Int32)">
            <summary>
            Adds the specified number of years to the specified date
            </summary>
            <param name="date">The source date to which the offset will be added</param>
            <param name="years">The number of years by which to adjust the <paramref name="date"/></param>
            <returns>The adjusted date or the max/min supported date of the calendar if the result was outside the allowed range</returns>
        </member>
        <member name="M:Infragistics.Controls.CalendarHelper.GetFirstDayOfWeekForDate(System.DateTime,System.Nullable{System.DayOfWeek},System.Int32@)">
            <summary>
            Returns the date that represents the start of the week that contains the specified date.
            </summary>
            <param name="date">The date whose week is to be evaluated</param>
            <param name="firstDayOfWeek">Optional value that indicates the first day of week to use for the calculation</param>
            <param name="additionalOffset">Out param that is initialized with the number of days before the returned date that would be the first day of the week.</param>
            <returns>The date that represents the first day of the week.</returns>
        </member>
        <member name="M:Infragistics.Controls.CalendarHelper.GetDaysInMonth(System.DateTime)">
            <summary>
            Returns the number of days in the month for the specified date
            </summary>
            <param name="date">The date to evaluate</param>
            <returns>The number of days in the month for the specified date</returns>
        </member>
        <member name="M:Infragistics.Controls.CalendarHelper.GetDaysInYear(System.DateTime)">
            <summary>
            Returns the number of the days in the year for the year containing the specified date
            </summary>
            <param name="date">The date to evaluate</param>
            <returns>The number of days in the year for the year containing the specified date</returns>
        </member>
        <member name="M:Infragistics.Controls.CalendarHelper.GetDayOfMonth(System.DateTime)">
            <summary>
            Returns the day of the month for the specified date
            </summary>
            <param name="date">The date to evaluate</param>
            <returns>The day of the month</returns>
        </member>
        <member name="M:Infragistics.Controls.CalendarHelper.GetDayOfWeek(System.DateTime)">
            <summary>
            Returns the day of the week for the specified date
            </summary>
            <param name="date">The date to evaluate</param>
            <returns>The day of the week</returns>
        </member>
        <member name="M:Infragistics.Controls.CalendarHelper.GetDayOfWeekNumber(System.DateTime,Infragistics.Controls.DayOfWeekFlags,System.Nullable{System.DayOfWeek})">
            <summary>
            Returns the number of the day of the week based on the first day of week.
            </summary>
            <param name="date">The date whose offset is to be calculated</param>
            <param name="hiddenDays">The days of the week that should be considered hidden</param>
            <param name="firstDayOfWeek">Optional value that indicates the first day of week to use for the calculation</param>
            <returns>A number between 0 and 6 that represents how many days into the week, the specified day represents based on the current first day of week.</returns>
        </member>
        <member name="M:Infragistics.Controls.CalendarHelper.GetDayOfYear(System.DateTime)">
            <summary>
            Returns the day of the year for the specified date
            </summary>
            <param name="date">The date to evaluate</param>
            <returns>The day of the year</returns>
        </member>
        <member name="M:Infragistics.Controls.CalendarHelper.GetMonthNumber(System.DateTime)">
            <summary>
            Returns the month number for the specified date
            </summary>
            <param name="date">The date to evaluate</param>
            <returns>The month number</returns>
        </member>
        <member name="M:Infragistics.Controls.CalendarHelper.GetWeekNumberForDate(System.DateTime,System.Nullable{System.Globalization.CalendarWeekRule},System.Nullable{System.DayOfWeek},System.Int32@)">
            <summary>
            Returns the week number for a particular date using the specified CalendarWeekRule and FirstDayOfWeek.
            </summary>
            <param name="date">DateTime</param>
            <param name="weekRule">Optional week rule to use for the calculation</param>
            <param name="firstDayOfWeek">Optional first day of week to use for the calculation</param>
            <param name="yearContainingWeek">Out integer to receive the year for which the week number belongs.</param>
            <returns>Integer denoting the week number that the date belongs to.</returns>
            <remarks>
            <p class="body">The System.Globalization.Calendar's GetWeekOfYear method simply returns the number of weeks into the year that the date falls on. It does not seem to use the weekrule specified in the arguments. e.g. If the first day of week is sunday and the weekrule is Jan 1, then 12/31/2000 (Sunday) should return 1. Instead it returns 54 and 1/1/2001 (Monday) returns 1.</p>
            <p class="body">This routine returns the correct week number for the specified date based on the CalendarWeekRule and FirstDayOfWeek.</p>
            <p class="note"> Note, this may be a week for a year other than the year of the date. e.g. 12/31/2000, week tt of Jan 1, and week start of sunday will return 1 because this date falls into the first week of the year 2001.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.CalendarHelper.GetWeekNumberForDate(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek,System.Globalization.Calendar,System.Int32@)">
            <summary>
            Returns the week number for a particular date using the specified CalendarWeekRule and FirstDayOfWeek.
            </summary>
            <param name="date">DateTime</param>
            <param name="weekRule">WeekRule to use for the calculation</param>
            <param name="firstDayOfWeek">First day of week to use for the calculation</param>
            <param name="calendar">Calendar to use for the calculations</param>
            <param name="yearContainingWeek">Out integer to receive the year for which the week number belongs.</param>
            <returns>Integer denoting the week number that the date belongs to.</returns>
            <remarks>
            <p class="body">The System.Globalization.Calendar's GetWeekOfYear method simply returns the number of weeks into the year that the date falls on. It does not seem to use the weekrule specified in the arguments. e.g. If the first day of week is sunday and the weekrule is Jan 1, then 12/31/2000 (Sunday) should return 1. Instead it returns 54 and 1/1/2001 (Monday) returns 1.</p>
            <p class="body">This routine returns the correct week number for the specified date based on the CalendarWeekRule and FirstDayOfWeek.</p>
            <p class="note"> Note, this may be a week for a year other than the year of the date. e.g. 12/31/2000, week tt of Jan 1, and week start of sunday will return 1 because this date falls into the first week of the year 2001.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.CalendarHelper.GetYear(System.DateTime)">
            <summary>
            Returns the year for the specified date
            </summary>
            <param name="date">The date to evaluate</param>
            <returns>The year number</returns>
        </member>
        <member name="M:Infragistics.Controls.CalendarHelper.TryAddOffset(System.DateTime,System.Int32,Infragistics.Controls.CalendarHelper.DateTimeOffsetType,System.DateTime@)">
            <summary>
            Adds the specified offset to the specified date
            </summary>
            <param name="date">The date to adjust</param>
            <param name="offset">The amount of time by which to offset the <paramref name="date"/></param>
            <param name="offsetType">The unit type that the <paramref name="offset"/> represents</param>
            <param name="adjustedDate">Out parameter set to the adjusted date or the min/max supported date time if the adjusted date goes outside the range supported by the associated calendar</param>
            <returns>True if the date was able to be adjusted by the specified amount; otherwise false if the resulting value went outside the range supported by the calendar</returns>
        </member>
        <member name="P:Infragistics.Controls.CalendarHelper.Calendar">
            <summary>
            Returns the associated Calendar
            </summary>
        </member>
        <member name="P:Infragistics.Controls.CalendarHelper.DateTimeFormat">
            <summary>
            Returns the associated DateTimeFormatInfo
            </summary>
        </member>
        <member name="T:Infragistics.CoreUtilities">
            <summary>
            Contains static helper methods.
            </summary>
        </member>
        <member name="M:Infragistics.CoreUtilities.#ctor">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:Infragistics.CoreUtilities.BuildEmbeddedResourceUri(System.Reflection.Assembly,System.String)">
            <summary>
            Creates a Uri for a resource embedded in an assembly
            </summary>
            <param name="assembly">The assembly that contains the resource</param>
            <param name="resourcePath">The relative path to the resource (e.g. "Looks/Onyx.xaml")</param>
            <returns>A Uri to the resource.</returns>
        </member>
        <member name="M:Infragistics.CoreUtilities.ConvertDataValue(System.Object,System.Type,System.IFormatProvider,System.String)">
            <summary>
            Converts 'valueToConvert' to an object of the type 'convertToType'. If it cannot perform the conversion
            it returns null. It makes use of any formatting information provided passed in.
            </summary>
            <returns>Converted value, null if unsuccessful.</returns>
        </member>
        <member name="M:Infragistics.CoreUtilities.ConvertDataValue(System.Object,System.Type,System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Converts 'valueToConvert' to an object of the type 'convertToType'. If it cannot perform the conversion
            it returns null. It makes use of any formatting information provided passed in.
            </summary>
            <returns>Converted value, null if unsuccessful.</returns>
        </member>
        <member name="M:Infragistics.CoreUtilities.CreateComparer``1(System.Comparison{``0})">
            <summary>
            Creates an IComparer that wraps the specified comparison.
            </summary>
            <typeparam name="T">The type of object being compared</typeparam>
            <param name="comparison">The comparison delegate to use when comparing elements.</param>
            <returns>A new IComparer&lt;T&gt; that uses the specified <paramref name="comparison"/> to perform the compare.</returns>
        </member>
        <member name="M:Infragistics.CoreUtilities.GetItemsInRange``1(System.Collections.IEnumerable,System.Int32,System.Int32)">
            <summary>
            Gets items from the list which must be an IList or IList&lt;T&gt;.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">Must be an IList or IList&lt;T&gt;.</param>
            <param name="startIndex">Start of the range.</param>
            <param name="count">Number of items to return.</param>
            <returns>Array of items.</returns>
        </member>
        <member name="M:Infragistics.CoreUtilities.GetUnderlyingType(System.Type)">
            <summary>
            Takes a Type and returns the underlying (non-nullable) type, if the Type is nullable. If the specified type is not nullable, then the passed-in type is returned. 
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.CoreUtilities.GetWeakReferenceTargetSafe(System.WeakReference)">
            <summary>
            Wraps the 'get' of the Target property in a try/catch to prevent unhandled exceptions
            </summary>
            <param name="weakReference">The WeakRefernce holding the target.</param>
            <returns>The Target or null if an exception was thrown.</returns>
        </member>
        <member name="M:Infragistics.CoreUtilities.IsValueEmpty(System.Object)">
            <summary>
            Returns true if the specified val is null, DBNull, empty string, or DependencyProperty.UnsetValue.
            </summary>
            <param name="val">Value to test</param>
        </member>
        <member name="M:Infragistics.CoreUtilities.RemoveAll``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            Removes all occurrences of itemToRemove from list.
            </summary>
            <param name="list">List whose items should be removed</param>
            <param name="itemToRemove">The value of the items that should be removed</param>
        </member>
        <member name="M:Infragistics.CoreUtilities.RemoveAll``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Removes all occurrences of itemToRemove from list.
            </summary>
            <param name="list">List whose items should be removed</param>
            <param name="itemToRemove">The value of the items that should be removed</param>
        </member>
        <member name="M:Infragistics.CoreUtilities.RemoveAll``1(Infragistics.Collections.ObservableCollectionExtended{``0},``0)">
            <summary>
            Removes all occurrences of itemToRemove from list.
            </summary>
            <param name="list">List whose items should be removed</param>
            <param name="itemToRemove">The value of the items that should be removed</param>
        </member>
        <member name="M:Infragistics.CoreUtilities.SortMerge(System.Object[],System.Collections.IComparer)">
            <summary>
            Sorts the passed in array based on the passed in comparer using a modified merge-sort
            algorithm. It requires allocation of an array equal in size to the array to be sorted.
            Merge sort should be used if the operation of comparing items is expensive.
            </summary>
            <param name="array">Array to be sorted.</param>
            <param name="comparer">Object used to compare the items during the sort</param>
        </member>
        <member name="M:Infragistics.CoreUtilities.SortMerge(System.Object[],System.Object[],System.Collections.IComparer)">
            <summary>
            Sorts the passed in array based on the passed in comparer using a modified merge-sort
            algorithm. Optionally you can pass in a temporary array equal (or greater) in size to arr. 
            The method will make use of that array instead of allocating one. If null is passed in, 
            then it will allocate one. Merge sort should be used if the operation of comparing items 
            is expensive.
            </summary>
            <param name="array">Array to be sorted.</param>
            <param name="tempArray">Null or a temporary array equal (or greater) in size to arr.</param>
            <param name="comparer">Object used to compare the items during the sort</param>
        </member>
        <member name="M:Infragistics.CoreUtilities.SortMerge(System.Object[],System.Object[],System.Collections.IComparer,System.Int32,System.Int32)">
            <summary>
            Sorts the passed in array based on the passed in comparer using a modified merge-sort
            algorithm. Optionally you can pass in a temporary array equal (or greater) in size to arr. 
            The method will make use of that array instead of allocating one. If null is passed in, 
            then it will allocate one. Merge sort should be used if the operation of comparing items 
            is expensive.
            </summary>
            <param name="array">Array to be sorted.</param>
            <param name="tempArray">Null or a temporary array equal (or greater) in size to arr.</param>
            <param name="comparer">Object used to compare the items during the sort</param>
            <param name="si">Start index in the array.</param>
            <param name="ei">End index in the array.</param>
        </member>
        <member name="M:Infragistics.CoreUtilities.SortMergeGeneric``1(System.Collections.Generic.List{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the passed in list based on the passed in comparer using a modified merge-sort
            algorithm. 
            </summary>
            <param name="list">The list to be sorted.</param>
            <param name="comparer">The comparer (must not be null).</param>
        </member>
        <member name="M:Infragistics.CoreUtilities.SortMergeGeneric``1(System.Collections.Generic.List{``0},System.Collections.Generic.IComparer{``0},System.Int32,System.Int32)">
            <summary>
            Sorts the passed in list based on the passed in comparer using a modified merge-sort
            algorithm. 
            </summary>
            <param name="list">The list to be sorted.</param>
            <param name="comparer">The comparer (must not be null).</param>
            <param name="si">Start index in the array. Items between the specified start index and end index will be sorted. Other items will be left as they are.</param>
            <param name="ei">End index in the array. Items between the specified start index and end index will be sorted. Other items will be left as they are.</param>
        </member>
        <member name="M:Infragistics.CoreUtilities.SortMergeGeneric``1(``0[],System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the passed in array based on the passed in comparer using a modified merge-sort
            algorithm. It requires allocation of an array equal in size to the array to be sorted.
            Merge sort should be used if the operation of comparing items is expensive.
            </summary>
            <param name="array">The array to be sorted</param>
            <param name="comparer">The comparer to use for the sort</param>
        </member>
        <member name="M:Infragistics.CoreUtilities.SortMergeGeneric``1(``0[],``0[],System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the passed in array based on the passed in comparer using a modified merge-sort
            algorithm. Optionally you can pass in a temporary array equal (or greater) in size to arr. 
            The method will make use of that array instead of allocating one. If null is passed in, 
            then it will allocate one. Merge sort should be used if the operation of comparing items 
            is expensive.
            </summary>
            <param name="array">Array to be sorted.</param>
            <param name="tempArray">Null or a temporary array equal (or greater) in size to <paramref name="array"/>.</param>
            <param name="comparer">Comparer.</param>
        </member>
        <member name="M:Infragistics.CoreUtilities.SortMergeGeneric``1(``0[],``0[],System.Collections.Generic.IComparer{``0},System.Int32,System.Int32)">
            <summary>
            Sorts the passed in array based on the passed in comparer using a modified merge-sort
            algorithm. Optionally you can pass in a temporary array equal (or greater) in size to arr. 
            The method will make use of that array instead of allocating one. If null is passed in, 
            then it will allocate one. Merge sort should be used if the operation of comparing items 
            is expensive.
            </summary>
            <param name="array">Array to be sorted.</param>
            <param name="tempArray">Null or a temporary array equal (or greater) in size to <paramref name="array"/>.</param>
            <param name="comparer">Comparer.</param>
            <param name="si">Start index in the array.</param>
            <param name="ei">End index in the array.</param>
        </member>
        <member name="M:Infragistics.CoreUtilities.Swap``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Swaps values in a list at specified indexes.
            </summary>
            <typeparam name="T">Type of elements in the list.</typeparam>
            <param name="arr">The list to modify</param>
            <param name="x">Index location 1</param>
            <param name="y">Index location 2</param>
        </member>
        <member name="M:Infragistics.CoreUtilities.Traverse(System.Collections.IEnumerable)">
            <summary>
            Traverses the enumerator. This may be used to force allocation of lazily allocated list items.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Infragistics.CoreUtilities.ConverterComparer`2">
            <summary>
            A comparer that compares converted values.
            </summary>
            <typeparam name="T">Type of objects being sorted.</typeparam>
            <typeparam name="Z">The type of the value of the object that will be compared.</typeparam>
        </member>
        <member name="M:Infragistics.CoreUtilities.ConverterComparer`2.#ctor(System.Converter{`0,`1},System.Comparison{`1})">
            <summary>
            Constructor.
            </summary>
            <param name="converter">Converter used to convert <i>T</i> instances to <i>Z</i> values for comparison.</param>
            <param name="comparison">Comparison delegate for comparing converted <i>Z</i> values.</param>
        </member>
        <member name="M:Infragistics.CoreUtilities.ConverterComparer`2.#ctor(System.Converter{`0,`1},System.Collections.Generic.IComparer{`1})">
            <summary>
            Constructor.
            </summary>
            <param name="converter">Converter used to convert <i>T</i> instances to <i>Z</i> values for comparison.</param>
            <param name="comparer">Comparer for comparing converted <i>Z</i> values.</param>
        </member>
        <member name="M:Infragistics.CoreUtilities.ConverterComparer`2.Compare(`0,`0)">
            <summary>
            Compares the two items.
            </summary>
            <param name="i"></param>
            <param name="j"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.CoreUtilities.TypedList`1">
            <summary>
            IList&lt;T&gt; implementation that wraps an IList
            </summary>
            <typeparam name="T">Type of the items in the collection</typeparam>
        </member>
        <member name="T:Infragistics.CoreUtilities.ObservableTypedList`1">
            <summary>
            IList&lt;T&gt; implementation that wraps an IList and supports propogating the collection and property changes from the source collection.
            </summary>
            <typeparam name="T">Type of the items in the collection</typeparam>
        </member>
        <member name="T:Infragistics.DependencyObjectNotifier">
            <summary>
            Abstract base class for objects that implement INotifyPropertyChanged and derive from DependencyObject
            </summary>
        </member>
        <member name="M:Infragistics.DependencyObjectNotifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.DependencyObjectNotifier"/> class
            </summary>
        </member>
        <member name="M:Infragistics.DependencyObjectNotifier.OnPropertyChanged(System.String)">
            <summary>
            Used to raise the <see cref="E:Infragistics.DependencyObjectNotifier.PropertyChanged"/> event for the specified property name.
            </summary>
            <param name="propertyName">The name of the property that has changed.</param>
        </member>
        <member name="M:Infragistics.DependencyObjectNotifier.RaisePropertyChangedEvent(System.String)">
            <summary>
            Raises the PropertyChanged event
            </summary>
            <param name="propertyName">The name of the property</param>
        </member>
        <member name="M:Infragistics.DependencyObjectNotifier.RaisePropertyChangedEvent(System.String,System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="nestedSender">The sender whose property change notification triggered this change</param>
            <param name="nestedArgs">The nested arguments</param>
        </member>
        <member name="E:Infragistics.DependencyObjectNotifier.PropertyChanged">
            <summary>
            Raised when a property has changed
            </summary>
        </member>
        <member name="T:Infragistics.ITypedPropertyChangeListener`2">
            <summary>
            Interface used to hook into property change notifications of objects that implement 
            <see cref="T:Infragistics.ITypedSupportPropertyChangeNotifications`2"/> interface.
            </summary>
            <typeparam name="TItem">Type of the item whose change notifications are hooked into.</typeparam>
            <typeparam name="TProperty">Type of object that identifies properties.</typeparam>
        </member>
        <member name="M:Infragistics.ITypedPropertyChangeListener`2.OnPropertyValueChanged(`0,`1,System.Object)">
            <summary>
            Called to notify of a change in the value of a property.
            </summary>
            <param name="dataItem">Item whose property value changed.</param>
            <param name="property">Identifies the property whose value changed.</param>
            <param name="extraInfo">Any other information regarding the change. The information passed depends on
            the implementation of the item that's sending the notification. This can be an instance of 
            PropertyChangedEventArgs, or DependencyPropertyChangedEventArgs, NotifyCollectionChangedEventArgs or null.</param>
        </member>
        <member name="T:Infragistics.IPropertyChangeListener">
            <summary>
            Interface used to hook into property change notifications of objects that implement
            <see cref="T:Infragistics.ISupportPropertyChangeNotifications"/> interface.
            </summary>
        </member>
        <member name="T:Infragistics.ITypedSupportPropertyChangeNotifications`2">
            <summary>
            Interface implemented by objects to support <see cref="T:Infragistics.ITypedPropertyChangeListener`2"/> listeners.
            </summary>
            <typeparam name="TItem">Type of the item whose notifications are being sent. Typically the object implementing the interface.</typeparam>
            <typeparam name="TProperty">Type of the object that identifies the property.</typeparam>
        </member>
        <member name="T:Infragistics.ISupportPropertyChangeNotifications">
            <summary>
            Interface implemented by objects to support <see cref="T:Infragistics.IPropertyChangeListener"/> listeners.
            </summary>
        </member>
        <member name="T:Infragistics.IValueChangeListener`1">
            <summary>
            Listener interface used to listen for value change of a specific property.
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="M:Infragistics.IValueChangeListener`1.OnValueChanged(`0)">
            <summary>
            Called to notify the change in the value of the property.
            </summary>
            <param name="dataItem">Item whose property value changed.</param>
        </member>
        <member name="T:Infragistics.ListenerList">
            <summary>
            A helper class used for managing one or more listeners. It uses a List when more than one listeners are added.
            </summary>
        </member>
        <member name="M:Infragistics.ListenerList.#ctor(System.Int32)">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.ListenerList"/>.
            </summary>
        </member>
        <member name="T:Infragistics.TypedPropertyChangeListenerList`2">
            <summary>
            Used for managing property change listeners.
            </summary>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="T:Infragistics.PropertyChangeListenerList">
            <summary>
            Used for managing property change listeners.
            </summary>
        </member>
        <member name="T:Infragistics.KnownBoxes">
            <summary>
            Class that maintains references to commonly boxed values such as booleans.
            </summary>
        </member>
        <member name="F:Infragistics.KnownBoxes.TrueBox">
            <summary>
            Returns an object containing the boolean 'true'
            </summary>
        </member>
        <member name="F:Infragistics.KnownBoxes.FalseBox">
            <summary>
            Returns an object containing the boolean 'false'
            </summary>
        </member>
        <member name="F:Infragistics.KnownBoxes.ScrollBarVisibilityHiddenBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.Controls.ScrollBarVisibility"/> 'Hidden'.
            </summary>
        </member>
        <member name="F:Infragistics.KnownBoxes.ScrollBarVisibilityVisibleBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.Controls.ScrollBarVisibility"/> 'Visible'.
            </summary>
        </member>
        <member name="F:Infragistics.KnownBoxes.ScrollBarVisibilityDisabledBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.Controls.ScrollBarVisibility"/> 'Disabled'.
            </summary>
        </member>
        <member name="F:Infragistics.KnownBoxes.ScrollBarVisibilityAutoBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.Controls.ScrollBarVisibility"/> 'Auto'.
            </summary>
        </member>
        <member name="F:Infragistics.KnownBoxes.VisibilityHiddenBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.Visibility"/> 'Hidden'.
            </summary>
        </member>
        <member name="F:Infragistics.KnownBoxes.VisibilityVisibleBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.Visibility"/> 'Visible'.
            </summary>
        </member>
        <member name="F:Infragistics.KnownBoxes.VisibilityCollapsedBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.Visibility"/> 'Hidden'.
            </summary>
        </member>
        <member name="F:Infragistics.KnownBoxes.OrientationVerticalBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.Controls.Orientation"/> 'Vertical'.
            </summary>
        </member>
        <member name="F:Infragistics.KnownBoxes.OrientationHorizontalBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.Controls.Orientation"/> 'Horizontal'.
            </summary>
        </member>
        <member name="F:Infragistics.KnownBoxes.HorizontalAlignmentCenterBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.HorizontalAlignment"/> 'Center'.
            </summary>
        </member>
        <member name="F:Infragistics.KnownBoxes.HorizontalAlignmentLeftBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.HorizontalAlignment"/> 'Left'.
            </summary>
        </member>
        <member name="F:Infragistics.KnownBoxes.HorizontalAlignmentRightBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.HorizontalAlignment"/> 'Right'.
            </summary>
        </member>
        <member name="F:Infragistics.KnownBoxes.HorizontalAlignmentStretchBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.HorizontalAlignment"/> 'Stretch'.
            </summary>
        </member>
        <member name="F:Infragistics.KnownBoxes.VerticalAlignmentCenterBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.VerticalAlignment"/> 'Center'.
            </summary>
        </member>
        <member name="F:Infragistics.KnownBoxes.VerticalAlignmentTopBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.VerticalAlignment"/> 'Top'.
            </summary>
        </member>
        <member name="F:Infragistics.KnownBoxes.VerticalAlignmentBottomBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.VerticalAlignment"/> 'Bottom'.
            </summary>
        </member>
        <member name="F:Infragistics.KnownBoxes.VerticalAlignmentStretchBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.VerticalAlignment"/> 'Stretch'.
            </summary>
        </member>
        <member name="F:Infragistics.KnownBoxes.DockTopBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.Controls.Dock"/> 'Top'.
            </summary>
        </member>
        <member name="F:Infragistics.KnownBoxes.DockBottomBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.Controls.Dock"/> 'Bottom'.
            </summary>
        </member>
        <member name="F:Infragistics.KnownBoxes.DockLeftBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.Controls.Dock"/> 'Left'.
            </summary>
        </member>
        <member name="F:Infragistics.KnownBoxes.DockRightBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.Controls.Dock"/> 'Right'.
            </summary>
        </member>
        <member name="F:Infragistics.KnownBoxes.DoubleZeroBox">
            <summary>
            A boxed instance for a double value of zero.
            </summary>
        </member>
        <member name="M:Infragistics.KnownBoxes.FromValue(System.Boolean)">
            <summary>
            Returns a boxed representation of the specified <see cref="T:System.Boolean"/> value
            </summary>
            <param name="value">An instance of <see cref="T:System.Boolean"/> for which a cached boxed value is to be returned</param>
            <returns>An object that wraps the specified <see cref="T:System.Boolean"/> value</returns>
        </member>
        <member name="M:Infragistics.KnownBoxes.FromValue(System.Nullable{System.Boolean})">
            <summary>
            Returns a boxed representation of the specified bool? value
            </summary>
            <param name="value">An instance of bool? for which a cached boxed value is to be returned</param>
            <returns>An object that wraps the specified bool?/> value</returns>
        </member>
        <member name="M:Infragistics.KnownBoxes.FromValue(System.Windows.Controls.ScrollBarVisibility)">
            <summary>
            Returns a boxed representation of the specified <see cref="T:System.Windows.Controls.ScrollBarVisibility"/> value
            </summary>
            <param name="value">An instance of <see cref="T:System.Windows.Controls.ScrollBarVisibility"/> for which a cached boxed value is to be returned</param>
            <returns>An object that wraps the specified <see cref="T:System.Windows.Controls.ScrollBarVisibility"/> value</returns>
        </member>
        <member name="M:Infragistics.KnownBoxes.FromValue(System.Windows.Visibility)">
            <summary>
            Returns a boxed representation of the specified <see cref="T:System.Windows.Visibility"/> value
            </summary>
            <param name="value">An instance of <see cref="T:System.Windows.Visibility"/> for which a cached boxed value is to be returned</param>
            <returns>An object that wraps the specified <see cref="T:System.Windows.Visibility"/> value</returns>
        </member>
        <member name="M:Infragistics.KnownBoxes.FromValue(System.Windows.Controls.Orientation)">
            <summary>
            Returns a boxed representation of the specified <see cref="T:System.Windows.Controls.Orientation"/> value
            </summary>
            <param name="value">An instance of <see cref="T:System.Windows.Controls.Orientation"/> for which a cached boxed value is to be returned</param>
            <returns>An object that wraps the specified <see cref="T:System.Windows.Controls.Orientation"/> value</returns>
        </member>
        <member name="M:Infragistics.KnownBoxes.FromValue(System.Windows.HorizontalAlignment)">
            <summary>
            Returns a boxed representation of the specified <see cref="T:System.Windows.HorizontalAlignment"/> value
            </summary>
            <param name="value">An instance of <see cref="T:System.Windows.HorizontalAlignment"/> for which a cached boxed value is to be returned</param>
            <returns>An object that wraps the specified <see cref="T:System.Windows.HorizontalAlignment"/> value</returns>
        </member>
        <member name="M:Infragistics.KnownBoxes.FromValue(System.Windows.VerticalAlignment)">
            <summary>
            Returns a boxed representation of the specified <see cref="T:System.Windows.VerticalAlignment"/> value
            </summary>
            <param name="value">An instance of <see cref="T:System.Windows.VerticalAlignment"/> for which a cached boxed value is to be returned</param>
            <returns>An object that wraps the specified <see cref="T:System.Windows.VerticalAlignment"/> value</returns>
        </member>
        <member name="M:Infragistics.KnownBoxes.FromValue(System.Windows.Controls.Dock)">
            <summary>
            Returns a boxed representation of the specified <see cref="T:System.Windows.Controls.Dock"/> value
            </summary>
            <param name="value">An instance of <see cref="T:System.Windows.Controls.Dock"/> for which a cached boxed value is to be returned</param>
            <returns>An object that wraps the specified <see cref="T:System.Windows.Controls.Dock"/> value</returns>
        </member>
        <member name="T:Infragistics.Collections.MultiSourceEnumerator">
            <summary>
            Concatenates the items from multiple enumerators in a single enumerator. 
            </summary>
        </member>
        <member name="M:Infragistics.Collections.MultiSourceEnumerator.#ctor(System.Collections.IEnumerator[])">
            <summary>
            Initializes a new instance of <see cref="T:Infragistics.Collections.MultiSourceEnumerator"/>
            </summary>
            <param name="sourceEnumerators">The source enumerators whose items will be logically concatenated by this enumerator.</param>
            <exception cref="T:System.ArgumentNullException">If sourceEnumerators is null.</exception>
            <exception cref="T:System.ArgumentException">If sourceEnumerators length is null or the IEnumerator array has any null entries.</exception>
        </member>
        <member name="M:Infragistics.Collections.MultiSourceEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:Infragistics.Collections.MultiSourceEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="P:Infragistics.Collections.MultiSourceEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
        </member>
        <member name="T:Infragistics.Collections.ObservableCollectionExtended`1">
            <summary>
            An extended <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> that supports adding and removing multiple items at once.
            </summary>
            <typeparam name="T">The type of item that the collection will contain. If T implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> then the collection will hook the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event of all objects added to the collection.</typeparam>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Collections.ObservableCollectionExtended`1"/>
            </summary>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Initializes a new <see cref="T:Infragistics.Collections.ObservableCollectionExtended`1"/>
            </summary>
            <param name="list">The list from which elements are inserted</param>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Collections.ObservableCollectionExtended`1"/>
            </summary>
            <param name="hookItemPropertyChanged">Specifies whether to hook into PropertyChanged notifications of items.</param>
            <param name="hookItemListeners">Specifies whether to hook into item listeners.</param>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of a collection to the end of this collection.
            </summary>
            <param name="collection">The collection whose elements should be inserted into the List. The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type.</param>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.BeginUpdate">
            <summary>
            Prevents change notifications (e.g. <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged"/> and <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>) from being raised.
            </summary>
            <remarks>
            <p class="note">The <see cref="M:Infragistics.Collections.ObservableCollectionExtended`1.EndUpdate"/> method must be called exactly once for each time that the <b>BeginUpdate</b> method is called.</p>
            </remarks>
            <seealso cref="M:Infragistics.Collections.ObservableCollectionExtended`1.EndUpdate"/>
            <seealso cref="P:Infragistics.Collections.ObservableCollectionExtended`1.IsUpdating"/>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.BinarySearch(`0)">
            <summary>
            Searches the entire list for the specified element and returns the zero based index.
            </summary>
            <param name="item">The item to locate</param>
            <returns>The zero based index if found; otherwise the bitwise complement of the index of the next larger element.</returns>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches the entire list for the specified element using the specified comparer and returns the zero based index.
            </summary>
            <param name="item">The item to locate</param>
            <param name="comparer">The object to use when comparing the elements in the collection</param>
            <returns>The zero based index if found; otherwise the bitwise complement of the index of the next larger element.</returns>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.EndUpdate">
            <summary>
            Resumes change notifications (e.g. <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged"/> and <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>).
            </summary>
            <remarks>
            <p class="note">The <b>EndUpdate</b> method must be called exactly once for each time that the <see cref="M:Infragistics.Collections.ObservableCollectionExtended`1.BeginUpdate"/> method is called.</p>
            </remarks>
            <seealso cref="M:Infragistics.Collections.ObservableCollectionExtended`1.BeginUpdate"/>
            <seealso cref="P:Infragistics.Collections.ObservableCollectionExtended`1.IsUpdating"/>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the elements of a collection into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the new elements should be inserted.</param>
            <param name="collection">The collection whose elements should be inserted into the List. The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type.</param>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.ReInitialize(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Clears and repopulates the collection with the specified 
            </summary>
            <param name="collection">The collection of items that should be used to repopulate the collection.</param>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a contiguous block of items from the collection.
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove</param>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.OnBeginUpdate">
            <summary>
            Invoked when BeginUpdate is first called and <see cref="P:Infragistics.Collections.ObservableCollectionExtended`1.IsUpdating"/> becomes true.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.OnEndUpdate">
            <summary>
            Invoked when EndUpdate is called and <see cref="P:Infragistics.Collections.ObservableCollectionExtended`1.IsUpdating"/> becomes false.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.OnItemAdded(`0)">
            <summary>
            Invoked when an item has been added if the <see cref="P:Infragistics.Collections.ObservableCollectionExtended`1.NotifyItemsChanged"/> returns true.
            </summary>
            <param name="itemAdded">The item that was added</param>
            <seealso cref="M:Infragistics.Collections.ObservableCollectionExtended`1.OnItemRemoved(`0)"/>
            <seealso cref="M:Infragistics.Collections.ObservableCollectionExtended`1.OnItemAdding(`0)"/>
            <seealso cref="P:Infragistics.Collections.ObservableCollectionExtended`1.NotifyItemsChanged"/>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.OnItemAdding(`0)">
            <summary>
            Invoked when an item is about to be added if the <see cref="P:Infragistics.Collections.ObservableCollectionExtended`1.NotifyItemsChanged"/> returns true.
            </summary>
            <param name="itemAdded">The item that is being added</param>
            <seealso cref="M:Infragistics.Collections.ObservableCollectionExtended`1.OnItemRemoved(`0)"/>
            <seealso cref="M:Infragistics.Collections.ObservableCollectionExtended`1.OnItemAdded(`0)"/>
            <seealso cref="P:Infragistics.Collections.ObservableCollectionExtended`1.NotifyItemsChanged"/>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.OnItemRemoved(`0)">
            <summary>
            Invoked when an item has been removed if the <see cref="P:Infragistics.Collections.ObservableCollectionExtended`1.NotifyItemsChanged"/> returns true.
            </summary>
            <param name="itemRemoved">The item that was removed</param>
            <seealso cref="M:Infragistics.Collections.ObservableCollectionExtended`1.OnItemAdded(`0)"/>
            <seealso cref="M:Infragistics.Collections.ObservableCollectionExtended`1.OnItemAdding(`0)"/>
            <seealso cref="P:Infragistics.Collections.ObservableCollectionExtended`1.NotifyItemsChanged"/>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.OnItemPropertyChanged(Infragistics.Collections.ItemPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Infragistics.Collections.ObservableCollectionExtended`1.ItemPropertyChanged"/> event with the specified arguments.
            </summary>
            <param name="e">The event arguments for the event to be raised.</param>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.ClearItems">
            <summary>
            Removes all the items from the collection.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts a new item at the specified index in the collection.
            </summary>
            <param name="index">The index at which to insert the <paramref name="item"/></param>
            <param name="item">The object to insert in the collection</param>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.MoveItem(System.Int32,System.Int32)">
            <summary>
            Moves an item from one index in the collection to a new location.
            </summary>
            <param name="oldIndex">The index of the item to relocate</param>
            <param name="newIndex">The new index of the item currently located at index <paramref name="oldIndex"/></param>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged"/> event.
            </summary>
            <param name="e">The arguments providing information about the collection change.</param>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.
            </summary>
            <param name="e">The arguments providing information about the property change.</param>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.RemoveItem(System.Int32)">
            <summary>
            Removes an item at the specified index.
            </summary>
            <param name="index">The index of the item in the collection to be removed.</param>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.SetItem(System.Int32,`0)">
            <summary>
            Replaces an item at the specified index in the collection 
            </summary>
            <param name="index">Index of the item to replace</param>
            <param name="item">The item to insert into the collection.</param>
        </member>
        <member name="P:Infragistics.Collections.ObservableCollectionExtended`1.IsUpdating">
            <summary>
            Returns true if the change notifications have been suspended using the <see cref="M:Infragistics.Collections.ObservableCollectionExtended`1.BeginUpdate"/> method.
            </summary>
            <seealso cref="M:Infragistics.Collections.ObservableCollectionExtended`1.EndUpdate"/>
            <seealso cref="M:Infragistics.Collections.ObservableCollectionExtended`1.BeginUpdate"/>
        </member>
        <member name="P:Infragistics.Collections.ObservableCollectionExtended`1.NotifyItemsChanged">
            <summary>
            Returns a boolean indicating whether the derived collection should have its <see cref="M:Infragistics.Collections.ObservableCollectionExtended`1.OnItemAdded(`0)"/> and <see cref="M:Infragistics.Collections.ObservableCollectionExtended`1.OnItemRemoved(`0)"/> methods invoked.
            </summary>
            <seealso cref="M:Infragistics.Collections.ObservableCollectionExtended`1.OnItemRemoved(`0)"/>
            <seealso cref="M:Infragistics.Collections.ObservableCollectionExtended`1.OnItemAdded(`0)"/>
            <seealso cref="M:Infragistics.Collections.ObservableCollectionExtended`1.OnItemAdding(`0)"/>
        </member>
        <member name="P:Infragistics.Collections.ObservableCollectionExtended`1.PropChangeListeners">
            <summary>
            List of listeners that will be added as a listener to the contained items.
            Also collection change notifications will be raised on the listeners as well.
            </summary>
        </member>
        <member name="E:Infragistics.Collections.ObservableCollectionExtended`1.ItemPropertyChanged">
            <summary>
            Raised when an object in the collection raises its <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> The <b>ItemPropertyChanged</b> event will only be raised if the 
            type T implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.Collections.ItemPropertyChangedEventArgs">
            <summary>
            Event arguments for a property changed on another object.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.ItemPropertyChangedEventArgs.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Collections.ItemPropertyChangedEventArgs"/>
            </summary>
            <param name="item">The item whose property has changed</param>
            <param name="propertyName">The name of the property that has changed</param>
        </member>
        <member name="P:Infragistics.Collections.ItemPropertyChangedEventArgs.Item">
            <summary>
            Returns the item whose property has changed.
            </summary>
            <see cref="P:System.ComponentModel.PropertyChangedEventArgs.PropertyName"/>
        </member>
        <member name="T:Infragistics.NestedPropertyChangedEventArgs">
            <summary>
            Event arg class used to specify full notification context when sub objects raise events
            and the listening object also implements INotifyPropertyChanged
            </summary>
        </member>
        <member name="M:Infragistics.NestedPropertyChangedEventArgs.#ctor(System.String,System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.NestedPropertyChangedEventArgs"/> class
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="nestedSender">The sender whose property change notification triggered this change</param>
            <param name="nestedArgs">The nested arguments</param>
        </member>
        <member name="P:Infragistics.NestedPropertyChangedEventArgs.NestedSender">
            <summary>
            Returns the sender whose property change notification triggered this change (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.NestedPropertyChangedEventArgs.NestedArgs">
            <summary>
            Returns the nested arguments (read-only)
            </summary>
            <remarks>May return a <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> or another <see cref="T:Infragistics.NestedPropertyChangedEventArgs"/></remarks>
        </member>
        <member name="T:Infragistics.PropertyChangeNotifier">
            <summary>
            Abstract base class for objects that implement INotifyPropertyChanged
            </summary>
        </member>
        <member name="M:Infragistics.PropertyChangeNotifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.PropertyChangeNotifier"/> class
            </summary>
        </member>
        <member name="M:Infragistics.PropertyChangeNotifier.OnFirstListenerAdding">
            <summary>
            Virtual method called when the first listener is being added to the <see cref="E:Infragistics.PropertyChangeNotifier.PropertyChanged"/> event.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> the default inpmplementation does nothing. This method is intended
            for use by derived classes that may want to be notified when the # of listeners to the 
            <see cref="E:Infragistics.PropertyChangeNotifier.PropertyChanged"/> event transitions from 0 to 1.
            </para>
            </remarks>
            <seealso cref="P:Infragistics.PropertyChangeNotifier.HasListeners"/>
            <seealso cref="E:Infragistics.PropertyChangeNotifier.PropertyChanged"/>
            <seealso cref="M:Infragistics.PropertyChangeNotifier.OnHasListenersChanged"/>
        </member>
        <member name="M:Infragistics.PropertyChangeNotifier.OnHasListenersChanged">
            <summary>
            Virtual method called when the HasListeners property changes.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> the default inpmplementation does nothing. This method is intended
            for use by derived classes that may want to be notified when the # of listeners to the <see cref="E:Infragistics.PropertyChangeNotifier.PropertyChanged"/> 
            event transitions from 0 to 1 or 1 to 0;
            </para></remarks>
            <seealso cref="P:Infragistics.PropertyChangeNotifier.HasListeners"/>
            <seealso cref="E:Infragistics.PropertyChangeNotifier.PropertyChanged"/>
            <seealso cref="M:Infragistics.PropertyChangeNotifier.OnFirstListenerAdding"/>
        </member>
        <member name="M:Infragistics.PropertyChangeNotifier.OnPropertyChanged(System.String)">
            <summary>
            Used to raise the <see cref="E:Infragistics.PropertyChangeNotifier.PropertyChanged"/> event for the specified property name.
            </summary>
            <param name="propertyName">The name of the property that has changed.</param>
        </member>
        <member name="M:Infragistics.PropertyChangeNotifier.RaisePropertyChangedEvent(System.String)">
            <summary>
            Raises the PropertyChanged event
            </summary>
            <param name="propertyName">The name of the property</param>
        </member>
        <member name="M:Infragistics.PropertyChangeNotifier.RaisePropertyChangedEvent(System.String,System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="nestedSender">The sender whose property change notification triggered this change</param>
            <param name="nestedArgs">The nested arguments</param>
        </member>
        <member name="P:Infragistics.PropertyChangeNotifier.HasListeners">
            <summary>
            Gets whether there are any listeners for the <see cref="E:Infragistics.PropertyChangeNotifier.PropertyChanged"/> event
            </summary>
            <value>True is there are listeners to the <see cref="E:Infragistics.PropertyChangeNotifier.PropertyChanged"/> event, otherwise false.</value>
            <seealso cref="M:Infragistics.PropertyChangeNotifier.OnHasListenersChanged"/>
            <seealso cref="E:Infragistics.PropertyChangeNotifier.PropertyChanged"/>
            <seealso cref="M:Infragistics.PropertyChangeNotifier.OnFirstListenerAdding"/>
        </member>
        <member name="E:Infragistics.PropertyChangeNotifier.PropertyChanged">
            <summary>
            Raised when a property has changed
            </summary>
        </member>
        <member name="T:Infragistics.RecyclingContainer`1">
            <summary>
            A base class for objects that want to support recycling.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.Windows.FrameworkElement"/> that this object represents.</typeparam>
        </member>
        <member name="T:Infragistics.ISupportRecycling">
            <summary>
            An interface that should be implemented on objects that represent control objects that should be Recycled.
            </summary>
        </member>
        <member name="M:Infragistics.ISupportRecycling.CreateInstanceOfRecyclingElement">
            <summary>
            Creates a new instance of the <see cref="T:System.Windows.FrameworkElement"/> that represents the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.ISupportRecycling.OnElementAttached(System.Windows.FrameworkElement)">
            <summary>
            Invoked when a <see cref="T:System.Windows.FrameworkElement"/>  is being attached to the object.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Infragistics.ISupportRecycling.OnElementReleasing(System.Windows.FrameworkElement)">
            <summary>
            Invoked before a <see cref="T:System.Windows.FrameworkElement"/> is released from the object.
            </summary>
            <param name="element"></param>
            <returns>Returns false, if the element isn't released.</returns>
        </member>
        <member name="M:Infragistics.ISupportRecycling.OnElementReleased(System.Windows.FrameworkElement)">
            <summary>
            Invoked when a <see cref="T:System.Windows.FrameworkElement"/> is no longer attached to the object. 
            </summary>
            <param name="element"></param>
        </member>
        <member name="P:Infragistics.ISupportRecycling.RecyclingElementType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the <see cref="T:System.Windows.FrameworkElement"/> that is being recycled.
            </summary>
        </member>
        <member name="P:Infragistics.ISupportRecycling.RecyclingIdentifier">
            <summary>
            Offers another way to recyle an element, other than Type.
            </summary>
        </member>
        <member name="P:Infragistics.ISupportRecycling.IsDirty">
            <summary>
            Gets/sets a value that determines if the <see cref="T:System.Windows.FrameworkElement"/> attached has been modified
            in such a way that it should just be thrown away when the object is done with it. 
            </summary>
        </member>
        <member name="P:Infragistics.ISupportRecycling.AttachedElement">
            <summary>
            Gets/sets the actual <see cref="T:System.Windows.FrameworkElement"/> that is attached to the object. If no object is attached
            then null is returned. 
            </summary>
        </member>
        <member name="M:Infragistics.RecyclingContainer`1.CreateInstanceOfRecyclingElement">
            <summary>
            Creates a new instance of the <see cref="T:System.Windows.FrameworkElement"/> that represents the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.RecyclingContainer`1.OnElementAttached(`0)">
            <summary>
            Invoked when a <see cref="T:System.Windows.FrameworkElement"/>  is being attached to the object.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Infragistics.RecyclingContainer`1.OnElementReleased(`0)">
            <summary>
            Invoked when a <see cref="T:System.Windows.FrameworkElement"/> is no longer attached to the object. 
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Infragistics.RecyclingContainer`1.OnElementReleasing(`0)">
            <summary>
            Invoked when a <see cref="T:System.Windows.FrameworkElement"/> is being released from an object.
            </summary>
            <param name="element"></param>
            <returns>False, if the element shouldn't be released.</returns>
        </member>
        <member name="M:Infragistics.RecyclingContainer`1.OnPropertyChanged(System.String)">
            <summary>
            Invoked when a property changes on the RecyclingContainer object.
            </summary>
            <param name="name">The name of the property that has changed.</param>
        </member>
        <member name="P:Infragistics.RecyclingContainer`1.RecyclingElementType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the <see cref="T:System.Windows.FrameworkElement"/> that is being recycled.
            </summary>
        </member>
        <member name="P:Infragistics.RecyclingContainer`1.RecyclingIdentifier">
            <summary>
            If a <see cref="P:Infragistics.RecyclingContainer`1.RecyclingElementType"/> isn't specified, this property can be used to offer another way of identifying 
            a reyclable element.
            </summary>
        </member>
        <member name="P:Infragistics.RecyclingContainer`1.IsDirty">
            <summary>
            Gets/sets a value that determines if the <see cref="T:System.Windows.FrameworkElement"/> attached has been modified
            in such a way that it should just be thrown away when the object is done with it. 
            </summary>
        </member>
        <member name="P:Infragistics.RecyclingContainer`1.AttachedElement">
            <summary>
            Gets/sets the actual <see cref="T:System.Windows.FrameworkElement"/> that is attached to the object. If no object is attached
            then null is returned. 
            </summary>
        </member>
        <member name="E:Infragistics.RecyclingContainer`1.PropertyChanged">
            <summary>
            Fired when a property changes on the RecyclingContainer.
            </summary>
        </member>
        <member name="T:Infragistics.DependencyObjectRecyclingContainer`1">
            <summary>
            A base class for objects that want to support recycling which supports objects that will be <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.Windows.FrameworkElement"/> that this object represents.</typeparam>
        </member>
        <member name="M:Infragistics.DependencyObjectRecyclingContainer`1.CreateInstanceOfRecyclingElement">
            <summary>
            Creates a new instance of the <see cref="T:System.Windows.FrameworkElement"/> that represents the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.DependencyObjectRecyclingContainer`1.OnElementAttached(`0)">
            <summary>
            Invoked when a <see cref="T:System.Windows.FrameworkElement"/>  is being attached to the object.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Infragistics.DependencyObjectRecyclingContainer`1.OnElementReleased(`0)">
            <summary>
            Invoked when a <see cref="T:System.Windows.FrameworkElement"/> is no longer attached to the object. 
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Infragistics.DependencyObjectRecyclingContainer`1.OnElementReleasing(`0)">
            <summary>
            Invoked when a <see cref="T:System.Windows.FrameworkElement"/> is being released from an object.
            </summary>
            <param name="element"></param>
            <returns>False, if the element shouldn't be released.</returns>
        </member>
        <member name="P:Infragistics.DependencyObjectRecyclingContainer`1.RecyclingElementType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the <see cref="T:System.Windows.FrameworkElement"/> that is being recycled.
            </summary>
        </member>
        <member name="P:Infragistics.DependencyObjectRecyclingContainer`1.RecyclingIdentifier">
            <summary>
            If a <see cref="P:Infragistics.DependencyObjectRecyclingContainer`1.RecyclingElementType"/> isn't specified, this property can be used to offer another way of identifying 
            a reyclable element.
            </summary>
        </member>
        <member name="P:Infragistics.DependencyObjectRecyclingContainer`1.IsDirty">
            <summary>
            Gets/sets a value that determines if the <see cref="T:System.Windows.FrameworkElement"/> attached has been modified
            in such a way that it should just be thrown away when the object is done with it. 
            </summary>
        </member>
        <member name="P:Infragistics.DependencyObjectRecyclingContainer`1.AttachedElement">
            <summary>
            Gets/sets the actual <see cref="T:System.Windows.FrameworkElement"/> that is attached to the object. If no object is attached
            then null is returned. 
            </summary>
        </member>
        <member name="T:Infragistics.IRecyclableElement">
            <summary>
            An interface for objects that will be managed by the <see cref="T:Infragistics.RecyclingManager"/> which will allow certain objects to be
            temporarily allow the item to avoid recycling.
            </summary>
        </member>
        <member name="P:Infragistics.IRecyclableElement.DelayRecycling">
            <summary>
            Gets/sets if the object should be recycled.
            </summary>
        </member>
        <member name="P:Infragistics.IRecyclableElement.OwnerPanel">
            <summary>
            Gets/sets the <see cref="T:System.Windows.Controls.Panel"/> that owns this element. 
            </summary>
        </member>
        <member name="T:Infragistics.IRecyclableElementHost">
            <summary>
            Interface implemented by a panel that hosts the elements for <see cref="T:Infragistics.IRecyclableElement"/> items.
            </summary>
        </member>
        <member name="M:Infragistics.IRecyclableElementHost.OnElementAttached(Infragistics.ISupportRecycling,System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            Invoked when an element is associated with an item in the panel
            </summary>
            <param name="element">The element being associated with an item</param>
            <param name="item">The item represented by the specified element</param>
            <param name="isNewlyRealized">True if the element is new; false if the element is being recycled</param>
        </member>
        <member name="M:Infragistics.IRecyclableElementHost.OnElementReleased(Infragistics.ISupportRecycling,System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            Invoked when an element is detached from an item.
            </summary>
            <param name="element">The element being released</param>
            <param name="item">The item that was represented by the element</param>
            <param name="isRemoved">True if the element is being removed from the children; otherwise false if the element is being kept for potential recycling later</param>
        </member>
        <member name="M:Infragistics.IRecyclableElementHost.ShouldRemove(Infragistics.ISupportRecycling,System.Windows.FrameworkElement)">
            <summary>
            Invoked when an element being released is to be considered for recycling.
            </summary>
            <param name="element">The element being released</param>
            <param name="item">The item that was represented by the element</param>
            <returns>Return true to indicate that the element should be removed from the panel; otherwise return false to allow the element to be recyled.</returns>
        </member>
        <member name="T:Infragistics.RecyclingManager">
            <summary>
            An object that manages all recycling for an application.
            </summary>
        </member>
        <member name="M:Infragistics.RecyclingManager.AttachElement(Infragistics.ISupportRecycling,System.Windows.Controls.Panel)">
            <summary>
            Attaches an element to the given <see cref="T:Infragistics.ISupportRecycling"/> object. 
            If there aren't any available elements of the needed type, a new object will be generated. 
            If the object already has an attached element, then nothing will be done.
            Note: the element can only be attached to the specified panel. 
            </summary>
            <returns>True if the item was newly created and added to the children collection of the panel.</returns>
        </member>
        <member name="M:Infragistics.RecyclingManager.ReleaseElement(Infragistics.ISupportRecycling,System.Windows.Controls.Panel)">
            <summary>
            Removes the attached element from the <see cref="T:Infragistics.ISupportRecycling"/> object, and marks the
            element as available, assuming the object wasn't marked dirty.
            Note: the element is only reusuable for the specified panel. 
            </summary>
        </member>
        <member name="M:Infragistics.RecyclingManager.ReleaseAll(System.Windows.Controls.Panel)">
            <summary>
            Releases all the elements from a given panel and from the cache.
            </summary>
            <param name="parent">The panel whose cached children are to be removed</param>
        </member>
        <member name="M:Infragistics.RecyclingManager.ReleaseAll(System.Windows.Controls.Panel,System.String)">
            <summary>
            Removes all elements from the contain panel, and from the cache.
            </summary>
            <param name="parent">Panel whose children are to be released</param>
            <param name="id">The id under which the children were cached.</param>
        </member>
        <member name="M:Infragistics.RecyclingManager.ReleaseAll(System.Windows.Controls.Panel,System.Type)">
            <summary>
            Removes all elements from the contain panel, and from the cache.
            </summary>
            <param name="parent">Panel whose children are to be released</param>
            <param name="t">The type under which the children were cached.</param>
        </member>
        <member name="M:Infragistics.RecyclingManager.ReleaseAllAvailable(System.Windows.Controls.Panel)">
            <summary>
            Removes all unused elements from the containing panel.
            </summary>
            <param name="parent">Panel whose children are to be released</param>
        </member>
        <member name="M:Infragistics.RecyclingManager.ItemFromElement(System.Windows.FrameworkElement)">
            <summary>
            Returns the <see cref="T:Infragistics.ISupportRecycling"/> instance associated with a given element.
            </summary>
            <param name="element">The element whose associated item is to be returned.</param>
            <returns>The associated item or null if the item was released or the element is not associated with an item</returns>
        </member>
        <member name="M:Infragistics.RecyclingManager.GetRecentlyAvailableElements(System.Windows.Controls.Panel,System.Boolean)">
            <summary>
            Gets the unused elements of a specific panel. 
            </summary>
            <param name="panel">The panel whose recently released elements are to be returned</param>
            <param name="release">True to clear the list</param>
            <returns>A list of elements that have been released and are not currently associated with an item since the last call to GetRecentlyAvailableElements where <paramref name="release"/> was true</returns>
        </member>
        <member name="M:Infragistics.RecyclingManager.GetAvailableElements(System.Windows.Controls.Panel)">
            <summary>
            Gets the unused elements of a specific panel. 
            </summary>
            <param name="panel">The panel whose unused Children are to be returned.</param>
            <returns>A list of elements in the Children collection of the panel that have been marked for recycling.</returns>
        </member>
        <member name="P:Infragistics.RecyclingManager.Manager">
            <summary>
            A global Manager that manages all recycling for an application.
            </summary>
        </member>
        <member name="T:Infragistics.Collections.SingleItemEnumerator">
            <summary>
            Implements an enumerator over a single item.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.SingleItemEnumerator.#ctor(System.Object)">
            <summary>
            Initializes a new instance of <see cref="T:Infragistics.Collections.SingleItemEnumerator"/>
            </summary>
            <param name="item">The single object to be enumerated.</param>
            <remarks>
            <para class="note"><b>Note:</b> If item is null the enumerator will behave is if it has no items, i.e. an empty enumerator.</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Collections.SingleItemEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:Infragistics.Collections.SingleItemEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="P:Infragistics.Collections.SingleItemEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
        </member>
        <member name="T:Infragistics.Collections.EmptyEnumerator">
            <summary>
            Implements an enumerator with no items.
            </summary>
        </member>
        <member name="F:Infragistics.Collections.EmptyEnumerator.Instance">
            <summary>
            Returns a singleton instance of an <see cref="T:Infragistics.Collections.EmptyEnumerator"/>
            </summary>
        </member>
        <member name="T:Infragistics.Collections.ISparseArrayItem">
            <summary>
            This interface can be implemented on items to be contained in the sparse 
            array to get a fast IndexOf operation.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.ISparseArrayItem.GetOwnerData(Infragistics.Collections.SparseArray)">
            <summary>
            Gets the owner data of the item.
            </summary>
            <param name="context">The sparse array context.</param>
            <remarks>
            <p class="body"><b>GetOwnerData</b> and <see cref="M:Infragistics.Collections.ISparseArrayItem.SetOwnerData(System.Object,Infragistics.Collections.SparseArray)"/> methods are used by the <see cref="T:Infragistics.Collections.SparseArray"/> implementation to maintain a transparent piece of data. It uses this data to provide efficient IndexOf operation.</p>
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.ISparseArrayItem.SetOwnerData(System.Object,Infragistics.Collections.SparseArray)">
            <summary>
            Sets the owner data of the item.
            </summary>
            <param name="ownerData"></param>
            <param name="context">The sparse array context.</param>
            <remarks>
            <p class="body"><see cref="M:Infragistics.Collections.ISparseArrayItem.GetOwnerData(Infragistics.Collections.SparseArray)"/> and <b>SetOwnerData</b> methods are used by the <see cref="T:Infragistics.Collections.SparseArray"/> implementation to maintain a transparent piece of data. It uses this data to provide efficient IndexOf operation.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.Collections.ISparseArrayMultiItem">
            <summary>
            ISparseArrayMultiItem interface.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.ISparseArrayMultiItem.GetItemAtScrollIndex(System.Int32)">
            <summary>
            Returns a descendant item at the specified index. The returned item 
            doesn't necessarily have to be an immediate child.
            </summary>
            <param name="scrollIndex"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Collections.ISparseArrayMultiItem.ScrollCount">
            <summary>
            Gets the scroll count of this item. If the scroll count is 0 then item 
            is considered hidden otherwise it's considered visible. Scroll count must 
            be a non-negative number.
            </summary>
        </member>
        <member name="T:Infragistics.Collections.ICreateItemCallback">
            <summary>
            ICreateItemCallback interface.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.ICreateItemCallback.CreateItem(Infragistics.Collections.SparseArray,System.Int32)">
            <summary>
            Returns a new item to be assigned to a location in the array. CreateItem should not 
            set the new item at the location in the array. Array and relativeIndex are provided 
            for information only. Also the implementation should not modify array in any way 
            otherwise results will be undefined.
            </summary>
        </member>
        <member name="T:Infragistics.Collections.SparseArray">
            <summary>
            SparseArray class.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Collections.SparseArray"/> class with the default factor
            </summary>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Collections.SparseArray"/> class
            </summary>
            <param name="useOwnerData">If true then either all items should implement ISparseArrayItem interface or the derived class should override <see cref="M:Infragistics.Collections.SparseArray.GetOwnerData(System.Object)"/> and <see cref="M:Infragistics.Collections.SparseArray.SetOwnerData(System.Object,System.Object)"/> methods to maintain owner data for items.</param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Collections.SparseArray"/> class .
            </summary>
            <param name="factor"></param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.#ctor(System.Int32,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Collections.SparseArray"/> class.
            </summary>
            <param name="factor"></param>
            <param name="growthFactor">Must be between 0f and 1f exclusive.</param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.#ctor(System.Int32,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Collections.SparseArray"/> class.
            </summary>
            <param name="factor"></param>
            <param name="growthFactor">Must be between 0f and 1f exclusive.</param>
            <param name="useOwnerData">If true then all the items must implement ISparseArrayItem interface.</param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.#ctor(System.Boolean,System.Int32,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Collections.SparseArray"/> class.
            </summary>
            <param name="manageScrollCounts"></param>
            <param name="factor"></param>
            <param name="growthFactor">Must be between 0f and 1f exclusive.</param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.#ctor(System.Int32,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="factor"></param>
            <param name="growthFactor"></param>
            <param name="useOwnerData"></param>
            <param name="manageScrollCounts"></param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.Expand(System.Int32)">
            <summary>
            Expands the array to the new count. New count must be greater than or equal to the 
            current count. This has the same logical effect as adding new count - current count 
            number of null items at the end of the array.
            </summary>
            <param name="newCount"></param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.Add(System.Object)">
            <summary>
            Adds the speicifed item at the end of the collection.
            </summary>
            <param name="item"></param>
            <returns>The index at which the item was added.</returns>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.Insert(System.Int32,System.Object)">
            <summary>
            Inserts the specified item at the specified location in the array.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.AddRange(System.Collections.ICollection)">
            <summary>
            Adds items in the specified collection to the end of the collection.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.InsertRange(System.Int32,System.Collections.ICollection)">
            <summary>
            Inserts items in the specified collection to the collection at the specified index.
            </summary>
            <param name="index"></param>
            <param name="items"></param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.RemoveAt(System.Int32)">
            <summary>
            Removes an item at the specified index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.Move(System.Object,System.Int32)">
            <summary>
            Moves the specified item to a new location.
            </summary>
            <param name="item">Item to move.</param>
            <param name="newIndex">New location of the item.</param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.Move(System.Int32,System.Int32)">
            <summary>
            Moves the item at the itemIndex to newIndex.
            </summary>
            <param name="itemIndex">Item at this index will be moved.</param>
            <param name="newIndex">Item will be moved to this index.</param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.IndexOf(System.Object)">
            <summary>
            Retruns the index of the specified item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes count number of items starting at the specified index in the array.
            </summary>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.Remove(System.Object)">
            <summary>
            Removes the specified item. If the item doesn't exist in the collection, it does nothing.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.Contains(System.Object)">
            <summary>
            Returns true if the specified item is contained in the collection.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.Clear">
            <summary>
            Removes all items from the array.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies all the elements from this collection to the specified array starting at index.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.CopyTo(System.Array,System.Int32,Infragistics.Collections.ICreateItemCallback)">
            <summary>
            Copies all the elements from this collection to the specified array starting at index.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.ToArray">
            <summary>
            Returns a new array containing all the elements of this collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.ToArray(System.Type)">
            <summary>
            Returns a new array of specified type containing all the elements of this collection.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.GetItem(System.Int32)">
            <summary>
            Gets the item at the specified index. If the item at the specified index is null 
            and createItemCallback parameter is non-null, it will call CreateItem on the 
            callback to create it and set it on the array at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.GetItem(System.Int32,Infragistics.Collections.ICreateItemCallback)">
            <summary>
            Gets the item at the specified index. If the item at the specified index is null 
            and createItemCallback parameter is non-null, it will call CreateItem on the 
            callback to create it and set it on the array at the specified index.
            </summary>
            <param name="index"></param>
            <param name="createItemCallback"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.Reverse">
            <summary>
            Reverses the order of items in the collection.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses the order of items in the specified range.
            </summary>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.Sort">
            <summary>
            Sorts the array.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.Sort(System.Collections.IComparer)">
            <summary>
            Sorts the array.
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.SortGeneric``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the array using generic array to achieve slightly better performance.
            </summary>
            <typeparam name="T">The array is assumed to contain objects of type T.</typeparam>
            <param name="comparer">Comparer to compare the elements of the array with.</param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.Compact">
            <summary>
            Removes data structures allocated for empty slots in the sparse array.
            </summary>
            <remarks>
            <para class="body">
            Over time setting non-null slots to null can result in sparse array holding onto
            data structures that are not necessary since all the associated slots are null
            values. Calling this method will cause the sparse array to release those data 
            structures.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.GetOwnerData(System.Object)">
            <summary>
            Returns the owner data of the item. Derived class can override <b>GetOwnerData</b> and <b>SetOwnerData</b> to support owner data without having to implement ISparseArrayItem interface on the items.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.SetOwnerData(System.Object,System.Object)">
            <summary>
            Sets the owner data on item. Derived class can override <b>GetOwnerData</b> and <b>SetOwnerData</b> to support owner data without having to implement ISparseArrayItem interface on the items.
            </summary>
            <param name="item"></param>
            <param name="ownerData"></param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.GetVisibleCount">
            <summary>
            Returns the visible count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.GetScrollCount">
            <summary>
            Returns the scroll count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.GetVisibleIndexOf(Infragistics.Collections.ISparseArrayMultiItem)">
            <summary>
            Returns the visible index associted with the specified item. Item must be contained 
            within the array. If the item is hidden, that is it's ScrollCount is 0, the this
            method returns -1.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.GetVisibleIndexOf(Infragistics.Collections.ISparseArrayMultiItem,System.Boolean)">
            <summary>
            Returns the visible index associted with the specified item. Item must be contained 
            within the array.
            </summary>
            <param name="item"></param>
            <param name="ignoreItemHiddenState">If false then returns -1 if the item is hidden. 
            If true, returns the visible index of item as it would have been if it were visible.
            This parameter doesn't have any effect on the returned value if the item is not hidden.
            </param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.GetVisibleIndexOf(System.Int32,System.Boolean)">
            <summary>
            Gets the visible index of the item at the specified index. If the item hasn't been allocated
            yet then it assumes it's visible.
            </summary>
            <param name="itemIndex">Index of the item in the sparse array.</param>
            <param name="ignoreItemHiddenState">If false and the item is hidden, returns -1. Otherwise returns
            the visible index as if it were visible.</param>
            <returns>Visible index.</returns>
            <remarks>
            <para class="body">
            This method is typically used when the item at a specific index hasn't been allocated yet
            and one needs to calculate its visible index.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.GetScrollIndexOf(Infragistics.Collections.ISparseArrayMultiItem)">
            <summary>
            Gets the scroll index of the specified item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.GetScrollIndexOf(Infragistics.Collections.ISparseArrayMultiItem,System.Boolean)">
            <summary>
            Gets the scroll index of the specified item.
            </summary>
            <param name="item"></param>
            <param name="ignoreItemHiddenState">If false then returns -1 if the item is hidden. 
            If true, returns the visible index of item as it would have been if it were visible.
            This parameter doesn't have any effect on the returned value if the item is not hidden.
            </param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.GetItemAtVisibleIndexOffset(Infragistics.Collections.ISparseArrayMultiItem,System.Int32,Infragistics.Collections.ICreateItemCallback)">
            <summary>
            Returns offset'th visible item from startItem. StartItem can be hidden in which case
            it will start from the next visible item. Offset can be 0. If the resulting visible
            index is out of bounds, returns null.
            </summary>
            <param name="startItem"></param>
            <param name="offset"></param>
            <param name="createItemCallback"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.GetItemAtVisibleIndex(System.Int32,Infragistics.Collections.ICreateItemCallback)">
            <summary>
            Returns the item at the specified visible index. This method returns null if the visible index is out of bounds.
            </summary>
            <param name="visibleIndex">Visible index at which to get the item.</param>
            <param name="createItemCallback">Optional call back to create the item at the specified visible index if none exists at that visible index.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.GetItemAtScrollIndex(System.Int32,Infragistics.Collections.ICreateItemCallback)">
            <summary>
            Returns the item at the specified scroll index. This method returns null if the scroll index is out of bounds.
            </summary>
            <param name="scrollIndex">Scroll index at which to get the item.</param>
            <param name="createItemCallback">Optional call back to create the item at the specified scroll index if none exists at that scroll index.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.GetItemContainingScrollIndex(System.Int32@,Infragistics.Collections.ICreateItemCallback)">
            <summary>
            Returns the item at the specified scroll index. This method returns null if the scroll index is out of bounds.
            </summary>
            <param name="scrollIndex">Scroll index at which to get the item. It will be modified to the offset into the item that</param>
            <param name="createItemCallback">Optional call back to create the item at the specified scroll index if none exists at that scroll index.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.GetItemAtScrollIndexHelper(System.Int32,Infragistics.Collections.ICreateItemCallback,System.Boolean,System.Int32@)">
            <summary>
            Returns the item at the specified scroll index. This method returns null if the scroll index is out of bounds.
            </summary>
            <param name="scrollIndex">Visible index at which to get the item.</param>
            <param name="createItemCallback">Optional call back to create the item at the specified scroll index if none exists at that scroll index.</param>
            <param name="traverseHierarchy">If false then the method return the item in this sparse array that contains the 
            specified scroll index. If true then it may traverse down the sparse array hierarchy to get the item at the
            specified scroll index from a sparse array that's at a lower level.</param>
            <param name="offsetIntoItem">If traverseHierarchy is false then this will be set to the scroll index relative 
            to the returned item.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.NotifyItemScrollCountChanged(Infragistics.Collections.ISparseArrayMultiItem)">
            <summary>
            Whenever a scroll count of an item contained within this collection is changed, 
            the collection must be notified of the change. If not notified of such a change,
            behavior of various scroll and visible index related methods will be undefined.
            </summary>
            <param name="item">Item whose scroll count changed.</param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.DirtyScrollCountInfo">
            <summary>
            Dirties scroll count info for the whole collection so next time it will be re-calculated.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.OnScrollCountChanged">
            <summary>
            Called by the sparse array whenever visible count or scroll count changes or is dirtied. Default implementation does nothing. This may get called multiple times for the same change as well as may get called even when the count doesn't change but is simply dirtied.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.OnItemCreated(System.Object,System.Int32)">
            <summary>
            Called when the sparese array creates an item by calling CreateItem
            on the ICreateItemCallback instance that gets passed into the method
            that initiates the creatio of the item (like GetItem method for example).
            </summary>
            <param name="item"></param>
            <param name="index"></param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.OnDeserializationComplete">
            <summary>
            Sets the owner data on all the items contained in the tree. Typically you do not 
            need to call this as the sprase array automatically manages the owner data as you
            add and remove items. This is useful if you deserialize the sparse array and
            need to make sure that the owner data are set properly on the contained items.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.GetVisibleItems(Infragistics.Collections.ICreateItemCallback)">
            <summary>
            Returns all the visible items. New items will be created to fill null slots via
            createItemCallback parameter if it's non-null.
            </summary>
            <param name="createItemCallback">Used to create items to fill null slots. If null, null items will be skipped.</param>
            <returns>Visible items in this sparse array.</returns>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.GetEnumerator">
            <summary>
            Returns an instance of IEnumerator that can be used to enumerate through all the 
            elements of this collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.GetEnumerator(Infragistics.Collections.ICreateItemCallback)">
            <summary>
            Returns an instance of IEnumerator that can be used to enumerate through all the 
            elements of this collection. New elements will be created to fill null slots via
            createItemCallback parameter if it's non-null.
            </summary>
            <param name="createItemCallback"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Collections.SparseArray.Count">
            <summary>
            Retruns the number of items contained in the collection.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.SparseArray.Item(System.Int32)">
            <summary>
            Indexer.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.SparseArray.IsSynchronized">
            <summary>
            Indicates whether this collection is synchronized. Always returns false.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.SparseArray.SyncRoot">
            <summary>
            Returns an object that can be used to synchronize thread access.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.SparseArray.NonNullItems">
            <summary>
            Returns a new instance of enumerable that can be used to enumerate through only the non-null items in the collection.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.SparseArray.InCalculatingScrollCount">
            <summary>
            Indicates whether the sparse array is currently in the process of calculating its scroll count.
            </summary>
        </member>
        <member name="T:Infragistics.Collections.SparseArray.VisibleItemsEnumerator">
            <summary>
            Enumerates visible items in the sparse array. If createItemCallback is specified,
            new items are created to fill null slots otherwise null slots are ignored even
            though they are considered to be visible.
            </summary>
        </member>
        <member name="T:Infragistics.Collections.TypedEnumerable`1">
            <summary>
            Typed enumerable that wraps a non-typed enumerable.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Infragistics.Collections.TypedEnumerable`1.#ctor(System.Collections.IEnumerable)">
            <summary>
            Constructor.
            </summary>
            <param name="e">Enumerable</param>
        </member>
        <member name="T:Infragistics.VisualStateUtilities">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:Infragistics.VisualStateUtilities.GetHasVisualStateGroups(System.Windows.Controls.Control)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:Infragistics.VisualStateUtilities.GoToState(System.Windows.Controls.Control,System.Boolean,System.String[])">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="T:Infragistics.Collections.WeakDictionary`2">
            <summary>
            IDictionary implementation that manages keys and/or values as weak references so they can be
            garbage collected.
            </summary>
            <typeparam name="TKey">Type of keys</typeparam>
            <typeparam name="TValue">Type of values</typeparam>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Collections.WeakDictionary`2"/>.
            </summary>
            <param name="manageKeysAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="manageValuesAsWeakReferences">Specifies whether to manage keys as weak references.</param>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.#ctor(System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Collections.WeakDictionary`2"/>.
            </summary>
            <param name="manageKeysAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="manageValuesAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="initialCapacity">Initial capacity.</param>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.#ctor(System.Boolean,System.Boolean,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Collections.WeakDictionary`2"/>.
            </summary>
            <param name="manageKeysAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="manageValuesAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="keyComparer">Comparer for compring keys.</param>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.#ctor(System.Boolean,System.Boolean,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Collections.WeakDictionary`2"/>.
            </summary>
            <param name="manageKeysAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="manageValuesAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="initialCapacity">Initial capacity.</param>
            <param name="keyComparer">Comparer for compring keys.</param>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.#ctor(System.Boolean,System.Boolean,System.Int32,System.Single,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Collections.WeakDictionary`2"/>.
            </summary>
            <param name="manageKeysAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="manageValuesAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="initialCapacity">Initial capacity.</param>
            <param name="loadFactor">Specifies load factor. Must be greater than 0 and less than or equal to 1.</param>
            <param name="keyComparer">Comparer for compring keys.</param>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.CreateKeyWeakReference(`0)">
            <summary>
            Creates a weak reference for the key.
            </summary>
            <param name="key">Key object.</param>
            <returns>Weak reference to the key.</returns>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.CreateValueWeakReference(`1)">
            <summary>
            Creates a weak reference for the key.
            </summary>
            <param name="value">Value object.</param>
            <returns>Weak reference to the value.</returns>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.ExpandCollapseHelper(System.Boolean)">
            <summary>
            Expands or contracts the size of storage based on the new count after an operation,
            like add, remove or clear, is performed.
            </summary>
            <param name="expandOnly">Specifies that the storage should only be expanded, and not contracted.</param>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.Add(`0,`1)">
            <summary>
            Adds an entry to the dictionary. If an entry with the specified key already exists, 
            this method throws an exception.
            </summary>
            <param name="key">Key of the entry to add.</param>
            <param name="value">Value to associate with the key.</param>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.Clear">
            <summary>
            Removes all entries from the dictionary.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.Compact(System.Boolean)">
            <summary>
            Removes entries from the dictionary where keys are no longer alive (have been garbage 
            collected). Note that keys can get garbage collected during the process of compacting 
            and therefore it's not guarrenteed that all the entries in the dictionary will be 
            with live keys after this operation is completed.
            </summary>
            <param name="removeEntriesWithNullValues">Whether to also remove entries where
            value is null or has been garbage collected.</param>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.ContainsKey(`0)">
            <summary>
            Returns true if an entry with the specified key exists in the dictionary.
            </summary>
            <param name="key">Key to check for existence.</param>
            <returns>Returns true if an entry with the specified key exists in the dictionary.</returns>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.Remove(`0)">
            <summary>
            Removes the entry with the specified key. Does nothing if the specified key doesn't exist.
            </summary>
            <param name="key">Key of the entry to remove.</param>
            <returns>True if an entry was removed. False if entry with the specified key was not found.</returns>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key. If the entry doesn't exist, returns false.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Collections.WeakDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key. Set will add an entry for the key 
            if it doesn't already exist.
            </summary>
            <param name="key">Value associated with this key will be returned.</param>
            <returns>Value associated with the specified key.</returns>
        </member>
        <member name="P:Infragistics.Collections.WeakDictionary`2.Count">
            <summary>
            Returns the number of entries in the dictionary. Note that this will not take into account 
            any garbage collected items - they will be included in the count.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.WeakDictionary`2.Keys">
            <summary>
            Returns the keys in the dictionary. Only keys with non-null values are returned.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.WeakDictionary`2.Values">
            <summary>
            Returns the values in the dictionary. Only values with non-null keys are returned.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.WeakDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
            <summary>
            Returns the keys in the dictionary.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.WeakDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
            <summary>
            Returns the values in the dictionary.
            </summary>
        </member>
        <member name="T:Infragistics.Collections.WeakList`1">
            <summary>
            A strongly typed list class that manages items using WeakReferences so the items in this list
            can be garbage collected. Items collected by garbage collector will be replaced
            by null. The <see cref="M:Infragistics.Collections.WeakList`1.Compact"/> method can be used to remove entries
            from the list that have been garbage collected.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.WeakList`1.Add(`0)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.WeakList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds specified items to the list.
            </summary>
            <param name="items">Items to add to the list.</param>
        </member>
        <member name="M:Infragistics.Collections.WeakList`1.Clear">
            <summary>
            Clears the list.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.WeakList`1.Compact">
            <summary>
            Removes entries from the list that are no longer alive. Note that entries can
            get garbase collected during the process of compacting and therefore it's not
            guarrenteed that all the items will remain alive after this method returns.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.WeakList`1.Contains(`0)">
            <summary>
            Returns true if the specified item is contained within this list.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.WeakList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies items from the list to the specified array starting at index location in the specified array.
            </summary>
            <param name="array">The array to which to copy items.</param>
            <param name="index">The location in the array at which to start copying.</param>
        </member>
        <member name="M:Infragistics.Collections.WeakList`1.GetEnumerator">
            <summary>
            Returns an enumerator for iterating the live items.
            </summary>
            <returns>An enumerator for the <see cref="T:Infragistics.Collections.WeakList`1"/></returns>
        </member>
        <member name="M:Infragistics.Collections.WeakList`1.IndexOf(`0)">
            <summary>
            Returns the index of the specified item. If the item doesn't exist then returns -1.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.WeakList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the specified item at the specified location in the list.
            </summary>
            <param name="index">The location at which to insert the item.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Infragistics.Collections.WeakList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of the specified item from the list. If the item doesn't 
            exist in the list then this method does nothing.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:Infragistics.Collections.WeakList`1.RemoveAt(System.Int32)">
            <summary>
            Removes item at specified index.
            </summary>
            <param name="index">Index of the item to remove.</param>
        </member>
        <member name="M:Infragistics.Collections.WeakList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a contiguous block of items from the collection.
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove</param>
        </member>
        <member name="M:Infragistics.Collections.WeakList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator for enumerating this list.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Collections.WeakList`1.Count">
            <summary>
            Returns the number of items in the list.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.WeakList`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified location.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Collections.WeakList`1.SyncRoot">
            <summary>
            Returns the object with which to syncrhonize.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.WeakList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Returns true if the list is read-only.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.WeakList`1.System#Collections#IList#IsFixedSize">
            <summary>
            Returns true if the list is fixed size.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.WeakList`1.System#Collections#IList#IsReadOnly">
            <summary>
            Returns true if the list is read-only.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.WeakList`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Returns true if this list is syncrhonized.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.WeakList`1.Enumerator.#ctor(Infragistics.Collections.WeakList{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="list">List to enumerate.</param>
        </member>
        <member name="M:Infragistics.Collections.WeakList`1.Enumerator.MoveNext">
            <summary>
            Moves to next item.
            </summary>
            <returns>Returns false if the enumerator is exhausted.</returns>
        </member>
        <member name="P:Infragistics.Collections.WeakList`1.Enumerator.Current">
            <summary>
            Returns the current item.
            </summary>
        </member>
        <member name="T:Infragistics.Collections.WeakList">
            <summary>
            List class that manages items using WeakReferences so the items in this list
            can be garbage collected. Items collected by garbage collector will be replaced
            by null. The <see cref="M:Infragistics.Collections.WeakList`1.Compact"/> method can be used to remove entries
            from the list that have been garbage collected.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.WeakList.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Collections.WeakList"/>
            </summary>
        </member>
        <member name="T:Infragistics.AssemblyVersion">
            <summary>
            Contains version information for the Infragistics assemblies.
            </summary>
        </member>
        <member name="F:Infragistics.AssemblyVersion.MajorMinor">
            <summary>
            Major.Minor number portion of the assembly version
            </summary>
        </member>
        <member name="F:Infragistics.AssemblyVersion.Build">
            <summary>
            Build number portion of the assembly version
            </summary>
        </member>
        <member name="F:Infragistics.AssemblyVersion.Revision">
            <summary>
            Revision number portion of the assembly version
            </summary>
        </member>
        <member name="F:Infragistics.AssemblyVersion.Version">
            <summary>
            Assembly version number
            </summary>
        </member>
        <member name="F:Infragistics.AssemblyVersion.CompanyName">
            <summary>
            Assembly company name
            </summary>
        </member>
        <member name="F:Infragistics.AssemblyVersion.EndCopyrightYear">
            <summary>
            End year of assembly copyright
            </summary>
        </member>
        <member name="F:Infragistics.AssemblyVersion.SatelliteContractVersion">
            <summary>
            The assembly version number for the satellite assemblies.
            </summary>
        </member>
        <member name="F:Infragistics.AssemblyVersion.Configuration">
            <summary>
            The current build configuration for the assembly.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.CloneInfo">
            <summary>
            Provides information about the clone operation as well as storing cloned instances
            </summary>
        </member>
        <member name="M:Infragistics.Windows.CloneInfo.TryGetClonedObject(System.Object,System.Object@)">
            <summary>
            Tries to return a clone for the specified object if it has been added to the clone info.
            </summary>
            <param name="source">The object to locate</param>
            <param name="clone">An out parameter that is set to the cloned instance of the source</param>
            <returns>Returns true if the object has been cloned otherwise false</returns>
        </member>
        <member name="M:Infragistics.Windows.CloneInfo.AddClone(System.Object,System.Object)">
            <summary>
            Stores the specified source object and the clone that was created.
            </summary>
            <param name="source">The object that was cloned</param>
            <param name="clone">The clone that represents a copy of the source</param>
        </member>
        <member name="T:Infragistics.Windows.CloneManager">
            <summary>
            Helper class for cloning a dependency object using the MarkupObject infrastructure.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.CloneManager.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.CloneManager"/>
            </summary>
        </member>
        <member name="M:Infragistics.Windows.CloneManager.Clone(System.Object)">
            <summary>
            Creates a copy of the specified object.
            </summary>
            <param name="source">The object to be copied.</param>
            <returns>A copy of the object.</returns>
        </member>
        <member name="M:Infragistics.Windows.CloneManager.ShouldClone(System.Object)">
            <summary>
            Used to determine if a given object should be cloned.
            </summary>
            <param name="source">The object to evaluate</param>
            <returns>A boolean indicating if the object should be cloned.</returns>
        </member>
        <member name="M:Infragistics.Windows.CloneManager.Clone(System.Windows.Markup.Primitives.MarkupObject,Infragistics.Windows.CloneInfo)">
            <summary>
            Helper method used to provide the clone of the specified object.
            </summary>
            <param name="mo">The markup object representing the object to be cloned.</param>
            <param name="cloneInfo">Provides information about clone operation.</param>
            <returns>A clone of the specified object</returns>
        </member>
        <member name="M:Infragistics.Windows.CloneManager.CloneItems(System.Object,System.Windows.Markup.Primitives.MarkupProperty,Infragistics.Windows.CloneInfo)">
            <summary>
            Helper method for copying the Items of the specified markup property.
            </summary>
            <param name="clone">The cloned object whose items collection should be updated</param>
            <param name="mp">The property with the items to be cloned</param>
            <param name="cloneInfo">Provides information about the clone operation</param>
        </member>
        <member name="M:Infragistics.Windows.CloneManager.ShouldSkipProperty(System.Windows.Markup.Primitives.MarkupProperty)">
            <summary>
            Used to determine whether the specified property should be skipped
            </summary>
            <param name="property">The property to evaluate</param>
            <returns>Returns false to indicate that the property should be copied.</returns>
        </member>
        <member name="M:LocalizedCategoryAttribute.GetLocalizedString(System.String)">
            <summary>
            Returns the localized category name
            </summary>
            <param name="value">Name of the category to retreive</param>
            <returns>The localized string value</returns>
        </member>
        <member name="T:Infragistics.Shared.DynamicResourceString">
            <summary>
            A class that tracks customization changes to a resource and raises an event when the resource value is changed.
            </summary>
            <seealso cref="T:SR"/>
            <seealso cref="M:SR.GetDynamicResourceString(System.String,System.Object[],System.Globalization.CultureInfo)"/>
            <seealso cref="T:Infragistics.Shared.ResourceCustomizer"/>
            <seealso cref="M:Infragistics.Shared.ResourceCustomizer.SetCustomizedString(System.String,System.String)"/>
            <seealso cref="M:Infragistics.Shared.ResourceCustomizer.ResetCustomizedString(System.String)"/>
            <seealso cref="M:Infragistics.Shared.ResourceCustomizer.ResetAllCustomizedStrings"/>
        </member>
        <member name="M:Infragistics.Shared.DynamicResourceString.#ctor(Infragistics.Shared.ResourceCustomizer,System.Globalization.CultureInfo,System.String,System.Object[])">
            <summary>
            This constructor is for internal use only.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.DynamicResourceString.ToString">
            <summary>
            Returns a string representation of the object
            </summary>
        </member>
        <member name="M:Infragistics.Shared.DynamicResourceString.GetStringFromResource(System.String,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.DynamicResourceString.DoPropertiesMatch(System.Globalization.CultureInfo,System.String,System.Object[])">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.DynamicResourceString.Value">
            <summary>
            Returns the converted string resource
            </summary>
        </member>
        <member name="E:Infragistics.Shared.DynamicResourceString.PropertyChanged">
            <summary>
            Occurs when the underlying resource string changes via the ResourceCustomizer
            </summary>
            <seealso cref="T:Infragistics.Shared.ResourceCustomizer"/>
            <seealso cref="M:Infragistics.Shared.ResourceCustomizer.SetCustomizedString(System.String,System.String)"/>
            <seealso cref="M:Infragistics.Shared.ResourceCustomizer.ResetCustomizedString(System.String)"/>
            <seealso cref="M:Infragistics.Shared.ResourceCustomizer.ResetAllCustomizedStrings"/>
        </member>
        <member name="T:Infragistics.Shared.DynamicResourceString.ID">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:Infragistics.Shared.DynamicResourceString.ID.#ctor(System.Globalization.CultureInfo,System.String,System.Object[])">
            <summary>
            Creates an instance of the struct
            </summary>
        </member>
        <member name="M:Infragistics.Shared.DynamicResourceString.ID.Equals(System.Object)">
            <summary>
            Returns true if the passed in object is equal
            </summary>
        </member>
        <member name="M:Infragistics.Shared.DynamicResourceString.ID.GetHashCode">
            <summary>
            Caclulates a value used for hashing
            </summary>
        </member>
        <member name="M:InternalDynamicResourceString.#ctor(Infragistics.Shared.ResourceCustomizer,System.Globalization.CultureInfo,System.String,System.Object[])">
            <summary>
            This constructor is for internal use only.
            </summary>
        </member>
        <member name="M:InternalDynamicResourceString.GetStringFromResource(System.String,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Helpers.TempValueReplacement">
            <summary>
            Helper class for storing a local value of a dependency property while temporarily overriding it with a new value.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Licensing.UltraLicenseBaseAttribute">
            <summary>
            The abstract base class for our license attribues
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Licensing.UltraLicenseBaseAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Windows.Licensing.UltraLicenseBaseAttribute"/> class
            </summary>
            <param name="componentName">The name of the component that will be displayed in the about dialog.</param>
        </member>
        <member name="M:Infragistics.Windows.Licensing.UltraLicenseBaseAttribute.GetLicensedWithProducts">
            <summary>
            Returns an array of UltraProductInfoBase objects.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Licensing.UltraLicenseBaseAttribute.ComponentName">
            <summary>
            Returns the display name of the component (read-only)
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Licensing.UltraLicenseAttribute.GetLicensedWithProducts">
            <summary>
            Return the list of products that this control can be licensed with
            </summary>
        </member>
        <member name="T:Infragistics.Collections.CollectionBase`1">
            <summary>
            A base collection class that provides hooks for derived classes to override base functionality.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Infragistics.ICollectionBase`1">
            <summary>
            A base collection interface that provides hooks for derived classes to override base functionality.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Infragistics.ICollectionBase">
            <summary>
            A base collection interface that provides hooks for derived classes to override base functionality.
            </summary>
        </member>
        <member name="M:Infragistics.ICollectionBase.AddItemSilently(System.Int32,System.Object)">
            <summary>
            Adds the item at the specified index, without triggering any events. 
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Infragistics.ICollectionBase.RemoveItemSilently(System.Int32)">
            <summary>
            Removes the item at the specified index, without triggering any events. 
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.ICollectionBase.ResetItemsSilently">
            <summary>
            Removes all items from the collection without firing any events.
            </summary>
        </member>
        <member name="M:Infragistics.ICollectionBase`1.AddItemSilently(System.Int32,`0)">
            <summary>
            Adds the item at the specified index, without triggering any events. 
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Collections.CollectionBase`1"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.OnNotifyCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Invoked when this collection changes.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.GetItem(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.AddItem(System.Int32,`0)">
            <summary>
            Adds the item at the specified index. 
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.InsertItem(System.Int32,`0)">
            <summary>
            Adds an item to the collection at a given index.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.AddItemSilently(System.Int32,`0)">
            <summary>
            Adds the item at the specified index, without triggering any events. 
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.OnItemAdded(System.Int32,`0)">
            <summary>
            Invoked when an Item is added at the specified index.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.RemoveItemSilently(System.Int32)">
            <summary>
            Removes the item at the specified index, without triggering any events. 
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.OnItemRemoved(System.Int32,`0)">
            <summary>
            Invoked when an Item is removed from the collection.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.ResetItems">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.ResetItemsSilently">
            <summary>
            Removes all items from the collection without firing any events.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.OnResetItems">
            <summary>
            Invoked when all items are cleared from a collection.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.ReplaceItem(System.Int32,`0)">
            <summary>
            Replaces the item at the specified index with the specified item.
            </summary>
            <param name="index"></param>
            <param name="newItem"></param>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.GetCount">
            <summary>
            Retrieves the amount of items in the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.IndexOf(`0)">
            <summary>
            Gets the index of the specified item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the item at the specified index.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.Add(`0)">
            <summary>
            Adds the item to the end of the collection.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.Contains(`0)">
            <summary>
            Determines if the collection contains the specified item.
            </summary>
            <param name="item"></param>
            <returns>True if the item is in the collection.</returns>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.Remove(`0)">
            <summary>
            Removes the specified item. 
            </summary>
            <param name="item"></param>
            <returns>True if the item was removed.</returns>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.GetEnumerator">
            <summary>
            Gets the <see cref="T:System.Collections.IEnumerator"/> for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the collection to the specified array, starting at the specified index.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Infragistics.Collections.CollectionBase`1"/> and optionally
            releases the managed resources.
            </summary>
            <param name="disposing">
            true to release both managed and unmanaged resources; 
            false to release only unmanaged resources.
            </param>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.Dispose">
            <summary>
            Releases the unmanaged and managed resources used by the <see cref="T:Infragistics.Collections.CollectionBase`1"/>.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.CollectionBase`1.Items">
            <summary>
            Gets the unerlying collection used to store all items.
            </summary>
        </member>
        <member name="E:Infragistics.Collections.CollectionBase`1.CollectionChanged">
            <summary>
            Fired when the collection changes.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.CollectionBase`1.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Collections.CollectionBase`1.Count">
            <summary>
            Gets the amount of items in the collection.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.CollectionBase`1.IsReadOnly">
            <summary>
            Gets whether or not the collection is read only.
            </summary>
        </member>
        <member name="T:Infragistics.Collections.CollectionBaseEnumerator`1">
            <summary>
            An <see cref="T:System.Collections.IEnumerator"/>  for the <see cref="T:Infragistics.Collections.CollectionBase`1"/> class.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Infragistics.Collections.CollectionBaseEnumerator`1.#ctor(Infragistics.Collections.CollectionBase{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Collections.CollectionBaseEnumerator`1"/> class.
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Infragistics.Collections.CollectionBaseEnumerator`1.System#Collections#IEnumerator#MoveNext">
            <summary>
            Gets the next item in the Enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.CollectionBaseEnumerator`1.System#Collections#IEnumerator#Reset">
            <summary>
             Resets the Enumerator.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.CollectionBaseEnumerator`1.Dispose">
            <summary>
            Disposes the <see cref="T:Infragistics.Collections.CollectionBaseEnumerator`1"/>
            </summary>
        </member>
        <member name="T:Infragistics.CommandBase">
            <summary>
            The base class for commands.
            </summary>
        </member>
        <member name="M:Infragistics.CommandBase.OnCanExecuteChanged">
            <summary>
            Raises the CanExecuteChanged event.
            </summary>
        </member>
        <member name="M:Infragistics.CommandBase.CanExecute(System.Object)">
            <summary>
            Returns True if the command can run at this time.
            </summary>
            <param name="parameter">The object where the command originated.</param>
            <returns>True if the command is executable.</returns>
        </member>
        <member name="M:Infragistics.CommandBase.Execute(System.Object)">
            <summary>
            Runs the command with the given parameter.
            </summary>
            <param name="parameter">An object containing any parameters for the command.</param>
        </member>
        <member name="M:Infragistics.CommandBase.Execute(Infragistics.Controls.CommandSource,Infragistics.ICommandTarget)">
            <summary>
            Runs the command with the given parameter.
            </summary>		
            <param name="source">The CommandSource that initiated the Command. </param>
            <param name="target">The object that is the target of the command.</param>
        </member>
        <member name="P:Infragistics.CommandBase.CommandSource">
            <summary>
            The CommandSource object that originated the command.
            </summary>
        </member>
        <member name="E:Infragistics.CommandBase.CanExecuteChanged">
            <summary>
            Event handler for the CanExecuteChanged event.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Commanding">
            <summary>
            An object that contains attached properties for hooking up commands to <see cref="T:System.Windows.FrameworkElement"/> objects.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Commanding.CommandProperty">
            <summary>
            An attached property that Gets/Sets the <see cref="T:Infragistics.Controls.CommandSource"/> that should be attached to a <see cref="T:System.Windows.FrameworkElement"/>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Commanding.GetCommand(System.Windows.FrameworkElement)">
            <summary>
            Gets the <see cref="T:Infragistics.Controls.CommandSource"/> attached to a specified <see cref="T:System.Windows.FrameworkElement"/>
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Commanding.SetCommand(System.Windows.FrameworkElement,Infragistics.Controls.CommandSource)">
            <summary>
            Sets the <see cref="T:Infragistics.Controls.CommandSource"/> that should be attached to the specified <see cref="T:System.Windows.FrameworkElement"/>
            </summary>
            <param name="element"></param>
            <param name="command"></param>
        </member>
        <member name="F:Infragistics.Controls.Commanding.CommandsProperty">
            <summary>
            Gets a collection of <see cref="T:Infragistics.Controls.CommandSource"/> objects that should be attached to a specified <see cref="T:System.Windows.FrameworkElement"/>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Commanding.GetCommands(System.Windows.FrameworkElement)">
            <summary>
            Gets a collection of <see cref="T:Infragistics.Controls.CommandSource"/> objects that should be attached to a specified <see cref="T:System.Windows.FrameworkElement"/>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Commanding.SetCommands(System.Windows.FrameworkElement,Infragistics.CommandSourceCollection)">
            <summary>
            Sets a collection of <see cref="T:Infragistics.Controls.CommandSource"/> objects that should be attached to a specified <see cref="T:System.Windows.FrameworkElement"/>
            </summary>
            <param name="elem"></param>
            <param name="commands"></param>
        </member>
        <member name="F:Infragistics.Controls.Commanding.CommandTargetProperty">
            <summary>
            An attached property that Gets/Sets the CommandTarget that should be attached to a <see cref="T:System.Windows.FrameworkElement"/>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Commanding.GetCommandTarget(System.Windows.FrameworkElement)">
            <summary>
            Gets the <see cref="T:Infragistics.ICommandTarget"/> that commands should be triggered off of. 
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Commanding.SetCommandTarget(System.Windows.FrameworkElement,System.Windows.FrameworkElement)">
            <summary>
            Sets the <see cref="T:Infragistics.ICommandTarget"/> that commands should be triggered off of.
            </summary>
            <param name="element"></param>
            <param name="commandTarget"></param>
        </member>
        <member name="T:Infragistics.CommandSourceManager">
            <summary>
            A static class that manages all registered <see cref="T:Infragistics.ICommandTarget"/> and <see cref="T:Infragistics.Controls.CommandSource"/> objects of an application.
            </summary>
        </member>
        <member name="M:Infragistics.CommandSourceManager.RegisterCommandTarget(Infragistics.ICommandTarget)">
            <summary>
            Registers the specified <see cref="T:Infragistics.ICommandTarget"/> with the <see cref="T:Infragistics.CommandSourceManager"/>
            </summary>
            <param name="target"></param>
            <remarks>
            Once registered, if a <see cref="T:Infragistics.Controls.CommandSource"/> is unable to resolve a target from walking up the VisualTree,
            it will turn to the <see cref="T:Infragistics.CommandSourceManager"/> to find all <see cref="T:Infragistics.ICommandTarget"/> objects that support the 
            given <see cref="T:System.Windows.Input.ICommand"/>
            </remarks>
        </member>
        <member name="M:Infragistics.CommandSourceManager.UnregisterCommandTarget(Infragistics.ICommandTarget)">
            <summary>
            Unregisters the specified <see cref="T:Infragistics.ICommandTarget"/> with the <see cref="T:Infragistics.CommandSourceManager"/>
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Infragistics.CommandSourceManager.GetTargets(System.Windows.Input.ICommand)">
            <summary>
            Gets a list of registered <see cref="T:Infragistics.ICommandTarget"/> objects that support the specified command.
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.CommandSourceManager.NotifyCanExecuteChanged(System.Type)">
            <summary>
            An <see cref="T:Infragistics.ICommandTarget"/> will generally invoke this method to notify all 
            registered commands that have the specific Target to check and see if it still can execute.
            </summary>
            <param name="commandType"></param>
        </member>
        <member name="M:Infragistics.CommandSourceManager.RegisterCommandSource(Infragistics.Controls.CommandSource,System.Windows.FrameworkElement)">
            <summary>
            Registers the specified CommandSource with the <see cref="T:Infragistics.CommandSourceManager"/>
            </summary>
            <param name="source"></param>
            <param name="elem"></param>
            <remarks>
            This method actually associates the source with a given element and resolves and attaches the event to the element.
            </remarks>
        </member>
        <member name="M:Infragistics.CommandSourceManager.UnregisterCommandSource(Infragistics.Controls.CommandSource)">
            <summary>
            Removes the source from the CommandSourceManager, and also removes the attached event handler.
            </summary>
            <param name="source"></param>
        </member>
        <member name="T:Infragistics.Controls.CommandSource">
            <summary>
            An object that describes what kind of Command should be attached to a particular object, and what should trigger the command.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.CommandSource.ParameterProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.CommandSource.Parameter"/> dependency property. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.CommandSource.ResolveCommand">
            <summary>
            Resolves the <see cref="T:System.Windows.Input.ICommand"/> that this <see cref="T:Infragistics.Controls.CommandSource"/> represents.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.CommandSource.ResolveParameter(Infragistics.ICommandTarget)">
            <summary>
            This method resolves the parameter that should be passed to the <see cref="T:System.Windows.Input.ICommand"/>.  
            It will use the specified parameter and check with the specified <see cref="T:Infragistics.ICommandTarget"/> to 
            see what parameter should be used. 
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.CommandSource.Execute(Infragistics.ICommandTarget,System.Boolean)">
            <summary>
            Invokes the <see cref="T:System.Windows.Input.ICommand"/> that is attached to this <see cref="T:Infragistics.Controls.CommandSource"/>
            </summary>
            <param name="target">The <see cref="T:Infragistics.ICommandTarget"/> that the command should be invoked on. </param>
            <param name="canExecute">Whether or not that the <see cref="T:System.Windows.Input.ICommand"/> can exectue.</param>
        </member>
        <member name="M:Infragistics.Controls.CommandSource.InvokeCommand(System.Boolean)">
            <summary>
            Invokes the <see cref="T:System.Windows.Input.ICommand"/> attached to the <see cref="T:Infragistics.Controls.CommandSource"/>
            </summary>
            <param name="execute">Whether or not the <see cref="T:System.Windows.Input.ICommand"/> can exectue. </param>
        </member>
        <member name="P:Infragistics.Controls.CommandSource.EventName">
            <summary>
            Gets/Sets the name of an event that should trigger a command. 
            </summary>
            <remarks>
            For example, if you were setting the CommandSource for a button, you might want to set the EventName to "Click"
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.CommandSource.SourceElement">
            <summary>
            Gets the <see cref="T:System.Windows.FrameworkElement"/> that this command represents.
            </summary>
            <remarks>
            If you were to attach the <see cref="T:Infragistics.Controls.CommandSource"/> to a <see cref="T:System.Windows.Controls.Button"/>, this property would return that Button.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.CommandSource.Target">
            <summary>
            This is the <see cref="T:Infragistics.ICommandTarget"/> object that command should be triggered on. 
            </summary>
            <remarks>
            If not explicitly set, the Commanding Framework will walk up the VisualTree from the <see cref="P:Infragistics.Controls.CommandSource.SourceElement"/>
            until it finds an object that implements <see cref="T:Infragistics.ICommandTarget"/>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.CommandSource.TargetName">
            <summary>
            If no target is resolved, then the Command will look for Globally registered targets. If this property is set, 
            it will look for an ICommandTarget that is a FrameworkElement and has the specified name.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.CommandSource.Parameter">
            <summary>
            If the Command that this <see cref="T:Infragistics.Controls.CommandSource"/> is supposed to trigger, requries additional information. 
            The information can be passed through this property.
            </summary>		
        </member>
        <member name="P:Infragistics.Controls.CommandSource.ParameterBinding">
            <summary>
            Gets/Sets the Binding that will determine the parameter for this <see cref="T:Infragistics.Controls.CommandSource"/>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.CommandSource.ParameterResolved">
            <summary>
            Gets the actual parameter that was set. 
            If a ParameterBinding was setting, it will return the binding value. 
            If it wasn't set, it will return the value in the Parameter property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.CommandSource.Command">
            <summary>
            Gets the <see cref="T:System.Windows.Input.ICommand"/> that this <see cref="T:Infragistics.Controls.CommandSource"/> represents.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.CommandSource.Handled">
            <summary>
            This should only be used by the <see cref="T:System.Windows.Input.ICommand"/> to handle the Event that triggered the command, so that it
            stops bubbling. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.CommandSource.AllowEventHandling">
            <summary>
            Gets/Sets if the Event for the attached command, should be Handled.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.CommandSource.EventHandler">
            <summary>
            Gets/Sets the EventHandler that was created based off of the <see cref="P:Infragistics.Controls.CommandSource.EventName"/> property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.CommandSource.OriginEventArgs">
            <summary>
            Gets the event argument that started the event 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.CommandSource.CommandSourceBindingContext.ValueProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.CommandSource.CommandSourceBindingContext.Value"/> dependency property. 
            </summary>
        </member>
        <member name="T:Infragistics.CommandSourceCollection">
            <summary>
            A collection of <see cref="T:Infragistics.Controls.CommandSource"/> objects which support a command.
            </summary>
        </member>
        <member name="M:Infragistics.CommandSourceCollection.AddItem(System.Int32,Infragistics.Controls.CommandSource)">
            <summary>
            Registers the <see cref="T:Infragistics.Controls.CommandSource"/> object with the <see cref="T:Infragistics.CommandSourceManager"/> and adds the object to the collection.
            </summary>
            <param name="index">The index location to add the object to.</param>
            <param name="item">The object to be added.</param>
        </member>
        <member name="M:Infragistics.CommandSourceCollection.RemoveItem(System.Int32)">
            <summary>
            Unregisters the <see cref="T:Infragistics.Controls.CommandSource"/> object with the <see cref="T:Infragistics.CommandSourceManager"/> and removes the object to the collection.
            </summary>
            <param name="index">The index location to add the object to.</param>
            <returns>True if the object is removed.</returns>
        </member>
        <member name="M:Infragistics.CommandSourceCollection.ResetItems">
            <summary>
            Unregisters all <see cref="T:Infragistics.Controls.CommandSource"/> objects from the <see cref="T:Infragistics.CommandSourceManager"/>
            </summary>
        </member>
        <member name="P:Infragistics.CommandSourceCollection.Element">
            <summary>
            Gets / sets the framework element which the command is attached to.
            </summary>
        </member>
        <member name="T:Infragistics.ICommandTarget">
            <summary>
            Used to designate objects which expect a Command to be executed against it.
            </summary>
        </member>
        <member name="M:Infragistics.ICommandTarget.SupportsCommand(System.Windows.Input.ICommand)">
            <summary>
            Returns if the object will support a given command type.
            </summary>
            <param name="command">The command to be validated.</param>
            <returns>True if the object recognizes the command as actionable against it.</returns>
        </member>
        <member name="M:Infragistics.ICommandTarget.GetParameter(Infragistics.Controls.CommandSource)">
            <summary>
            Returns the object that defines the parameters necessary to execute the command.
            </summary>
            <param name="source">The CommandSource object which defines the command to be executed.</param>
            <returns>The object necessary for the command to complete.</returns>
        </member>
        <member name="T:Infragistics.CancellableEventArgs">
            <summary>
            An event argument object with a boolean flag added to track if the event is cancelled.
            </summary>
        </member>
        <member name="P:Infragistics.CancellableEventArgs.Cancel">
            <summary>
            Gets/sets if the event should be cancelled.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Primitives.BoolToVisibilityConverter">
            <summary>
            Represents the converter that converts Boolean values to and from Visibility enumeration values.. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Primitives.BoolToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the target dependency property.
            </returns>
        </member>
        <member name="M:Infragistics.Controls.Primitives.BoolToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the target data before passing it to the source object.  This method is called only in <see cref="F:System.Windows.Data.BindingMode.TwoWay"/> bindings.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the source object.
            </returns>
        </member>
        <member name="T:Infragistics.ExtendedVisibility">
            <summary>
            Specifies whether an item will be displayed and/or take up space.
            </summary>
        </member>
        <member name="F:Infragistics.ExtendedVisibility.Visible">
            <summary>
            The item is visible.
            </summary>
        </member>
        <member name="F:Infragistics.ExtendedVisibility.Collapsed">
            <summary>
            The item is not given space and is not visable.
            </summary>
        </member>
        <member name="F:Infragistics.ExtendedVisibility.Hidden">
            <summary>
            The item is given space, but is not visable.
            </summary>
        </member>
        <member name="T:Infragistics.InvalidEventNameException">
            <summary>
            An <see cref="T:System.Exception"/> that is thrown when and invalid event name is given to a <see cref="T:Infragistics.Controls.CommandSource"/>
            </summary>
        </member>
        <member name="M:Infragistics.InvalidEventNameException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.InvalidEventNameException"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.InvalidEventNameException.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.InvalidEventNameException"/> class.
            </summary>
            <param name="eventName"></param>
            <param name="elementType"></param>
        </member>
        <member name="M:Infragistics.InvalidEventNameException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.InvalidEventNameException"/> class.
            </summary>
            <param name="message">The message that should be displayed.</param>
        </member>
        <member name="M:Infragistics.InvalidEventNameException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.InvalidEventNameException"/> class.
            </summary>
            <param name="message">The message that should be displayed.</param>
            <param name="innerException">An inner exception.</param>
        </member>
        <member name="T:Infragistics.Controls.Primitives.ExpansionIndicator">
            <summary>
             Displays an indicator that an end-user can use to expand/collapse.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Primitives.ExpansionIndicator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Primitives.ExpansionIndicator">DataTreeExpansionIndicator</see> Class.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Primitives.ExpansionIndicator.OnApplyTemplate">
            <summary>
            Overrides the framework invocation when the template is applied.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Primitives.ExpansionIndicator.OnCreateAutomationPeer">
            <summary>
            Overrides the framework invocation when an automation peer needs to be created.
            </summary>
            <returns>Returns the <see cref="T:Infragistics.AutomationPeers.ExpansionIndicatorAutomationPeer"/>ExpansionIndicatorAutomationPeer</returns>.
        </member>
        <member name="M:Infragistics.Controls.Primitives.ExpansionIndicator.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Overrides the framework invocation of the mouse enter event.
            </summary>
            <param name="e">Data about the mouse enter event.</param>
        </member>
        <member name="M:Infragistics.Controls.Primitives.ExpansionIndicator.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Overrides the framework invocation of the mouse leave event.
            </summary>
            <param name="e">Data about the mouse leave event.</param>
        </member>
        <member name="F:Infragistics.Controls.Primitives.ExpansionIndicator.IsExpandedProperty">
            <summary>
            DependencyProperty for if the <see cref="T:Infragistics.Controls.Primitives.ExpansionIndicator">DataTreeExpansionIndicator</see> is expanded or collapsed.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.ExpansionIndicator.IndicatorVisibilityProperty">
            <summary>
            DependencyProperty for if the <see cref="T:Infragistics.Controls.Primitives.ExpansionIndicator">DataTreeExpansionIndicator</see> is visible or collapsed.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Primitives.ExpansionIndicator.IsExpanded">
            <summary>
            Returns/Sets if the <see cref="T:Infragistics.Controls.Primitives.ExpansionIndicator">DataTreeExpansionIndicator</see> is expanded or collapsed.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Primitives.ExpansionIndicator.IndicatorVisibility">
            <summary>
            Returns/Sets for if the <see cref="T:Infragistics.Controls.Primitives.ExpansionIndicator">DataTreeExpansionIndicator</see> is visible or collapsed.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Primitives.ExpansionIndicator.IndicatorElement">
            <summary>
            Gets or sets the indicator element that a user can click to expand this. 
            </summary>
        </member>
        <member name="T:Infragistics.AutomationPeers.ExpansionIndicatorAutomationPeer">
            <summary>
            An automation peer for <see cref="T:Infragistics.Controls.Primitives.ExpansionIndicator"/> allowing screenreaders and programatic user interaction.
            </summary>
        </member>
        <member name="M:Infragistics.AutomationPeers.ExpansionIndicatorAutomationPeer.#ctor(Infragistics.Controls.Primitives.ExpansionIndicator)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.AutomationPeers.ExpansionIndicatorAutomationPeer"/> class.
            </summary>
            <param name="owner">The <see cref="T:Infragistics.Controls.Primitives.ExpansionIndicator"/> that this automation peer controls.</param>
        </member>
        <member name="M:Infragistics.AutomationPeers.ExpansionIndicatorAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Overrides the framework invocation of what generic type of control this is.
            </summary>
            <returns>The <see cref="T:System.Windows.Automation.Peers.AutomationControlType"/> that describes this control.</returns>
        </member>
        <member name="M:Infragistics.AutomationPeers.ExpansionIndicatorAutomationPeer.GetClassNameCore">
            <summary>
            Overrides the framework invocation requesting a string that describes this control.
            </summary>
            <returns>A string describing the name of this control.</returns>
        </member>
        <member name="M:Infragistics.AutomationPeers.ExpansionIndicatorAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Overrides the framework invocation of when a request is made for what types of user interaction are avalible. 
            </summary>
            <param name="patternInterface">This is the type of user interaction requested.</param>
            <returns>An object that can handle this pattern or null if none available.</returns>
        </member>
        <member name="M:Infragistics.AutomationPeers.ExpansionIndicatorAutomationPeer.Toggle">
            <summary>
            Expands or collapses the current item.
            </summary>
        </member>
        <member name="P:Infragistics.AutomationPeers.ExpansionIndicatorAutomationPeer.ToggleState">
            <summary>
            Returns the current state of expanded or collapsed.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.HierarchicalDataTemplate">
            <summary>
            Describes a multi-level visual structure of a data object.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.HierarchicalDataTemplate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.HierarchicalDataTemplate"/> class.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.HierarchicalDataTemplate.HierarchicalItemTemplateProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.HierarchicalDataTemplate.HierarchicalItemTemplate"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.HierarchicalDataTemplate.ItemTemplateProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.HierarchicalDataTemplate.ItemTemplate"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.HierarchicalDataTemplate.TemplateProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.HierarchicalDataTemplate.Template"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.HierarchicalDataTemplate.ItemContainerStyleProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.HierarchicalDataTemplate.ItemContainerStyle"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.HierarchicalDataTemplate.DefaultItemsContainerProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.HierarchicalDataTemplate.DefaultItemsContainer"/> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.HierarchicalDataTemplate.HierarchicalItemTemplate">
            <summary>
            Gets or sets the <see cref="T:Infragistics.Controls.HierarchicalDataTemplate"/> that describes the visual structure for an object's children.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.HierarchicalDataTemplate.ItemTemplate">
            <summary>
            Gets or sets the <see cref="T:System.Windows.DataTemplate"/> that will be used to describe each child item of an object.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.HierarchicalDataTemplate.Template">
            <summary>
            Gets or sets the DataTemplate that will be used to describe how the owning object will be be laid out.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.HierarchicalDataTemplate.ItemsSource">
            <summary>
            Gets or sets the binding used for obtaining the items source.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.HierarchicalDataTemplate.ItemContainerStyle">
            <summary>
            Gets or sets the style that is used when rendering the children of the owning object.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.HierarchicalDataTemplate.DefaultItemsContainer">
            <summary>
            Gets or sets a DataTemplate whose content will be used as the default container for all generated children items of the owning object.
            </summary>
            <remarks>
            If the root content of the DataTemplate is not of a specific type defined by the owning control, the property will be ignored and the default container will be used instead.
            </remarks>
        </member>
        <member name="T:Infragistics.Utility">
            <summary>
            A static class that contains useful methods that can be reused throughout all controls.
            </summary>
        </member>
        <member name="M:Infragistics.Utility.ResolveRootPanel">
            <summary>
            Finds the topmost panel inside a Silverlight Application.
            </summary>
            <returns>The topmost panel, or null if it can not find one.</returns>
        </member>
        <member name="T:Infragistics.IProvideScrollInfo">
            <summary>
            An interface that returns the scrollbars of a control.
            </summary>
        </member>
        <member name="P:Infragistics.IProvideScrollInfo.VerticalScrollBar">
            <summary>
            Gets the Vertical Scrollbar of a control, or null if there isn'type one attached
            </summary>
        </member>
        <member name="P:Infragistics.IProvideScrollInfo.HorizontalScrollBar">
            <summary>
            Gets the Horizontal Scrollbar of a control, or null if there isn'type one attached
            </summary>
        </member>
        <member name="T:Infragistics.ISelectableObject">
            <summary>
            An interface for items that can be selected. 
            </summary>
        </member>
        <member name="M:Infragistics.ISelectableObject.SetSelected(System.Boolean)">
            <summary>
            Sets the selected state of an item. 
            </summary>
            <param propertyName="isSelected"></param>
        </member>
        <member name="P:Infragistics.ISelectableObject.IsSelected">
            <summary>
            Gets/sets whether an item is current selected. 
            </summary>
        </member>
        <member name="T:Infragistics.IProvidePropertyPersistenceSettings">
            <summary>
            Allows objects to to specify which properties should be saved when the PersistenceManager goes to save it.
            </summary>
        </member>
        <member name="M:Infragistics.IProvidePropertyPersistenceSettings.FinishedLoadingPersistence">
            <summary>
            Allows an object to perform an operation, after it's been loaded.
            </summary>
        </member>
        <member name="P:Infragistics.IProvidePropertyPersistenceSettings.PropertiesToIgnore">
            <summary>
            Gets a List of properties that shouldn't be saved when the PersistenceManager goes to save them.
            </summary>
        </member>
        <member name="P:Infragistics.IProvidePropertyPersistenceSettings.PriorityProperties">
            <summary>
            Gets a List of properties that should be applied, before even trying to look at any other property on the object.
            </summary>
        </member>
        <member name="T:Infragistics.INeedInitializationForPersistence">
            <summary>
            Allows an object to perform some sort of initialization, before it is loaded via the Control Persistence Framework.
            </summary>
        </member>
        <member name="M:Infragistics.INeedInitializationForPersistence.InitObject(System.Object)">
            <summary>
            This method is used to setup the object that was just created. 
            </summary>
            <param name="owner">The object that owns the object being initialized. </param>
        </member>
        <member name="T:Infragistics.IProvideCustomPersistence">
            <summary>
            Allows an object to save and load itself, instead of having the Control Persistence Framework, decie how it should be saved and loaded.
            </summary>
        </member>
        <member name="M:Infragistics.IProvideCustomPersistence.Save">
            <summary>
            Gets the string representation of the object, that can be later be passed into the Load method of this object, in order to rehydrate.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.IProvideCustomPersistence.Load(System.Object,System.String)">
            <summary>
            Takes the string that was created in the Save method, and rehydrates the object. 
            </summary>
            <param name="owner">This is the object who owns this object as a property.</param>
            <param name="value"></param>
        </member>
        <member name="T:Infragistics.IProvidePersistenceLookupKeys">
            <summary>
            Some collections have specific keys that identify them. So, when saving and loading, it's important that these properties
            get set first, so that they can be rehydrated instead of destroyed.
            </summary>
        </member>
        <member name="M:Infragistics.IProvidePersistenceLookupKeys.GetLookupKeys">
            <summary>
            Gets a list of keys that each object in the collection has. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.IProvidePersistenceLookupKeys.CanRehydrate(System.Collections.ObjectModel.Collection{System.String})">
            <summary>
            Looks through the keys, and determines that all the keys are in the collection, and that the same about of objects are in the collection.
            If this isn't the case, false is returned, and the Control Persistence Framework, will not try to reuse the object that are already in the collection.
            </summary>
            <param name="lookupKeys"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.PlatformProxy.GetFocusedElement(System.Windows.DependencyObject)">
            <summary>
            Gets the Focused element
            </summary>
            <param name="scopedElement">
            The paramter is specific to wpf, where you would pass the element who you should be scoped to.
            </param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.PlatformProxy.GetRootVisual(System.Windows.DependencyObject)">
            <summary>
            The primary use case of this method is to replace using Application.Current.RootVisual in SL.
            </summary>
            <param name="scopedElement"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.StringResourceLocationAttribute">
            <summary>
            A custom attribute to specify the location of strings.
            Use: [assembly: StringResourceLocation("Infragistics.Silverlight.Strings")]
            </summary>
        </member>
        <member name="M:Infragistics.StringResourceLocationAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Infragistics.StringResourceLocationAttribute"/>
            </summary>
            <param name="location">The location of string</param>
        </member>
        <member name="P:Infragistics.StringResourceLocationAttribute.Location">
            <summary>
            Specifies the location of strings.resx
            </summary>
        </member>
        <member name="T:Infragistics.NullableEnumTypeConverter`1">
            <summary>
            Converts Nullable Enum types from strings to the specified enum.
            </summary>
            <typeparam name="T">The enum that the value should be converted to.</typeparam>
        </member>
        <member name="M:Infragistics.NullableEnumTypeConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether this converter can convert an object of the specified Nullable enum.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">The type that you want to convert from.</param>
            <returns>true if sourceType is a <see cref="T:System.String"/> or of the specified type.</returns>
        </member>
        <member name="M:Infragistics.NullableEnumTypeConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified object to a Nullable enum.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The object to covert to the Nullable enum type.</param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.WeakReferenceHelper`1">
            <summary>
            Represents a list that store weak references to values. This list allows to
            store values while still allowing that the values can be reclaimed by garbage 
            collection and avoid memory leaks.
            </summary>
            <typeparam name="T">Type of the values.</typeparam>
            <remarks>
            If a value is added to the list and after that it is released by the
            garbage collector, it is removed from the list automatically when the
            it detects that the weak reference is dead.    
            </remarks>
        </member>
        <member name="M:Infragistics.WeakReferenceHelper`1.#ctor">
            <summary>
            Initialize a new instance of the WeakReferenceHelper class.
            </summary>
        </member>
        <member name="M:Infragistics.WeakReferenceHelper`1.Contains(`0)">
            <summary>
            Determines whether the access control list contains a specific 
            access control entry.
            </summary>
            <param name="item">The item to locate in the list.</param>
            <returns>true if the item is found in the list; otherwise, false.</returns>
        </member>
        <member name="M:Infragistics.WeakReferenceHelper`1.Add(`0)">
            <summary>
            Inserts an item at the end of the list.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="M:Infragistics.WeakReferenceHelper`1.AddRange(System.Collections.Generic.IEnumerable{System.WeakReference})">
            <summary>
            Adds a range of items to the list
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Infragistics.WeakReferenceHelper`1.RemoveLast">
            <summary>
            Removes and returns the last item of the list.
            </summary>
            <returns>The item removed from the list. null if the list is empty.</returns>
        </member>
        <member name="M:Infragistics.WeakReferenceHelper`1.Remove(`0)">
            <summary>
            Remove the first occurrence of the specified item from the list.
            </summary>
            <param name="item">Item to remove.</param>
            <returns>true if the item was successfully removed; false if item was not found in the list.</returns>
        </member>
        <member name="M:Infragistics.WeakReferenceHelper`1.ForEach(System.Func{`0,System.Boolean})">
            <summary>
            Performs the specified action on each item of the list.
            </summary>
            <param name="action">
            Action that is invoked with the item as argument. If it returns true the
            for each continues with the next item, if it returns false the for each
            stops (like including a break in code).
            </param>
        </member>
        <member name="M:Infragistics.WeakReferenceHelper`1.CleanValues">
            <summary>
            Remove the items from the list that were reclaimed by the garbage collector.
            </summary>
        </member>
        <member name="P:Infragistics.WeakReferenceHelper`1.Values">
            <summary>
            A List of WeakReferences for the RecyclingManager
            </summary>
        </member>
        <member name="P:Infragistics.WeakReferenceHelper`1.Count">
            <summary>
            Gets the total amount of objects from the collection. 
            </summary>
        </member>
        <member name="P:Infragistics.WeakReferenceHelper`1.Item(System.Int32)">
            <summary>
            Gets the item at the specified index. 
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Windows.Controls.AutoDisabledImage">
            <summary>
            An image class that will automatically change the image when its <see cref="P:System.Windows.UIElement.IsEnabled"/> is false. The element 
            can automatically generate one or an image can be provided via the <see cref="P:Infragistics.Windows.Controls.AutoDisabledImage.DisabledSource"/> property.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.AutoDisabledImage.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Controls.AutoDisabledImage"/>
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.AutoDisabledImage.DisabledSourceProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.AutoDisabledImage.DisabledSource"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.AutoDisabledImage.OnInitialized(System.EventArgs)">
            <summary>
            Invoked when the element is initialized.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="P:Infragistics.Windows.Controls.AutoDisabledImage.DisabledSource">
            <summary>
            Returns or sets the <see cref="T:System.Windows.Media.ImageSource"/> to use as the source for the image when the <see cref="P:System.Windows.UIElement.IsEnabled"/> is false.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.AutoDisabledImage.DisabledSourceProperty"/>
        </member>
        <member name="T:Infragistics.Windows.Controls.AutomationControl">
            <summary>
            Used for displaying drop indicator during a drag-and-drop operation.
            </summary>
            <remarks>
            <para class="body">
            <b>DropIndicator</b> control is used to display drop indicator during a drag-and-drop operation.
            For example, when a field in DataGrid is dragged and dropped to rearrange fields, this drop indicator
            will be displayed to indicate where the item will be dropped.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Controls.AutomationControl.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.AutomationControl.OnCreateAutomationPeer">
            <summary>
            Overridden. Creates an automation peer for this control.
            </summary>
            <returns>A new instance of AutomationPeer derived class.</returns>
        </member>
        <member name="T:Infragistics.Windows.Automation.Peers.AutomationPeerProxy">
            <summary>
            An <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> used to represent another automation peer.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.AutomationPeerProxy.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.Windows.Automation.Peers.AutomationPeerProxy"/> class
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.AutomationPeerProxy.GetAcceleratorKeyCore">
            <summary>
            Returns the accelerator key for the <see cref="T:System.Windows.UIElement"/> that corresponds with the object that is associated with this <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/>.
            </summary>
            <returns>The accelerator key</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.AutomationPeerProxy.GetAccessKeyCore">
            <summary>
            Returns the access key for the <see cref="T:System.Windows.UIElement"/> that corresponds with the object that is associated with this <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/>.
            </summary>
            <returns>The access key</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.AutomationPeerProxy.GetAutomationIdCore">
            <summary>
            Returns the <see cref="T:System.Windows.Automation.AutomationIdentifier"/> for the <see cref="T:System.Windows.UIElement"/> that corresponds with the object that is associated with this <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/>.
            </summary>
            <returns>The ui automation identifier</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.AutomationPeerProxy.GetBoundingRectangleCore">
            <summary>
            Returns the <see cref="T:System.Windows.Rect"/> that represents the bounding rectangle of the <see cref="T:System.Windows.UIElement"/> that corresponds with the object that is associated with this <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/>.
            </summary>
            <returns>The bounding rectangle</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.AutomationPeerProxy.GetChildrenCore">
            <summary>
            Returns the collection of child elements of the object that is associated with this <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/>
            </summary>
            <returns>The collection of child elements</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.AutomationPeerProxy.GetClickablePointCore">
            <summary>
            Returns the <see cref="T:System.Windows.Point"/> that represents the clickable space for the <see cref="T:System.Windows.UIElement"/> that corresponds with the object that is associated with this <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/>.
            </summary>
            <returns>The point that represents the clickable space on the element</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.AutomationPeerProxy.GetHelpTextCore">
            <summary>
            Returns the string that describes the functionality of the <see cref="T:System.Windows.UIElement"/> that corresponds with the object that is associated with this <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/>.
            </summary>
            <returns>The help text</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.AutomationPeerProxy.GetItemStatusCore">
            <summary>
            Returns a string that conveys the parent status for the <see cref="T:System.Windows.UIElement"/> that corresponds with the object that is associated with this <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/>.
            </summary>
            <returns>The status</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.AutomationPeerProxy.GetItemTypeCore">
            <summary>
            Returns a human readable string that contains the type of item for the <see cref="T:System.Windows.UIElement"/> that corresponds with the object that is associated with this <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/>.
            </summary>
            <returns>The item type</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.AutomationPeerProxy.GetLabeledByCore">
            <summary>
            Returns the <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> for the <see cref="T:System.Windows.Controls.Label"/> that is targeted to the <see cref="T:System.Windows.UIElement"/> that corresponds with the object that is associated with this <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/>.
            </summary>
            <returns>The <see cref="T:System.Windows.Automation.Peers.LabelAutomationPeer"/> of the <see cref="T:System.Windows.Controls.Label"/> that targets this element</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.AutomationPeerProxy.GetNameCore">
            <summary>
            Returns the text label for the <see cref="T:System.Windows.UIElement"/> that corresponds with the object that is associated with this <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/>.
            </summary>
            <returns>The text label</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.AutomationPeerProxy.GetOrientationCore">
            <summary>
            Returns the value that indicates the direction in which the <see cref="T:System.Windows.UIElement"/> is laid out.
            </summary>
            <returns>The direction of the <see cref="T:System.Windows.UIElement"/> or <b>AutomationOrientation.None</b> if no direction is specified</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.AutomationPeerProxy.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Returns the control pattern associated with the specified <see cref="T:System.Windows.Automation.Peers.PatternInterface"/> for the <see cref="T:System.Windows.UIElement"/> that corresponds with the object that is associated with this <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/>.
            </summary>
            <param name="patternInterface">The pattern being requested</param>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.AutomationPeerProxy.HasKeyboardFocusCore">
            <summary>
            Returns a value that indicates whether the <see cref="T:System.Windows.UIElement"/> that corresponds with the object that is associated with this <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> currently has the keyboard input focus.
            </summary>
            <returns><b>True</b> if the <see cref="T:System.Windows.UIElement"/> has the keyboard input focus; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.AutomationPeerProxy.IsContentElementCore">
            <summary>
            Returns a value that indicates whether the <see cref="T:System.Windows.UIElement"/> that corresponds with the object that is associated with this <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> contains data that is presented to the user.
            </summary>
            <returns><b>True</b> if the <see cref="T:System.Windows.UIElement"/> is a content element; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.AutomationPeerProxy.IsControlElementCore">
            <summary>
            Returns a value that indicates whether the <see cref="T:System.Windows.UIElement"/> that corresponds with the object that is associated with this <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> is understood by the end user as interactive.
            </summary>
            <returns><b>True</b> if the <see cref="T:System.Windows.UIElement"/> is a control; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.AutomationPeerProxy.IsEnabledCore">
            <summary>
            Returns a value indicating whether the <see cref="T:System.Windows.UIElement"/> that corresponds with the object that is associated with this <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> can receive and send events.
            </summary>
            <returns><b>True</b> if the <see cref="T:System.Windows.UIElement"/> can send and receive events; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.AutomationPeerProxy.IsKeyboardFocusableCore">
            <summary>
            Returns a value that indicates whether the <see cref="T:System.Windows.UIElement"/> that corresponds with the object that is associated with this <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> can accept keyboard focus.
            </summary>
            <returns><b>True</b> if the element can accept keyboard focus; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.AutomationPeerProxy.IsOffscreenCore">
            <summary>
            Returns a value that indicates whether the <see cref="T:System.Windows.UIElement"/> that corresponds with the object that is associated with this <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> is off the screen.
            </summary>
            <returns><b>True</b> if the element is off the screen; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.AutomationPeerProxy.IsPasswordCore">
            <summary>
            Returns a value that indicates whether the <see cref="T:System.Windows.UIElement"/> that corresponds with the object that is associated with this <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> contains protected content.
            </summary>
            <returns><b>True</b> if the element contains protected content; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.AutomationPeerProxy.IsRequiredForFormCore">
            <summary>
            Returns a value that indicates whether the <see cref="T:System.Windows.UIElement"/> that corresponds with the object that is associated with this <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> is required to be completed on the form.
            </summary>
            <returns><b>True</b> if the element is required to be completed; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.AutomationPeerProxy.SetFocusCore">
            <summary>
            Sets the keyboard input focus on the <see cref="T:System.Windows.UIElement"/> that corresponds with the object that is associated with this <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.AutomationPeerProxy.GetUnderlyingPeer">
            <summary>
            Returns the automation peer for which this proxy is associated.
            </summary>
            <returns>An <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/></returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.AutomationPeerProxy.ThrowIfNotEnabled">
            <summary>
            Throws a <see cref="T:System.Windows.Automation.ElementNotEnabledException"/> if the element is not enabled.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Automation.Peers.ComparisonOperatorSelectorAutomationPeer">
            <summary>
            Exposes <see cref="T:Infragistics.Windows.Controls.ComparisonOperatorSelector"/> types to UI Automation
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.ComparisonOperatorSelectorAutomationPeer.#ctor(Infragistics.Windows.Controls.ComparisonOperatorSelector)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Automation.Peers.ComparisonOperatorSelectorAutomationPeer"/>
            </summary>
            <param name="element">The associated element</param>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.ComparisonOperatorSelectorAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Returns an enumeration indicating the type of control represented by the automation peer.
            </summary>
            <returns>The <b>Custom</b> enumeration value</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.ComparisonOperatorSelectorAutomationPeer.GetClassNameCore">
            <summary>
            Returns the name of the <see cref="T:Infragistics.Windows.Controls.ComparisonOperatorSelector"/>
            </summary>
            <returns>A string that contains 'ComparisonOperatorSelector'</returns>
        </member>
        <member name="T:Infragistics.Windows.Automation.Peers.AutomationControlPeer">
            <summary>
            Exposes <see cref="T:Infragistics.Windows.Controls.ComparisonOperatorSelector"/> types to UI Automation
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.AutomationControlPeer.#ctor(Infragistics.Windows.Controls.AutomationControl)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Automation.Peers.AutomationControlPeer"/>
            </summary>
            <param name="control">The associated AutomationControl</param>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.AutomationControlPeer.GetAutomationControlTypeCore">
            <summary>
            Returns an enumeration indicating the type of control represented by the automation peer.
            </summary>
            <returns>The <b>Custom</b> enumeration value</returns>
        </member>
        <member name="T:Infragistics.Windows.Automation.Peers.ExpanderDecoratorAutomationPeer">
            <summary>
            Exposes the <see cref="T:Infragistics.Windows.ExpanderDecorator"/> to UI Automation
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.ExpanderDecoratorAutomationPeer.#ctor(Infragistics.Windows.ExpanderDecorator)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Automation.Peers.ExpanderDecoratorAutomationPeer"/>
            </summary>
            <param name="expander">The associated element</param>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.ExpanderDecoratorAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Returns an enumeration indicating the type of control represented by the automation peer.
            </summary>
            <returns>The <b>Group</b> enumeration value</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.ExpanderDecoratorAutomationPeer.GetClassNameCore">
            <summary>
            Returns the name of the <see cref="T:Infragistics.Windows.ExpanderDecorator"/>
            </summary>
            <returns>A string that contains 'ExpanderDecorator'</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.ExpanderDecoratorAutomationPeer.GetChildrenCore">
            <summary>
            Returns the collection of automation peers that represents the children of the tab item
            </summary>
            <returns>The collection of child elements</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.ExpanderDecoratorAutomationPeer.IsControlElementCore">
            <summary>
            Returns a value that indicates whether the <see cref="T:System.Windows.UIElement"/> that corresponds with the object that is associated with this <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> is understood by the end user as interactive.
            </summary>
            <returns><b>True</b> if the <see cref="T:System.Windows.UIElement"/> is a control; otherwise, <b>false</b>.</returns>
        </member>
        <member name="T:Infragistics.Windows.Automation.Peers.IListAutomationPeer">
            <summary>
            Interface implemented by AutomationPeers that support a list of items.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.IListAutomationPeer.GetUnderlyingPeer(System.Object)">
            <summary>
            Returns the underlying AutomationPeer for the specified item.
            </summary>
            <param name="item">The item for which to retrieve the underlying AutomationPeer.</param>
            <returns>The underlying AutomationPeer</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.IListAutomationPeer.ContainerFromItem(System.Object)">
            <summary>
            Returns the container element for the specified item in the list associated with the peer implementing this interface.
            </summary>
            <param name="item">The item to return the container element for.</param>
            <returns>The container element for the specified item.</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.IListAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Returns the Pattern implementation for the specified PatternInterface as supplied by the peer implementing this interface.
            </summary>
            <param name="patternInterface">The PatternInterface for which the Pattern implementation is being requested.</param>
            <returns>The requested Pattern implementation or null if the peer does not implement the pattern.</returns>
        </member>
        <member name="P:Infragistics.Windows.Automation.Peers.IListAutomationPeer.Owner">
            <summary>
            Returns the <see cref="T:System.Windows.UIElement"/> that is the owner of the peer implementing this interface.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Automation.Peers.IListAutomationPeer.ItemsControlPanel">
            <summary>
            Returns the <see cref="T:System.Windows.Controls.Panel"/> this is associated with the Owner of the peer implementating this interface, or null if there is no panel associated with the owner.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Automation.Peers.PopupResizerBarAutomationPeer">
            <summary>
            Exposes the <see cref="T:Infragistics.Windows.Controls.PopupResizerBar"/> to UI Automation
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.PopupResizerBarAutomationPeer.#ctor(Infragistics.Windows.Controls.PopupResizerBar)">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.Windows.Automation.Peers.PopupResizerBarAutomationPeer"/> class
            </summary>
            <param name="owner">The <see cref="T:Infragistics.Windows.Controls.PopupResizerBar"/> for which the peer is being created</param>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.PopupResizerBarAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Returns an enumeration indicating the type of control represented by the automation peer.
            </summary>
            <returns>The <b>Custom</b> enumeration value</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.PopupResizerBarAutomationPeer.GetClassNameCore">
            <summary>
            Returns the name of the <see cref="T:Infragistics.Windows.Controls.PopupResizerBar"/>
            </summary>
            <returns>A string that contains 'ToolWindow'</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.PopupResizerBarAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Returns the control pattern associated with the specified <see cref="T:System.Windows.Automation.Peers.PatternInterface"/> for the <see cref="T:Infragistics.Windows.Controls.PopupResizerBar"/> that corresponds with this <see cref="T:Infragistics.Windows.Automation.Peers.PopupResizerBarAutomationPeer"/>.
            </summary>
            <param name="patternInterface">The pattern being requested</param>
        </member>
        <member name="T:Infragistics.Windows.Automation.Peers.RecycleableItemAutomationPeer">
            <summary>
            Exposes an item of the <see cref="T:Infragistics.Windows.Automation.Peers.RecyclingItemsControlAutomationPeer"/> to UI Automation
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.RecycleableItemAutomationPeer.#ctor(System.Object,Infragistics.Windows.Automation.Peers.IListAutomationPeer)">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.Windows.Automation.Peers.RecycleableItemAutomationPeer"/> class
            </summary>
            <param name="item">The item for which the peer is being created</param>
            <param name="listAutomationPeer">The containing automation peer for the item being created</param>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.RecycleableItemAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Returns an enumeration indicating the type of control represented by the automation peer.
            </summary>
            <returns>The <b>ListItem</b> enumeration value</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.RecycleableItemAutomationPeer.GetClassNameCore">
            <summary>
            Returns the name of the item
            </summary>
            <returns>A string that contains 'Item'</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.RecycleableItemAutomationPeer.GetUnderlyingPeer">
            <summary>
            Returns the automation peer for which this proxy is associated.
            </summary>
            <returns>An <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> that represents the element for the item</returns>
        </member>
        <member name="P:Infragistics.Windows.Automation.Peers.RecycleableItemAutomationPeer.Item">
            <summary>
            Returns the item from the containing <see cref="T:Infragistics.Windows.Virtualization.RecyclingItemsControl"/> with which the automation peer is associated.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Automation.Peers.RecycleableItemAutomationPeer.ListAutomationPeer">
            <summary>
            Returns the owning <see cref="T:Infragistics.Windows.Automation.Peers.IListAutomationPeer"/>
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Automation.Peers.RecyclingItemsControlAutomationPeer">
            <summary>
            Exposes a <see cref="T:Infragistics.Windows.Virtualization.RecyclingItemsControl"/> to UI Automation.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.RecyclingItemsControlAutomationPeer.#ctor(Infragistics.Windows.Virtualization.RecyclingItemsControl)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Automation.Peers.RecyclingItemsControlAutomationPeer"/>
            </summary>
            <param name="control">The <see cref="T:Infragistics.Windows.Virtualization.RecyclingItemsControl"/> for which the peer is being created</param>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.RecyclingItemsControlAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Returns an enumeration indicating the type of control represented by the automation peer.
            </summary>
            <returns>The <b>List</b> enumeration value</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.RecyclingItemsControlAutomationPeer.GetClassNameCore">
            <summary>
            Returns the name of the <see cref="T:Infragistics.Windows.Virtualization.RecyclingItemsControl"/>
            </summary>
            <returns>A string that contains 'RecyclingItemsControl'</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.RecyclingItemsControlAutomationPeer.GetChildrenCore">
            <summary>
            Returns the collection of automation peers that represents the items with the associated <see cref="T:Infragistics.Windows.Virtualization.RecyclingItemsControl"/>
            </summary>
            <returns>The collection of child elements</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.RecyclingItemsControlAutomationPeer.ContainerFromItem(System.Object)">
            <summary>
            Returns the generated uielement associated with the specified item from the list.
            </summary>
            <param name="item">The item in the list whose container is to be returned.</param>
            <returns>Returns the generated uielement associated with the specified item from the list.</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.RecyclingItemsControlAutomationPeer.CreateAutomationPeer(System.Object)">
            <summary>
            Used to create an automation peer that will represent an item from the associated <see cref="T:Infragistics.Windows.Virtualization.RecyclingItemsControl"/>
            </summary>
            <param name="item">Item for which the automation peer is to be created</param>
            <returns>An <see cref="T:Infragistics.Windows.Automation.Peers.RecycleableItemAutomationPeer"/> that represents the specified item.</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.RecyclingItemsControlAutomationPeer.GetChildrenCoreBase(System.Boolean)">
            <summary>
            Returns the base implementation of <see cref="M:Infragistics.Windows.Automation.Peers.RecyclingItemsControlAutomationPeer.GetChildrenCore"/>.
            </summary>
            <param name="excludeItemElements">True to remove any peers that represents the item elements for the items within the <see cref="T:Infragistics.Windows.Virtualization.RecyclingItemsControl"/></param>
            <returns>The collection of child elements from the base implementation of GetChildrenCore.</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.RecyclingItemsControlAutomationPeer.GetItemOrContainerFromContainer(System.Windows.DependencyObject)">
            <summary>
            Returns the item represented by the specified element container.
            </summary>
            <param name="container">The element for which the item will be returned.</param>
            <returns>The item represented by the element, the element itself if it is the item or <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> is the container is not recognized.</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.RecyclingItemsControlAutomationPeer.GetItemPeer(System.Object)">
            <summary>
            Returns the automation peer that represents the specified item.
            </summary>
            <param name="item">Item whose automation peer is to be obtained.</param>
            <returns>A <see cref="T:Infragistics.Windows.Automation.Peers.RecycleableItemAutomationPeer"/></returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.RecyclingItemsControlAutomationPeer.ItemFromContainer(System.Windows.DependencyObject)">
            <summary>
            Returns the item from the list that corresponds to the specified generated UIElement.
            </summary>
            <param name="container">The <see cref="T:System.Windows.DependencyObject"/> that corresponds with the item to be returned.</param>
            <returns>Returns the item from the list that corresponds to the specified generated UIElement.</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.RecyclingItemsControlAutomationPeer.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Invoked when the contents of the items collection of the associated <see cref="T:Infragistics.Windows.Virtualization.RecyclingItemsControl"/> changed.
            </summary>
            <param name="e">Event arguments indicating the change that occurred.</param>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.RecyclingItemsControlAutomationPeer.OnItemsSourceChanged(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Invoked when the ItemsSource of the associated <see cref="T:Infragistics.Windows.Virtualization.RecyclingItemsControl"/> has changed.
            </summary>
            <param name="oldValue">Old item source</param>
            <param name="newValue">New item source</param>
        </member>
        <member name="T:Infragistics.Windows.Automation.Peers.SimpleTextBlockAutomationPeer">
            <summary>
            Exposes the <see cref="T:Infragistics.Windows.Controls.SimpleTextBlock"/> to UI Automation.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.SimpleTextBlockAutomationPeer.#ctor(Infragistics.Windows.Controls.SimpleTextBlock)">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.Windows.Automation.Peers.SimpleTextBlockAutomationPeer"/> class.
            </summary>
            <param name="owner">The <see cref="T:Infragistics.Windows.Controls.SimpleTextBlock"/> for which the peer is being created.</param>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.SimpleTextBlockAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Returns an enumeration indicating the type of control represented by the automation peer.
            </summary>
            <returns>The <b>Text</b> enumeration value.</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.SimpleTextBlockAutomationPeer.GetClassNameCore">
            <summary>
            Returns the name of the <see cref="T:Infragistics.Windows.Controls.SimpleTextBlock"/>.
            </summary>
            <returns>A string that contains 'SimpleTextBlock'.</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.SimpleTextBlockAutomationPeer.IsContentElementCore">
            <summary>
            Returns the value indicating whether the <see cref="T:Infragistics.Windows.Controls.SimpleTextBlock"/> associated with this automation peer 
            is content in an owning control.
            </summary>
            <returns>False if the element is part of a template; otherwise True.</returns>
        </member>
        <member name="T:Infragistics.Windows.Automation.Peers.TabItemExAutomationPeer">
            <summary>
            Exposes the <see cref="T:Infragistics.Windows.Controls.TabItemEx"/> to UI Automation.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.TabItemExAutomationPeer.#ctor(System.Object,Infragistics.Windows.Automation.Peers.XamTabControlAutomationPeer)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Automation.Peers.TabItemExAutomationPeer"/>
            </summary>
            <param name="item">Item that is associated with the peer</param>
            <param name="tabControlAutomationPeer">The owning control automation peer</param>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.TabItemExAutomationPeer.GetChildrenCore">
            <summary>
            Returns the collection of automation peers that represents the children of the tab item
            </summary>
            <returns>The collection of child elements</returns>
        </member>
        <member name="T:Infragistics.Windows.Automation.Peers.ToolWindowAutomationPeer">
            <summary>
            Exposes the <see cref="T:Infragistics.Windows.Controls.ToolWindow"/> to UI Automation.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.ToolWindowAutomationPeer.#ctor(Infragistics.Windows.Controls.ToolWindow)">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.Windows.Automation.Peers.ToolWindowAutomationPeer"/> class
            </summary>
            <param name="owner">The <see cref="T:Infragistics.Windows.Controls.ToolWindow"/> for which the peer is being created</param>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.ToolWindowAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Returns an enumeration indicating the type of control represented by the automation peer.
            </summary>
            <returns>The <b>Custom</b> enumeration value</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.ToolWindowAutomationPeer.GetClassNameCore">
            <summary>
            Returns the name of the <see cref="T:Infragistics.Windows.Controls.ToolWindow"/>
            </summary>
            <returns>A string that contains 'ToolWindow'</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.ToolWindowAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Returns the control pattern associated with the specified <see cref="T:System.Windows.Automation.Peers.PatternInterface"/> for the <see cref="T:Infragistics.Windows.Controls.ToolWindow"/> that corresponds with this <see cref="T:Infragistics.Windows.Automation.Peers.ToolWindowAutomationPeer"/>.
            </summary>
            <param name="patternInterface">The pattern being requested</param>
        </member>
        <member name="T:Infragistics.Windows.Automation.Peers.XamCarouselListBoxAutomationPeer">
            <summary>
            Exposes the <see cref="T:Infragistics.Windows.Controls.XamCarouselListBox"/> to UI Automation.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.XamCarouselListBoxAutomationPeer.#ctor(Infragistics.Windows.Controls.XamCarouselListBox)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Automation.Peers.XamCarouselListBoxAutomationPeer"/>
            </summary>
            <param name="listBox">XamCarouselListBox that this automation peer will represent.</param>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.XamCarouselListBoxAutomationPeer.GetClassNameCore">
            <summary>
            Returns the name of the <see cref="T:Infragistics.Windows.Controls.XamCarouselListBox"/>
            </summary>
            <returns>A string that contains 'XamCarouselListBox'</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.XamCarouselListBoxAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Returns the control pattern associated with the specified <see cref="T:System.Windows.Automation.Peers.PatternInterface"/> for the associated <see cref="T:Infragistics.Windows.Controls.XamCarouselListBox"/>.
            </summary>
            <param name="patternInterface">The pattern being requested</param>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.XamCarouselListBoxAutomationPeer.CreateAutomationPeer(System.Object)">
            <summary>
            Returns an automation peer used to represent the specified item
            </summary>
            <param name="item">The item from the items collection for which an automation peer is being requested</param>
            <returns>A <see cref="T:Infragistics.Windows.Automation.Peers.CarouselListBoxItemAutomationPeer"/></returns>
        </member>
        <member name="T:Infragistics.Windows.Automation.Peers.CarouselListBoxItemAutomationPeer">
            <summary>
            Exposes the <see cref="T:Infragistics.Windows.Controls.CarouselListBoxItem"/> to UI Automation
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.CarouselListBoxItemAutomationPeer.#ctor(System.Object,Infragistics.Windows.Automation.Peers.XamCarouselListBoxAutomationPeer)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Automation.Peers.CarouselListBoxItemAutomationPeer"/>
            </summary>
            <param name="item">The item to be represented by the automation peer</param>
            <param name="listAutomationPeer">The automation peer associated with the containing <see cref="T:Infragistics.Windows.Controls.XamCarouselListBox"/></param>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.CarouselListBoxItemAutomationPeer.GetClassNameCore">
            <summary>
            Returns the name of the <see cref="T:Infragistics.Windows.Controls.CarouselListBoxItem"/>
            </summary>
            <returns>A string that contains 'CarouselListBoxItem'</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.CarouselListBoxItemAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Returns the control pattern associated with the specified <see cref="T:System.Windows.Automation.Peers.PatternInterface"/> for the associated <see cref="T:Infragistics.Windows.Controls.XamCarouselListBox"/>.
            </summary>
            <param name="patternInterface">The pattern being requested</param>
        </member>
        <member name="T:Infragistics.Windows.Automation.Peers.XamTabControlAutomationPeer">
            <summary>
            Exposes the <see cref="T:Infragistics.Windows.Controls.XamTabControl"/> to UI Automation.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.XamTabControlAutomationPeer.#ctor(Infragistics.Windows.Controls.XamTabControl)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Automation.Peers.XamTabControlAutomationPeer"/>
            </summary>
            <param name="tabControl">XamTabControl that this automation peer will represent.</param>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.XamTabControlAutomationPeer.CreateItemAutomationPeer(System.Object)">
            <summary>
            Creates a new automation peer for the child item.
            </summary>
            <param name="item">The item for which the peer is being created</param>
            <returns>A new <see cref="T:Infragistics.Windows.Automation.Peers.TabItemExAutomationPeer"/></returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.XamTabControlAutomationPeer.GetChildrenCore">
            <summary>
            Returns the collection of automation peers that represents the children of the group.
            </summary>
            <returns>The collection of child elements</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.XamTabControlAutomationPeer.GetClassNameCore">
            <summary>
            Returns the name of the <see cref="T:Infragistics.Windows.Controls.XamTabControl"/>
            </summary>
            <returns>A string that contains 'XamTabControl'</returns>
        </member>
        <member name="M:Infragistics.Windows.Automation.Peers.XamTabControlAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Returns the control pattern associated with the specified <see cref="T:System.Windows.Automation.Peers.PatternInterface"/> for the associated <see cref="T:Infragistics.Windows.Controls.XamTabControl"/>.
            </summary>
            <param name="patternInterface">The pattern being requested</param>
        </member>
        <member name="T:Infragistics.Windows.Controls.BoolConverter">
            <summary>
            A base converter class for converting true and false boolean values to corresponding values.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.BoolConverter.trueValue">
            <summary>
            This should be set by the derived class to the value that corresponds to <b>true</b>.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.BoolConverter.falseValue">
            <summary>
            This should be set by the derived class to the value that corresponds to <b>false</b>.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.BoolConverter.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Controls.BoolConverter"/>
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.BoolToHiddenConverter">
            <summary>
            Converts <b>true</b> to <b>Visibility.Visible</b> and <b>false</b> to <b>Visibility.Hidden</b>.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.BoolToHiddenConverter.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Controls.BoolToHiddenConverter"/>
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.NotBoolToVisibilityConverter">
            <summary>
            Converts <b>true</b> to <b>Visibility.Collapsed</b> and <b>false</b> to <b>Visibility.Visible</b>.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.NotBoolToVisibilityConverter.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Controls.NotBoolToVisibilityConverter"/>
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.NullToFalseConverter">
            <summary>
            A converter class that converts null and empty string values to false and any non-null non-empty string value to true.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.NullToParameterConverter">
            <summary>
            A converter class that converts null and empty string values to parameter in the Convert method and DoNothing in ConvertBack.
            If the value is non-null and non-empty string then returns the value itself.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.TypeCheckConverter">
            <summary>
            A converter class that converts to true if the value is of the type specified by the converter parameter.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.TypeCheckConverter.AllowDerivedTypes">
            <summary>
            Whether match derived types as well. Default is true.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.VisibilityToBooleanConverter">
            <summary>
            Represents the converter that converts System.Windows.Visibility enumeration values to and from Boolean values.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Converters.BoolToVisibilityConverter">
            <summary>
            Transforms 'True' to 'Visibility.Visible' and 'False' to 'Visibility.Collapsed'
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Converters.BoolToVisibilityConverter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Converters.NotBoolToVisibilityConverter">
            <summary>
            Transforms 'True' to 'Visibility.Collapsed' and 'False' to 'Visibility.Visible'
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Converters.NotBoolToVisibilityConverter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.BrushHelper">
            <summary>
            Helper class for dealing with brushes.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.BrushHelper.#ctor">
            <summary>
            This member supports the Infragistics infrastructure and is not meant to be invoked externally.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.BrushHelper.BackgroundProperty">
            <summary>
            Background Attached Dependency Property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.BrushHelper.GetBackground(System.Windows.DependencyObject)">
            <summary>
            Returns an extra brush that may be used for the background.
            </summary>
            <remarks>
            <p class="body">This attached property can be used for any purpose but was initially 
            added to be used as the target of a local style trigger that would ultimately be 
            referenced by a style setter. In this way, the triggered value would not override 
            (based on the WPF dependency property precedence) the value of ControlTemplate 
            triggers.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Controls.BrushHelper.SetBackground(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>
            Set the attached <see cref="F:Infragistics.Windows.Controls.BrushHelper.BackgroundProperty"/>
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.BrushHelper.BorderBrushProperty">
            <summary>
            BorderBrush Attached Dependency Property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.BrushHelper.GetBorderBrush(System.Windows.DependencyObject)">
            <summary>
            Returns an extra brush that may be used for the BorderBrush.
            </summary>
            <remarks>
            <p class="body">This attached property can be used for any purpose but was initially 
            added to be used as the target of a local style trigger that would ultimately be 
            referenced by a style setter. In this way, the triggered value would not override 
            (based on the WPF dependency property precedence) the value of ControlTemplate 
            triggers.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Controls.BrushHelper.SetBorderBrush(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>
            Set the attached <see cref="F:Infragistics.Windows.Controls.BrushHelper.BorderBrushProperty"/>
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.CardPanel">
            <summary>
            A panel that arranges its children like a stack of cards with one on top of the other with each getting the full available size of the panel.
            </summary>
            <remarks>
            <p class="body">This panel is useful for cases where you will be overlaying multiple elements on top of each other like a stack of cards.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Controls.CardPanel.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Controls.CardPanel"/>
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.CardPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Invoked to measure the element and its children.
            </summary>
            <param name="availableSize">The size that reflects the available size that this element can give to its children.</param>
            <returns>The <see cref="T:System.Windows.Size"/> that represents the desired size of the element.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.CardPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positions child elements and determines a size for this element.
            </summary>
            <param name="finalSize">The size available to this element for arranging its children.</param>
            <returns>The <see cref="T:System.Windows.Size"/> used by this element to arrange its children.</returns>
        </member>
        <member name="T:Infragistics.Windows.Controls.CarouselViewSettings">
            <summary>
            Contains settings that support controls which implement Carousel views (e.g., <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> and <see cref="T:Infragistics.Windows.Controls.XamCarouselListBox"/>)).
            </summary>
            <remarks>
            <p class="body">The <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> and the <see cref="T:Infragistics.Windows.Controls.XamCarouselListBox"/> each expose a ViewSettings property (<see cref="P:Infragistics.Windows.Controls.XamCarouselPanel.ViewSettings"/> and <see cref="P:Infragistics.Windows.Controls.XamCarouselListBox.ViewSettings"/>) of type CarouselViewSettings.
            By manipulating properties on the CarouselViewSettings object you can control how the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> arranges and applies effects to items.</p>
            <p class="body">A <i>partial</i> list of the properties that affect layout and parent effects include:
            	<ul>
            		<li><see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/> - Specifies the path along which items are arranged</li>
            		<li><see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathRenderBrush"/> - Specifies a Brush used to fill the path</li>
            		<li><see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathRenderPen"/> - Specifies a Pen used to outline the path</li>
            		<li><see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemSize"/> - Specifies the size of items</li>
            		<li><see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemsPerPage"/> - Specifies the maximum number of items that should be displayed at any one time</li>
            		<li><see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.AutoScaleItemContentsToFit"/> - Specifies whether the contents of each item should be scaled to fit within the size specified for each item</li>
            		<li><see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.OpacityEffectStops"/> - Specifies one or more EffectStops (i.e., Offset+Value pairs) that describe how Opacity effects should be applied to each item based on its position in the XamCarouselPanel</li>
            		<li><see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ScalingEffectStops"/> - Specifies one or more EffectStops (i.e., Offset+Value pairs) that describe how Scaling effects should be applied to each item based on its position in the XamCarouselPanel</li>
            		<li><see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleXEffectStops"/> - Specifies one or more EffectStops (i.e., Offset+Value pairs) that describe how Skewing about the X-axis should be applied to each item based on its position in the XamCarouselPanel</li>
            		<li><see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleYEffectStops"/> - Specifies one or more EffectStops (i.e., Offset+Value pairs) that describe how Skewing about the Y-axis should be applied to each item based on its position in the XamCarouselPanel</li>
            		<li><see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ZOrderEffectStops"/> - Specifies one or more EffectStops (i.e., Offset+Value pairs) that describe how ZOrder effects should be applied to each item based on its position in the XamCarouselPanel</li>
            	</ul>
            Refer to the documentation contained within for a complete list of the properties supported by this class and the functionality enabled by each property.
            </p>
            <p class="body">Refer to the <a href="xamCarousel_Terms_Architecture.html">Carousel Architecture Overview</a> topic in the Developer's Guide for an explanation of how Carousel presentation works.</p>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamCarouselPanel.ViewSettings"/>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselListBox"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamCarouselListBox.ViewSettings"/>
        </member>
        <member name="T:Infragistics.Windows.Controls.ViewSettingsBase">
            <summary>
            Abstract base class for all ViewSettings classes.
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.CarouselViewSettings"/>
        </member>
        <member name="T:Infragistics.Windows.Helpers.FrameworkContentElementNotifier">
            <summary>
            Abstract base class that implements INotifyPropertyChanged on a FrameworkContentElement
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Helpers.FrameworkContentElementNotifier.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when a property changes.
            </summary>
            <param name="e">A DependencyPropertyChangedEventArgs instance that contains information about the property that changed.</param>
        </member>
        <member name="M:Infragistics.Windows.Helpers.FrameworkContentElementNotifier.RaisePropertyChangedEvent(System.String)">
            <summary>
            Raises the PropertyChanged for the specified property.
            </summary>
            <param name="propertyName">The name of the property for which the PropertyChanged event should be raised.</param>
        </member>
        <member name="M:Infragistics.Windows.Helpers.FrameworkContentElementNotifier.Reset">
            <summary>
            Resets all properties to their default values.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Helpers.FrameworkContentElementNotifier.ShouldSerialize">
            <summary>
            Returns whether this object should be serialized.
            </summary>
            <returns>Returns true if the value of any property on this object is set to a non-default value, otherwise returns false.</returns>
        </member>
        <member name="E:Infragistics.Windows.Helpers.FrameworkContentElementNotifier.PropertyChanged">
            <summary>
            Fired when the value of a property changes.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.ViewSettingsBase.OnControlInitialized">
            <summary>
            Called when the control that owns this ViewSettingsBase derived object has its OnInitialized method called.
            </summary>
            <remarks>
            <p class="body">Override this method in derived classes to perform work that needs to wait until after the owning control is initialized.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.#ctor">
            <summary>
            Creates an instance of CarouselViewSettings.
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamCarouselPanel.ViewSettings"/>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselListBox"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamCarouselListBox.ViewSettings"/>
            <remarks>
            <p class="body">The <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> and <see cref="T:Infragistics.Windows.Controls.XamCarouselListBox"/> will automatically create an instance of this class when their repsective ViewSettings properties are accessed.
            You can also create one manually and assign it to the ViewSettings property of one or more instances of these controls if needed.  </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.OnControlInitialized">
            <summary>
            Called when the control that owns this ViewSettingsBase derived object has its OnInitialized method called.
            </summary>
            <remarks>
            <p class="body">Override this method in derived classes to perform work that needs to wait until after the owning control is initialized.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when a property value changes.
            </summary>
            <param name="e">An instance of DependencyPropertyChangedEventArgs that contains information about the property that changed.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.Reset">
            <summary>
            Resets all properties to their default values.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ShouldSerialize">
            <summary>
            Returns whether this object should be serialized.
            </summary>
            <returns>Returns true if the value of any property on this object is set to a non-default value, otherwise returns false.</returns>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselViewSettings.AutoScaleItemContentsToFitProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.AutoScaleItemContentsToFit"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ShouldSerializeAutoScaleItemContentsToFit">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.AutoScaleItemContentsToFit"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ResetAutoScaleItemContentsToFit">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.AutoScaleItemContentsToFit"/> property to its default value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselViewSettings.CarouselPanelNavigatorStyleProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.CarouselPanelNavigatorStyle"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ShouldSerializeCarouselPanelNavigatorStyle">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.CarouselPanelNavigatorStyle"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ResetCarouselPanelNavigatorStyle">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.CarouselPanelNavigatorStyle"/> property to its default value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselViewSettings.HeightInInfiniteContainersProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.HeightInInfiniteContainers"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ShouldSerializeHeightInInfiniteContainers">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.HeightInInfiniteContainers"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ResetHeightInInfiniteContainers">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.HeightInInfiniteContainers"/> property to its default value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselViewSettings.IsListContinuousProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.IsListContinuous"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ShouldSerializeIsListContinuous">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.IsListContinuous"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ResetIsListContinuous">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.IsListContinuous"/> property to its default value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselViewSettings.IsNavigatorVisibleProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.IsNavigatorVisible"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ShouldSerializeIsNavigatorVisible">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.IsNavigatorVisible"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ResetIsNavigatorVisible">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.IsNavigatorVisible"/> property to its default value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselViewSettings.ItemHorizontalScrollBarVisibilityProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemHorizontalScrollBarVisibility"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ShouldSerializeItemHorizontalScrollBarVisibility">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemHorizontalScrollBarVisibility"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ResetItemHorizontalScrollBarVisibility">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemHorizontalScrollBarVisibility"/> property to its default value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselViewSettings.ItemVerticalScrollBarVisibilityProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemVerticalScrollBarVisibility"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ShouldSerializeItemVerticalScrollBarVisibility">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemVerticalScrollBarVisibility"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ResetItemVerticalScrollBarVisibility">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemVerticalScrollBarVisibility"/> property to its default value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ShouldSerializeItemPath">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ResetItemPath">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/> property to its default value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathAutoPadProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathAutoPad"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ShouldSerializeItemPathAutoPad">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathAutoPad"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ResetItemPathAutoPad">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathAutoPad"/> property to its default value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathHorizontalAlignmentProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathHorizontalAlignment"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ShouldSerializeItemPathHorizontalAlignment">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathHorizontalAlignment"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ResetItemPathHorizontalAlignment">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathHorizontalAlignment"/> property to its default value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathPaddingProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathPadding"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ShouldSerializeItemPathPadding">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathPadding"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ResetItemPathPadding">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathPadding"/> property to its default value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathStretchProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathStretch"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ShouldSerializeItemPathStretch">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathStretch"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ResetItemPathStretch">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathStretch"/> property to its default value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathPrefixPercentProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathPrefixPercent"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ShouldSerializeItemPathPrefixPercent">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathPrefixPercent"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ResetItemPathPrefixPercent">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathPrefixPercent"/> property to its default value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathSuffixPercentProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathSuffixPercent"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ShouldSerializeItemPathSuffixPercent">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathSuffixPercent"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ResetItemPathSuffixPercent">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathSuffixPercent"/> property to its default value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathRenderBrushProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathRenderBrush"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ShouldSerializeItemPathRenderBrush">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathRenderBrush"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ResetItemPathRenderBrush">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathRenderBrush"/> property to its default value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathRenderPenProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathRenderPen"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ShouldSerializeItemPathRenderPen">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathRenderPen"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ResetItemPathRenderPen">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathRenderPen"/> property to its default value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathVerticalAlignmentProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathVerticalAlignment"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ShouldSerializeItemPathVerticalAlignment">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathVerticalAlignment"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ResetItemPathVerticalAlignment">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathVerticalAlignment"/> property to its default value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselViewSettings.ItemSizeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemSize"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ShouldSerializeItemSize">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemSize"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ResetItemSize">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemSize"/> property to its default value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselViewSettings.ItemsPerPageProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemsPerPage"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ShouldSerializeItemsPerPage">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemsPerPage"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ResetItemsPerPage">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemsPerPage"/> property to its default value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselViewSettings.ItemTransitionStyleProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemTransitionStyle"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ShouldSerializeItemTransitionStyle">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemTransitionStyle"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ResetItemTransitionStyle">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemTransitionStyle"/> property to its default value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselViewSettings.OpacityEffectStopsProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.OpacityEffectStops"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ShouldSerializeOpacityEffectStops">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.OpacityEffectStops"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ResetOpacityEffectStops">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.OpacityEffectStops"/> property to its default value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselViewSettings.OpacityEffectStopDirectionProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.OpacityEffectStopDirection"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ShouldSerializeOpacityEffectStopDirection">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.OpacityEffectStopDirection"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ResetOpacityEffectStopDirection">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.OpacityEffectStopDirection"/> property to its default value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselViewSettings.ReserveSpaceForReflectionsProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ReserveSpaceForReflections"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ShouldSerializeReserveSpaceForReflections">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ReserveSpaceForReflections"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ResetReserveSpaceForReflections">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ReserveSpaceForReflections"/> property to its default value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselViewSettings.RotateItemsWithPathTangentProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.RotateItemsWithPathTangent"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ShouldSerializeRotateItemsWithPathTangent">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.RotateItemsWithPathTangent"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ResetRotateItemsWithPathTangent">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.RotateItemsWithPathTangent"/> property to its default value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselViewSettings.ScalingEffectStopsProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ScalingEffectStops"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ShouldSerializeScalingEffectStops">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ScalingEffectStops"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ResetScalingEffectStops">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ScalingEffectStops"/> property to its default value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselViewSettings.ScalingEffectStopDirectionProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ScalingEffectStopDirection"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ShouldSerializeScalingEffectStopDirection">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ScalingEffectStopDirection"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ResetScalingEffectStopDirection">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ScalingEffectStopDirection"/> property to its default value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselViewSettings.ShouldAnimateItemsOnListChangeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ShouldAnimateItemsOnListChange"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ShouldSerializeShouldAnimateItemsOnListChange">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ShouldAnimateItemsOnListChange"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ResetShouldAnimateItemsOnListChange">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ShouldAnimateItemsOnListChange"/> property to its default value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselViewSettings.ShouldScrollItemsIntoInitialPositionProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ShouldScrollItemsIntoInitialPosition"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ShouldSerializeShouldScrollItemsIntoInitialPosition">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ShouldScrollItemsIntoInitialPosition"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ResetShouldScrollItemsIntoInitialPosition">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ShouldScrollItemsIntoInitialPosition"/> property to its default value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleXEffectStopsProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleXEffectStops"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ShouldSerializeSkewAngleXEffectStops">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleXEffectStops"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ResetSkewAngleXEffectStops">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleXEffectStops"/> property to its default value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleXEffectStopDirectionProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleXEffectStopDirection"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ShouldSerializeSkewAngleXEffectStopDirection">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleXEffectStopDirection"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ResetSkewAngleXEffectStopDirection">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleXEffectStopDirection"/> property to its default value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleYEffectStopsProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleYEffectStops"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ShouldSerializeSkewAngleYEffectStops">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleYEffectStops"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ResetSkewAngleYEffectStops">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleYEffectStops"/> property to its default value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleYEffectStopDirectionProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleYEffectStopDirection"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ShouldSerializeSkewAngleYEffectStopDirection">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleYEffectStopDirection"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ResetSkewAngleYEffectStopDirection">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleYEffectStopDirection"/> property to its default value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselViewSettings.UseOpacityProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.UseOpacity"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ShouldSerializeUseOpacity">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.UseOpacity"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ResetUseOpacity">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.UseOpacity"/> property to its default value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselViewSettings.UseScalingProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.UseScaling"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ShouldSerializeUseScaling">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.UseScaling"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ResetUseScaling">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.UseScaling"/> property to its default value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselViewSettings.UseSkewingProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.UseSkewing"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ShouldSerializeUseSkewing">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.UseSkewing"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ResetUseSkewing">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.UseSkewing"/> property to its default value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselViewSettings.UseZOrderProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.UseZOrder"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ShouldSerializeUseZOrder">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.UseZOrder"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ResetUseZOrder">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.UseZOrder"/> property to its default value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselViewSettings.WidthInInfiniteContainersProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.WidthInInfiniteContainers"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ShouldSerializeWidthInInfiniteContainers">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.WidthInInfiniteContainers"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ResetWidthInInfiniteContainers">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.WidthInInfiniteContainers"/> property to its default value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselViewSettings.ZOrderEffectStopsProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ZOrderEffectStops"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ShouldSerializeZOrderEffectStops">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ZOrderEffectStops"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ResetZOrderEffectStops">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ZOrderEffectStops"/> property to its default value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselViewSettings.ZOrderEffectStopDirectionProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ZOrderEffectStopDirection"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ShouldSerializeZOrderEffectStopDirection">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ZOrderEffectStopDirection"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselViewSettings.ResetZOrderEffectStopDirection">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ZOrderEffectStopDirection"/> property to its default value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselViewSettings.VersionProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.Version"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselViewSettings.AutoScaleItemContentsToFit">
            <summary>
            Returns/sets whether the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> should automatically scale the contents of each item to fit within the bounds of the Item.  The default is False. 
            </summary>
            <remarks>
            <p class="body">The bounds of the Item is determined by the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemSize"/> property.  Note that while you can indirectly affect the size of the items
            by using <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ScalingEffectStops"/>, scaling effects are applied to items at render time <i>after</i> the setting of this property has taken effect.</p>
            <p class="body">When the AutoScalItemContentsToFit property is set to false, scrollbars will be shown by default within the item if necessary (i.e., if the size of the contents is greater than the size of the item) to enable scrolling of the contents.
            For explicit control over whether scrollbars are displayed in this case, you can set the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemHorizontalScrollBarVisibility"/> and <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemVerticalScrollBarVisibility"/> properties.</p>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
            <seealso cref="F:Infragistics.Windows.Controls.CarouselViewSettings.AutoScaleItemContentsToFitProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemHorizontalScrollBarVisibility"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemVerticalScrollBarVisibility"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ScalingEffectStops"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselViewSettings.CarouselPanelNavigatorStyle">
            <summary>
            Returns/sets the style for the <see cref="T:Infragistics.Windows.Controls.CarouselPanelNavigator"/>.
            </summary>
            <remarks>
            <p class="body">The <see cref="T:Infragistics.Windows.Controls.CarouselPanelNavigator"/> control provides a UI for scrolling items in a <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/></p>
            <p class="body">Setting the <see cref="T:Infragistics.Windows.Controls.CarouselPanelNavigator"/> Style is the most convenient way to control the placement of the <see cref="T:Infragistics.Windows.Controls.CarouselPanelNavigator"/> in the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>.  
            By creating a style that contains Setters for the HorizontalAlignment and/or VerticalAlignment properties along with the Margin property, and assigning it 
            to this property, you can place the navigator in a location that works best for the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/> you are using.</p>
            <p class="body">By default the navigator is placed in the lower right corner of the control.</p>
            <p class="body">The <see cref="T:Infragistics.Windows.Controls.CarouselPanelNavigator"/> displays buttons that execute <see cref="T:Infragistics.Windows.Controls.XamCarouselPanelCommands"/> when clicked, in order to scroll items.  
            If you want to provide your own UI for scrollig items, you can hide the <see cref="T:Infragistics.Windows.Controls.CarouselPanelNavigator"/> by setting the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.IsNavigatorVisible"/> 
            property to hidden and then creating a UI that executes the same scrolling commands used by the navigator.</p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.CarouselViewSettings.CarouselPanelNavigatorStyleProperty"/>
            <seealso cref="T:Infragistics.Windows.Controls.CarouselPanelNavigator"/>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanelCommands"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.IsNavigatorVisible"/>
            <seealso cref="F:Infragistics.Windows.Controls.XamCarouselPanelCommands.NavigateToPreviousPage"/>
            <seealso cref="F:Infragistics.Windows.Controls.XamCarouselPanelCommands.NavigateToNextPage"/>
            <seealso cref="F:Infragistics.Windows.Controls.XamCarouselPanelCommands.NavigateToPreviousItem"/>
            <seealso cref="F:Infragistics.Windows.Controls.XamCarouselPanelCommands.NavigateToNextItem"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselViewSettings.HeightInInfiniteContainers">
            <summary>
            Returns/sets a value that is used as the default for the height of the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>, when it is placed in a container with infinite height available.  The default is 300.
            </summary>
            <remarks>
            <p class="body">Certain controls such as <see cref="T:System.Windows.Controls.ScrollViewer"/> and <see cref="T:System.Windows.Controls.StackPanel"/> make an infinite amount of height and width available to the controls they contain.
            If you place a control that implements a Carousel view (e.g., <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> or <see cref="T:Infragistics.Windows.Controls.XamCarouselListBox"/>) inside one of these controls you may want to set this property to constrain the
            height of the control to a convenient value.  If you don't set this property a default height of 300 will be used.</p>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
            <seealso cref="F:Infragistics.Windows.Controls.CarouselViewSettings.HeightInInfiniteContainersProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.WidthInInfiniteContainers"/>
            <seealso cref="T:System.Windows.Controls.ScrollViewer"/>
            <seealso cref="T:System.Windows.Controls.StackPanel"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselViewSettings.IsListContinuous">
            <summary>
            Returns true if the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> should wrap around to the beginning of the list and display the first list item after the last item is displayed.  The default is False.
            </summary>
            <remarks>
            <p class="note"><b>Note: </b>When this property is set to true and the total number of items in the list is less than the number of <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemsPerPage"/>, page scrolling is disabled
            and line scrolling does not wrap to the other end of the list.</p>
            <p class="body">The <see cref="T:Infragistics.Windows.Controls.CarouselPanelItem"/> and <see cref="T:Infragistics.Windows.Controls.CarouselListBoxItem"/> objects which wrap each item in the list, expose 2 properties: <see cref="P:Infragistics.Windows.Controls.CarouselPanelItem.IsFirstItem"/> and <see cref="P:Infragistics.Windows.Controls.CarouselPanelItem.IsLastItem"/>,
            which you can use in a replacement Template for those objects to highlight the first and last items in the list when IsListContinuous is set to true.  This makes it easier for the end user to tell when they
            have scrolled back to the beginning of the list.</p>
            <p class="note"><b>Note: </b>The default styles for the <see cref="T:Infragistics.Windows.Controls.CarouselPanelItem"/> and <see cref="T:Infragistics.Windows.Controls.CarouselListBoxItem"/> objects <i>do not highlight the first and last items</i>.</p>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselListBox"/>
            <seealso cref="T:Infragistics.Windows.Controls.CarouselPanelItem"/>
            <seealso cref="T:Infragistics.Windows.Controls.CarouselListBoxItem"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselViewSettings.IsNavigatorVisible">
            <summary>
            Returns/sets whether the <see cref="T:Infragistics.Windows.Controls.CarouselPanelNavigator"/> is visible.  The default is True.
            </summary>
            <remarks>
            <p class="body">The <see cref="T:Infragistics.Windows.Controls.CarouselPanelNavigator"/> provides a UI for navigating through the list of items in the Carousel.  It displays buttons that 
            execute <see cref="T:Infragistics.Windows.Controls.XamCarouselPanelCommands"/> when clicked to scroll items.  If you want to provide your own UI for scrollig items, you can hide the CarouselPanelNavigator by setting this property
            to hidden and then creating a UI that executes the same scrolling commands used by the navigator.</p>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Controls.CarouselPanelNavigator"/>
            <seealso cref="F:Infragistics.Windows.Controls.XamCarouselPanelCommands.NavigateToPreviousPage"/>
            <seealso cref="F:Infragistics.Windows.Controls.XamCarouselPanelCommands.NavigateToNextPage"/>
            <seealso cref="F:Infragistics.Windows.Controls.XamCarouselPanelCommands.NavigateToPreviousItem"/>
            <seealso cref="F:Infragistics.Windows.Controls.XamCarouselPanelCommands.NavigateToNextItem"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemHorizontalScrollBarVisibility">
            <summary>
            Returns/sets the visibility of the horizontal <see cref="T:System.Windows.Controls.Primitives.ScrollBar"/> that is displayed within each item when the width of the Item's contents exceeds the Item's width as specified by the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemSize"/> property.  The default is <see cref="T:System.Windows.Controls.ScrollBarVisibility"/>.Auto.
            </summary>
            <remarks>
            <p class="body">Note that this property is ignored if <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.AutoScaleItemContentsToFit"/> is set to true.</p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.CarouselViewSettings.ItemHorizontalScrollBarVisibilityProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemVerticalScrollBarVisibility"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.AutoScaleItemContentsToFit"/>
            <seealso cref="T:System.Windows.Controls.Primitives.ScrollBar"/>
            <seealso cref="T:System.Windows.Controls.ScrollBarVisibility"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemVerticalScrollBarVisibility">
            <summary>
            Returns/sets the visibility of the vertical <see cref="T:System.Windows.Controls.Primitives.ScrollBar"/> that is displayed within each item when the height of the Item's contents exceeds the Item's height as specified by the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemSize"/> property.  The default is <see cref="T:System.Windows.Controls.ScrollBarVisibility"/>.Auto.
            </summary>
            <remarks>
            <p class="body">Note that this property is ignored if <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.AutoScaleItemContentsToFit"/> is set to true.</p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.CarouselViewSettings.ItemVerticalScrollBarVisibilityProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemHorizontalScrollBarVisibility"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.AutoScaleItemContentsToFit"/>
            <seealso cref="T:System.Windows.Controls.Primitives.ScrollBar"/>
            <seealso cref="T:System.Windows.Controls.ScrollBarVisibility"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath">
            <summary>
            Returns/sets the <see cref="T:System.Windows.Shapes.Shape"/> derived element (i.e., <see cref="T:System.Windows.Shapes.Path"/>, <see cref="T:System.Windows.Shapes.Ellipse"/>, <see cref="T:System.Windows.Shapes.Line"/>, <see cref="T:System.Windows.Shapes.Polygon"/>, <see cref="T:System.Windows.Shapes.Polyline"/>, <see cref="T:System.Windows.Shapes.Rectangle"/>) which defines the <see cref="T:System.Windows.Media.Geometry"/> used to arrange items in the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>.  
            The default is null.  When this property is set to null, an elliptical path is provided by default.
            </summary>
            <remarks>
            <p class="note"><b>Note: </b>The <see cref="T:System.Windows.Media.Geometry"/> defined by the <see cref="T:System.Windows.Shapes.Shape"/> derived element will be scaled to fit within the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> taking into account the settings
            of the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathStretch"/>, <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathAutoPad"/>, <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathHorizontalAlignment"/> and <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathVerticalAlignment"/> properties.  These properties let you precisely determine how the path is aligned and scaled within the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>.</p>
            <p class="body">A convenient way to create a path to assign to this property is to use Microsoft Expression Blend.  Blend provides a great
            designtime experience for creating and manipulating the geometry of <see cref="T:System.Windows.Shapes.Shape"/> derived elements.</p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathProperty"/>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathStretch"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathAutoPad"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathPadding"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathHorizontalAlignment"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathVerticalAlignment"/>
            <seealso cref="T:System.Windows.Shapes.Shape"/>
            <seealso cref="T:System.Windows.Shapes.Path"/>
            <seealso cref="T:System.Windows.Shapes.Ellipse"/>
            <seealso cref="T:System.Windows.Shapes.Line"/>
            <seealso cref="T:System.Windows.Shapes.Polygon"/>
            <seealso cref="T:System.Windows.Shapes.Polyline"/>
            <seealso cref="T:System.Windows.Shapes.Rectangle"/>
            <seealso cref="T:System.Windows.Media.Geometry"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathAutoPad">
            <summary>
            Returns/sets whether padding should be automatically added within the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> to ensure that items arranged along the path do not extend beyond the bounds of the control. The default is True.
            </summary>
            <remarks>
            <p class="body">Note: If this property is set to true and padding is automatically added, the added padding is in addition to any padding specified in the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathPadding"/> property.</p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathAutoPadProperty"/>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathPadding"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathStretch"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathHorizontalAlignment"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathVerticalAlignment"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathHorizontalAlignment">
            <summary>
            Returns/sets the <see cref="T:System.Windows.HorizontalAlignment"/> of the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/> within the item path area.  The default is <see cref="T:System.Windows.HorizontalAlignment"/>.Center.
            </summary>
            <remarks>
            <p class="body">The item path area is an area within the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> that is defined by applying the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathPadding"/> to the bounds of the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>.</p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathHorizontalAlignmentProperty"/>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathStretch"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathVerticalAlignment"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathPadding"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathAutoPad"/>
            <seealso cref="T:System.Windows.HorizontalAlignment"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathPadding">
            <summary>
            Returns/sets the padding around the item path area, within which the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/> is aligned and stretched.  The default is 0.
            </summary>
            <remarks>
            <p class="body">The item path area is an area within the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> that is defined by applying the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathPadding"/> to the bounds of the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>.</p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathPaddingProperty"/>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathAutoPad"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathStretch"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathHorizontalAlignment"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathVerticalAlignment"/>
            <seealso cref="T:System.Windows.Thickness"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathStretch">
            <summary>
            Returns/sets how the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/> is stretched within the item path area.  The default is <see cref="T:System.Windows.Media.Stretch"/>.Fill
            </summary>
            <remarks>
            <p class="body">The item path area is an area within the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> that is defined by applying the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathPadding"/> to the bounds of the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>.</p>
            <p class="body">The <see cref="T:System.Windows.Media.Stretch"/> enumeration values are interpreted as follows:
            	<ul>
            		<li><b>None</b> - The item path preserves its original size.</li>
            		<li><b>Fill</b> - The item path is resized to fill the destination dimensions. The aspect ratio is not preserved.</li>
            		<li><b>Uniform</b> - The item path is resized to fit in the destination dimensions while it preserves its native aspect ratio. </li>
            		<li><b>UniformToFill</b> - The item path is resized to fill the destination dimensions while it preserves its native aspect ratio. If the aspect ratio of the destination rectangle differs from the source, 
            the item path is clipped to fit in the destination dimensions. </li>
            	</ul>
            </p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathStretchProperty"/>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathAutoPad"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathStretch"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathHorizontalAlignment"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathVerticalAlignment"/>
            <seealso cref="T:System.Windows.Media.Stretch"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathPrefixPercent">
            <summary>
            Returns/sets the size of the path prefix area expressed as a decimal percentage of the overall path size (the percentage must be in the range 0.0 to 0.4).  The default is .15.
            </summary>
            <remarks>
            <p class="body">The prefix area is located at the beginning of the path and is the area within which items are transitioned into and out of view during scrolling.
            Items appear in the prefix area only while they are transitioning into or out of view.  When they are 'at rest', items appear in the area between the prefix and suffix areas.</p>
            </remarks>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathSuffixPercent"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemTransitionStyle"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathSuffixPercent">
            <summary>
            Returns/sets the size of the path suffix area expressed as a decimal percentage of the overall path size (the percentage must be in the range 0.0 to 0.4).  The default is .15.
            </summary>
            <remarks>
            <p class="body">The suffix area is located at the end of the path and is the area within which items are transitioned into and out of view during scrolling.
            Items appear in the suffix area only while they are transitioning into or out of view.  When they are 'at rest', items appear in the area between the prefix and suffix areas.</p>
            </remarks>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathPrefixPercent"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemTransitionStyle"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathRenderBrush">
            <summary>
            Returns/sets the <see cref="T:System.Windows.Media.Brush"/> used to fill a parent representation of the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/> behind the items being displayed.  By default, no <see cref="T:System.Windows.Media.Brush"/> is set.
            </summary>
            <remarks>
            <p class="body">For most path geometries, specifiying an ItemPathRenderBrush results in a compelling highlighting of the path area.  However, using an
            ItemPathRenderBrush with some geometries may produce unexpected parent results.  This is a function of how the WPF framework fills geometries.</p>
            <p class="note"><b>Note: </b>You can also specify an <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathRenderPen"/> to provide an outline for the filled area.</p>
            </remarks>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathRenderPen"/>
            <seealso cref="T:System.Windows.Media.Brush"/>
            <seealso cref="T:System.Windows.Media.Pen"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathRenderPen">
            <summary>
            Returns/sets the <see cref="T:System.Windows.Media.Pen"/> used to draw the outline of the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/> behind the items being displayed.  By default, no <see cref="T:System.Windows.Media.Pen"/> is set.
            </summary>
            <remarks>
            <p class="body">For most path geometries, specifiying an ItemPathRenderPen results in a compelling highlighting of the path area.  However, using an
            ItemPathRenderPen with some geometries may produce unexpected parent results.  This is a function of how the WPF framework outlines geometries.</p>
            <p class="note"><b>Note: </b>You can also specify an <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathRenderBrush"/> to provide a fill for the path area.</p>
            </remarks>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathRenderBrush"/>
            <seealso cref="T:System.Windows.Media.Brush"/>
            <seealso cref="T:System.Windows.Media.Pen"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathVerticalAlignment">
            <summary>
            Returns/sets the <see cref="T:System.Windows.VerticalAlignment"/> of the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/> within the item path area.  The default is <see cref="T:System.Windows.VerticalAlignment"/>.Center.
            </summary>
            <remarks>
            <p class="body">The item path area is an area within the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> that is defined by applying the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathPadding"/> to the bounds of the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>.</p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathVerticalAlignmentProperty"/>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathStretch"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathHorizontalAlignment"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathPadding"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathAutoPad"/>
            <seealso cref="T:System.Windows.VerticalAlignment"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemSize">
            <summary>
            Returns/sets the size of the items in the Carousel.  The default is 150x100 (WxH).
            </summary>.
            <remarks>
            <p class="note"><b>Note: </b>The size specified by this property is applied to all items in the Carousel - you cannot specify different sizes for each item.  
            However you can affect the rendering size of individual items implicitly by applying scaling effects to the items using the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ScalingEffectStops"/>, <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ScalingEffectStopDirection"/> and <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.UseScaling"/>
            properties.</p>
            <p class="note"><b>Note: </b>The <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.AutoScaleItemContentsToFit"/> property determines whether the contents of each item is scaled to fit within the bounds of the item
            as determined by this property. </p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.CarouselViewSettings.AutoScaleItemContentsToFitProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemHorizontalScrollBarVisibility"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemVerticalScrollBarVisibility"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ScalingEffectStops"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ScalingEffectStopDirection"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.UseScaling"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemsPerPage">
            <summary>
            Determines the maximum number of items that should be displayed in the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> at one time.  The default is 5.
            </summary>
            <remarks>
            <p class="body">If the total number of items in the list is less than <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemsPerPage"/>, the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> will spread out those
            items evenly along the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/> so they take up all the space between the prefix and suffix areas.</p>
            <p class="body">For example, if the number of items per page is set to 10 and the total 
            number of items in the list is 20, then the 10 displayed items will be arranged along the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/> between the prefix and suffix areas using even spacing.
            If the number of items in the list is less than <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemsPerPage"/>, say 5, then those 5 items will still be evenly arranged along the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/> between the prefix and
            suffix areas, but with increased spacing so the entire area is used.  This prevents items from being 'bunched up' at the beginning of the path.</p>
            <p class="note"><b>Note: </b>up to 2x <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemsPerPage"/> items will be displayed at any given time while the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> is in the process of scrolling.</p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.CarouselViewSettings.ItemsPerPageProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathPrefixPercent"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathSuffixPercent"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamCarouselPanel.ItemsPerPageResolved"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemTransitionStyle">
            <summary>
            Returns/sets a value that determines the effects applied to items as they transition through the prefix and suffix areas of the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/>.  The default is <see cref="T:Infragistics.Windows.Controls.PathItemTransitionStyle"/>.AdjustOpacity.
            </summary>
            <remarks>
            <p class="body">The prefix and suffix areas of the item path are reserved for items that are transitioning into and out of view during scrolling.
            The setting of this property determines whether items in these areas have their size or opacity automatically adjusted from normal settings to zero as they exit the path.</p>
            <p class="note"><b>Note: </b>The effects specified by the setting of this property are applied <i>in addition to</i> the effects (if any) specified by the various EffectStops properties.</p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.CarouselViewSettings.ItemTransitionStyleProperty"/>
            <seealso cref="T:Infragistics.Windows.Controls.PathItemTransitionStyle"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathSuffixPercent"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathPrefixPercent"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.OpacityEffectStops"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ScalingEffectStops"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleXEffectStops"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleYEffectStops"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ZOrderEffectStops"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselViewSettings.OpacityEffectStops">
            <summary>
            Returns a collection of <see cref="T:Infragistics.Windows.Controls.OpacityEffectStop"/> objects that define the stops to be used when setting the opacity of items along the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/>
            </summary>
            <remarks>
            <p class="note"><b>Note: </b>the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.UseOpacity"/> property must be set to true for these <see cref="T:Infragistics.Windows.Controls.OpacityEffectStop"/>s to be applied.</p>
            <p class="body">The way in which the opacity effect stops are applied to each item is determined by the item's location in the display area of the
            <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> and the setting of the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.OpacityEffectStopDirection"/> property.</p>
            <p class="body">For example, if you are using a circular path and you want to give the user the sense that the items at the top of the circle are further away, set the
            this property to EffectStopDirection.Vertical and add OpacityEffectStops that range from a value of .6 at an Offset of zero to a value of 1 at an Offset of 1.  This will make the items 'in the distance' appear
            a bit more transparent.  To further enhance the perspective effect you can also do a similar thing with ScalingEffectStops - make items in the foreground (i.e., bottom of the circle) bigger and items in the back
            (i.e., top of the circle) smaller.</p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.CarouselViewSettings.OpacityEffectStopsProperty"/>
            <seealso cref="T:Infragistics.Windows.Controls.OpacityEffectStop"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.OpacityEffectStopDirection"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.UseOpacity"/>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselViewSettings.OpacityEffectStopDirection">
            <summary>
            Returns/sets the direction used to evaluate <see cref="T:Infragistics.Windows.Controls.OpacityEffectStop"/>s.  The default is <see cref="T:Infragistics.Windows.Controls.EffectStopDirection"/>.UseItemPath.
            </summary>
            <remarks>
            <p class="body">The direction can be set to evaluate the effect stops based on an item's position along the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/> or based on the item's vertical or horizontal position within the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>.</p>
            <p class="body">For example, if you are using a circular path and you want to give the user the sense that the items at the top of the circle are further away, set the
            this property to <see cref="T:Infragistics.Windows.Controls.EffectStopDirection"/>.Vertical and add <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.OpacityEffectStops"/> that range from a value of .6 at an Offset of zero to a value of 1 at an Offset of 1.  This will make the items 'in the distance' appear
            a bit more transparent.  To further enhance the perspective effect you can also do a similar thing with <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ScalingEffectStops"/> - make items in the foreground (i.e., bottom of the circle) bigger and items in the back
            (i.e., top of the circle) smaller.</p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.CarouselViewSettings.OpacityEffectStopDirectionProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.OpacityEffectStops"/>
            <seealso cref="T:Infragistics.Windows.Controls.OpacityEffectStop"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.UseOpacity"/>
            <seealso cref="T:Infragistics.Windows.Controls.EffectStop"/>
            <seealso cref="T:Infragistics.Windows.Controls.EffectStopDirection"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselViewSettings.ReserveSpaceForReflections">
            <summary>
            Returns/sets whether the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> should reserve space for item reflections.  The default is true.
            </summary>
            <remarks>
            <p class="body">If true, each <see cref="T:Infragistics.Windows.Controls.CarouselPanelItem"/> will be sized to twice the height specified by the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemSize"/> property to make room for the reflection.</p>
            <p class="note"><b>Note: </b>It is the responsibility of the Template within the CarouselPanelItem style to actually show the reflections in the additional space provided
            by this property.  The default style for the <see cref="T:Infragistics.Windows.Controls.CarouselPanelItem"/> does just that.</p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.CarouselViewSettings.ReserveSpaceForReflectionsProperty"/>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamCarouselPanel.ReflectionVisibility"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemSize"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselViewSettings.RotateItemsWithPathTangent">
            <summary>
            Returns/sets whether the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> should rotate each item based on the item position's tangent to the path.  The default is False.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.CarouselViewSettings.RotateItemsWithPathTangentProperty"/>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselViewSettings.ScalingEffectStops">
            <summary>
            Returns a collection of <see cref="T:Infragistics.Windows.Controls.ScalingEffectStop"/> objects that define the stops to be used when scaling items along the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/> to simulate perspective.
            </summary>
            <remarks>
            <p class="note"><b>Note: </b>the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.UseScaling"/> property must be set to true for these <see cref="T:Infragistics.Windows.Controls.ScalingEffectStop"/>s to be applied.</p>
            <p class="body">The way in which the scaling effect stops are applied to each item is determined by the item's location in the display area of the
            <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> and the setting of the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ScalingEffectStopDirection"/> property.</p>
            <p class="body">For example, if you are using a circular path and you want to give the user the sense that the items at the top of the circle are further away, set the
            this property to <see cref="T:Infragistics.Windows.Controls.EffectStopDirection"/>.Vertical and add <see cref="T:Infragistics.Windows.Controls.ScalingEffectStop"/>s that range from a value of .6 at an Offset of zero to a value of 1 at an Offset of 1.  This will make the items 'in the distance' appear
            a bit smaller.  To further enhance the perspective effect you can also do a similar thing with <see cref="T:Infragistics.Windows.Controls.OpacityEffectStop"/>s - make items in the foreground (i.e., bottom of the circle) opaque and items in the back
            (i.e., top of the circle) a bit transparent.</p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.CarouselViewSettings.ScalingEffectStopsProperty"/>
            <seealso cref="T:Infragistics.Windows.Controls.ScalingEffectStop"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ScalingEffectStopDirection"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.UseScaling"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselViewSettings.ScalingEffectStopDirection">
            <summary>
            Returns/sets the direction used to evaluate <see cref="T:Infragistics.Windows.Controls.ScalingEffectStop"/>s.  The default is <see cref="T:Infragistics.Windows.Controls.EffectStopDirection"/>.UseItemPath.
            </summary>
            <remarks>
            <p class="body">The direction can be set to evaluate the effect stops based on an item's position along the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/> or based on the item's vertical or horizontal position within the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>.</p>
            <p class="body">For example, if you are using a circular path and you want to give the user the sense that the items at the top of the circle are further away, set the
            this property to <see cref="T:Infragistics.Windows.Controls.EffectStopDirection"/>.Vertical and add <see cref="T:Infragistics.Windows.Controls.ScalingEffectStop"/>s that range from a value of .6 at an Offset of zero to a value of 1 at an Offset of 1.  This will make the items 'in the distance' appear
            a bit smaller.  To further enhance the perspective effect you can also do a similar thing with <see cref="T:Infragistics.Windows.Controls.OpacityEffectStop"/>s - make items in the foreground (i.e., bottom of the circle) opaque and items in the back
            (i.e., top of the circle) a bit transparent.</p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.CarouselViewSettings.ScalingEffectStopDirectionProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ScalingEffectStops"/>
            <seealso cref="T:Infragistics.Windows.Controls.ScalingEffectStop"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.UseScaling"/>
            <seealso cref="T:Infragistics.Windows.Controls.EffectStop"/>
            <seealso cref="T:Infragistics.Windows.Controls.EffectStopDirection"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselViewSettings.ShouldAnimateItemsOnListChange">
            <summary>
            Returns/sets whether items should be animated into their positions when the whenever the list of items being displayed in the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> is changed (i.e., items are added, removed, moved or replaced).  The default is False.
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> When the list is Reset, the items are always animated.</p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.CarouselViewSettings.ShouldAnimateItemsOnListChangeProperty"/>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselViewSettings.ShouldScrollItemsIntoInitialPosition">
            <summary>
            Returns/sets whether items should be animated into their start positions when the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> is first loaded.  The default is True.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.CarouselViewSettings.ShouldScrollItemsIntoInitialPositionProperty"/>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleXEffectStops">
            <summary>
            Returns a collection of <see cref="T:Infragistics.Windows.Controls.SkewAngleXEffectStop"/> objects that define the stops to be used when when setting the SkewAngleX angle of items along the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/> .
            </summary>
            <remarks>
            <p class="note"><b>Note: </b>the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.UseSkewing"/> property must be set to true for these <see cref="T:Infragistics.Windows.Controls.SkewAngleXEffectStop"/>s to be applied.</p>
            <p class="body">The way in which the scaling effect stops are applied to each item is determined by the item's location in the display area of the
            <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> and the setting of the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleXEffectStopDirection"/> property.</p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleXEffectStopsProperty"/>
            <seealso cref="T:Infragistics.Windows.Controls.SkewAngleXEffectStop"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleXEffectStopDirection"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.UseSkewing"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleXEffectStopDirection">
            <summary>
            Returns/sets the direction used to evaluate <see cref="T:Infragistics.Windows.Controls.SkewAngleXEffectStop"/>s.  The default is <see cref="T:Infragistics.Windows.Controls.EffectStopDirection"/>.UseItemPath.
            </summary>
            <remarks>
            <p class="body">The direction can be set to evaluate the effect stops based on an item's position along the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/> or based on the item's vertical or horizontal position within the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>.</p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleXEffectStopDirectionProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleXEffectStops"/>
            <seealso cref="T:Infragistics.Windows.Controls.SkewAngleXEffectStop"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.UseSkewing"/>
            <seealso cref="T:Infragistics.Windows.Controls.EffectStop"/>
            <seealso cref="T:Infragistics.Windows.Controls.EffectStopDirection"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleYEffectStops">
            <summary>
            Returns a collection of <see cref="T:Infragistics.Windows.Controls.SkewAngleYEffectStop"/> objects that define the stops to be used when when setting the SkewAngleY angle of items along the ItemPath.
            </summary>
            <remarks>
            <p class="note"><b>Note: </b>the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.UseSkewing"/> property must be set to true for these <see cref="T:Infragistics.Windows.Controls.SkewAngleYEffectStop"/>s to be applied.</p>
            <p class="body">The way in which the scaling effect stops are applied to each item is determined by the item's location in the display area of the
            <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> and the setting of the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleYEffectStopDirection"/> property.</p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleYEffectStopsProperty"/>
            <seealso cref="T:Infragistics.Windows.Controls.SkewAngleYEffectStop"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleYEffectStopDirection"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.UseSkewing"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleYEffectStopDirection">
            <summary>
            Returns/sets the direction used to evaluate <see cref="T:Infragistics.Windows.Controls.SkewAngleYEffectStop"/>s.  The default is <see cref="T:Infragistics.Windows.Controls.EffectStopDirection"/>.UseItemPath.
            </summary>
            <remarks>
            <p class="body">The direction can be set to evaluate the effect stops based on an item's position along the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/> or based on the item's vertical or horizontal position within the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>.</p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleYEffectStopDirectionProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleYEffectStops"/>
            <seealso cref="T:Infragistics.Windows.Controls.SkewAngleYEffectStop"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.UseSkewing"/>
            <seealso cref="T:Infragistics.Windows.Controls.EffectStop"/>
            <seealso cref="T:Infragistics.Windows.Controls.EffectStopDirection"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselViewSettings.UseOpacity">
            <summary>
            Returns/sets whether <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.OpacityEffectStops"/> and <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.OpacityEffectStopDirection"/> should be honored and opacity effects applied to items in the Carousel.  The default is False.
            </summary>
            <remarks>
            <p class="body">When this property is set to false, any <see cref="T:Infragistics.Windows.Controls.OpacityEffectStop"/>s that may be defined are ignored.</p>
            <p class="note"><b>Note: </b>The <see cref="T:Infragistics.Windows.Controls.PathItemTransitionStyle"/> property can be used to apply additional effects to items as they transition into and out of view through the prefix and suffix areas of the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/>.</p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.CarouselViewSettings.UseOpacityProperty"/>
            <seealso cref="F:Infragistics.Windows.Controls.CarouselViewSettings.OpacityEffectStopDirectionProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.OpacityEffectStops"/>
            <seealso cref="T:Infragistics.Windows.Controls.OpacityEffectStop"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemTransitionStyle"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselViewSettings.UseScaling">
            <summary>
            Returns/sets whether <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ScalingEffectStops"/> and <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ScalingEffectStopDirection"/> should be honored and scaling effects applied to items in the Carousel.  The default is True.
            </summary>
            <remarks>
            <p class="body">When this property is set to false, any <see cref="T:Infragistics.Windows.Controls.ScalingEffectStop"/>s that may be defined are ignored.</p>
            <p class="note"><b>Note: </b>The <see cref="T:Infragistics.Windows.Controls.PathItemTransitionStyle"/> property can be used to apply additional effects to items as they transition into and out of view through the prefix and suffix areas of the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/>.</p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.CarouselViewSettings.UseScalingProperty"/>
            <seealso cref="F:Infragistics.Windows.Controls.CarouselViewSettings.ScalingEffectStopDirectionProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ScalingEffectStops"/>
            <seealso cref="T:Infragistics.Windows.Controls.ScalingEffectStop"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemTransitionStyle"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselViewSettings.UseSkewing">
            <summary>
            Returns/sets whether <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleXEffectStops"/>, <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleYEffectStops"/>, <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleXEffectStopDirection"/> and <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleYEffectStopDirection"/> should be honored and skewing effects applied to items in the Carousel.  The default is False.
            </summary>
            <remarks>
            <p class="body">When this property is set to false, any <see cref="T:Infragistics.Windows.Controls.SkewAngleXEffectStop"/>s or <see cref="T:Infragistics.Windows.Controls.SkewAngleYEffectStop"/>s that may be defined are ignored.</p>
            <p class="note"><b>Note: </b>The <see cref="T:Infragistics.Windows.Controls.PathItemTransitionStyle"/> property can be used to apply additional effects to items as they transition into and out of view through the prefix and suffix areas of the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/>.</p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.CarouselViewSettings.UseSkewingProperty"/>
            <seealso cref="F:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleXEffectStopDirectionProperty"/>
            <seealso cref="F:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleYEffectStopDirectionProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleXEffectStops"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleYEffectStops"/>
            <seealso cref="T:Infragistics.Windows.Controls.SkewAngleXEffectStop"/>
            <seealso cref="T:Infragistics.Windows.Controls.SkewAngleYEffectStop"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemTransitionStyle"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselViewSettings.UseZOrder">
            <summary>
            Returns/sets whether <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ZOrderEffectStops"/> should be honored and ZOrder effects applied to items in the Carousel.  The default is False.
            </summary>
            <remarks>
            <p class="body">When this property is set to false, any <see cref="T:Infragistics.Windows.Controls.ZOrderEffectStop"/>s that may be defined are ignored, and items will be ordered in the Z-space based on their position in the list (items with a lower list position will appear underneath and items with a higher list position with appear on top).</p>
            <p class="note"><b>Note: </b>The <see cref="T:Infragistics.Windows.Controls.PathItemTransitionStyle"/> property can be used to apply additional effects to items as they transition into and out of view through the prefix and suffix areas of the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/>.</p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.CarouselViewSettings.UseZOrderProperty"/>
            <seealso cref="F:Infragistics.Windows.Controls.CarouselViewSettings.ZOrderEffectStopDirectionProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ZOrderEffectStops"/>
            <seealso cref="T:Infragistics.Windows.Controls.ZOrderEffectStop"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemTransitionStyle"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselViewSettings.WidthInInfiniteContainers">
            <summary>
            Returns/sets a value that is used as the default for the width of the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>, when it is placed in a container with infinite width available.  The default is 400.
            </summary>
            <remarks>
            <p class="body">Certain controls such as <see cref="T:System.Windows.Controls.ScrollViewer"/> and <see cref="T:System.Windows.Controls.StackPanel"/> make an infinite amount of height and width available to the controls they contain.
            If you place a control that implements a Carousel view (e.g., <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> or <see cref="T:Infragistics.Windows.Controls.XamCarouselListBox"/>) inside one of these controls you may want to set this property to constrain the
            width of the control to a convenient value.  If you don't set this property a default width of 400 will be used.</p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.CarouselViewSettings.WidthInInfiniteContainersProperty"/>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.HeightInInfiniteContainers"/>
            <seealso cref="T:System.Windows.Controls.ScrollViewer"/>
            <seealso cref="T:System.Windows.Controls.StackPanel"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselViewSettings.ZOrderEffectStops">
            <summary>
            Returns a collection of <see cref="T:Infragistics.Windows.Controls.ZOrderEffectStop"/> objects that define the stops to be used when setting the ZOrder of items along the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/>.
            </summary>
            <remarks>
            <p class="note"><b>Note: </b>the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.UseZOrder"/> property must be set to true for these <see cref="T:Infragistics.Windows.Controls.ZOrderEffectStop"/>s to be applied.</p>
            <p class="body">The way in which the scaling effect stops are applied to each item is determined by the item's location in the display area of the
            <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> and the setting of the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ZOrderEffectStopDirection"/> property.</p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.CarouselViewSettings.ZOrderEffectStopsProperty"/>
            <seealso cref="T:Infragistics.Windows.Controls.ZOrderEffectStop"/>
            <seealso cref="T:Infragistics.Windows.Controls.EffectStop"/>
            <seealso cref="T:Infragistics.Windows.Controls.EffectStopDirection"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.UseZOrder"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselViewSettings.ZOrderEffectStopDirection">
            <summary>
            Returns/sets the direction used to evaluate <see cref="T:Infragistics.Windows.Controls.ZOrderEffectStop"/>s.  The default is <see cref="T:Infragistics.Windows.Controls.EffectStopDirection"/>.UseItemPath.
            </summary>
            <remarks>
            <p class="body">The direction can be set to evaluate the effect stops based on an item's position along the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/> or based on the item's vertical or horizontal position within the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>.</p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.CarouselViewSettings.ZOrderEffectStopDirectionProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ZOrderEffectStops"/>
            <seealso cref="T:Infragistics.Windows.Controls.ZOrderEffectStop"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.UseZOrder"/>
            <seealso cref="T:Infragistics.Windows.Controls.EffectStop"/>
            <seealso cref="T:Infragistics.Windows.Controls.EffectStopDirection"/>
        </member>
        <member name="T:Infragistics.Windows.DeviceUnitLength">
            <summary>
            A structure that represents a unit of length supporting explicit values and differnt unit types.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.DeviceUnitLength.#ctor(System.Double)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.DeviceUnitLength"/> with the specified value.  The <see cref="P:Infragistics.Windows.DeviceUnitLength.UnitType"/> property
            will default to <i>DeviceIndependentUnit</i>.
            </summary>
            <param name="value">The length of the unit.</param>
        </member>
        <member name="M:Infragistics.Windows.DeviceUnitLength.#ctor(System.Double,Infragistics.Windows.DeviceUnitType)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.DeviceUnitLength"/>
            </summary>
            <param name="value">The numeric value for the DeviceUnitLength.</param>
            <param name="type">The type of length that the DeviceUnitLength instance represents</param>
        </member>
        <member name="M:Infragistics.Windows.DeviceUnitLength.ConvertToUnitType(Infragistics.Windows.DeviceUnitType)">
            <summary>
            Converts the current <see cref="P:Infragistics.Windows.DeviceUnitLength.Value"/> to the specified <see cref="T:Infragistics.Windows.DeviceUnitType"/>
            </summary>
            <param name="unitType">The unit type to convert to.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Infragistics.Windows.DeviceUnitLength.Equals(System.Object)">
            <summary>
            Compares the specified <see cref="T:Infragistics.Windows.DeviceUnitLength"/> to this instance's values.
            </summary>
            <param name="obj">The object to compare to the current instance</param>
            <returns>True if the object is a DeviceUnitLength with the same <see cref="P:Infragistics.Windows.DeviceUnitLength.Value"/> and <see cref="P:Infragistics.Windows.DeviceUnitLength.UnitType"/></returns>
        </member>
        <member name="M:Infragistics.Windows.DeviceUnitLength.GetHashCode">
            <summary>
            Returns a hash value for the <see cref="T:Infragistics.Windows.DeviceUnitLength"/>
            </summary>
            <returns>A hash value for the DeviceUnitLength</returns>
        </member>
        <member name="M:Infragistics.Windows.DeviceUnitLength.op_Equality(Infragistics.Windows.DeviceUnitLength,Infragistics.Windows.DeviceUnitLength)">
            <summary>
            Compares two <see cref="T:Infragistics.Windows.DeviceUnitLength"/> instances to determine if they are equal
            </summary>
            <param name="length1">The first DeviceUnitLength instance</param>
            <param name="length2">The second DeviceUnitLength instance</param>
            <returns>True if the objects have the same <see cref="P:Infragistics.Windows.DeviceUnitLength.Value"/> and <see cref="P:Infragistics.Windows.DeviceUnitLength.UnitType"/>; otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Windows.DeviceUnitLength.op_Inequality(Infragistics.Windows.DeviceUnitLength,Infragistics.Windows.DeviceUnitLength)">
            <summary>
            Compares two <see cref="T:Infragistics.Windows.DeviceUnitLength"/> instances to determine if they are not equal
            </summary>
            <param name="length1">The first DeviceUnitLength instance</param>
            <param name="length2">The second DeviceUnitLength instance</param>
            <returns>True if the objects have a different <see cref="P:Infragistics.Windows.DeviceUnitLength.Value"/> and/or <see cref="P:Infragistics.Windows.DeviceUnitLength.UnitType"/>; otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Windows.DeviceUnitLength.Equals(Infragistics.Windows.DeviceUnitLength)">
            <summary>
            Compares the value of this DeviceUnitLength instance to the specified <see cref="T:Infragistics.Windows.DeviceUnitLength"/>.
            </summary>
            <param name="other">The instance of the <see cref="T:Infragistics.Windows.DeviceUnitLength"/> to compare</param>
            <returns>True if the specified DeviceUnitLength has the same <see cref="P:Infragistics.Windows.DeviceUnitLength.Value"/> and <see cref="P:Infragistics.Windows.DeviceUnitLength.UnitType"/>; otherwise false.</returns>
        </member>
        <member name="P:Infragistics.Windows.DeviceUnitLength.IsDeviceIndependantUnit">
            <summary>
            Returns a boolean indicating if the DeviceUnitType represents a Deveice Independant Unit.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.DeviceUnitLength.IsPixel">
            <summary>
            Returns a boolean indicating if the DeviceUnitType represents an absolute pixel value.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.DeviceUnitLength.IsPoint">
            <summary>
            Returns a boolean indicating if the DeviceUnitType represents an absolute point value.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.DeviceUnitLength.IsTwip">
            <summary>
            Returns a boolean indicating if the DeviceUnitType represents an absolute twip value.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.DeviceUnitLength.UnitType">
            <summary>
            Returns an enumeration indicating the type of <see cref="P:Infragistics.Windows.DeviceUnitLength.Value"/> that the DeviceUnitLength represents.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.DeviceUnitLength.Value">
            <summary>
            Returns the numeric value of the DeviceUnitLength.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.DeviceUnitLengthConverter">
            <summary>
            Converts <see cref="T:Infragistics.Windows.DeviceUnitLength"/> instances to and from other types.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.DeviceUnitLengthConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether an object of the specified source type can be converted to a <see cref="T:Infragistics.Windows.DeviceUnitLength"/>
            </summary>
            <param name="context">Provides additional information about the operation</param>
            <param name="sourceType">The type from which the conversion could occur</param>
            <returns>True for numeric types; otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Windows.DeviceUnitLengthConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified value to a <see cref="T:Infragistics.Windows.DeviceUnitLength"/>
            </summary>
            <param name="context">Provides additional information about the operation</param>
            <param name="culture">Culture information used to create the <see cref="T:Infragistics.Windows.DeviceUnitLength"/> instance</param>
            <param name="value">The value being converted</param>
            <returns>An instance of a <see cref="T:Infragistics.Windows.DeviceUnitLength"/></returns>
            <exception cref="T:System.ArgumentNullException">The value is null.</exception>
            <exception cref="T:System.ArgumentException">The value provided cannot be converted to a DeviceUnitLength.</exception>
        </member>
        <member name="M:Infragistics.Windows.DeviceUnitLengthConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether a <see cref="T:Infragistics.Windows.DeviceUnitLength"/> instance can be converted to the specified type
            </summary>
            <param name="context">Provides additional information about the operation</param>
            <param name="destinationType">The type to which the DeviceUnitLength should be converted</param>
            <returns>True for string and InstanceDescriptor; otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Windows.DeviceUnitLengthConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts a <see cref="T:Infragistics.Windows.DeviceUnitLength"/> instance to the specified type
            </summary>
            <param name="context">Provides additional information about the operation</param>
            <param name="culture">Culture information used to create the <see cref="T:Infragistics.Windows.DeviceUnitLength"/> instance</param>
            <param name="value">The <see cref="T:Infragistics.Windows.DeviceUnitLength"/> being converted</param>
            <param name="destinationType">The type to which the DeviceUnitLength should be converted</param>
            <returns>An instance of the specified type that represents the specified DeviceUnitLength</returns>
            <exception cref="T:System.ArgumentNullException">The value or destinationType provided is null.</exception>
            <exception cref="T:System.ArgumentException">The value provided is not a DeviceUnitLength or the destination type is not supported.</exception>
        </member>
        <member name="T:Infragistics.Windows.ExpanderDecorator">
            <summary>
            A Decorator derived class that expands/collapses its Child element in either a Vertical or Horizontal Orientation.
            </summary>
            <seealso cref="P:Infragistics.Windows.ExpanderDecorator.Orientation"/>
            <seealso cref="P:Infragistics.Windows.ExpanderDecorator.IsExpanded"/>
            <seealso cref="F:Infragistics.Windows.ExpanderDecorator.ToggleExpandedState"/>
        </member>
        <member name="M:Infragistics.Windows.ExpanderDecorator.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positions child elements and determines a size for this element.
            </summary>
            <param name="arrangeSize">The size available to this element for arranging its children.</param>
            <returns>The <see cref="T:System.Windows.Size"/> used by this element to arrange its children.</returns>
        </member>
        <member name="M:Infragistics.Windows.ExpanderDecorator.MeasureOverride(System.Windows.Size)">
            <summary>
            Invoked to measure the element and its children.
            </summary>
            <param name="constraint">The size that reflects the available size that this element can give to its children.</param>
            <returns>The <see cref="T:System.Windows.Size"/> that represents the desired size of the element.</returns>
        </member>
        <member name="M:Infragistics.Windows.ExpanderDecorator.OnCreateAutomationPeer">
            <summary>
            Returns <see cref="T:Infragistics.Windows.ExpanderDecorator"/> Automation Peer Class <see cref="T:Infragistics.Windows.Automation.Peers.ExpanderDecoratorAutomationPeer"/>
            </summary> 
            <returns>AutomationPeer</returns>
        </member>
        <member name="F:Infragistics.Windows.ExpanderDecorator.ToggleExpandedState">
            <summary>
            Toggles the ExpanderDecorator's <see cref="P:Infragistics.Windows.ExpanderDecorator.IsExpanded"/> property.
            </summary>
            <seealso cref="P:Infragistics.Windows.ExpanderDecorator.IsExpanded"/>
        </member>
        <member name="F:Infragistics.Windows.ExpanderDecorator.IsExpandedProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.ExpanderDecorator.IsExpanded"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.ExpanderDecorator.OrientationProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.ExpanderDecorator.Orientation"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Windows.ExpanderDecorator.IsExpanded">
            <summary>
            Returns/sets whether the ExpanderDecorator is expanded.
            </summary>
            <seealso cref="F:Infragistics.Windows.ExpanderDecorator.IsExpandedProperty"/>
        </member>
        <member name="P:Infragistics.Windows.ExpanderDecorator.Orientation">
            <summary>
            Returns/sets the dimension in which the expanding and collapsing of the Child content occurs.
            </summary>
            <seealso cref="F:Infragistics.Windows.ExpanderDecorator.OrientationProperty"/>
        </member>
        <member name="T:Infragistics.Windows.Controls.GrowOnlyDecorator">
            <summary>
            A decorator class whose desired size only grows.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.GrowOnlyDecorator.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Controls.GrowOnlyDecorator"/>
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.GrowOnlyDecorator.MeasureOverride(System.Windows.Size)">
            <summary>
            Invoked to measure the element and its children.
            </summary>
            <param name="availableSize">The size that reflects the available size that this element can give to its children.</param>
            <returns>The <see cref="T:System.Windows.Size"/> that represents the desired size of the element.</returns>
        </member>
        <member name="F:Infragistics.Windows.Controls.GrowOnlyDecorator.GrowHeightProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.GrowOnlyDecorator.GrowHeight"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.GrowOnlyDecorator.GrowWidthProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.GrowOnlyDecorator.GrowWidth"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.GrowOnlyDecorator.ResetSizeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.GrowOnlyDecorator.ResetSize"/> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.GrowOnlyDecorator.GrowHeight">
            <summary>
            Specifies whether to grow height. Default value is true.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.GrowOnlyDecorator.GrowWidth">
            <summary>
            Specifies whether to grow width. Default value is true.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.GrowOnlyDecorator.ResetSize">
            <summary>
            Resets the desired size so next time the element is measured, it will return
            desired size based on the contents.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Helpers.ClipboardHelper">
            <summary>
            Static class with helper methods for interacting with the clipboard.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Helpers.ClipboardHelper.Clear">
            <summary>
            Removes all data from the clipboard.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Helpers.ClipboardHelper.CreateDataObject">
            <summary>
            Helper method to create a new instance of an <see cref="T:System.Windows.IDataObject"/>
            </summary>
            <returns>A <see cref="T:System.Windows.IDataObject"/> implementation or null if one could not be created.</returns>
        </member>
        <member name="M:Infragistics.Windows.Helpers.ClipboardHelper.GetDataObject">
            <summary>
            Returns a data object that represents the contents of the clipboard.
            </summary>
            <returns>A data object that provides access to the entire contents of the clipboard or null if there is no data on the clipboard.</returns>
        </member>
        <member name="M:Infragistics.Windows.Helpers.ClipboardHelper.GetText">
            <summary>
            Returns a string containing the UnicodeText data on the clipboard.
            </summary>
            <returns>The unicode text on the clipboard or an empty string.</returns>
        </member>
        <member name="M:Infragistics.Windows.Helpers.ClipboardHelper.GetText(System.Windows.TextDataFormat)">
            <summary>
            Returns a string for the specified text format on the clipboard.
            </summary>
            <param name="format">The text formation to retreive</param>
            <returns>The string for the specified format on the clipboard or an empty string.</returns>
        </member>
        <member name="M:Infragistics.Windows.Helpers.ClipboardHelper.SetDataObject(System.Object)">
            <summary>
            Places a data object on the clipboard.
            </summary>
            <param name="data">An IDataObject to place on the clipboard.</param>
        </member>
        <member name="M:Infragistics.Windows.Helpers.ClipboardHelper.SetDataObject(System.Object,System.Boolean)">
            <summary>
            Places a data object on the clipboard and conditionally leaves it on the clipboard when the application exits.
            </summary>
            <param name="data">The data object to place on the clipboard</param>
            <param name="copy">True to leave the data on the system clipboard when the application exits.</param>
        </member>
        <member name="M:Infragistics.Windows.Helpers.ClipboardHelper.SetDataObject(System.Object,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Places a data object on the clipboard and conditionally leaves it on the clipboard when the application exits.
            </summary>
            <param name="data">The data object to place on the clipboard</param>
            <param name="copy">True to leave the data on the system clipboard when the application exits.</param>
            <param name="retryTimes">The number of times to retry placing the data on the clipboard</param>
            <param name="retryDelay">The number of milliseconds to pause between attempts</param>
            <exception cref="T:System.ArgumentNullException">data is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">retryTimes or retryDelay is less than zero.</exception>
            <exception cref="T:System.Runtime.InteropServices.ExternalException">Data could not be placed on the clipboard</exception>
        </member>
        <member name="M:Infragistics.Windows.Helpers.ClipboardHelper.SetText(System.String)">
            <summary>
            Stores the specified UnicodeText string on the clipboard.
            </summary>
            <param name="text">The string to store on the clipboard</param>
        </member>
        <member name="M:Infragistics.Windows.Helpers.ClipboardHelper.SetText(System.String,System.Windows.TextDataFormat)">
            <summary>
            Stores the specified UnicodeText string on the clipboard in the specified format.
            </summary>
            <param name="text">The string to store on the clipboard</param>
            <param name="format">Indicates the format with which to store the text</param>
        </member>
        <member name="T:Infragistics.Windows.Controls.ClippedTextToolTipService">
            <summary>
            Represents a service that provides a <see cref="T:System.Windows.Controls.ToolTip"/> for a <see cref="T:System.Windows.Controls.TextBlock"/> when its 
            text cannot be fully rendered within the bounds it has been provided. It can also be used on a 
            <see cref="T:System.Windows.Controls.ContentPresenter"/> whose <see cref="P:System.Windows.Controls.ContentPresenter.Content"/> is a string represented 
            by a <see cref="T:System.Windows.Controls.TextBlock"/>.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ClippedTextToolTipService.ShowToolTipWhenClippedProperty">
            <summary>
            Identifies the ShowToolTipWhenClipped attached dependency property
            </summary>
            <seealso cref="M:Infragistics.Windows.Controls.ClippedTextToolTipService.GetShowToolTipWhenClipped(System.Windows.DependencyObject)"/>
            <seealso cref="M:Infragistics.Windows.Controls.ClippedTextToolTipService.SetShowToolTipWhenClipped(System.Windows.DependencyObject,System.Boolean)"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.ClippedTextToolTipService.GetShowToolTipWhenClipped(System.Windows.DependencyObject)">
            <summary>
            Returns a boolean indicating whether the service will provide a <see cref="T:System.Windows.Controls.ToolTip"/> for the <see cref="T:System.Windows.Controls.TextBlock"/> on which the property is set.
            </summary>
            <remarks>
            <p class="body">The <b>ShowToolTipWhenClipped</b> can be used on either a <see cref="T:System.Windows.Controls.TextBlock"/> or a <see cref="T:System.Windows.Controls.ContentPresenter"/> that is using a 
            <b>TextBlock</b>. When set to <b>true</b>, a tooltip will be displayed for the element when the contents of the TextBlock are larger than the area 
            in which the TextBlock was provided.</p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.ClippedTextToolTipService.ShowToolTipWhenClippedProperty"/>
            <seealso cref="M:Infragistics.Windows.Controls.ClippedTextToolTipService.SetShowToolTipWhenClipped(System.Windows.DependencyObject,System.Boolean)"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.ClippedTextToolTipService.SetShowToolTipWhenClipped(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the 'ShowToolTipWhenClipped' attached property
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.ClippedTextToolTipService.ShowToolTipWhenClippedProperty"/>
            <seealso cref="M:Infragistics.Windows.Controls.ClippedTextToolTipService.GetShowToolTipWhenClipped(System.Windows.DependencyObject)"/>
        </member>
        <member name="F:Infragistics.Windows.Controls.ClippedTextToolTipService.AncestorTypeForToolTipProperty">
            <summary>
            Identifies the AncestorTypeForToolTip attached dependency property
            </summary>
            <remarks>
            <p class="body">The <b>AncestorTypeForToolTipProperty</b> is used to identify an ancestor on which the tooltip should be placed. 
            This allows that ancestor to show a tooltip when the <see cref="T:System.Windows.Controls.TextBlock"/> it contains has its text clipped but allow the 
            mouse to be anywhere over the ancestor to have that tooltip be displayed. By default, this property is null and the tooltip 
            will be set on the TextBlock itself.
            </p>
            </remarks>
            <seealso cref="M:Infragistics.Windows.Controls.ClippedTextToolTipService.GetAncestorTypeForToolTip(System.Windows.DependencyObject)"/>
            <seealso cref="M:Infragistics.Windows.Controls.ClippedTextToolTipService.SetAncestorTypeForToolTip(System.Windows.DependencyObject,System.Type)"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.ClippedTextToolTipService.GetAncestorTypeForToolTip(System.Windows.DependencyObject)">
            <summary>
            Returns the type of the ancestor element on which the tooltip will be set.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.ClippedTextToolTipService.AncestorTypeForToolTipProperty"/>
            <seealso cref="M:Infragistics.Windows.Controls.ClippedTextToolTipService.SetAncestorTypeForToolTip(System.Windows.DependencyObject,System.Type)"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.ClippedTextToolTipService.SetAncestorTypeForToolTip(System.Windows.DependencyObject,System.Type)">
            <summary>
            Sets the value of the 'AncestorTypeForToolTip' attached property
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.ClippedTextToolTipService.AncestorTypeForToolTipProperty"/>
            <seealso cref="M:Infragistics.Windows.Controls.ClippedTextToolTipService.GetAncestorTypeForToolTip(System.Windows.DependencyObject)"/>
        </member>
        <member name="F:Infragistics.Windows.Controls.ClippedTextToolTipService.ToolTipStyleKeyProperty">
            <summary>
            Identifies the ToolTipStyleKey attached dependency property
            </summary>
            <seealso cref="M:Infragistics.Windows.Controls.ClippedTextToolTipService.GetToolTipStyleKey(System.Windows.DependencyObject)"/>
            <seealso cref="M:Infragistics.Windows.Controls.ClippedTextToolTipService.SetToolTipStyleKey(System.Windows.DependencyObject,System.Windows.ResourceKey)"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.ClippedTextToolTipService.GetToolTipStyleKey(System.Windows.DependencyObject)">
            <summary>
            Returns the <see cref="T:System.Windows.ResourceKey"/> for a <see cref="P:System.Windows.FrameworkElement.Style"/> that will be used by the <see cref="T:System.Windows.Controls.ToolTip"/> created when the <see cref="F:Infragistics.Windows.Controls.ClippedTextToolTipService.ShowToolTipWhenClippedProperty"/> has been set to true.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.ClippedTextToolTipService.ToolTipStyleKeyProperty"/>
            <seealso cref="M:Infragistics.Windows.Controls.ClippedTextToolTipService.SetToolTipStyleKey(System.Windows.DependencyObject,System.Windows.ResourceKey)"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.ClippedTextToolTipService.SetToolTipStyleKey(System.Windows.DependencyObject,System.Windows.ResourceKey)">
            <summary>
            Sets the <see cref="T:System.Windows.ResourceKey"/> for a <see cref="P:System.Windows.FrameworkElement.Style"/> that will be used by the <see cref="T:System.Windows.Controls.ToolTip"/> created when the <see cref="F:Infragistics.Windows.Controls.ClippedTextToolTipService.ShowToolTipWhenClippedProperty"/> has been set to true.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.ClippedTextToolTipService.ToolTipStyleKeyProperty"/>
            <seealso cref="M:Infragistics.Windows.Controls.ClippedTextToolTipService.GetToolTipStyleKey(System.Windows.DependencyObject)"/>
        </member>
        <member name="F:Infragistics.Windows.Controls.ClippedTextToolTipService.ToolTipSourceProperty">
            <summary>
            Identifies the ToolTipSource attached dependency property
            </summary>
            <seealso cref="M:Infragistics.Windows.Controls.ClippedTextToolTipService.GetToolTipSource(System.Windows.DependencyObject)"/>
            <seealso cref="M:Infragistics.Windows.Controls.ClippedTextToolTipService.SetToolTipSource(System.Windows.DependencyObject,System.Windows.UIElement)"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.ClippedTextToolTipService.GetToolTipSource(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the 'ToolTipSource' attached property
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.ClippedTextToolTipService.ToolTipSourceProperty"/>
            <seealso cref="M:Infragistics.Windows.Controls.ClippedTextToolTipService.SetToolTipSource(System.Windows.DependencyObject,System.Windows.UIElement)"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.ClippedTextToolTipService.SetToolTipSource(System.Windows.DependencyObject,System.Windows.UIElement)">
            <summary>
            Sets the value of the 'ToolTipSource' attached property
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.ClippedTextToolTipService.ToolTipSourceProperty"/>
            <seealso cref="M:Infragistics.Windows.Controls.ClippedTextToolTipService.GetToolTipSource(System.Windows.DependencyObject)"/>
        </member>
        <member name="F:Infragistics.Windows.Controls.ClippedTextToolTipService.ToolTipTargetProperty">
            <summary>
            Identifies the ToolTipTarget attached dependency property
            </summary>
            <seealso cref="M:Infragistics.Windows.Controls.ClippedTextToolTipService.GetToolTipTarget(System.Windows.DependencyObject)"/>
            <seealso cref="M:Infragistics.Windows.Controls.ClippedTextToolTipService.SetToolTipTarget(System.Windows.DependencyObject,System.Windows.UIElement)"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.ClippedTextToolTipService.GetToolTipTarget(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the 'ToolTipTarget' attached property
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.ClippedTextToolTipService.ToolTipTargetProperty"/>
            <seealso cref="M:Infragistics.Windows.Controls.ClippedTextToolTipService.SetToolTipTarget(System.Windows.DependencyObject,System.Windows.UIElement)"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.ClippedTextToolTipService.SetToolTipTarget(System.Windows.DependencyObject,System.Windows.UIElement)">
            <summary>
            Sets the value of the 'ToolTipTarget' attached property
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.ClippedTextToolTipService.ToolTipTargetProperty"/>
            <seealso cref="M:Infragistics.Windows.Controls.ClippedTextToolTipService.GetToolTipTarget(System.Windows.DependencyObject)"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.ClippedTextToolTipService.HasServiceToolTip(System.Windows.DependencyObject)">
            <summary>
            Helper method to determine if we have associated a service tooltip with the specified source textblock/contentpresenter element.
            </summary>
            <param name="toolTipTarget">Target element that would have the tooltip</param>
        </member>
        <member name="T:Infragistics.Windows.Commands.CommandWrapper">
            <summary>
            Class that wraps a RoutedCommand or a RoutedCommand derived class (e.g., RoutedUICommand) and
            stores information about the control states that are Disallowed and Required
            for the command to execute.
            </summary>
            <seealso cref="T:Infragistics.Windows.Commands.ICommandHost"/>
        </member>
        <member name="M:Infragistics.Windows.Commands.CommandWrapper.#ctor(System.Windows.Input.RoutedCommand)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Commands.CommandWrapper"/>
            </summary>
            <param name="command">The command to be represented by the CommandWrapper</param>
        </member>
        <member name="M:Infragistics.Windows.Commands.CommandWrapper.#ctor(System.Windows.Input.RoutedCommand,System.Int64,System.Int64)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Commands.CommandWrapper"/>
            </summary>
            <param name="command">The command to be represented by the CommandWrapper</param>
            <param name="stateDisallowed">Bit flags specifying the state that would prevent this command from being active.</param>
            <param name="stateRequired">Bit flags specifying the state required for this command to be active.</param>
        </member>
        <member name="M:Infragistics.Windows.Commands.CommandWrapper.#ctor(System.Windows.Input.RoutedCommand,System.Int64,System.Int64,System.Windows.Input.InputGestureCollection)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Commands.CommandWrapper"/>
            </summary>
            <param name="command">The command to be represented by the CommandWrapper</param>
            <param name="stateDisallowed">Bit flags specifying the state that would prevent this command from being active.</param>
            <param name="stateRequired">Bit flags specifying the state required for this command to be active.</param>
            <param name="inputGestures">The input gesture to trigger this command</param>
        </member>
        <member name="M:Infragistics.Windows.Commands.CommandWrapper.#ctor(System.Windows.Input.RoutedCommand,System.Int64,System.Int64,System.Windows.Input.InputGesture)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Commands.CommandWrapper"/>
            </summary>
            <param name="command">The command to wrap.</param>
            <param name="stateDisallowed">Bit flags specifying the state that would prevent this command from being active.</param>
            <param name="stateRequired">Bit flags specifying the state required for this command to be active.</param>
            <param name="inputGesture">The input gesture to trigger this command</param>
        </member>
        <member name="M:Infragistics.Windows.Commands.CommandWrapper.#ctor(System.Windows.Input.RoutedCommand,System.Int64,System.Int64,System.Windows.Input.InputGesture,System.Windows.Input.ModifierKeys)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Commands.CommandWrapper"/>
            </summary>
            <param name="command">The command to be represented by the CommandWrapper</param>
            <param name="stateDisallowed">Bit flags specifying the state that would prevent this command from being active.</param>
            <param name="stateRequired">Bit flags specifying the state required for this command to be active.</param>
            <param name="inputGesture">The input gesture to trigger this command</param>
            <param name="modifierKeysDisallowed">Disallowed modifier keys</param>
        </member>
        <member name="M:Infragistics.Windows.Commands.CommandWrapper.#ctor(System.Windows.Input.RoutedCommand,System.Int64,System.Int64,System.Windows.Input.InputGesture[],System.Windows.Input.ModifierKeys)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Commands.CommandWrapper"/>
            </summary>
            <param name="command">The command to be represented by the CommandWrapper</param>
            <param name="stateDisallowed">Bit flags specifying the state that would prevent this command from being active.</param>
            <param name="stateRequired">Bit flags specifying the state required for this command to be active.</param>
            <param name="inputGestures">The input gesture to trigger this command</param>
            <param name="modifierKeysDisallowed">Disallowed modifier keys</param>
        </member>
        <member name="M:Infragistics.Windows.Commands.CommandWrapper.#ctor(System.Windows.Input.RoutedCommand,System.Int64,System.Int64,System.Windows.Input.InputGestureCollection,System.Windows.Input.ModifierKeys)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Commands.CommandWrapper"/>
            </summary>
            <param name="command">The command to be represented by the CommandWrapper</param>
            <param name="stateDisallowed">Bit flags specifying the state that would prevent this command from being active.</param>
            <param name="stateRequired">Bit flags specifying the state required for this command to be active.</param>
            <param name="inputGestures">The input gesture to trigger this command</param>
            <param name="modifierKeysDisallowed">Disallowed modifier keys</param>
        </member>
        <member name="M:Infragistics.Windows.Commands.CommandWrapper.#ctor(Infragistics.Windows.Commands.IGRoutedCommand,System.Windows.Input.InputGestureCollection)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Commands.CommandWrapper"/>
            </summary>
            <param name="command">The command to be represented by the CommandWrapper</param>
            <param name="inputGestures">A collection of input gestures that should be associated with the command</param>
        </member>
        <member name="M:Infragistics.Windows.Commands.CommandWrapper.#ctor(Infragistics.Windows.Commands.IGRoutedUICommand,System.Windows.Input.InputGestureCollection)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Commands.CommandWrapper"/>
            </summary>
            <param name="command">The command to be represented by the CommandWrapper</param>
            <param name="inputGestures">A collection of input gestures that should be associated with the command</param>
        </member>
        <member name="M:Infragistics.Windows.Commands.CommandWrapper.IsAllowed(System.Int64)">
            <summary>
            Returns true if this command is allowed for the passed in state
            </summary>
            <param name="state">Bit flags indicating the current state of the control</param>
            <returns>True if this command is allowed.</returns>
        </member>
        <member name="M:Infragistics.Windows.Commands.CommandWrapper.IsMinimumStatePresent(System.Int64)">
            <summary>
            Returns true if there is the minimum amount of state required for execution.  Compares the
            wrapped command's MinimumStateDisallowed and MinimumStateRequired properties to the specified
            control state to determine if the minimum state is present.
            </summary>
            <param name="state">Bit flags indicating the current state of the control</param>
            <returns>True if this command is allowed.</returns>
        </member>
        <member name="P:Infragistics.Windows.Commands.CommandWrapper.Command">
            <summary>
            The RoutedCommand or RoutedCommand derived class (e.g., RoutedUICommand) being wrapped by
            the CommandWrapper.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Commands.CommandWrapper.HasInputGestures">
            <summary>
            Indicates if the <see cref="P:Infragistics.Windows.Commands.CommandWrapper.InputGestures"/> for the class has been allocated and has gestures in it.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Commands.CommandWrapper.InputGestures">
            <summary>
            A collection of InputGestures associated with the command being wrapped.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Commands.CommandWrapper.IsEnabled">
            <summary>
            Returns/sets whether the command is enabled.  If set to false, the wrapped command cannot be executed.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Commands.CommandWrapper.ModifierKeysDisallowed">
            <summary>
            Returns the disallowed state. These are bit flags that specify
            the state that the control MUST NOT be in for this command to be
            executed. If the current state of the control has any of these 
            bits turned on this command will be ignored.
            </summary>
            <remarks>
            <para class="body">
            <b>Note:</b> Use <b>InputGestures</b> to associate this command wrapper with
            the required keys, including required modifier keys.
            </para>
            </remarks>
            <seealso cref="P:Infragistics.Windows.Commands.CommandWrapper.InputGestures"/>
            <seealso cref="P:Infragistics.Windows.Commands.CommandWrapper.StateRequired"/>
            <seealso cref="P:Infragistics.Windows.Commands.CommandWrapper.StateDisallowed"/>
            <seealso cref="P:Infragistics.Windows.Commands.CommandWrapper.IsEnabled"/>
        </member>
        <member name="P:Infragistics.Windows.Commands.CommandWrapper.StateDisallowed">
            <summary>
            Returns the disallowed state. These are bit flags that specify
            the state that the control MUST NOT be in for this command to be
            executed. If the current state of the control has any of these 
            bits turned on this command will be ignored.
            </summary>
            <seealso cref="P:Infragistics.Windows.Commands.CommandWrapper.StateRequired"/>
            <seealso cref="P:Infragistics.Windows.Commands.CommandWrapper.IsEnabled"/>
        </member>
        <member name="P:Infragistics.Windows.Commands.CommandWrapper.StateRequired">
            <summary>
            Returns the required state. These are bit flags that specify
            the state that the control MUST be in for this command to be
            executed.
            </summary>
            <seealso cref="P:Infragistics.Windows.Commands.CommandWrapper.StateDisallowed"/>
            <seealso cref="P:Infragistics.Windows.Commands.CommandWrapper.IsEnabled"/>
        </member>
        <member name="T:Infragistics.Windows.Commands.ICommandHost">
            <summary>
            Interface implemented by control that support CommandWrappers as a technique for controlling
            the execution of a RoutedCommand based on control state.
            </summary>
            <seealso cref="T:Infragistics.Windows.Commands.CommandWrapper"/>
        </member>
        <member name="M:Infragistics.Windows.Commands.ICommandHost.Execute(Infragistics.Windows.Commands.ExecuteCommandInfo)">
            <summary>
            Executes the specified command.
            </summary>
            <param name="commandInfo">Contains information about the command being executed and the command parameter.</param>
            <returns>Returns a boolean indicating whether the command execution was handled.</returns>
        </member>
        <member name="M:Infragistics.Windows.Commands.ICommandHost.GetCurrentState(System.Int64)">
            <summary>
            Returns the current state of the command host (control).
            </summary>
            <param name="statesToQuery">States to query.</param>
            <returns>Current state of the control.</returns>
        </member>
        <member name="M:Infragistics.Windows.Commands.ICommandHost.CanExecute(Infragistics.Windows.Commands.ExecuteCommandInfo)">
            <summary>
            Returns whether the specified standard command is allowed by the Command Host.
            </summary>
            <param name="commandInfo">Provides information about the command whose CanExecute state is being queried.</param>
            <returns>True if the command can be executed or false if the specified command cannot be executed.</returns>
        </member>
        <member name="T:Infragistics.Windows.Commands.CommandsBase">
            <summary>
            An abstract class for defining and managing the global list of available RoutedCommands for a specific component type.
            </summary>
            <seealso cref="T:Infragistics.Windows.Commands.CommandWrapper"/>
            <seealso cref="T:Infragistics.Windows.Commands.ICommandHost"/>
        </member>
        <member name="M:Infragistics.Windows.Commands.CommandsBase.ProcessKeyboardInput(System.Windows.Input.KeyEventArgs,Infragistics.Windows.Commands.ICommandHost)">
            <summary>
            Processes the keyboard input represented by e against the state of the commandHost
            to determine if a command should be executed.  If so, the command is executed.
            </summary>
            <param name="e">The key event arguments</param>
            <param name="commandHost">An object that implements ICoomandHost</param>
            <returns>True if an action was performed.</returns>
        </member>
        <member name="T:Infragistics.Windows.Commands.Commands`1">
            <summary>
            An abstract class for defining and managing the global list of available RoutedCommands for a specific component type.
            </summary>
            <seealso cref="T:Infragistics.Windows.Commands.CommandWrapper"/>
            <seealso cref="T:Infragistics.Windows.Commands.ICommandHost"/>
        </member>
        <member name="M:Infragistics.Windows.Commands.Commands`1.FindCommandWrappers(System.Windows.Input.RoutedCommand)">
            <summary>
            Finds the CommandWrapper(s) associated with the specified RoutedCommand.
            </summary>
            <param name="commandToFind">The command for which to find wrappers</param>
            <returns>An array of CommandWrappers that wrap the specified command</returns>
            <seealso cref="T:Infragistics.Windows.Commands.CommandWrapper"/>
        </member>
        <member name="M:Infragistics.Windows.Commands.Commands`1.Initialize(Infragistics.Windows.Commands.CommandWrapper[])">
            <summary>
            Initializes command bindings for the commands represented by the supplied array of CommandWrappers
            Also saves a reference to the array of CommandWrappers
            </summary>
            <param name="commandWrappers"></param>
        </member>
        <member name="M:Infragistics.Windows.Commands.Commands`1.IsCommandAllowed(Infragistics.Windows.Commands.ICommandHost,System.Windows.Input.RoutedCommand)">
            <summary>
            Return true of the specified command can be executed given the state of the specified command host.
            </summary>
            <param name="commandHost">The CommandHost whose state will be evaluated to determine if the command can be executed</param>
            <param name="command">The command to evalue.</param>
            <returns>True if command can be executed, false if not.</returns>
        </member>
        <member name="M:Infragistics.Windows.Commands.Commands`1.IsCommandAllowed(Infragistics.Windows.Commands.ICommandHost,System.Windows.Input.RoutedCommand,System.Object)">
            <summary>
            Return true of the specified command can be executed given the state of the specified command host.
            </summary>
            <param name="commandHost">The CommandHost whose state will be evaluated to determine if the command can be executed</param>
            <param name="command">The command to evalue.</param>
            <param name="commandParameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
            <returns>True if command can be executed, false if not.</returns>
        </member>
        <member name="M:Infragistics.Windows.Commands.Commands`1.IsCommandAllowed(Infragistics.Windows.Commands.ICommandHost,System.Windows.Input.RoutedCommand,System.Object,System.Object)">
            <summary>
            Return true of the specified command can be executed given the state of the specified command host.
            </summary>
            <param name="commandHost">The CommandHost whose state will be evaluated to determine if the command can be executed</param>
            <param name="command">The command to evalue.</param>
            <param name="commandParameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
            <param name="originalSource">The original source of the request. This parameter may be null</param>
            <returns>True if command can be executed, false if not.</returns>
        </member>
        <member name="M:Infragistics.Windows.Commands.Commands`1.IsCommandAllowed(Infragistics.Windows.Commands.ICommandHost,System.Windows.Input.RoutedCommand,System.Object,System.Object,System.Boolean@)">
            <summary>
            Return true of the specified command can be executed given the state of the specified command host.
            </summary>
            <param name="commandHost">The CommandHost whose state will be evaluated to determine if the command can be executed</param>
            <param name="command">The command to evalue.</param>
            <param name="commandParameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
            <param name="originalSource">The original source of the request. This parameter may be null</param>
            <param name="continueRouting">Indicates whether to continue routing the original input event that triggered the command.</param>
            <returns>True if command can be executed, false if not.</returns>
        </member>
        <member name="M:Infragistics.Windows.Commands.Commands`1.IsCommandAllowed(Infragistics.Windows.Commands.ICommandHost,System.Windows.Input.RoutedCommand,System.Object,System.Object,System.Boolean@,System.Boolean@)">
            <summary>
            Return true of the specified command can be executed given the state of the specified command host.
            </summary>
            <param name="commandHost">The CommandHost whose state will be evaluated to determine if the command can be executed</param>
            <param name="command">The command to evalue.</param>
            <param name="commandParameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
            <param name="originalSource">The original source of the request. This parameter may be null</param>
            <param name="continueRouting">Indicates whether to continue routing the original input event that triggered the command.</param>
            <param name="forceHandled">Out parameter that indicates whether the CanExecute should be considered handled regardless of whether it may be executed.</param>
            <returns>True if command can be executed, false if not.</returns>
        </member>
        <member name="M:Infragistics.Windows.Commands.Commands`1.IsMinimumStatePresentForCommand(Infragistics.Windows.Commands.ICommandHost,System.Windows.Input.RoutedCommand)">
            <summary>
            Returns true if there is the minimum amount of state required in the host for execution of the command.
            </summary>
            <param name="commandHost">The CommandHost whose state will be evaluated to determine if the command can be executed</param>
            <param name="command">The command to evaluate.</param>
            <returns>True if the minimum state exists, false if not.</returns>
        </member>
        <member name="M:Infragistics.Windows.Commands.Commands`1.ProcessKeyboardInput(System.Windows.Input.KeyEventArgs,Infragistics.Windows.Commands.ICommandHost)">
            <summary>
            Processes the keyboard input represented by e against the state of the commandHost
            to determine if a command should be executed.  If so, the command is executed.
            </summary>
            <param name="e">The key event arguments</param>
            <param name="commandHost">An object that implements ICoomandHost</param>
            <returns>True if an action was performed.</returns>
        </member>
        <member name="M:Infragistics.Windows.Commands.Commands`1.GetKeyboardParameter(Infragistics.Windows.Commands.ICommandHost,System.Windows.Input.RoutedCommand,System.Windows.Input.KeyEventArgs)">
            <summary>
            Returns the parameter that should be used for a given command that is being processed by the <see cref="M:Infragistics.Windows.Commands.Commands`1.ProcessKeyboardInput(System.Windows.Input.KeyEventArgs,Infragistics.Windows.Commands.ICommandHost)"/> method.
            </summary>
            <param name="commandHost">The ICommandHost instance for which the keyboard input is being processed.</param>
            <param name="command">The command to be executed.</param>
            <param name="keyArgs">The key event arguments for which the command is being invoked</param>
            <returns>By default null is returned.</returns>
        </member>
        <member name="T:Infragistics.Windows.Commands.ExecuteCommandInfo">
            <summary>
            Class used to provide information about a <see cref="P:Infragistics.Windows.Commands.ExecuteCommandInfo.RoutedCommand"/> related event.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Commands.ExecuteCommandInfo.#ctor(System.Windows.Input.ICommand)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Commands.ExecuteCommandInfo"/>
            </summary>
            <param name="command">Associated command</param>
        </member>
        <member name="M:Infragistics.Windows.Commands.ExecuteCommandInfo.#ctor(System.Windows.Input.ICommand,System.Object,System.Object)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Commands.ExecuteCommandInfo"/>
            </summary>
            <param name="command">Associated command</param>
            <param name="commandParameter">The parameter for the command or null (Nothing in VB) if there is no parameter</param>
            <param name="originalSource">The object that is the source of the command event or null.</param>
        </member>
        <member name="M:Infragistics.Windows.Commands.ExecuteCommandInfo.#ctor(System.Windows.Input.ICommand,System.Object,System.Object,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Commands.ExecuteCommandInfo"/>
            </summary>
            <param name="command">Associated command</param>
            <param name="commandParameter">The parameter for the command or null (Nothing in VB) if there is no parameter</param>
            <param name="originalSource">The object that is the source of the command event or null.</param>
            <param name="continueRouting">Indicates whether to continue routing the original input event that triggered the command.</param>
        </member>
        <member name="P:Infragistics.Windows.Commands.ExecuteCommandInfo.Command">
            <summary>
            Returns the associated command
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Commands.ExecuteCommandInfo.RoutedCommand">
            <summary>
            Returns the <see cref="P:Infragistics.Windows.Commands.ExecuteCommandInfo.Command"/> as a <see cref="P:Infragistics.Windows.Commands.ExecuteCommandInfo.RoutedCommand"/>
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Commands.ExecuteCommandInfo.Parameter">
            <summary>
            Returns the parameter for the command or null if there is no parameter.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Commands.ExecuteCommandInfo.OriginalSource">
            <summary>
            Returns the object that initiated the command related event or null if one was not available.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Commands.ExecuteCommandInfo.ContinueRouting">
            <summary>
            Returns/sets whether to continue routing the original input event that triggered the command.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Commands.ExecuteCommandInfo.ForceHandled">
            <summary>
            Returns/sets whether the command event should be marked as handled even if the command cannot be executed.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Commands.IGRoutedCommand">
            <summary>
            Wrapper for WPF RoutedCommand
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Commands.IGRoutedCommand.#ctor(System.String,System.Type,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Windows.Commands.IGRoutedCommand"/> class
            </summary>
            <param name="name">Declared name for serialization</param>
            <param name="ownerType">The type that is registering the command</param>
            <param name="minimumStateDisallowed">The minimum state would be used to consider the command as disabled.</param>
            <param name="minimumStateRequired">The minimum state required to consider the command enabled.</param>
        </member>
        <member name="M:Infragistics.Windows.Commands.IGRoutedCommand.#ctor(System.String,System.Type,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Windows.Commands.IGRoutedCommand"/> class
            </summary>
            <param name="name">Declared name for serialization</param>
            <param name="ownerType">The type that is registering the command</param>
            <param name="minimumStateDisallowed">The minimum state would be used to consider the command as disabled.</param>
            <param name="minimumStateRequired">The minimum state required to consider the command enabled.</param>
            <param name="forceHandled">True if the CanExecute should always be considered handled even when the minimum state required for the command is not present.</param>
        </member>
        <member name="P:Infragistics.Windows.Commands.IGRoutedCommand.ForceHandled">
            <summary>
            Returns a boolean indicating whether the CanExecute/Execute events should be considered handled for this command when 
            the minimum state required/disallowed would prevent the execution of the command.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Commands.IGRoutedCommand.MinimumStateDisallowed">
            <summary>
            Minimum state that would disallow the command.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Commands.IGRoutedCommand.MinimumStateRequired">
            <summary>
            Minimum state required to execute the command.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Commands.IGRoutedUICommand">
            <summary>
            Wrapper for WPF RoutedUICommand
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Commands.IGRoutedUICommand.#ctor(System.String,System.String,System.Type,System.Int64,System.Int64)">
            <summary>
            Constructor
            </summary>
            <param name="text">Descriptive text for the command.</param>
            <param name="name">Declared name for serialization</param>
            <param name="ownerType">The type that is registering the command</param>
            <param name="minimumStateDisallowed">The minimum state would be used to consider the command as disabled.</param>
            <param name="minimumStateRequired">The minimum state required to consider the command enabled.</param>
        </member>
        <member name="M:Infragistics.Windows.Commands.IGRoutedUICommand.#ctor(System.String,System.String,System.Type,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Commands.IGRoutedUICommand"/>
            </summary>
            <param name="text">Descriptive text for the command.</param>
            <param name="name">Declared name for serialization</param>
            <param name="ownerType">The type that is registering the command</param>
            <param name="minimumStateDisallowed">The minimum state would be used to consider the command as disabled.</param>
            <param name="minimumStateRequired">The minimum state required to consider the command enabled.</param>
            <param name="forceHandled">True if the CanExecute should always be considered handled even when the minimum state required for the command is not present.</param>
        </member>
        <member name="P:Infragistics.Windows.Commands.IGRoutedUICommand.ForceHandled">
            <summary>
            Returns a boolean indicating whether the CanExecute/Execute events should be considered handled for this command when 
            the minimum state required/disallowed would prevent the execution of the command.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Commands.IGRoutedUICommand.MinimumStateDisallowed">
            <summary>
            Minimum state that would disallow the command.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Commands.IGRoutedUICommand.MinimumStateRequired">
            <summary>
            Minimum state required to execute the command.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.DesiredSizeDecorator">
            <summary>
            Custom class that exposes the desired size of the child via dependency properties.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.DesiredSizeDecorator.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Controls.DesiredSizeDecorator"/>
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.DesiredSizeDecorator.MeasureOverride(System.Windows.Size)">
            <summary>
            Invoked to measure the element and its children.
            </summary>
            <param name="availableSize">The size that reflects the available size that this element can give to its children.</param>
            <returns>The <see cref="T:System.Windows.Size"/> that represents the desired size of the element.</returns>
        </member>
        <member name="F:Infragistics.Windows.Controls.DesiredSizeDecorator.ChildDesiredHeightProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.DesiredSizeDecorator.ChildDesiredHeight"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.DesiredSizeDecorator.ChildDesiredWidthProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.DesiredSizeDecorator.ChildDesiredWidth"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.DesiredSizeDecorator.ChildDesiredHeight">
            <summary>
            Returns the desired height of the child.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.DesiredSizeDecorator.ChildDesiredHeightProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.DesiredSizeDecorator.ChildDesiredWidth">
            <summary>
            Returns the desired width of the child.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.DesiredSizeDecorator.ChildDesiredWidthProperty"/>
        </member>
        <member name="T:Infragistics.Windows.Controls.DropLocation">
            <summary>
            Used for specifying the drop location of an item being dropped at the current mouse location.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.DropLocation.None">
            <summary>
            The item is over an invalid drop location. The drag indicator is typically hidden when this is the case.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.DropLocation.AboveTarget">
            <summary>
            The item is being dropped above the drop target.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.DropLocation.BelowTarget">
            <summary>
            The item is being dropped below the drop target.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.DropLocation.LeftOfTarget">
            <summary>
            The item is being dropped left of the drop target.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.DropLocation.RightOfTarget">
            <summary>
            The item is being dropped right of the drop target.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.DropLocation.OverTarget">
            <summary>
            The item is being dropped over an area where once the drop is processed, it will
            occupy the drop area. The drag indicator will indicate where the item will be positioned
            once its dropped.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.DropIndicator">
            <summary>
            Used for displaying drop indicator during a drag-and-drop operation.
            </summary>
            <remarks>
            <para class="body">
            <b>DropIndicator</b> control is used to display drop indicator during a drag-and-drop operation.
            For example, when a field in DataGrid is dragged and dropped to rearrange fields, this drop indicator
            will be displayed to indicate where the item will be dropped.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Controls.DropIndicator.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.DropIndicator.DropTargetInitializeEvent">
            <summary>
            Event ID for the <see cref="E:Infragistics.Windows.Controls.DropIndicator.DropTargetInitialize"/> routed event
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.DropIndicator.OnDropTargetInitialize(System.Windows.RoutedEventArgs)">
            <summary>
            Occurs when the target is initialized.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.DropIndicator.DropTargetEnterEvent">
            <summary>
            Event ID for the <see cref="E:Infragistics.Windows.Controls.DropIndicator.DropTargetEnter"/> routed event
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.DropIndicator.OnDropTargetEnter(System.Windows.RoutedEventArgs)">
            <summary>
            Occurs when the <see cref="P:Infragistics.Windows.Controls.DropIndicator.DropLocation"/> is changed to a value other than 'None'.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.DropIndicator.DropTargetLeaveEvent">
            <summary>
            Event ID for the <see cref="E:Infragistics.Windows.Controls.DropIndicator.DropTargetLeave"/> routed event
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.DropIndicator.OnDropTargetLeave(System.Windows.RoutedEventArgs)">
            <summary>
            Occurs when the <see cref="P:Infragistics.Windows.Controls.DropIndicator.DropLocation"/> is changed to 'None'.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.DropIndicator.DropLocationProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.DropIndicator.DropLocation"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.DropIndicator.DropTargetHeightProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.DropIndicator.DropTargetHeight"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.DropIndicator.DropTargetWidthProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.DropIndicator.DropTargetWidth"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.DropIndicator.OrientationProperty">
            <summary>
            Identifies the Read-Only <see cref="P:Infragistics.Windows.Controls.DropIndicator.Orientation"/> dependency property
            </summary>
        </member>
        <member name="E:Infragistics.Windows.Controls.DropIndicator.DropTargetInitialize">
            <summary>
            Occurs when the target is initialized.
            </summary>
        </member>
        <member name="E:Infragistics.Windows.Controls.DropIndicator.DropTargetEnter">
            <summary>
            Occurs when the <see cref="P:Infragistics.Windows.Controls.DropIndicator.DropLocation"/> is changed to a value other than 'None'.
            </summary>
        </member>
        <member name="E:Infragistics.Windows.Controls.DropIndicator.DropTargetLeave">
            <summary>
            Occurs when the <see cref="P:Infragistics.Windows.Controls.DropIndicator.DropLocation"/> is changed to 'None'.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.DropIndicator.DropLocation">
            <summary>
            Specifies the the drop location that this drop indicator will convey.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.DropIndicator.DropTargetHeight">
            <summary>
            The height of the ui element or area over which the item is being dropped.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.DropIndicator.DropTargetWidth">
            <summary>
            The width of the ui element or area over which the item is being dropped.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.DropIndicator.Orientation">
            <summary>
            Returns 'Horizontal' if <see cref="P:Infragistics.Windows.Controls.DropIndicator.DropLocation"/> is <i>AboveTarget</i> or <i>BelowTarget</i>
            and 'Vertical' if <i>LeftOfTarget</i> or <i>RightOfTarget</i>. If <i>DropLocation</i> is <i>OverTarget</i>
            then returns 'null'.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.DeviceUnitType">
            <summary>
            Indicates the type of the value that is represented by the <see cref="T:Infragistics.Windows.DeviceUnitLength"/>.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.DeviceUnitType.DeviceIndependentUnit">
            <summary>
            The units are measured in Device Independent Units (DIUs).
            </summary>
        </member>
        <member name="F:Infragistics.Windows.DeviceUnitType.Pixel">
            <summary>
            The units are measured in Pixels, which do not change across different environments.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.DeviceUnitType.Point">
            <summary>
            The units are measured in Points, which do not change across different environments.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.DeviceUnitType.Twip">
            <summary>
            The units are measured in Twips, which do not change across different environments.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.EffectStopDirection">
            <summary>
            Determines the direction in which <see cref="T:Infragistics.Windows.Controls.EffectStop"/>s are evaluated in the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>.
            </summary>
            <remarks>
            <p class="body">The enumeration contains values for evaluating <see cref="T:Infragistics.Windows.Controls.EffectStop"/>s based on an item's position along the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/> or based on the item's vertical or horizontal position within the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>.</p>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Controls.CarouselViewSettings"/>
            <seealso cref="T:Infragistics.Windows.Controls.EffectStop"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.OpacityEffectStopDirection"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ScalingEffectStopDirection"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleXEffectStopDirection"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleYEffectStopDirection"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ZOrderEffectStopDirection"/>
        </member>
        <member name="F:Infragistics.Windows.Controls.EffectStopDirection.Default">
            <summary>
            The direction should default to a value that makes sense for the effect being applied.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.EffectStopDirection.Horizontal">
            <summary>
            <see cref="T:Infragistics.Windows.Controls.EffectStop"/>s should be evaluated by treating their <see cref="P:Infragistics.Windows.Controls.EffectStop.Offset"/>s as a percentage into a range of values that describe a horizontal extent.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.EffectStopDirection.Vertical">
            <summary>
            <see cref="T:Infragistics.Windows.Controls.EffectStop"/>s should be evaluated by treating their <see cref="P:Infragistics.Windows.Controls.EffectStop.Offset"/>s as a percentage into a range of values that describe a vertical extent.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.EffectStopDirection.UseItemPath">
            <summary>
            <see cref="T:Infragistics.Windows.Controls.EffectStop"/>s should be evaluated by treating their <see cref="P:Infragistics.Windows.Controls.EffectStop.Offset"/>s as a percentage along the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/>.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.PathItemTransitionStyle">
            <summary>
            Determines the effects applied to items as they transition through the prefix and suffix areas of a <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>'s <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/>.
            </summary>
            <remarks>
            <p class="body">The prefix area is located at the beginning of the path and the suffix area is located at the end of the path.  These are the areas within which items are transitioned into and out of view during scrolling.
            Items appear in the prefix or suffix area only while they are transitioning (scrolling) into or out of view.  When they are 'at rest', items appear in the area between the prefix and suffix areas.</p>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Controls.CarouselViewSettings"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathPrefixPercent"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPathSuffixPercent"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemTransitionStyle"/>
        </member>
        <member name="F:Infragistics.Windows.Controls.PathItemTransitionStyle.AdjustOpacity">
            <summary>
            The opacity of items are adjusted from transparent to Opaque as the items pass through the prefix and suffix areas of the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>'s <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/>
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PathItemTransitionStyle.AdjustSize">
            <summary>
            The size of items are adjusted from full size to zero as the items pass through the prefix and suffix areas of the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>'s <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/>
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PathItemTransitionStyle.AdjustSizeAndOpacity">
            <summary>
            Both the size and opacity of items are adjusted as the items pass through the prefix and suffix areas of the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>'s <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/>
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.ExpansionIndicatorToggleMode">
            <summary>
            Enumeration used to determine when the IsChecked value of an <see cref="T:Infragistics.Windows.Controls.ExpansionIndicator"/> is toggled.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ExpansionIndicatorToggleMode.Automatic">
            <summary>
            The IsChecked value is toggle automatically when clicked.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ExpansionIndicatorToggleMode.Manual">
            <summary>
            The IsChecked state must be updated programatically.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.ItemContainerGenerationMode">
            <summary>
            Determines how item containers are generated and cached by the RecyclingItemsPanel.
            </summary>
            <seealso cref="T:Infragistics.Windows.Virtualization.RecyclingItemsPanel"/>
            <seealso cref="T:Infragistics.Windows.Virtualization.RecyclingItemsControl"/>
            <seealso cref="T:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator"/>
        </member>
        <member name="F:Infragistics.Windows.Controls.ItemContainerGenerationMode.Recycle">
            <summary>
            Reuses item containers for items that get scrolled out of view for the items that get scrolled into view.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ItemContainerGenerationMode.Virtualize">
            <summary>
            Generates item containers for only the items in view and clears item containers for items that subsequently get scrolled out of view.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ItemContainerGenerationMode.LazyLoad">
            <summary>
            Generates item containers for items as they are scrolled into view and does not clear them for items that get scrolled out of view.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ItemContainerGenerationMode.PreLoad">
            <summary>
            Pre-generates and caches an item container for each item.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.PopupResizeMode">
            <summary>
            Identifies how a popup can be resized
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.PopupResizerDecorator"/>
            <seealso cref="T:Infragistics.Windows.Controls.PopupResizerBar"/>
            <seealso cref="T:Infragistics.Windows.Controls.PopupResizerBarLocation"/>
        </member>
        <member name="F:Infragistics.Windows.Controls.PopupResizeMode.None">
            <summary>
            The popup can not be resized
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PopupResizeMode.VerticalOnly">
            <summary>
            Only the popup's height can be resized
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PopupResizeMode.Both">
            <summary>
            The popup can be resized in either the vertical or horizontal dimensions
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.PopupResizerBarLocation">
            <summary>
            Identifies how a popup can be resized
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.PopupResizerDecorator"/>
            <seealso cref="T:Infragistics.Windows.Controls.PopupResizerBar"/>
            <seealso cref="T:Infragistics.Windows.Controls.PopupResizeMode"/>
        </member>
        <member name="F:Infragistics.Windows.Controls.PopupResizerBarLocation.Bottom">
            <summary>
            The resizer bar is positioned at the bottom of the Popup/>
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PopupResizerBarLocation.Top">
            <summary>
            The resizer bar is positioned at the top of the Popup/>
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.RelativeContentLocation">
            <summary>
            Determines the relative location of one piece of content with respect to another.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.RelativeContentLocation.AboveContentLeft">
            <summary>
            Above content on left
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.RelativeContentLocation.AboveContentCenter">
            <summary>
            Above content in center
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.RelativeContentLocation.AboveContentRight">
            <summary>
            Above content on right
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.RelativeContentLocation.AboveContentStretch">
            <summary>
            Above content - stretch to same width
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.RelativeContentLocation.BelowContentLeft">
            <summary>
            Below content on left
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.RelativeContentLocation.BelowContentCenter">
            <summary>
            Below content in center
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.RelativeContentLocation.BelowContentRight">
            <summary>
            Below content on right
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.RelativeContentLocation.BelowContentStretch">
            <summary>
            Below content - stretch to same width
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.RelativeContentLocation.LeftOfContentTop">
            <summary>
            Left of content on top 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.RelativeContentLocation.LeftOfContentMiddle">
            <summary>
            Left of content in middle
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.RelativeContentLocation.LeftOfContentBottom">
            <summary>
            Left of content on bottom
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.RelativeContentLocation.LeftOfContentStretch">
            <summary>
            Left of content - stretch to same height
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.RelativeContentLocation.RightOfContentTop">
            <summary>
            Right of content on top 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.RelativeContentLocation.RightOfContentMiddle">
            <summary>
            Right of content in middle
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.RelativeContentLocation.RightOfContentBottom">
            <summary>
            Right of content on bottom
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.RelativeContentLocation.RightOfContentStretch">
            <summary>
            Right of content - stretch to same height
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.ResizingMode">
            <summary>
            Determines how resizing occurs.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ResizingMode.Default">
            <summary>
            Use the default setting
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ResizingMode.Deferred">
            <summary>
            Resizing occurs after the mouse is released.  While the mouse is down a marker line is displayed where the new boundary will be.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ResizingMode.Immediate">
            <summary>
            Resizing occurs immediately as the cursor is dragged.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.RoundedRectCorners">
            <summary>
            Flagged enumeration used to indicate one or more corners of a rectangle.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.RoundedRectCorners.None">
            <summary>
            No corners
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.RoundedRectCorners.TopLeft">
            <summary>
            The top left corner
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.RoundedRectCorners.TopRight">
            <summary>
            The top right corner
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.RoundedRectCorners.BottomLeft">
            <summary>
            The bottom left corner
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.RoundedRectCorners.BottomRight">
            <summary>
            The bottom right corner
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.RoundedRectCorners.Top">
            <summary>
            The left and right corners of the top edge.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.RoundedRectCorners.Bottom">
            <summary>
            The left and right corners of the bottom edge.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.RoundedRectCorners.Left">
            <summary>
            The top and bottom corners of the left edge.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.RoundedRectCorners.Right">
            <summary>
            The top and bottom corners of the right edge.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.RoundedRectCorners.All">
            <summary>
            All 4 corners
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.RoundedRectSide">
            <summary>
            A flagged enumeration used to identify a side of a rectangle.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.RoundedRectSide.Left">
            <summary>
            The left side
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.RoundedRectSide.Top">
            <summary>
            The top side
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.RoundedRectSide.Right">
            <summary>
            The right side
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.RoundedRectSide.Bottom">
            <summary>
            The bottom side
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.SelectionType">
            <summary>
            Used to specify the type of selection that is allowed for an object.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.SelectionType.Default">
            <summary>
            Use Default. The setting of the object's parent will be used.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.SelectionType.None">
            <summary>
            None. Objects may not be selected.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.SelectionType.Single">
            <summary>
            Single Select. Only one object may be selected at any time.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.SelectionType.Extended">
            <summary>
            Extended Select. Multiple objects may be selected at once.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.SelectionType.Range">
            <summary>
            A single range that could include multiple objects may be selected.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.SelectionType.ExtendedAutoDrag">
            <summary>
            Strategy used when multiple items can be selected but pressing the left
            button and dragging does not select other items but instead starts dragging
            the selected item immediately. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.SelectionType.SingleAutoDrag">
            <summary>
            Strategy used when only a single item can be selected and pressing the left
            button and dragging does not select other items but instead starts dragging
            the selected item immediately.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.SortStatus">
            <summary>
            Determines how items are sorted
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.SortStatus.NotSorted">
            <summary>
            The items are not sorted
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.SortStatus.Ascending">
            <summary>
            The items are sorted ascending
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.SortStatus.Descending">
            <summary>
            The items are sorted descending
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.TabControlStates">
            <summary>
            Enumeration used to indicate the current state of a <see cref="T:Infragistics.Windows.Controls.TabItemEx"/>
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabControlStates.AllowMinimized">
            <summary>
            The <see cref="P:Infragistics.Windows.Controls.XamTabControl.AllowMinimize"/> property is true.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabControlStates.HasSelectedTab">
            <summary>
            Has a tab that is selected
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabControlStates.HasSelectableTab">
            <summary>
            Has at least one tab that is selectable
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabControlStates.FirstTabSelected">
            <summary>
            The selected tab is the first tab that is not closed.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabControlStates.LastTabSelected">
            <summary>
            The selected tab is the last tab that is not closed.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabControlStates.Minimized">
            <summary>
            The <see cref="P:Infragistics.Windows.Controls.XamTabControl.IsMinimized"/> property is true.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabControlStates.SelectedTabAllowsClosing">
            <summary>
            The selected tab can be closed.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.TabItemExStates">
            <summary>
            Enumeration used to indicate the current state of a <see cref="T:Infragistics.Windows.Controls.TabItemEx"/>
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabItemExStates.SelectedTab">
            <summary>
            The <see cref="P:System.Windows.Controls.TabItem.IsSelected"/> is true
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabItemExStates.AllowsClosing">
            <summary>
            The <see cref="T:Infragistics.Windows.Controls.TabItemEx"/> can be closed.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.TabItemCloseButtonVisibility">
            <summary>
            Indicates when the close button should be displayed within a <see cref="T:Infragistics.Windows.Controls.TabItemEx"/>
            </summary>
            <seealso cref="P:Infragistics.Windows.Controls.TabItemEx.CloseButtonVisibility"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamTabControl.TabItemCloseButtonVisibility"/>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabItemCloseButtonVisibility.Visible">
            <summary>
            The close button is always visible in the TabItem.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabItemCloseButtonVisibility.WhenSelected">
            <summary>
            The close button is only visible when the TabItem is selected.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabItemCloseButtonVisibility.WhenSelectedOrHotTracked">
            <summary>
            The close button is only visible when the TabItem is selected or when it is HotTracked.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabItemCloseButtonVisibility.Hidden">
            <summary>
            The close button is never visible in the tab item.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.TabLayoutStyle">
            <summary>
            Identifies the types of layouts supported by the <see cref="T:Infragistics.Windows.Controls.TabItemPanel"/>
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabLayoutStyle.SingleRowAutoSize">
            <summary>
            The items are sized based on their content and arranged in a single row.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabLayoutStyle.SingleRowJustified">
            <summary>
            The items are sized based on their content size and then reduced towards their minimum size if there is not enough room to fit the items. The items are arranged within a single row.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabLayoutStyle.SingleRowSizeToFit">
            <summary>
            The items are sized based on their content size and then increased in size if there is more room to display the items than required. The items are arranged within a single row.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabLayoutStyle.MultiRowAutoSize">
            <summary>
            The items are sized based on their content and arranged in multiple rows.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabLayoutStyle.MultiRowSizeToFit">
            <summary>
            The items are sized based on their content and then increased in size if there is more room to display the items than required. The items are arranged in multiple rows.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.ToolWindowAlignmentMode">
            <summary>
            Enumeration used to control the vertical or horizontal positioning of a <see cref="T:Infragistics.Windows.Controls.ToolWindow"/>
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindowAlignmentMode.UseAlignment">
            <summary>
            The <see cref="P:System.Windows.FrameworkElement.HorizontalAlignment"/> or <see cref="P:System.Windows.FrameworkElement.VerticalAlignment"/>, depending on the property, should be honored. The tool window will be positioned relative to the owning element.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindowAlignmentMode.Manual">
            <summary>
            The <see cref="P:Infragistics.Windows.Controls.ToolWindow.Left"/> or <see cref="P:Infragistics.Windows.Controls.ToolWindow.Top"/> property should be used to control the horizontal/vertical positioning.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.ToolWindowResizeElementLocation">
            <summary>
            Enumeration indicating the location of a resize border.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindowResizeElementLocation.Left">
            <summary>
            Represents the border edge used to increase the width from the left.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindowResizeElementLocation.Top">
            <summary>
            Represents the border edge used to increase the height from the top.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindowResizeElementLocation.Right">
            <summary>
            Represents the border edge used to increase the width from the right.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindowResizeElementLocation.Bottom">
            <summary>
            Represents the border edge used to increase the height from the bottom.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindowResizeElementLocation.TopLeft">
            <summary>
            Represents the border edge used to increase the height and width from the top left corner.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindowResizeElementLocation.TopRight">
            <summary>
            Represents the border edge used to increase the height and width from the top right corner.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindowResizeElementLocation.BottomLeft">
            <summary>
            Represents the border edge used to increase the height and width from the bottom left corner.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindowResizeElementLocation.BottomRight">
            <summary>
            Represents the border edge used to increase the height and width from the top right corner.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.XamCarouselPanelStates">
            <summary>
            Enumeration used to identify the navigation state of the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
            </summary>
            <remarks>
            <p class="body">These states are returned by the XamCarouselPanel in its implementation of ICommandHost.CurrentState
            The Infragistics.Windows.Commands.ICommandHost interface is for internal use by Infragistics controls and is used by the Infragistics command infrastructure 
            to evaluate command and control state mappings.</p>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Commands.IGRoutedCommand"/>
            <seealso cref="T:Infragistics.Windows.Commands.IGRoutedUICommand"/>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanelCommands"/>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamCarouselPanelStates.CanNavigateToNextItem">
            <summary>
            The panel can navigate to the next item
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamCarouselPanelStates.CanNavigateToPreviousItem">
            <summary>
            The panel can navigate to the previous item
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamCarouselPanelStates.CanNavigateToNextPage">
            <summary>
            The panel can navigate to the next page of items
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamCarouselPanelStates.CanNavigateToPreviousPage">
            <summary>
            The panel can navigate to the previous page of items
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Reporting.PageOrientation">
            <summary>
            Identifies the page orientation
            </summary>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSettings.PageOrientation"/>
        </member>
        <member name="F:Infragistics.Windows.Reporting.PageOrientation.Portrait">
            <summary>
            The page will be oriented such that its height will be greater than its width.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Reporting.PageOrientation.Landscape">
            <summary>
            The page will be oriented such that its width will be greater than its height.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Reporting.PagePrintOrder">
            <summary>
            Identifies the order pages in a report when the <see cref="T:Infragistics.Windows.Reporting.HorizontalPaginationMode"/> is set to 'Mosaic' and logical pages are split up onto multiple pages.
            </summary>
            <remarks>
            <p class="body">When a logical page within a report is too wide to fit and <see cref="T:Infragistics.Windows.Reporting.HorizontalPaginationMode"/> is set to 'Mosaic' 
            then it will be will be split up into multiple page parts horizontally. This property determines the order that the page parts are placed in the report.</p>
            </remarks>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSettings.PagePrintOrder"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSettings.HorizontalPaginationMode"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.LogicalPageNumber"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.LogicalPagePartNumber"/>
        </member>
        <member name="F:Infragistics.Windows.Reporting.PagePrintOrder.Horizontal">
            <summary>
            Each logical page will print all of its multiple page parts, left to right, before the next logical page is printed.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Reporting.PagePrintOrder.Vertical">
            <summary>
            Every logical page will print its 'part 1' first. This will then be follwed by every logical page's 'part 2' etc.  
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Reporting.HorizontalPaginationMode">
            <summary>
            Determines how to print a logical page when it it too wide to fit on a single page.
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> if 'Scale' is specified then the aspect ratio will be maintained, i.e. the scale factor for the width and height will be the same.</p>
            </remarks>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSettings.HorizontalPaginationMode"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSettings.PagePrintOrder"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.LogicalPageNumber"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.LogicalPagePartNumber"/>
        </member>
        <member name="F:Infragistics.Windows.Reporting.HorizontalPaginationMode.Scale">
            <summary>
            When the logical width of the page too wide to fit on a single page then scale the page down so it does fit while maintaining its aspect ratio. In other words, the sale factor for the width and height will be the same.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Reporting.HorizontalPaginationMode.Mosaic">
            <summary>
            When the logical width of the page too wide to fit on a single page then split it up onto multiple separate pages based on the <see cref="P:Infragistics.Windows.Reporting.ReportSettings.PagePrintOrder"/> setting. 
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Reporting.RepeatType">
            <summary>
            Determines how logical headers within the page content area will be treated within a report section.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> In the case of a XamDataGrid this setting determines when field headers are displayed.</para>
            </remarks>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSettings.RepeatType"/>
        </member>
        <member name="F:Infragistics.Windows.Reporting.RepeatType.FirstOccurrence">
            <summary>
            Logical content headers appear only on the page where they occur for the first time. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Reporting.RepeatType.PageBreak">
            <summary>
            Logical content headers appear at the top of the each new page.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Reporting.RepeatType.LevelBreak">
            <summary>
            Logical content headers appear only when they are required when the context requires it, e.g. when record type changes.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.Events.CancelableRoutedEventArgs">
            <summary>
            An abstract base class for routed event args that are cancelable.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.Events.CancelableRoutedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Windows.Controls.Events.CancelableRoutedEventArgs"/> class. 
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.Events.CancelableRoutedEventArgs.#ctor(System.Windows.RoutedEvent)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Windows.Controls.Events.CancelableRoutedEventArgs"/> class, using the supplied routed event identifier.
            </summary>
            <param name="routedEvent">The routed event identifier for this instance of the <see cref="T:Infragistics.Windows.Controls.Events.CancelableRoutedEventArgs"/> class</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.Events.CancelableRoutedEventArgs.#ctor(System.Windows.RoutedEvent,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Windows.Controls.Events.CancelableRoutedEventArgs"/> class, using the supplied routed event identifier and 
            providing the opportunity to declare a different source for the event.
            </summary>
            <param name="routedEvent">The routed event identifier for this instance of the <see cref="T:Infragistics.Windows.Controls.Events.CancelableRoutedEventArgs"/> class</param>
            <param name="source">An alternate source that will be reported when the event is handled. This prepopulates the <see cref="P:System.Windows.RoutedEventArgs.Source"/> property.</param>
        </member>
        <member name="P:Infragistics.Windows.Controls.Events.CancelableRoutedEventArgs.Cancel">
            <summary>
            Gets/sets a boolean indicating whether the associated operation should be cancelled. 
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.Events.ExecutingCommandEventArgs">
            <summary>
            Cancelable event arguments class that provides data for a <b>ExecutingCommand</b> event.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.Events.ExecutingCommandEventArgs.#ctor(System.Windows.Input.RoutedCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Windows.Controls.Events.ExecutingCommandEventArgs"/> with the specified <see cref="T:System.Windows.Input.RoutedCommand"/>
            </summary>
            <param name="command">The command that will be executed</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.Events.ExecutingCommandEventArgs.#ctor(System.Windows.Input.RoutedCommand,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Windows.Controls.Events.ExecutingCommandEventArgs"/> with the specified <see cref="T:System.Windows.Input.RoutedCommand"/>
            </summary>
            <param name="command">The command that will be executed</param>
            <param name="parameter">The parameter for the command</param>
        </member>
        <member name="P:Infragistics.Windows.Controls.Events.ExecutingCommandEventArgs.Command">
            <summary>
            Returns the command to be performed (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.Events.ExecutingCommandEventArgs.ContinueKeyRouting">
            <summary>
            Gets/sets whether to continue routing the key that triggered the command.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> this property only has meaning if <b>Cancel</b> is set to true. The default value is true.</para>
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Controls.Events.ExecutingCommandEventArgs.Parameter">
            <summary>
            Returns the parameter used when executing the command.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.Events.ExecutedCommandEventArgs">
            <summary>
            Provides data for a <b>ExecutedCommand</b> event.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.Events.ExecutedCommandEventArgs.#ctor(System.Windows.Input.RoutedCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Windows.Controls.Events.ExecutedCommandEventArgs"/> with the specified <see cref="T:System.Windows.Input.RoutedCommand"/>
            </summary>
            <param name="command">The command that has been executed</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.Events.ExecutedCommandEventArgs.#ctor(System.Windows.Input.RoutedCommand,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Windows.Controls.Events.ExecutedCommandEventArgs"/> with the specified <see cref="T:System.Windows.Input.RoutedCommand"/>
            </summary>
            <param name="command">The command that has been executed</param>
            <param name="parameter">The parameter for the command</param>
        </member>
        <member name="P:Infragistics.Windows.Controls.Events.ExecutedCommandEventArgs.Command">
            <summary>
            Returns the command that was performed (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.Events.ExecutedCommandEventArgs.Parameter">
            <summary>
            Returns the parameter used when executing the command.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.Events.SelectedOperatorChangedEventArgs">
            <summary>
            Event args for the <see cref="E:Infragistics.Windows.Controls.ComparisonOperatorSelector.SelectedOperatorChanged"/> event of the <see cref="T:Infragistics.Windows.Controls.ComparisonOperatorSelector"/>
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.Events.SelectedOperatorChangedEventArgs.OldValue">
            <summary>
            Returns the old operator value (read-only).
            </summary>
            <seealso cref="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.SelectedOperator"/>
            <seealso cref="E:Infragistics.Windows.Controls.ComparisonOperatorSelector.SelectedOperatorChanged"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.Events.SelectedOperatorChangedEventArgs.NewValue">
            <summary>
            Returns the new operator value (read-only).
            </summary>
            <seealso cref="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.SelectedOperator"/>
            <seealso cref="E:Infragistics.Windows.Controls.ComparisonOperatorSelector.SelectedOperatorChanged"/>
        </member>
        <member name="T:Infragistics.Windows.Controls.Events.SortStatusChangedEventArgs">
            <summary>
            Provides data for an event involving a change in a <see cref="T:Infragistics.Windows.Controls.SortStatus"/>
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.Events.SortStatusChangedEventArgs.#ctor(Infragistics.Windows.Controls.SortStatus,Infragistics.Windows.Controls.SortStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Windows.Controls.Events.SortStatusChangedEventArgs"/> with the specified old and new <see cref="T:Infragistics.Windows.Controls.SortStatus"/> values.
            </summary>
            <param name="previousValue">The original sort status before the change occurred</param>
            <param name="currentValue">The new sort status</param>
        </member>
        <member name="P:Infragistics.Windows.Controls.Events.SortStatusChangedEventArgs.PreviousValue">
            <summary>
            Returns the sort status before the change (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.Events.SortStatusChangedEventArgs.CurrentValue">
            <summary>
            Returns the sort status after the change (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.Events.TabControlDropDownOpeningEventArgs">
            <summary>
            Event args for the <see cref="E:Infragistics.Windows.Controls.XamTabControl.DropDownOpening"/> event of the <see cref="T:Infragistics.Windows.Controls.XamTabControl"/>
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.Events.TabControlDropDownOpeningEventArgs.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Controls.Events.TabControlDropDownOpeningEventArgs"/>
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.Events.TabClosingEventArgs">
            <summary>
            Event arguments for routed event <see cref="E:Infragistics.Windows.Controls.TabItemEx.Closing"/>
            </summary>
            <seealso cref="E:Infragistics.Windows.Controls.TabItemEx.Closing"/>
            <seealso cref="F:Infragistics.Windows.Controls.TabItemEx.ClosingEvent"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.Events.TabClosingEventArgs.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.ExpanderBar">
            <summary>
            Button-derived element that displays a bar used for expanding/collapsing an area.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ExpanderBar.BackgroundHoverProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ExpanderBar.BackgroundHover"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ExpanderBar.BorderHoverBrushProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ExpanderBar.BorderHoverBrush"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.ExpanderBar.BackgroundHover">
            <summary>
            Brush applied when IsMouseOver = true.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.ExpanderBar.BackgroundHoverProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ExpanderBar.BorderHoverBrush">
            <summary>
            The border brush applied to the background area when IsMouseOver = true.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.ExpanderBar.BorderHoverBrushProperty"/>
        </member>
        <member name="T:Infragistics.Windows.Controls.ExpansionIndicator">
            <summary>
            A ToggleButton derived element used in trees and hierarchical grids to display and/or change the expanded state of nodes.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.ExpansionIndicator.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Controls.ExpansionIndicator"/>
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.ExpansionIndicator.OnToggle">
            <summary>
            Used to toggle the <see cref="P:System.Windows.Controls.Primitives.ToggleButton.IsChecked"/> property of the expansion indicator.
            </summary>
            <remarks>
            <p class="body">If the <see cref="P:Infragistics.Windows.Controls.ExpansionIndicator.ToggleMode"/> is set to Manual, this method will have no effect.</p>
            </remarks>
        </member>
        <member name="F:Infragistics.Windows.Controls.ExpansionIndicator.ToggleModeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ExpansionIndicator.ToggleMode"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.ExpansionIndicator.ToggleMode">
            <summary>
            Returns or sets whether the <see cref="P:System.Windows.Controls.Primitives.ToggleButton.IsChecked"/> state will be toggle automatically when clicked or only programatically
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.ExpansionIndicator.ToggleModeProperty"/>
        </member>
        <member name="T:Infragistics.Windows.Controls.ComparisonCondition">
            <summary>
            Condition that compares two values using the operator specified by the 
            <see cref="P:Infragistics.Windows.Controls.ComparisonCondition.Operator"/> property.
            </summary>
            <remarks>
            <para class="body">
            <b>ComparisonCondition</b> is an ICondition implementation that compares two
            values using the operator specified by the <see cref="P:Infragistics.Windows.Controls.ComparisonCondition.Operator"/> 
            property. The value on the right hand side of the operator is specified by the
            <see cref="P:Infragistics.Windows.Controls.ComparisonCondition.Value"/> property. The value being matched is the left hand side value, which
            is specified via the call to <see cref="M:Infragistics.Windows.Controls.ComparisonCondition.IsMatch(System.Object,Infragistics.Windows.Controls.ConditionEvaluationContext)"/> method.
            </para>
            <para class="body">
            Multiple conditions can be grouped using the <see cref="T:Infragistics.Windows.Controls.ConditionGroup"/> class, which itself
            implements <see cref="T:Infragistics.Windows.Controls.ICondition"/> interface, allowing you to create an arbitrarily nested
            conditions. <b>ConditionGroup</b>'s <see cref="P:Infragistics.Windows.Controls.ConditionGroup.LogicalOperator"/> property is 
            used to specify the boolean operator that will be used for combining multiple conditions in 
            that particular condition group.
            </para>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Controls.ICondition"/>
            <seealso cref="T:Infragistics.Windows.Controls.ConditionGroup"/>
            <seealso cref="T:Infragistics.Windows.Controls.ComplementCondition"/>
        </member>
        <member name="T:Infragistics.Windows.Controls.ICondition">
            <summary>
            Provides common interface for testing a value to see if it matches a condition.
            </summary>
            <remarks>
            <para class="body">
            <b>ICondition</b> is an interface that various condition classes implement. It provides
            standard interface to check if a value matches a condition. Classes that implement this
            interface include <see cref="T:Infragistics.Windows.Controls.ComplementCondition"/>, <see cref="T:Infragistics.Windows.Controls.ConditionGroup"/> and
            <see cref="T:Infragistics.Windows.Controls.ComparisonCondition"/>.
            </para>
            <para class="body">
            Also see <see cref="T:Infragistics.Windows.Controls.SpecialFilterOperandBase"/> which is used along with <see cref="T:Infragistics.Windows.Controls.ComparisonCondition"/>
            to specify common useful conditions. Various SpecialOperandBase implementations are provided by
            the <see cref="T:Infragistics.Windows.Controls.SpecialFilterOperands"/> class via static properties (like <see cref="P:Infragistics.Windows.Controls.SpecialFilterOperands.Blanks"/>,
            <see cref="P:Infragistics.Windows.Controls.SpecialFilterOperands.NonBlanks"/> etc...).
            </para>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Controls.ComparisonCondition"/>
            <seealso cref="T:Infragistics.Windows.Controls.ComplementCondition"/>
            <seealso cref="T:Infragistics.Windows.Controls.ConditionGroup"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.ICondition.IsMatch(System.Object,Infragistics.Windows.Controls.ConditionEvaluationContext)">
            <summary>
            Returns true if the specified value matches the condition. False otherwise.
            </summary>
            <param name="value">Value to test.</param>
            <param name="context">Context information on where the value came from.</param>
            <returns>True if the value passes the condition, false otherwise.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.ComparisonCondition.#ctor">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Windows.Controls.ComparisonCondition"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.ComparisonCondition.#ctor(Infragistics.Windows.Controls.ComparisonOperator,System.Object)">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Windows.Controls.ComparisonCondition"/>.
            </summary>
            <param name="comparisonOperator">Comparison operator.</param>
            <param name="value">Compare value. This is the right hand side value of the comparison operator.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.ComparisonCondition.Equals(System.Object)">
            <summary>
            Returns true if the passed in object is equal
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.ComparisonCondition.GetHashCode">
            <summary>
            Caclulates a value used for hashing
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.ComparisonCondition.ToString">
            <summary>
            Returns a string representation of the condition.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.ComparisonCondition.Create(Infragistics.Windows.Controls.ComparisonOperator,System.Object,System.Boolean,System.Exception@)">
            <summary>
            Creates a new ComparisonCondition instance based on the specified parameters.
            </summary>
            <param name="comparisonOperator">Comparison operator</param>
            <param name="operand">Comparison operand</param>
            <param name="validateOperand">Whether to validate if the operand is valid for the specified comparison 
            operator. If true and the operand is invalid, then null will be returned and error will be set to the error message. 
            If false, a new ComparisonCondition will be returned with the specified operator and operand, even if the operand
            is invalid.</param>
            <param name="error">If the value is invalid, this will be set to an error instance that provides information about why the condition could not be created.</param>
            <returns>New ComparisonCondition instance.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.ComparisonCondition.GetComparisonOperatorFlag(Infragistics.Windows.Controls.ComparisonOperator)">
            <summary>
            Returns the ComparisonOperatorFlags value associated with the specified comparison operator.
            </summary>
            <param name="comparisonOperator">ComparsionOperatorFlags value associated with this comparison operator will be returned.</param>
            <returns>ComparsionOperatorFlags value associated the specified comparison operator.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.ComparisonCondition.GetComparisonOperators(Infragistics.Windows.Controls.ComparisonOperatorFlags)">
            <summary>
            Returns the list of comparison operators that are included in the specified flags.
            </summary>
            <param name="flags">Comparison operator flags.</param>
            <returns>Array of comparison operators that have the associated flag set in the specified flags.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.ComparisonCondition.GetCompatibleComparisonOperators(System.Type,Infragistics.Windows.Controls.ComparisonOperator@)">
            <summary>
            Gets comparison operators that are compatible with values of specified data type.
            </summary>
            <param name="dataType">Operators compatible with values of this data type are returned.</param>
            <param name="defaultUIOperator">This will be set to an operator that is most suitable as the 
            default operator in an operator selection UI part of filtering UI.</param>
            <returns>Operators compatible with values of specified data type.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.ComparisonCondition.GetCompatibleComparisonOperators(System.Type,Infragistics.Windows.Controls.ComparisonOperator@,Infragistics.Windows.Controls.ComparisonOperator[]@)">
            <summary>
            Gets comparison operators that are compatible with values of specified data type.
            </summary>
            <param name="dataType">Operators compatible with values of this data type are returned.</param>
            <param name="defaultUIOperator">This will be set to an operator that is most suitable as the 
            default operator in an operator selection UI part of filtering UI.</param>
            <param name="prioritizedDefaultUIOperators">This will be set to a list of default operators that are
            compatible with the specified data type in priority order where more preferred is before less preferred.
            This is used when filter drop-down items is explicitly specified and doesn't include the default operator.
            For example, if FilterDropDownItems in data presenter is set to a value that doesn't include 'StartsWith',
            which is the defaultUIOperator for string fields, then we have to select one of the operators from the
            explicitly specified FilterDropDownItems list, selecting what makes the most sense. That's where the 
            priority comes into play.
            </param>
            <returns>Operators compatible with values of specified data type.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.ComparisonCondition.GetCompatibleComparisonOperator(System.Type,Infragistics.Windows.Controls.ComparisonOperatorFlags)">
            <summary>
            Gets preferred comparison operator out of availableOperators for the specified data type. If none of the
            preferred operators are in the availableOperators flags, then it will return the operator associated with 
            the first set bit in the availableOperators. If availableOperators parameter is empty (0), then it will
            return the default operator deemed the most appropriate for the specified data type.
            </summary>
            <param name="dataType">Data type</param>
            <param name="availableOperators">Available operators</param>
            <returns>Preferred comparison operator for the specified data type</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.ComparisonCondition.IsCompareValueValid(Infragistics.Windows.Controls.ComparisonOperator,System.Object,System.Globalization.CultureInfo,System.String,System.Exception@)">
            <summary>
            Indicates if the compare value is valid for the specified operator.
            </summary>
            <param name="comparisonOperator">Comparison operator for which to check if the compare value is valid.</param>
            <param name="compareValue">Compare value.</param>
            <param name="convertCulture">Culture to use for converter purposes. If the compare value is not
            of the type suitable for the operator evaluation, it will be converted to appropriate type.</param>
            <param name="convertFormat">Format to use for converter purposes.</param>
            <param name="error">If the compar value is invalid, this parameter will be set to an error.</param>
            <returns>True if the compare value is valid. False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.ComparisonCondition.IsCountingOperator(Infragistics.Windows.Controls.ComparisonOperator)">
            <summary>
            Indicates if the specified operator counts top or bottom N number of 
            values (Top, TopPercentile, Bottom, BottomPercentile).
            </summary>
            <param name="comparisonOperator">Comparison operator to check.</param>
            <returns>Returns true if the operator is a counting operator.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.ComparisonCondition.IsMatch(System.Object,Infragistics.Windows.Controls.ConditionEvaluationContext)">
            <summary>
            Returns true if the specified value matches the condition. False otherwise.
            </summary>
            <param name="value">Value to test. This is the value on the left hand side of the operator. Right hand side value is specified by the <see cref="P:Infragistics.Windows.Controls.ComparisonCondition.Value"/> property.</param>
            <param name="context">Context information on where the value came from.</param>
            <returns>True if the value passes the condition, false otherwise.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.ComparisonCondition.IsQuantitativeComparison(Infragistics.Windows.Controls.ComparisonOperator)">
            <summary>
            Indicates if the specified operator performs quantitative comparison.
            </summary>
            <param name="op">Comparison operator to check.</param>
            <returns>Returns true if the operator performs quantitative comparison.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.ComparisonCondition.IsStringComparison(Infragistics.Windows.Controls.ComparisonOperator)">
            <summary>
            Indicates if the specified operator performs string comparison.
            </summary>
            <param name="op">Comparison operator to check.</param>
            <returns>Returns true if the operator performs string comparison.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.ComparisonCondition.ValidateValueHelper(Infragistics.Windows.Controls.ComparisonOperator,System.Object)">
            <summary>
            Throws an exception if the value is invalid for the specified comparison operator.
            </summary>
            <param name="comparisonOperator">Comparison operator.</param>
            <param name="value">Value to validate.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.ComparisonCondition.ValidateValueHelper(Infragistics.Windows.Controls.ComparisonOperator,System.Object,System.Globalization.CultureInfo,System.String,System.Exception@)">
            <summary>
            Throws an exception if the value is invalid for the specified comparison operator.
            </summary>
            <param name="comparisonOperator">Comparison operator.</param>
            <param name="value">Value to validate.</param>
            <param name="convertCulture">Culture to use for conversion purposes.</param>
            <param name="convertFormat">Format to use for conversion purposes.</param>
            <param name="error">If the value is invalid, this will be set to an error message.</param>
            <remarks>True if the value is valid for the specified comparison opeator. False otherwise.</remarks>
        </member>
        <member name="P:Infragistics.Windows.Controls.ComparisonCondition.Operator">
            <summary>
            Gets or sets the comparison operator.
            </summary>
            <remarks>
            <para class="body">
            <b>Operator</b> property specifies the operator that will be used when evaluating the condition
            to match a value. The <see cref="P:Infragistics.Windows.Controls.ComparisonCondition.Value"/> property specifies the value on the right hand side of 
            the operator. The left hand side value is the value that's being tested to see if it matches
            the condition (passed into the <see cref="M:Infragistics.Windows.Controls.ComparisonCondition.IsMatch(System.Object,Infragistics.Windows.Controls.ConditionEvaluationContext)"/> method).
            </para>
            </remarks>
            <see cref="P:Infragistics.Windows.Controls.ComparisonCondition.Value"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ComparisonCondition.Value">
            <summary>
            Returns the comparison value. This is the value on the right hand side of the comparison operator.
            </summary>
            <remarks>
            <para class="body">
            <b>Value</b> property specifies the the value on the right hand side of the operator. 
            The <see cref="P:Infragistics.Windows.Controls.ComparisonCondition.Operator"/> property specifies the operator that will be used when evaluating 
            the condition to match a value. The left hand side value is the value that's being tested to see 
            if it matches the condition (passed into the <see cref="M:Infragistics.Windows.Controls.ComparisonCondition.IsMatch(System.Object,Infragistics.Windows.Controls.ConditionEvaluationContext)"/> method).
            </para>
            <para class="body">
            <i>Value</i> can also be set to an instance of <see cref="T:Infragistics.Windows.Controls.SpecialFilterOperandBase"/> derived class. 
            There are several built-in special operands exposed by the <see cref="T:Infragistics.Windows.Controls.SpecialFilterOperands"/> class as
            static properties. See <see cref="T:Infragistics.Windows.Controls.SpecialFilterOperands"/> for more information.
            </para>
            </remarks>
            <seealso cref="P:Infragistics.Windows.Controls.ComparisonCondition.Operator"/>
            <seealso cref="T:Infragistics.Windows.Controls.SpecialFilterOperandBase"/>
            <seealso cref="T:Infragistics.Windows.Controls.SpecialFilterOperands"/>
        </member>
        <member name="T:Infragistics.Windows.Controls.ComparisonCondition.SerializationInfo">
            <summary>
            Provides necessary information to the ObjectSerializerBase for serializing and deserializing a ConditionGroup.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Internal.ObjectSerializationInfo">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Internal.ObjectSerializationInfo.COLLECTION_ELEMENT_DESIGNATOR_KEY">
            <summary>
            Used for designating collection elements in the dictionary returned
            by Serialize and in the dictionary passed into the Deserialize.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Internal.ObjectSerializationInfo.Serialize(System.Object)">
            <summary>
            Serializes the specified object. Returns a map of properties to their values.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Internal.ObjectSerializationInfo.Deserialize(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Deserializes the specified information into an instance of the object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Windows.Internal.ObjectSerializationInfo.SerializedProperties">
            <summary>
            Returns a list of properties that are to be serialized.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.ComparisonOperatorListItem">
            <summary>
            Represents an entry in the filter operator drop-down list of a ComparisonOperatorSelector.
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.ComparisonOperatorSelector"/>
            <seealso cref="T:Infragistics.Windows.Controls.ComparisonOperator"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.ComparisonOperatorListItem.#ctor(Infragistics.Windows.Controls.ComparisonOperator)">
            <summary>
            Initializes a new instance of <see cref="T:Infragistics.Windows.Controls.ComparisonOperatorListItem"/>.
            </summary>
            <param name="value">The specific operator enum value.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.ComparisonOperatorListItem.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Infragistics.Windows.Controls.ComparisonOperatorListItem"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.ComparisonOperatorListItem.ToString">
            <summary>
            Returns the description.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorListItem.ImageProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ComparisonOperatorListItem.Image"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorListItem.DescriptionProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ComparisonOperatorListItem.Description"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.ComparisonOperatorListItem.Image">
            <summary>
            Gets or sets the Image used to represent the operator
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.ComparisonOperatorListItem.ImageProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ComparisonOperatorListItem.Description">
            <summary>
            Gets a the description of the operator that can be used for display (read-only).
            </summary>
            <remarks>
            <para cass="note"><b>Note:</b> this value is obtained from resources in this assembly. They can be changed 
            programmatically by calling the <see cref="M:Infragistics.Shared.ResourceCustomizer.SetCustomizedString(System.String,System.String)"/> method 
            of the <see cref="P:Infragistics.Windows.Resources.Customizer"/> exposed off Infragistics.Windows.Resources. The identifier 
            strings for these resources begin with 'ComparisonOperator_' and are appended with the enum string. For example, 
            'ComparisonOperator_Equals', 'ComparisonOperator_NotEquals' etc.</para>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.ComparisonOperatorListItem.DescriptionProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ComparisonOperatorListItem.Operator">
            <summary>
            Returns the <see cref="T:Infragistics.Windows.Controls.ComparisonOperator"/> this item represents (read-only).
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.ComparisonOperatorSelector">
            <summary>
            An element used for selecting from a filtered list of <see cref="T:Infragistics.Windows.Controls.ComparisonOperator"/>s 
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.ComparisonOperatorSelector.#ctor">
            <summary>
            Initializes an instance of the <see cref="T:Infragistics.Windows.Controls.ComparisonOperatorSelector"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.ComparisonOperatorSelector.OnApplyTemplate">
            <summary>
            Invoked when the template for the control has been changed.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.ComparisonOperatorSelector.OnCreateAutomationPeer">
            <summary>
            Returns an automation peer that exposes the <see cref="T:Infragistics.Windows.Controls.ComparisonOperatorSelector"/> to UI Automation.
            </summary>
            <returns>A <see cref="T:Infragistics.Windows.Automation.Peers.ComparisonOperatorSelectorAutomationPeer"/></returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.ComparisonOperatorSelector.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked just before the System.Windows.UIElement.IsKeyboardFocusWithinChanged event is raised by this element. 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Windows.Controls.ComparisonOperatorSelector.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when the mouse is moved within the bounds of the element.
            </summary>
            <param name="e">Provides information about the mouse position.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.ComparisonOperatorSelector.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when the mouse is moved outside the bounds of the element.
            </summary>
            <param name="e">Provides information about the mouse position.</param>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.AllowableOperatorsProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.AllowableOperators"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.DropDownButtonStyleProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.DropDownButtonStyle"/> dependency property
            </summary>
            <seealso cref="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.DropDownButtonStyle"/>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.DropDownButtonStyleKey">
            <summary>
            The key that identifies a resource to be used as the DropDownButtonStyle.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.IsDropDownOpenProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.IsDropDownOpen"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.SelectedIndexProperty">
            <summary>
            Identifies the 'SelectedIndex' dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.SelectedOperatorProperty">
            <summary>
            Identifies the 'SelectedOperator' dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.SelectedOperatorChangedEvent">
            <summary>
            Event ID for the 'SelectedOperatorChanged' routed event
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.ComparisonOperatorSelector.OnSelectedOperatorChanged(System.Nullable{Infragistics.Windows.Controls.ComparisonOperator},System.Nullable{Infragistics.Windows.Controls.ComparisonOperator})">
            <summary>
            Called when property 'SelectedOperator' changes
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.SelectedOperatorInfoProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.SelectedOperatorInfo"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorEqualsImageProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorEqualsImage"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorEqualsImageKey">
            <summary>
            The key that identifies a resource to be used as the OperatorEqualsImageKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorNotEqualsImageProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorNotEqualsImage"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorNotEqualsImageKey">
            <summary>
            The key that identifies a resource to be used as the OperatorNotEqualsImageKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorLessThanImageProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorLessThanImage"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorLessThanImageKey">
            <summary>
            The key that identifies a resource to be used as the OperatorLessThanImageKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorLessThanOrEqualToImageProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorLessThanOrEqualToImage"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorLessThanOrEqualToImageKey">
            <summary>
            The key that identifies a resource to be used as the OperatorLessThanOrEqualToImageKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorGreaterThanImageProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorGreaterThanImage"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorGreaterThanImageKey">
            <summary>
            The key that identifies a resource to be used as the OperatorGreaterThanImageKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorGreaterThanOrEqualToImageProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorGreaterThanOrEqualToImage"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorGreaterThanOrEqualToImageKey">
            <summary>
            The key that identifies a resource to be used as the OperatorGreaterThanOrEqualToImageKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorContainsImageProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorContainsImage"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorContainsImageKey">
            <summary>
            The key that identifies a resource to be used as the OperatorContainsImageKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorDoesNotContainImageProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorDoesNotContainImage"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorDoesNotContainImageKey">
            <summary>
            The key that identifies a resource to be used as the OperatorDoesNotContainImageKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorLikeImageProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorLikeImage"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorLikeImageKey">
            <summary>
            The key that identifies a resource to be used as the OperatorLikeImageKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorNotLikeImageProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorNotLikeImage"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorNotLikeImageKey">
            <summary>
            The key that identifies a resource to be used as the OperatorNotLikeImageKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorMatchImageProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorMatchImage"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorMatchImageKey">
            <summary>
            The key that identifies a resource to be used as the OperatorMatchImageKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorDoesNotMatchImageProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorDoesNotMatchImage"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorDoesNotMatchImageKey">
            <summary>
            The key that identifies a resource to be used as the OperatorDoesNotMatchImageKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorStartsWithImageProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorStartsWithImage"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorStartsWithImageKey">
            <summary>
            The key that identifies a resource to be used as the OperatorStartsWithImageKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorDoesNotStartWithImageProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorDoesNotStartWithImage"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorDoesNotStartWithImageKey">
            <summary>
            The key that identifies a resource to be used as the OperatorDoesNotStartWithImageKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorEndsWithImageProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorEndsWithImage"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorEndsWithImageKey">
            <summary>
            The key that identifies a resource to be used as the OperatorEndsWithImageKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorDoesNotEndWithImageProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorDoesNotEndWithImage"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorDoesNotEndWithImageKey">
            <summary>
            The key that identifies a resource to be used as the OperatorDoesNotEndWithImageKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorTopImageProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorTopImage"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorTopImageKey">
            <summary>
            The key that identifies a resource to be used as the OperatorTopImageKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorBottomImageProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorBottomImage"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorBottomImageKey">
            <summary>
            The key that identifies a resource to be used as the OperatorBottomImageKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorTopPercentileImageProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorTopPercentileImage"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorTopPercentileImageKey">
            <summary>
            The key that identifies a resource to be used as the OperatorTopPercentileImageKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorBottomPercentileImageProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorBottomPercentileImage"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorBottomPercentileImageKey">
            <summary>
            The key that identifies a resource to be used as the OperatorBottomPercentileImageKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.ComparisonOperatorSelector.SetVisualState(System.Boolean)">
            <summary>
            Called to set the VisualStates of the control
            </summary>
            <param name="useTransitions">Determines whether transitions should be used.</param>
        </member>
        <member name="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.AllowableOperators">
            <summary>
            Gets or sets a flagged enumeration that defines which operators are allowed.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.AllowableOperatorsProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.DropDownButtonStyle">
            <summary>
            Gets or sets the style used for the ToggleButton used inside the template`
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.DropDownButtonStyleProperty"/>
            <seealso cref="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.DropDownButtonStyleKey"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.IsDropDownOpen">
            <summary>
            Gets or sets whether the list of operators is dropped down
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.IsDropDownOpenProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.Items">
            <summary>
            Returns a read-only collection of <see cref="T:Infragistics.Windows.Controls.ComparisonOperatorListItem"/>s that are filtered based on the <see cref="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.AllowableOperators"/> setting.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.AllowableOperatorsProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.SelectedIndex">
            <summary>
            Gets or sets the zero-based index of the selected item
            </summary>
            <value>The zero-based index of the selected item in the <see cref="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.Items"/> collection or -1 if no item is selected.</value>
            <seealso cref="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.SelectedOperatorInfo"/>
            <seealso cref="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.SelectedOperator"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.SelectedOperator">
            <summary>
            Gets or sets the selected operator
            </summary>
        </member>
        <member name="E:Infragistics.Windows.Controls.ComparisonOperatorSelector.SelectedOperatorChanged">
            <summary>
            Occurs when property 'SelectedOperator' changes
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.SelectedOperatorInfo">
            <summary>
            Returns an object that exposes information about the selected Operator (read-only).
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.ComparisonOperatorListItem"/>
            <seealso cref="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.Items"/>
            <seealso cref="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.SelectedOperatorInfoProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.SelectedOperator"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorEqualsImage">
            <summary>
            Gets or sets the ImageSource used to represent the 'Equals' operator
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.ComparisonOperator"/>
            <seealso cref="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorEqualsImageProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorNotEqualsImage">
            <summary>
            Gets or sets the ImageSource used to represent the 'NotEquals' operator
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.ComparisonOperator"/>
            <seealso cref="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorNotEqualsImageProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorLessThanImage">
            <summary>
            Gets or sets the ImageSource used to represent the 'LessThan' operator
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.ComparisonOperator"/>
            <seealso cref="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorLessThanImageProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorLessThanOrEqualToImage">
            <summary>
            Gets or sets the ImageSource used to represent the 'LessThanOrEqualTo' operator
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.ComparisonOperator"/>
            <seealso cref="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorLessThanOrEqualToImageProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorGreaterThanImage">
            <summary>
            Gets or sets the ImageSource used to represent the 'GreaterThan' operator
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.ComparisonOperator"/>
            <seealso cref="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorGreaterThanImageProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorGreaterThanOrEqualToImage">
            <summary>
            Gets or sets the ImageSource used to represent the 'GreaterThanOrEqualTo' operator
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.ComparisonOperator"/>
            <seealso cref="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorGreaterThanOrEqualToImageProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorContainsImage">
            <summary>
            Gets or sets the ImageSource used to represent the 'Contains' operator
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.ComparisonOperator"/>
            <seealso cref="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorContainsImageProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorDoesNotContainImage">
            <summary>
            Gets or sets the ImageSource used to represent the 'DoesNotContain' operator
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.ComparisonOperator"/>
            <seealso cref="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorDoesNotContainImageProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorLikeImage">
            <summary>
            Gets or sets the ImageSource used to represent the 'Like' operator
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.ComparisonOperator"/>
            <seealso cref="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorLikeImageProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorNotLikeImage">
            <summary>
            Gets or sets the ImageSource used to represent the 'NotLike' operator
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.ComparisonOperator"/>
            <seealso cref="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorNotLikeImageProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorMatchImage">
            <summary>
            Gets or sets the ImageSource used to represent the 'Match' operator
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.ComparisonOperator"/>
            <seealso cref="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorMatchImageProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorDoesNotMatchImage">
            <summary>
            Gets or sets the ImageSource used to represent the 'DoesNotMatch' operator
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.ComparisonOperator"/>
            <seealso cref="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorDoesNotMatchImageProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorStartsWithImage">
            <summary>
            Gets or sets the ImageSource used to represent the 'StartsWith' operator
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.ComparisonOperator"/>
            <seealso cref="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorStartsWithImageProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorDoesNotStartWithImage">
            <summary>
            Gets or sets the ImageSource used to represent the 'DoesNotStartWith' operator
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.ComparisonOperator"/>
            <seealso cref="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorDoesNotStartWithImageProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorEndsWithImage">
            <summary>
            Gets or sets the ImageSource used to represent the 'EndsWith' operator
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.ComparisonOperator"/>
            <seealso cref="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorEndsWithImageProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorDoesNotEndWithImage">
            <summary>
            Gets or sets the ImageSource used to represent the 'DoesNotEndWith' operator
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.ComparisonOperator"/>
            <seealso cref="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorDoesNotEndWithImageProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorTopImage">
            <summary>
            Gets or sets the ImageSource used to represent the 'Top' operator
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.ComparisonOperator"/>
            <seealso cref="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorTopImageProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorBottomImage">
            <summary>
            Gets or sets the ImageSource used to represent the 'Bottom' operator
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.ComparisonOperator"/>
            <seealso cref="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorBottomImageProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorTopPercentileImage">
            <summary>
            Gets or sets the ImageSource used to represent the 'TopPercentile' operator
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.ComparisonOperator"/>
            <seealso cref="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorTopPercentileImageProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorBottomPercentileImage">
            <summary>
            Gets or sets the ImageSource used to represent the 'BottomPercentile' operator
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.ComparisonOperator"/>
            <seealso cref="F:Infragistics.Windows.Controls.ComparisonOperatorSelector.OperatorBottomPercentileImageProperty"/>
        </member>
        <member name="T:Infragistics.Windows.Controls.ComparisonOperatorListItemCollection">
            <summary>
            A read-only collection of <see cref="T:Infragistics.Windows.Controls.ComparisonOperatorListItem"/>s
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.ComparisonOperatorListItem"/>
            <seealso cref="T:Infragistics.Windows.Controls.ComparisonOperatorSelector"/>
            <seealso cref="P:Infragistics.Windows.Controls.ComparisonOperatorSelector.Items"/>
        </member>
        <member name="T:Infragistics.Windows.Controls.ConditionGroup">
            <summary>
            Class used for grouping multiple conditions.
            </summary>
            <remarks>
            <para class="body">
            <b>ConditionGroup</b> class is used for grouping multiple conditions. ConditionGroup itself implements 
            <see cref="T:Infragistics.Windows.Controls.ICondition"/> interface and therefore you can create arbitrarily nested groups of conditions.
            </para>
            <para class="body">
            Conditions contained in the condition group are combined using the logical operator specified by the
            <see cref="P:Infragistics.Windows.Controls.ConditionGroup.LogicalOperator"/> property.
            </para>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Controls.ICondition"/>
            <seealso cref="T:Infragistics.Windows.Controls.ComparisonCondition"/>
            <seealso cref="T:Infragistics.Windows.Controls.ComplementCondition"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.ConditionGroup.#ctor">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Windows.Controls.ConditionGroup"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.ConditionGroup.Equals(System.Object)">
            <summary>
            Returns true if the passed in object is equal
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.ConditionGroup.GetHashCode">
            <summary>
            Caclulates a value used for hashing
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.ConditionGroup.ToString">
            <summary>
            Returns a string representation of the group.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.ConditionGroup.IsMatch(System.Object,Infragistics.Windows.Controls.ConditionEvaluationContext)">
            <summary>
            Returns true if the specified value matches any one or all conditions in this condition group depending
            on the value of the <see cref="P:Infragistics.Windows.Controls.ConditionGroup.LogicalOperator"/> property. False otherwise.
            </summary>
            <param name="value">Value to test.</param>
            <param name="context">Context information on where the value came from.</param>
            <returns>True if the value matches, false otherwise.</returns>
        </member>
        <member name="P:Infragistics.Windows.Controls.ConditionGroup.ToolTip">
            <summary>
            Gets/sets a tooltip to be used for this group.
            </summary>
            <remarks>
            <para class="body">If not set this will a formatted string. </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Controls.ConditionGroup.LogicalOperator">
            <summary>
            Specifies how to combine results of conditions in the collection.
            </summary>
            <remarks>
            <para class="body">
            <b>LogicalOperator</b> property specifies whether the conditions in this condition group should
            be combined using boolean function 'or' or 'and'.
            </para>
            </remarks>
        </member>
        <member name="T:Infragistics.Windows.Controls.ConditionGroup.SerializationInfo">
            <summary>
            Provides necessary information to the ObjectSerializerBase for serializing and deserializing a ConditionGroup.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.ComplementCondition">
            <summary>
            Condition that complements the results of a specified condition.
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.ComparisonCondition"/>
            <seealso cref="T:Infragistics.Windows.Controls.ConditionGroup"/>
            <seealso cref="T:Infragistics.Windows.Controls.ICondition"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.ComplementCondition.#ctor">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Windows.Controls.ComplementCondition"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.ComplementCondition.#ctor(Infragistics.Windows.Controls.ICondition)">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Windows.Controls.ComplementCondition"/>.
            </summary>
            <param name="sourceCondition">Result of this condition will be complemented.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.ComplementCondition.Equals(System.Object)">
            <summary>
            Returns true if the passed in object is equal
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.ComplementCondition.GetHashCode">
            <summary>
            Caclulates a value used for hashing
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.ComplementCondition.ToString">
            <summary>
            Returns a string representation of the condition.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.ComplementCondition.IsMatch(System.Object,Infragistics.Windows.Controls.ConditionEvaluationContext)">
            <summary>
            Returns true if the specified value matches the condition. False otherwise. Value is considered
            to match this ComplementCondition if the value doesn't match the underlying <see cref="P:Infragistics.Windows.Controls.ComplementCondition.SourceCondition"/>.
            </summary>
            <remarks>
            <para class="body">
            Returns the complement of the result of the <see cref="P:Infragistics.Windows.Controls.ComplementCondition.SourceCondition"/>. If 
            <i>SourceCondition</i> is not specified, this method returns true. 
            </para>
            </remarks>
            <param name="value">Value to test.</param>
            <param name="context">Context information on where the value came from.</param>
            <returns>True if the value passes the condition, false otherwise.</returns>
        </member>
        <member name="P:Infragistics.Windows.Controls.ComplementCondition.SourceCondition">
            <summary>
            Specifies the source condition whose result will be complemented by this ComplementCondition.
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.ComparisonCondition"/>
            <seealso cref="T:Infragistics.Windows.Controls.ConditionGroup"/>
            <seealso cref="T:Infragistics.Windows.Controls.ICondition"/>
        </member>
        <member name="T:Infragistics.Windows.Controls.ComplementCondition.SerializationInfo">
            <summary>
            Provides necessary information to the ObjectSerializerBase for serializing and deserializing a ConditionGroup.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.ConditionEvaluationContext">
            <summary>
            Provides information regarding the context in which a condition is being evaluated.
            </summary>
            <remarks>
            <para class="body">
            <b>ConditionEvaluationContext</b> provides information regarding the context in 
            which a condition is being evaluated. This object is passed into the <see cref="T:Infragistics.Windows.Controls.ICondition"/>'s
            <see cref="M:Infragistics.Windows.Controls.ICondition.IsMatch(System.Object,Infragistics.Windows.Controls.ConditionEvaluationContext)"/> method along with the value that's being matched against the
            condition.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Controls.ConditionEvaluationContext.#ctor">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Windows.Controls.ConditionEvaluationContext"/>.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.ConditionEvaluationContext.AllValues">
            <summary>
            Returns set of values a member of which is currently being evaluated. This is used to
            evaluate conditions that require information regarding the associated set of values, for example
            a condition that matches values that are 'above average' require the average attribute of
            the set of values associated with the current value being evaluated. Such a condition would
            calculate the average of 'AllValues' and compare the value being evaluated with that average.
            </summary>
            <remarks>
            <para class="body">
            <b>AllValues</b> property set of values a member of which is currently being evaluated. This is used to
            evaluate conditions that require information regarding the associated set of values, for example
            a condition that matches values that are 'above average' require the average attribute of
            the set of values associated with the current value being evaluated. Such a condition would
            calculate the average of 'AllValues' and compare the value being evaluated with that average.
            </para>
            <para class="body">
            For example, in XamDataGrid when 'AboveAverage' filter condition is selected on a field, <i>AllValues</i>
            will be all field values of the record collection associated with the current field value that's
            being evaluated. <b>Note</b> that once you calculate the particular attribute of the set of values
            (in our example the average), you can cache the value using the <see cref="P:Infragistics.Windows.Controls.ConditionEvaluationContext.UserCache"/> property
            which you can reuse in successive evalulation of other values in the set. <i>UserData</i> will
            be null initially and once you assign it, it will continue returning that value for evaluation
            of all other values in the set.
            </para>
            <para class="body">
            <b>Note</b> that accessing <b>AllValues</b> will cause the re-evaluation of filters on all items
            even if data of one item changes. For example, in XamDataGrid, with 'AboveAverage' as the condition,
            when a cell value in a record changes, the 'average' of all values is changed and therefore all
            records have to be re-evaluated to make sure that they are still above the new average.
            </para>
            </remarks>
            <seealso cref="P:Infragistics.Windows.Controls.ConditionEvaluationContext.UserCache"/>
            <seealso cref="T:Infragistics.Windows.Controls.ValueEntry"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ConditionEvaluationContext.CurrentValue">
            <summary>
            Returns further information regarding the value that’s being evaluated currently.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.ConditionEvaluationContext.Comparer">
            <summary>
            Returns any custom comparer for comparing values when evaluating filter conditions.
            </summary>
            <remarks>
            <para class="body">
            <b>Comparer</b> property returns any custom comparer that may have been specified, for example
            the data presenter's FieldSettings' FilterValueComparer property.
            </para>
            <para class="body">
            Default implementation returns null.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Controls.ConditionEvaluationContext.IgnoreCase">
            <summary>
            Indicates whether string comparisons should be done case-insensitive or case-sensitive.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.ConditionEvaluationContext.PreferredComparisonDataType">
            <summary>
            Indicates the data type that should be used to coerce values before performing 
            quantitative comparisons.
            </summary>
            <remarks>
            <para class="body">
            <b>PreferredComparisonDataType</b> indicates the data type that should be used 
            to coerce values before performing comparison. This is only applicable to quantitative 
            comparison operators, like 
            GreaterThan, LessThan etc… and does not apply to string comparison operators like 
            StartsWith, Contains etc… This property will typically return the underlying data 
            type of the field. For example, in data presenter this will be the field’s 
            EditAsTypeResolved which defaults to the Field's DataType.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Controls.ConditionEvaluationContext.UserCache">
            <summary>
            Used for caching any value.
            </summary>
            <remarks>
            <para class="body">
            <b>UserCache</b> is used for caching any value that can be used during evaluations of
            further values in the set. See <see cref="P:Infragistics.Windows.Controls.ConditionEvaluationContext.AllValues"/> for more information.
            </para>
            <see cref="P:Infragistics.Windows.Controls.ConditionEvaluationContext.AllValues"/>
            </remarks>
        </member>
        <member name="T:Infragistics.Windows.Controls.ValueEntry">
            <summary>
            Provides information regarding a value. Used by <see cref="P:Infragistics.Windows.Controls.ConditionEvaluationContext.AllValues"/> property.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.ValueEntry.#ctor">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Windows.Controls.ValueEntry"/>.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.ValueEntry.Context">
            <summary>
            Returns the context associated with the value. In the case of data presenter, the context will 
            be the Cell whose value this value entry represents.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.ValueEntry.Culture">
            <summary>
            Returns the culture info.
            </summary>
            <remarks>
            <para class="body">
            <b>Culture</b> and <see cref="P:Infragistics.Windows.Controls.ValueEntry.Format"/> properties indicate any culture and format
            associated with the object for which the condition is being evaulated. For example,
            in the data presenter, Culture and Format will be the culture and format settings
            associated with the cell's field.
            </para>
            <para class="body">
            Typically you would use the <i>Culture</i> and <i>Format</i> for converting values
            from one type to another when evaluating the condition.
            </para>
            </remarks>
            <see cref="P:Infragistics.Windows.Controls.ValueEntry.Format"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ValueEntry.Format">
            <summary>
            Returns the format.
            </summary>
            <remarks>
            <para class="body">
            See <see cref="P:Infragistics.Windows.Controls.ValueEntry.Culture"/> for more information.
            </para>
            </remarks>
            <seealso cref="P:Infragistics.Windows.Controls.ValueEntry.Culture"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ValueEntry.Value">
            <summary>
            Returns the value.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.ValueEntry.ValueAsDouble">
            <summary>
            Returns the value as double. If the value is not double, it will try to convert
            the value into double and return the converted value. If the conversion fails,
            it returns double.NaN.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.SpecialFilterOperandFactory.RegisterSerializationInfos(Infragistics.Windows.Internal.ObjectSerializerBase)">
            <summary>
            Registers serialization information for special operands defined in this factory.
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="T:Infragistics.Windows.Controls.SpecialFilterOperandBase">
            <summary>
            Abstract base class for special filter operands.
            </summary>
            <remarks>
            <para class="body">
            <b>SpecialFilterOperandBase</b> is the abstract base class for various special filter operands. Built-in special 
            operands are exposed by the <see cref="T:Infragistics.Windows.Controls.SpecialFilterOperands"/> class as static properties, like 
            <see cref="P:Infragistics.Windows.Controls.SpecialFilterOperands.Blanks"/>, <see cref="P:Infragistics.Windows.Controls.SpecialFilterOperands.Quarter1"/>, 
            <see cref="P:Infragistics.Windows.Controls.SpecialFilterOperands.AboveAverage"/>
            etc... which can be used to specify the operand value on <see cref="T:Infragistics.Windows.Controls.ComparisonCondition"/>.
            </para>
            <para class="body">
            You can define a custom operand by deriving a class from this class and registering an instance with the 
            <see cref="T:Infragistics.Windows.Controls.SpecialFilterOperands"/>' <see cref="M:Infragistics.Windows.Controls.SpecialFilterOperands.Register(Infragistics.Windows.Controls.SpecialFilterOperandBase)"/> method. This will automatically 
            integrate your custom operand with controls/features that are aware of the special filter operands (like the 
            data presenter's record filtering functionality). Also you can replace built-in special operands with your own
            custom operand by unregistering the built-in operand and registering your instance of the operand with the same
            name.
            </para>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Controls.SpecialFilterOperands"/>
            <seealso cref="M:Infragistics.Windows.Controls.SpecialFilterOperands.Register(Infragistics.Windows.Controls.SpecialFilterOperandBase)"/>
            <seealso cref="M:Infragistics.Windows.Controls.SpecialFilterOperands.Unregister(Infragistics.Windows.Controls.SpecialFilterOperandBase)"/>
            <seealso cref="P:Infragistics.Windows.Controls.SpecialFilterOperands.Blanks"/>
            <seealso cref="P:Infragistics.Windows.Controls.SpecialFilterOperands.NonBlanks"/>
            <seealso cref="P:Infragistics.Windows.Controls.SpecialFilterOperands.AboveAverage"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.SpecialFilterOperandBase.#ctor">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Windows.Controls.SpecialFilterOperandBase"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.SpecialFilterOperandBase.Equals(System.Object)">
            <summary>
            Overridden. Checks to see if the specified object is an operand and is equal to this operand.
            </summary>
            <param name="obj">Operand object to test for equality.</param>
            <returns>True if the specified object is equal to this object, false otherwise.</returns>
            <remarks>
            <para class="body">
            <b>Note:</b> If you need to provide your own implementation for Equals for a derived class, please
            use the <see cref="M:Infragistics.Windows.Controls.SpecialFilterOperandBase.EqualsOverride(Infragistics.Windows.Controls.SpecialFilterOperandBase)"/> method.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Controls.SpecialFilterOperandBase.GetHashCode">
            <summary>
            Overridden. Returns the hash code.
            </summary>
            <returns>Hash code of the object.</returns>
            <remarks>
            <para class="body">
            <b>Note:</b> If you override <see cref="M:Infragistics.Windows.Controls.SpecialFilterOperandBase.EqualsOverride(Infragistics.Windows.Controls.SpecialFilterOperandBase)"/> then also override this method
            and return an appropriate hash code.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Controls.SpecialFilterOperandBase.ToString">
            <summary>
            Returns a string representation of the operand.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.SpecialFilterOperandBase.EqualsOverride(Infragistics.Windows.Controls.SpecialFilterOperandBase)">
            <summary>
            Checks to see if the specified operand is equal to this operand. This method is called
            by the Equals method.
            </summary>
            <param name="operand">Operand to check for equality.</param>
            <returns>True if the specified operand is equal to this, false otherwise.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.SpecialFilterOperandBase.IsMatch(Infragistics.Windows.Controls.ComparisonOperator,System.Object,Infragistics.Windows.Controls.ConditionEvaluationContext)">
            <summary>
            Returns true if the specified value matches the condition. False otherwise.
            </summary>
            <param name="comparisonOperator">The operand is being evaluated against this comparison operator.</param>
            <param name="value">Value to test.</param>
            <param name="context">Context information associated with the the 'value' being tested for match.</param>
            <returns>True if the value passes the condition, false otherwise.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.SpecialFilterOperandBase.SupportsOperator(Infragistics.Windows.Controls.ComparisonOperator)">
            <summary>
            Indicates whether this operand supports specified comparison operator.
            </summary>
            <param name="comparisonOperator">Comparison operator to check for support.</param>
            <returns>Returns True if the specified operator is supported by this operand, False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.SpecialFilterOperandBase.SupportsDataType(System.Type)">
            <summary>
            Indicates whether this operand supports data values of specified type.
            </summary>
            <param name="type">Type of data values to check for support.</param>
            <returns>Returns True if the data values of the specified type are supported, False otherwise.</returns>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperandBase.Description">
            <summary>
            Description of the operand. By default this will be displayed in the tooltip of the operand.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperandBase.DisplayContent">
            <summary>
            This value (can be text) that will be used in the UI to represent this operand.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperandBase.Name">
            <summary>
            Name of the operand. Used to uniquely identify the operand.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperandBase.UsesAllValues">
            <summary>
            Indicates whether this operand uses context’s AllValues property to evaluate the condition. 
            In effect, it indicates whether condition evaluation of a value depends on other values in 
            the set of values being evaluated.
            </summary>
            <remarks>
            <para class="body">
            <b>UsesAllValues</b> property indicates whether this operand uses context’s 
            <see cref="P:Infragistics.Windows.Controls.ConditionEvaluationContext.AllValues"/> property to evaluate the condition. 
            In effect, it indicates whether condition evaluation of a value depends on other values in 
            the set of values being evaluated. For example, in data presenter, ‘AboveAverage’ condition 
            would be a condition where to determine whether a value is above the average, all values of 
            the field need to be taken into account. This also indicates to the data presenter that when a 
            field’s value is changed in any record, all records need to reevaluate the condition in order 
            to reflect correct results based on the new average of the field values.
            </para>
            <para class="body">
            <b>Note</b> that for such operands that use <see cref="P:Infragistics.Windows.Controls.ConditionEvaluationContext.AllValues"/>
            to calculate an attribute of the set of values (for example, average), you can cache the 
            calculated value using the <see cref="P:Infragistics.Windows.Controls.ConditionEvaluationContext.UserCache"/> property. This
            property will return the value that it's set to for evaluation of the rest of the values in
            the set of values (for example, all field values in a record collection in data presenter).
            This way you can avoid re-calculating the same value again. Note that the caller (data presenter)
            will clear out the cached value once all the values are evaluated. Also note that when the
            data changes, the caller (data presenter) will clear the user cache and therefore you don't
            need to keep track of data changes.
            </para>
            </remarks>
            <seealso cref="P:Infragistics.Windows.Controls.ConditionEvaluationContext.AllValues"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.SpecialFilterOperandFactory.IGOperand.#ctor(System.String,System.String)">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Windows.Controls.SpecialFilterOperandFactory.IGOperand"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.SpecialFilterOperandFactory.IGOperand.#ctor(System.String)">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Windows.Controls.SpecialFilterOperandFactory.IGOperand"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.SpecialFilterOperandFactory.IGOperand.EqualsOverride(Infragistics.Windows.Controls.SpecialFilterOperandBase)">
            <summary>
            Checks to see if the specified operand is equal to this operand. This method is called
            by the Equals method.
            </summary>
            <param name="operand">Operand to check for equality.</param>
            <returns>True if the specified operand is equal to this, false otherwise.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.SpecialFilterOperandFactory.IGOperand.GetHashCode">
            <summary>
            Overridden. Returns the hash code.
            </summary>
            <returns>Hash code of the object.</returns>
            <remarks>
            <para class="body">
            <b>Note:</b> If you override <see cref="M:Infragistics.Windows.Controls.SpecialFilterOperandFactory.IGOperand.EqualsOverride(Infragistics.Windows.Controls.SpecialFilterOperandBase)"/> then also override this method
            and return an appropriate hash code.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperandFactory.IGOperand.UsesAllValues">
            <summary>
            Overridden. Implementation returns false.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.SpecialFilterOperandFactory.BlanksOperand">
            <summary>
            Special operand for "Blanks" and "NonBlanks" filter operations.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.SpecialFilterOperandFactory.BlanksOperand.#ctor(System.Boolean)">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Windows.Controls.SpecialFilterOperandFactory.BlanksOperand"/>.
            </summary>
            <param name="nonBlanks">Specifies whether to match blanks or non-blanks.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.SpecialFilterOperandFactory.BlanksOperand.EqualsOverride(Infragistics.Windows.Controls.SpecialFilterOperandBase)">
            <summary>
            Checks to see if the specified operand is equal to this operand. This method is called
            by the Equals method.
            </summary>
            <param name="operand">Operand to check for equality.</param>
            <returns>True if the specified operand is equal to this, false otherwise.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.SpecialFilterOperandFactory.BlanksOperand.GetHashCode">
            <summary>
            Overridden. Returns the hash code.
            </summary>
            <returns>Hash code of the object.</returns>
            <remarks>
            <para class="body">
            <b>Note:</b> If you override <see cref="M:Infragistics.Windows.Controls.SpecialFilterOperandFactory.BlanksOperand.EqualsOverride(Infragistics.Windows.Controls.SpecialFilterOperandBase)"/> then also override this method
            and return an appropriate hash code.
            </para>
            </remarks>
        </member>
        <member name="T:Infragistics.Windows.Controls.SpecialFilterOperandFactory.BlanksOperand.SerializationInfo">
            <summary>
            Provides necessary information to the ObjectSerializerBase for serializing and deserializing a ConditionGroup.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.SpecialFilterOperandFactory.AverageOperand">
            <summary>
            Special operand for filtering values that are above or below average (but not equal).
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.SpecialFilterOperandFactory.AverageOperand.#ctor(System.Boolean)">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Windows.Controls.SpecialFilterOperandFactory.AverageOperand"/>.
            </summary>
            <param name="aboveAverage">If true then matches values that are above average, 
            otherwise matches values that are below average.</param>
        </member>
        <member name="T:Infragistics.Windows.Controls.SpecialFilterOperandFactory.AverageOperand.SerializationInfo">
            <summary>
            Provides necessary information to the ObjectSerializerBase for serializing and deserializing a ConditionGroup.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.SpecialFilterOperandFactory.TopValuesOperand">
            <summary>
            Special operand for filtering values that are among top specified number of values
            or top specified percentage of values.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.SpecialFilterOperandFactory.TopValuesOperand.#ctor(System.String,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Windows.Controls.SpecialFilterOperandFactory.TopValuesOperand"/>.
            </summary>
            <param name="name">Name of the operand.</param>
            <param name="topNumber">Specifies either the top absolute number of values or top percentage of values depending on 'percentage' parameter.</param>
            <param name="percentage">If true then values that are among specified top percentage are filtered. Otherwise 
            the 'topNumber' parameter specifies the absoulte number of values.</param>
            <param name="ascendingOrder">If true then top-most (largest) values will be returned, otherwise bottom-most (smallest) values will be returned.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.SpecialFilterOperandFactory.TopValuesOperand.EqualsOverride(Infragistics.Windows.Controls.SpecialFilterOperandBase)">
            <summary>
            Checks to see if the specified operand is equal to this operand. This method is called
            by the Equals method.
            </summary>
            <param name="operand">Operand to check for equality.</param>
            <returns>True if the specified operand is equal to this, false otherwise.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.SpecialFilterOperandFactory.TopValuesOperand.GetHashCode">
            <summary>
            Overridden. Returns the hash code.
            </summary>
            <returns>Hash code of the object.</returns>
            <remarks>
            <para class="body">
            <b>Note:</b> If you override <see cref="M:Infragistics.Windows.Controls.SpecialFilterOperandFactory.TopValuesOperand.EqualsOverride(Infragistics.Windows.Controls.SpecialFilterOperandBase)"/> then also override this method
            and return an appropriate hash code.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Controls.SpecialFilterOperandFactory.TopValuesOperand.CreateHelper(System.String,System.Double,System.Boolean,System.Boolean,System.Exception@)">
            <summary>
            Creates a new instance of TopValuesOperand if the specified parameters are valid. Otherwise
            returns null and error is set to appropriate error message.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.SpecialFilterOperandFactory.TopValuesOperand.ValidateParams(System.Double,System.Boolean,System.Boolean,System.Exception@)">
            <summary>
            Validates arguements to the constructor.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.SpecialFilterOperandFactory.TopValuesOperand.SerializationInfo">
            <summary>
            Provides necessary information to the ObjectSerializerBase for serializing and deserializing a ConditionGroup.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.SpecialFilterOperandFactory.RelativeDateOperand.EqualsOverride(Infragistics.Windows.Controls.SpecialFilterOperandBase)">
            <summary>
            Checks to see if the specified operand is equal to this operand. This method is called
            by the Equals method.
            </summary>
            <param name="operand">Operand to check for equality.</param>
            <returns>True if the specified operand is equal to this, false otherwise.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.SpecialFilterOperandFactory.RelativeDateOperand.GetHashCode">
            <summary>
            Overridden. Returns the hash code.
            </summary>
            <returns>Hash code of the object.</returns>
            <remarks>
            <para class="body">
            <b>Note:</b> If you override <see cref="M:Infragistics.Windows.Controls.SpecialFilterOperandFactory.RelativeDateOperand.EqualsOverride(Infragistics.Windows.Controls.SpecialFilterOperandBase)"/> then also override this method
            and return an appropriate hash code.
            </para>
            </remarks>
        </member>
        <member name="T:Infragistics.Windows.Controls.SpecialFilterOperandFactory.RelativeDateOperand.SerializationInfo">
            <summary>
            Provides necessary information to the ObjectSerializerBase for serializing and deserializing a ConditionGroup.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.SpecialFilterOperandFactory.MonthOperand.EqualsOverride(Infragistics.Windows.Controls.SpecialFilterOperandBase)">
            <summary>
            Checks to see if the specified operand is equal to this operand. This method is called
            by the Equals method.
            </summary>
            <param name="operand">Operand to check for equality.</param>
            <returns>True if the specified operand is equal to this, false otherwise.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.SpecialFilterOperandFactory.MonthOperand.GetHashCode">
            <summary>
            Overridden. Returns the hash code.
            </summary>
            <returns>Hash code of the object.</returns>
            <remarks>
            <para class="body">
            <b>Note:</b> If you override <see cref="M:Infragistics.Windows.Controls.SpecialFilterOperandFactory.MonthOperand.EqualsOverride(Infragistics.Windows.Controls.SpecialFilterOperandBase)"/> then also override this method
            and return an appropriate hash code.
            </para>
            </remarks>
        </member>
        <member name="T:Infragistics.Windows.Controls.SpecialFilterOperandFactory.MonthOperand.SerializationInfo">
            <summary>
            Provides necessary information to the ObjectSerializerBase for serializing and deserializing a ConditionGroup.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.SpecialFilterOperandFactory.QuarterOperand.EqualsOverride(Infragistics.Windows.Controls.SpecialFilterOperandBase)">
            <summary>
            Checks to see if the specified operand is equal to this operand. This method is called
            by the Equals method.
            </summary>
            <param name="operand">Operand to check for equality.</param>
            <returns>True if the specified operand is equal to this, false otherwise.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.SpecialFilterOperandFactory.QuarterOperand.GetHashCode">
            <summary>
            Overridden. Returns the hash code.
            </summary>
            <returns>Hash code of the object.</returns>
            <remarks>
            <para class="body">
            <b>Note:</b> If you override <see cref="M:Infragistics.Windows.Controls.SpecialFilterOperandFactory.QuarterOperand.EqualsOverride(Infragistics.Windows.Controls.SpecialFilterOperandBase)"/> then also override this method
            and return an appropriate hash code.
            </para>
            </remarks>
        </member>
        <member name="T:Infragistics.Windows.Controls.SpecialFilterOperandFactory.QuarterOperand.SerializationInfo">
            <summary>
            Provides necessary information to the ObjectSerializerBase for serializing and deserializing a ConditionGroup.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.SpecialFilterOperands">
            <summary>
            Maintains a registry of special filter operands and also exposes built-in special filter operands as static properties.
            </summary>
            <remarks>
            <para class="body">
            <b>SpecialFilterOperands</b> maintains a registry of special operands. It exposes built-in special operands via static 
            properties, like <see cref="P:Infragistics.Windows.Controls.SpecialFilterOperands.Blanks"/>, <see cref="P:Infragistics.Windows.Controls.SpecialFilterOperands.Quarter1"/>,
            <seealso cref="P:Infragistics.Windows.Controls.SpecialFilterOperands.AboveAverage"/> etc...
            </para>
            <para class="body">
            You can use <b>SpecialFilterOperands</b> class to <see cref="M:Infragistics.Windows.Controls.SpecialFilterOperands.Register(Infragistics.Windows.Controls.SpecialFilterOperandBase)"/> and 
            <see cref="M:Infragistics.Windows.Controls.SpecialFilterOperands.Unregister(Infragistics.Windows.Controls.SpecialFilterOperandBase)"/> custom as well as built-in special filter operands.
            You can replace the logic for a built-in operand by un-registering it and then registering your own
            custom special operand instance with the same name. Controls and features aware of special filter operands 
            (like the record filtering functionality of the data presenter) will automatically integrate the registered
            special operands with their UI.
            </para>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Controls.SpecialFilterOperandBase"/>
            <seealso cref="M:Infragistics.Windows.Controls.SpecialFilterOperands.Register(Infragistics.Windows.Controls.SpecialFilterOperandBase)"/>
            <seealso cref="M:Infragistics.Windows.Controls.SpecialFilterOperands.Unregister(Infragistics.Windows.Controls.SpecialFilterOperandBase)"/>
            <seealso cref="M:Infragistics.Windows.Controls.SpecialFilterOperands.GetRegisteredOperand(System.String)"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.SpecialFilterOperands.#ctor">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Windows.Controls.SpecialFilterOperands"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.SpecialFilterOperands.GetSerializationValue(Infragistics.Windows.Controls.SpecialFilterOperandBase)">
            <summary>
            If the specified operand is not one of our operands that we know about serializing, then
            we will create a wrapper that will serialize out the name of the operand. This will 
            anyone who registers custom operands don't have to also write logic to serialize them
            out.
            </summary>
            <param name="source">Source operand for which to create wrapper.</param>
            <returns>If source is one of our operands, then returns null. Otherwise creates a wrapper object.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.SpecialFilterOperands.RegisterSerializationInfos(Infragistics.Windows.Internal.ObjectSerializerBase)">
            <summary>
            Registers serialization information for special operands defined in this factory.
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:Infragistics.Windows.Controls.SpecialFilterOperands.GetBuiltInOperand(System.String)">
            <summary>
            Gets the built-in special filter operand of specified name.
            </summary>
            <param name="name">Name of the special filter operand.</param>
            <returns>Returns built-in special filter operand of specified name.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.SpecialFilterOperands.GetRegisteredOperand(System.String)">
            <summary>
            Returns the registered operand with the specified name. If no operand with the matching name is found, returns null.
            </summary>
            <param name="name">Finds the operand with this name.</param>
            <returns>Returns the found operand, or null if no operand with the specified name is found.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.SpecialFilterOperands.GetRegisteredOperands">
            <summary>
            Returns all registered operands.
            </summary>
            <returns>
            Returns all the registered special operands, including the built-in special operands that
            are pre-registered during initialzation.
            </returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.SpecialFilterOperands.GetRegisteredOperands(System.Type)">
            <summary>
            Returns all registered operands that support the specified data type.
            </summary>
            <returns>
            Returns all the registered special operands, including the built-in special operands that
            are pre-registered during initialzation.
            </returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.SpecialFilterOperands.Register(Infragistics.Windows.Controls.SpecialFilterOperandBase)">
            <summary>
            Registers a user defined special operand. This method can be used to re-register built-in special 
            operand as well, in case it was un-registered with Unregister method.
            </summary>
            <param name="operand">Operand to register.</param>
            <seealso cref="M:Infragistics.Windows.Controls.SpecialFilterOperands.Unregister(Infragistics.Windows.Controls.SpecialFilterOperandBase)"/>
            <seealso cref="M:Infragistics.Windows.Controls.SpecialFilterOperands.GetRegisteredOperand(System.String)"/>
            <seealso cref="M:Infragistics.Windows.Controls.SpecialFilterOperands.GetRegisteredOperands"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.SpecialFilterOperands.Unregister(Infragistics.Windows.Controls.SpecialFilterOperandBase)">
            <summary>
            Un-registers a previously registered operand. Built-in operands can also be un-registered.
            </summary>
            <param name="operand">Operand to unregister.</param>
            <seealso cref="M:Infragistics.Windows.Controls.SpecialFilterOperands.Register(Infragistics.Windows.Controls.SpecialFilterOperandBase)"/>
            <seealso cref="M:Infragistics.Windows.Controls.SpecialFilterOperands.GetRegisteredOperand(System.String)"/>
            <seealso cref="M:Infragistics.Windows.Controls.SpecialFilterOperands.GetRegisteredOperands"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperands.Blanks">
            <summary>
            An operand used to determine if a specified value is blank ('null', 'dbnull' or empty string).
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperands.NonBlanks">
            <summary>
            An operand used to determine if a specified value is not blank (anything that's not 'null', 'dbnull' or empty string).
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperands.AboveAverage">
            <summary>
            An operand used to determine if a specified value is above the average of the set 
            of values of which the value being tested is a member value.
            </summary>
            <remarks>
            <para class="body">
            <b>AboveAverage</b> operand is used to determine if a specified value is above 
            the average of the set of values of which the value being tested is a member value.
            In the XamDataPresenter, the set of values is the values associated with the 
            record collection that the record value being tested belongs to.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperands.BelowAverage">
            <summary>
            An operand used to determine if a specified value is below the average of the set 
            of values of which the value being tested is a member value.
            </summary>
            <remarks>
            <para class="body">
            <b>BelowAverage</b> operand is used to determine if a specified value is above 
            the average of the set of values of which the value being tested is a member value.
            In the XamDataPresenter, the set of values is the values associated with the 
            record collection that the record value being tested belongs to.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperands.Top10">
            <summary>
            An operand used to determine if a specified value is one of the top 10 values
            in the set of values that the value being tested is a member of.
            </summary>
            <remarks>
            <para class="body">
            <b>Top10</b> operand used to determine if a specified value is one of 
            the top 10 values in the set of values that the value being tested is a member 
            of. In the XamDataPresenter, the set of values is the values associated with 
            the record collection that the record value being tested belongs to.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperands.Top10Percentage">
            <summary>
            An operand used to determine if a specified value is one of the top 10 percent of
            the values in the set of values that the value being tested is a member of.
            </summary>
            <remarks>
            <para class="body">
            <b>Top10Percentage</b> An operand used to determine if a specified value is one 
            of the top 10 percent of the values in the set of values that the value being 
            tested is a member of. In the XamDataPresenter, the set of values is the values 
            associated with the record collection that the record value being tested 
            belongs to.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperands.Bottom10">
            <summary>
            An operand used to determine if a specified value is one of the bottom 10 values
            in the set of values that the value being tested is a member of.
            </summary>
            <remarks>
            <para class="body">
            <b>Bottom10</b> operand used to determine if a specified value is one of 
            the bottom 10 values in the set of values that the value being tested is a member 
            of. In the XamDataPresenter, the set of values is the values associated with 
            the record collection that the record value being tested belongs to.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperands.Bottom10Percentage">
            <summary>
            An operand used to determine if a specified value is one of the bottom 10 percent of
            the values in the set of values that the value being tested is a member of.
            </summary>
            <remarks>
            <para class="body">
            <b>Bottom10Percentage</b> An operand used to determine if a specified value is one 
            of the bottom 10 percent of the values in the set of values that the value being 
            tested is a member of. In the XamDataPresenter, the set of values is the values 
            associated with the record collection that the record value being tested 
            belongs to.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperands.Tomorrow">
            <summary>
            An operand used to determine if a specified value is equal to tomorrow's date.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperands.Today">
            <summary>
            An operand used to determine if a specified value is equal to today's date.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperands.Yesterday">
            <summary>
            An operand used to determine if a specified value is equal to yesterday's date.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperands.NextWeek">
            <summary>
            An operand used to determine if a specified value is between the first and last days of next week.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperands.ThisWeek">
            <summary>
            An operand used to determine if a specified value is between the first and last days of this week.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperands.LastWeek">
            <summary>
            An operand used to determine if a specified value is between the first and last days of last week.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperands.NextMonth">
            <summary>
            An operand used to determine if a specified value is between the first and last days of next month.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperands.ThisMonth">
            <summary>
            An operand used to determine if a specified value is between the first and last days of this month.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperands.LastMonth">
            <summary>
            An operand used to determine if a specified value is between the first and last days of last month.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperands.NextQuarter">
            <summary>
            An operand used to determine if a specified value is between the first and last days of next quarter.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperands.ThisQuarter">
            <summary>
            An operand used to determine if a specified value is between the first and last days of the current quarter.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperands.LastQuarter">
            <summary>
            An operand used to determine if a specified value is between the first and last days of the previous quarter.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperands.NextYear">
            <summary>
            An operand used to determine if a specified value is between the first and last days of next year.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperands.ThisYear">
            <summary>
            An operand used to determine if a specified value is between the first and last days of the current year.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperands.LastYear">
            <summary>
            An operand used to determine if a specified value is between the first and last days of the previous year.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperands.YearToDate">
            <summary>
            An operand used to determine if a specified value is between the first day of the year and the current date.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperands.Quarter1">
            <summary>
            An operand used to determine if a specified value falls within the first 3 months of the calendar year.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperands.Quarter2">
            <summary>
            An operand used to determine if a specified value falls within the second 3 months of the calendar year.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperands.Quarter3">
            <summary>
            An operand used to determine if a specified value falls within the third 3 months of the calendar year.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperands.Quarter4">
            <summary>
            An operand used to determine if a specified value falls within the last 3 months of the calendar year.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperands.January">
            <summary>
            An operand representing the first month of the year.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperands.February">
            <summary>
            An operand representing the second month of the year.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperands.March">
            <summary>
            An operand representing the third month of the year.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperands.April">
            <summary>
            An operand representing the fourth month of the year.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperands.May">
            <summary>
            An operand representing the fifth month of the year.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperands.June">
            <summary>
            An operand representing the sixth month of the year.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperands.July">
            <summary>
            An operand representing the seventh month of the year.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperands.August">
            <summary>
            An operand representing the eighth month of the year.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperands.September">
            <summary>
            An operand representing the ninth month of the year.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperands.October">
            <summary>
            An operand representing the tenth month of the year.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperands.November">
            <summary>
            An operand representing the eleventh month of the year.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperands.December">
            <summary>
            An operand representing the last month of the year.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SpecialFilterOperands.Version">
            <summary>
            A numer that's incremented every time an operand is registered or un-registered.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.SpecialFilterOperands.OperandWrapper.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="operandName">Name of the operand that will be wrapped by this wrapper.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.SpecialFilterOperands.OperandWrapper.EqualsOverride(Infragistics.Windows.Controls.SpecialFilterOperandBase)">
            <summary>
            Overridden.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.SpecialFilterOperands.OperandWrapper.GetHashCode">
            <summary>
            Overridden. Returns the hash code.
            </summary>
            <returns>Hash code of the object.</returns>
            <remarks>
            <para class="body">
            <b>Note:</b> If you override <see cref="M:Infragistics.Windows.Controls.SpecialFilterOperands.OperandWrapper.EqualsOverride(Infragistics.Windows.Controls.SpecialFilterOperandBase)"/> then also override this method
            and return an appropriate hash code.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Controls.SpecialFilterOperands.OperandWrapper.ToString">
            <summary>
            Returns a string representation of the operand.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.SpecialFilterOperands.OperandWrapper.OperandWrapperSerializationInfo">
            <summary>
            Provides necessary information to the ObjectSerializerBase for serializing and deserializing a ConditionGroup.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.ComparisonOperator">
            <summary>
            Enum for specifying the comparison operator.
            </summary>
            <remarks>
            Used for specifying <see cref="T:Infragistics.Windows.Controls.ComparisonCondition"/>'s <see cref="P:Infragistics.Windows.Controls.ComparisonCondition.Operator"/> property.
            </remarks>
            <seealso cref="P:Infragistics.Windows.Controls.ComparisonCondition.Operator"/>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperator.Equals">
            <summary>
            Tests for two values being equal.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperator.NotEquals">
            <summary>
            Tests for two values being not equal.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperator.LessThan">
            <summary>
            Tests for the value being less than the comparison value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperator.LessThanOrEqualTo">
            <summary>
            Tests for the value being less than or equal to the comparison value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperator.GreaterThan">
            <summary>
            Tests for the value being greater than the comparison value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperator.GreaterThanOrEqualTo">
            <summary>
            Tests for the value being greater than or equal to the comparison value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperator.Contains">
            <summary>
            Tests to see if the value contains the comparison value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperator.DoesNotContain">
            <summary>
            Complement of Contains.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperator.Like">
            <summary>
            Will do a wild-card comparison of the value to the comparison value
            where the comparison value is the wild card string.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperator.NotLike">
            <summary>
            Complement of Like.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperator.Match">
            <summary>
            Will do a regular expression comparison of the value to the comparison
            value where the comparison value is the regular expression string.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperator.DoesNotMatch">
            <summary>
            Complement of Match.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperator.StartsWith">
            <summary>
            Tests to see if the value starts with the comparison value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperator.DoesNotStartWith">
            <summary>
            Complement of StartsWith.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperator.EndsWith">
            <summary>
            Tests to see if the value ends with the comparison value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperator.DoesNotEndWith">
            <summary>
            Complement of EndsWith.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperator.Top">
            <summary>
            Tests to see if the value is in the top 'X' values where 'X' is specified in the operand. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperator.Bottom">
            <summary>
            Tests to see if the value is in the bottom 'X' values where 'X' is specified in the operand.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperator.TopPercentile">
            <summary>
            Tests to see if the value is in the top 'X' percentile of values where 'X' is specified in the operand. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperator.BottomPercentile">
            <summary>
            Tests to see if the value is in the bottom 'X' percentile of values where 'X' is specified in the operand. 
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.ComparisonOperatorFlags">
            <summary>
            Flagged enum that mirrors the values of non-flagged <see cref="T:Infragistics.Windows.Controls.ComparisonOperator"/> enum. This is used to specify
            properties like data presenter's FieldSettings's <b>FilterOperatorDropDownItems</b>.
            </summary>
            <remarks>
            <para class="body">
            <b>ComparisonOperatorFlags</b> is a flagged enum with values that mirror the values of 
            non-flagged <see cref="T:Infragistics.Windows.Controls.ComparisonOperator"/> enum. This is used to specify
            properties like data presenter's FieldSettings's <b>FilterOperatorDropDownItems</b>.
            </para>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Controls.ComparisonOperator"/>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorFlags.Equals">
            <summary>
            Corresponds to the <see cref="T:Infragistics.Windows.Controls.ComparisonOperator"/> <b>Equals</b>.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorFlags.NotEquals">
            <summary>
            Corresponds to the <see cref="T:Infragistics.Windows.Controls.ComparisonOperator"/> <b>NotEquals</b>.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorFlags.LessThan">
            <summary>
            Corresponds to the <see cref="T:Infragistics.Windows.Controls.ComparisonOperator"/> <b>LessThan</b>.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorFlags.LessThanOrEqualsTo">
            <summary>
            Corresponds to the <see cref="T:Infragistics.Windows.Controls.ComparisonOperator"/> <b>LessThanOrEqualTo</b>.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorFlags.GreaterThan">
            <summary>
            Corresponds to the <see cref="T:Infragistics.Windows.Controls.ComparisonOperator"/> <b>GreaterThan</b>.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorFlags.GreaterThanOrEqualsTo">
            <summary>
            Corresponds to the <see cref="T:Infragistics.Windows.Controls.ComparisonOperator"/> <b>GreaterThanOrEqualTo</b>.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorFlags.Contains">
            <summary>
            Corresponds to the <see cref="T:Infragistics.Windows.Controls.ComparisonOperator"/> <b>Contains</b>.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorFlags.DoesNotContain">
            <summary>
            Corresponds to the <see cref="T:Infragistics.Windows.Controls.ComparisonOperator"/> <b>DoesNotContain</b>.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorFlags.Like">
            <summary>
            Corresponds to the <see cref="T:Infragistics.Windows.Controls.ComparisonOperator"/> <b>Like</b>.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorFlags.NotLike">
            <summary>
            Corresponds to the <see cref="T:Infragistics.Windows.Controls.ComparisonOperator"/> <b>NotLike</b>.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorFlags.Match">
            <summary>
            Corresponds to the <see cref="T:Infragistics.Windows.Controls.ComparisonOperator"/> <b>Match</b>.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorFlags.DoesNotMatch">
            <summary>
            Corresponds to the <see cref="T:Infragistics.Windows.Controls.ComparisonOperator"/> <b>DoesNotMatch</b>.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorFlags.StartsWith">
            <summary>
            Corresponds to the <see cref="T:Infragistics.Windows.Controls.ComparisonOperator"/> <b>StartsWith</b>.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorFlags.DoesNotStartWith">
            <summary>
            Corresponds to the <see cref="T:Infragistics.Windows.Controls.ComparisonOperator"/> <b>DoesNotStartWith</b>.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorFlags.EndsWith">
            <summary>
            Corresponds to the <see cref="T:Infragistics.Windows.Controls.ComparisonOperator"/> <b>EndsWith</b>.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorFlags.DoesNotEndWith">
            <summary>
            Corresponds to the <see cref="T:Infragistics.Windows.Controls.ComparisonOperator"/> <b>DoesNotEndWith</b>.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorFlags.Top">
            <summary>
            Corresponds to the <see cref="T:Infragistics.Windows.Controls.ComparisonOperator"/> <b>Top</b>.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorFlags.Bottom">
            <summary>
            Corresponds to the <see cref="T:Infragistics.Windows.Controls.ComparisonOperator"/> <b>Bottom</b>.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorFlags.TopPercentile">
            <summary>
            Corresponds to the <see cref="T:Infragistics.Windows.Controls.ComparisonOperator"/> <b>TopPercentile</b>.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorFlags.BottomPercentile">
            <summary>
            Corresponds to the <see cref="T:Infragistics.Windows.Controls.ComparisonOperator"/> <b>BottomPercentile</b>.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ComparisonOperatorFlags.All">
            <summary>
            All operators.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.LogicalOperator">
            <summary>
            Enum for specifying logical operator that should be used to combine multiple conditions.
            </summary>
            <remarks>
            <para class="body">
            <b>LogicalOperator</b> enum is used for specifying <see cref="T:Infragistics.Windows.Controls.ConditionGroup"/>'s 
            <see cref="P:Infragistics.Windows.Controls.ConditionGroup.LogicalOperator"/> that will be used to combine evaluation 
            results of multiple conditions.
            </para>
            </remarks>
            <seealso cref="P:Infragistics.Windows.Controls.ConditionGroup.LogicalOperator"/>
        </member>
        <member name="F:Infragistics.Windows.Controls.LogicalOperator.And">
            <summary>
            <b>'And'</b> logical operator. In order for a successful match, all conditions have
            to pass.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.LogicalOperator.Or">
            <summary>
            <b>'Or'</b> logical operator. In order for a successful match, at least one of the 
            conditions have to pass.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.FormattableToStringConverter">
            <summary>
            Value converter used to converter objects that implement <see cref="T:System.IFormattable"/> 
            to a string using the <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/> method 
            and the format string passed as the parameter for the conversion call.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.FormattableToStringConverter.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Controls.FormattableToStringConverter"/>
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.FormattableToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a given <see cref="T:System.IFormattable"/> value to a string using the specified parameter as the format string
            </summary>
            <param name="value">An object that implements <see cref="T:System.IFormattable"/></param>
            <param name="targetType">The type to which the converter must be convert the value. This parameter is not used. A String value is always returned</param>
            <param name="parameter">The format string passed to the <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/> method.</param>
            <param name="culture">The culture to use as the IFormatProvider when calling the <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/>.</param>
            <returns><see cref="F:System.Windows.DependencyProperty.UnsetValue"/> if the parameters do not match the required information. Otherwise a string representation of the value using its <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/> method is returned.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.FormattableToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This method is not implemented for this converter.
            </summary>
            <returns><see cref="F:System.Windows.Data.Binding.DoNothing"/> is always returned.</returns>
        </member>
        <member name="T:Infragistics.Windows.Helpers.ActionHistory">
            <summary>
            Maintains an undo/redo history.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Helpers.ActionHistory.NoUndoAction">
            <summary>
            Represents an undo action for an action that cannot be undone.
            </summary>
            <remarks>
            <p class="body">Returning this action from the <see cref="M:Infragistics.Windows.Helpers.ActionHistory.ActionBase.Perform(System.Object)"/> method 
            will clear the undo/redo history but return true to indicate the operation was successful.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Helpers.ActionHistory.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Helpers.ActionHistory"/>
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Helpers.ActionHistory.CanRedo">
            <summary>
            Determines if there is an entry in the redo stack that can be performed.
            </summary>
            <returns>Returns true if there is an redo action on the undo stack and it can be performed.</returns>
        </member>
        <member name="M:Infragistics.Windows.Helpers.ActionHistory.CanUndo">
            <summary>
            Determines if there is an entry in the undo stack that can be performed.
            </summary>
            <returns>Returns true if there is an undo action on the undo stack and it can be performed.</returns>
        </member>
        <member name="M:Infragistics.Windows.Helpers.ActionHistory.Clear">
            <summary>
            Clears all the undo and redo actions.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Helpers.ActionHistory.ClearRedo">
            <summary>
            Removes any redo actions.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Helpers.ActionHistory.ClearUndo">
            <summary>
            Removes all undo actions.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Helpers.ActionHistory.PerformAction(Infragistics.Windows.Helpers.ActionHistory.ActionBase,System.Object)">
            <summary>
            Performs the specified action and adds the resulting undo action into the undo history.
            </summary>
            <param name="action">The action to perform</param>
            <param name="actionContext">The content to provide to the action when it is performed.</param>
            <returns>True if the action was performed; otherwise false is returned.</returns>
        </member>
        <member name="M:Infragistics.Windows.Helpers.ActionHistory.Redo">
            <summary>
            Performs a single redo operation.
            </summary>
            <returns>Returns true if a redo action was performed</returns>
        </member>
        <member name="M:Infragistics.Windows.Helpers.ActionHistory.Undo">
            <summary>
            Performs a single undo operation.
            </summary>
            <returns>True if an undo action was performed.</returns>
        </member>
        <member name="M:Infragistics.Windows.Helpers.ActionHistory.AddUndoAction(Infragistics.Windows.Helpers.ActionHistory.ActionBase)">
            <summary>
            Adds an action to the undo history.
            </summary>
            <param name="action">Action to add to the undo stack</param>
        </member>
        <member name="M:Infragistics.Windows.Helpers.ActionHistory.AddRedoAction(Infragistics.Windows.Helpers.ActionHistory.ActionBase)">
            <summary>
            Adds an action to the redo history.
            </summary>
            <param name="action">Action to add to the redo stack</param>
        </member>
        <member name="M:Infragistics.Windows.Helpers.ActionHistory.GetRedoEnumerator">
            <summary>
            Returns an enumerator used to iterate the actions on the undo stack.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Helpers.ActionHistory.GetUndoEnumerator">
            <summary>
            Returns an enumerator used to iterate the actions on the undo stack.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Helpers.ActionHistory.OnMaxUndoDepthChanged">
            <summary>
            Invoked when the <see cref="P:Infragistics.Windows.Helpers.ActionHistory.MaxUndoDepth"/> has been changed.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Helpers.ActionHistory.PeekRedo">
            <summary>
            Returns the action that will be performed if the <see cref="M:Infragistics.Windows.Helpers.ActionHistory.Redo"/> method is invoked.
            </summary>
            <returns>The next action to redo or null if there are no actions to redo.</returns>
        </member>
        <member name="M:Infragistics.Windows.Helpers.ActionHistory.PeekUndo">
            <summary>
            Returns the action that will be performed if the <see cref="M:Infragistics.Windows.Helpers.ActionHistory.Undo"/> method is invoked.
            </summary>
            <returns>The next action to undo or null if there are no actions to undo.</returns>
        </member>
        <member name="P:Infragistics.Windows.Helpers.ActionHistory.IsPerformingAction">
            <summary>
            Returns a boolean indicating if the history is currently performing an action.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Helpers.ActionHistory.UndoContext">
            <summary>
            The content to use when performing an undo action.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Helpers.ActionHistory.RedoContext">
            <summary>
            The context to use when performing a redo action.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Helpers.ActionHistory.MaxUndoDepth">
            <summary>
            The maximum number of undo items to maintain.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Helpers.ActionHistory.ActionBase">
            <summary>
            Base class that represents a single action to perform.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Helpers.ActionHistory.ActionBase.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Helpers.ActionHistory.ActionBase"/>
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Helpers.ActionHistory.ActionBase.CanPerform(System.Object)">
            <summary>
            Returns true if this action can be performed. Note that even if this method returns true, the Perform could fail.
            </summary>
            <param name="context">This is an object that is used to provides additional information to the action</param>
            <returns>Returns true if the action can be performed; ptherwise false is returned.</returns>
        </member>
        <member name="M:Infragistics.Windows.Helpers.ActionHistory.ActionBase.Perform(System.Object)">
            <summary>
            Performs the action. If successful in performing the action then returns an action 
            that can undo the action performed by this action. If failure occurs then returns
            null.
            </summary>
            <param name="context">Opaque piece of data that the derived action class can use to determine what is acting upon. Note that the
            derived classes may require this parameter to be an instance of a specific class.</param>
            <returns>Returns an action that can be used to undo the results of this action. If the action was performed but cannot be undone then <see cref="F:Infragistics.Windows.Helpers.ActionHistory.NoUndoAction"/> should be returned. If the action could not be performed then null should be returned.</returns>
        </member>
        <member name="T:Infragistics.Windows.Helpers.BindingListChangedEventManager">
            <summary>
            Class used to support weak event listening for the IBindingList.ListChanged event
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Helpers.BindingListChangedEventManager.AddListener(System.ComponentModel.IBindingList,System.Windows.IWeakEventListener)">
            <summary>
            Static method used to add a listener to a source for the event.
            </summary>
            <param name="bindingList">The source of the event.</param>
            <param name="listener">An object that implements the IWeakEventListener interface to receive the event.</param>
        </member>
        <member name="M:Infragistics.Windows.Helpers.BindingListChangedEventManager.RemoveListener(System.ComponentModel.IBindingList,System.Windows.IWeakEventListener)">
            <summary>
            Static method used to remove a listener to a source for the event.
            </summary>
            <param name="bindingList">The source of the event.</param>
            <param name="listener">An object that implements the IWeakEventListener interface to receive the event.</param>
        </member>
        <member name="M:Infragistics.Windows.Helpers.BindingListChangedEventManager.StartListening(System.Object)">
            <summary>
            Called to wire up the underlying event.
            </summary>
            <param name="source">The source of the event</param>
        </member>
        <member name="M:Infragistics.Windows.Helpers.BindingListChangedEventManager.StopListening(System.Object)">
            <summary>
            Called to un-wire the underlying event.
            </summary>
            <param name="source">The source of the event</param>
        </member>
        <member name="T:Infragistics.Windows.Helpers.ClassComparer`1">
            <summary>
            Base class for a comparer that compares class type objects and performs the necessary null checks before calling the actual comparison routine.
            </summary>
            <typeparam name="T">A reference type that will be compared</typeparam>
        </member>
        <member name="M:Infragistics.Windows.Helpers.ClassComparer`1.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Helpers.ClassComparer`1"/>
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Helpers.ClassComparer`1.CompareOverride(`0,`0)">
            <summary>
            Performs the actual compare of the two non-null instances.
            </summary>
            <param name="x">The first object to compare</param>
            <param name="y">The second object to compare</param>
            <returns>0 if the objects are equal. -1 if the first is less than the second. Otherwise 1 to indicate the second is less than the first.</returns>
        </member>
        <member name="M:Infragistics.Windows.Helpers.ClassComparer`1.Compare(`0,`0)">
            <summary>
            Compares two objects and returns a value indicating if one is greater than, less than or equal to the other.
            </summary>
            <param name="x">The first object to compare</param>
            <param name="y">The second object to compare</param>
            <returns>0 if the objects are equal. -1 if the first is less than the second. Otherwise 1 to indicate the second is less than the first.</returns>
        </member>
        <member name="T:Infragistics.Windows.Helpers.EnumerableObjectWrapper">
            <summary>
            Wraps an object that implements the <see cref="T:System.Collections.IEnumerable"/> interface to expose both its name and its items.
            </summary>
            <remarks>
            <para class="body">This is used by controls like the XamDataGrid when its DataSource is set to a list of lists, e.g. a DataSet.</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Helpers.EnumerableObjectWrapper.#ctor(System.Collections.IEnumerable)">
            <summary>
            Creates a new instance of an <see cref="T:Infragistics.Windows.Helpers.EnumerableObjectWrapper"/>
            </summary>
            <param name="items">The underlying list of items.</param>
            <exception cref="T:System.ArgumentNullException">If items parameter is null.</exception>
            <exception cref="T:System.ArgumentException">If items parameter is a string.</exception>
        </member>
        <member name="M:Infragistics.Windows.Helpers.EnumerableObjectWrapper.#ctor(System.Collections.IEnumerable,System.String)">
            <summary>
            Creates a new instance of an <see cref="T:Infragistics.Windows.Helpers.EnumerableObjectWrapper"/>
            </summary>
            <param name="items">The underlying list of items.</param>
            <param name="name">The name of the object.</param>
            <remarks>
            <para class="note"><b>Note:</b> if the 'name' parameter is null then the <see cref="P:Infragistics.Windows.Helpers.EnumerableObjectWrapper.Name"/> property will be initialized by either calling the <see cref="T:System.ComponentModel.ITypedList"/> interface's GetListName method. . Otherwise the ToString method is called.</para></remarks>
            <exception cref="T:System.ArgumentNullException">If items parameter is null.</exception>
            <exception cref="T:System.ArgumentException">If items parameter is a string.</exception>
        </member>
        <member name="M:Infragistics.Windows.Helpers.EnumerableObjectWrapper.Equals(System.Object)">
            <summary>
            Returns true if the passed in object is equal
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Helpers.EnumerableObjectWrapper.GetHashCode">
            <summary>
            Caclulates a value used for hashing
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Helpers.EnumerableObjectWrapper.Items">
            <summary>
            Returns the underlying list of items (read-only).
            </summary>
            <value>Returns the list of items that was passed into the constructor.</value>
        </member>
        <member name="P:Infragistics.Windows.Helpers.EnumerableObjectWrapper.Name">
            <summary>
            Gets/sets the name of the wrapped list of items.
            </summary>
            <value>The string representing the name of the list of items.</value>
            <remarks>
            <para class="note"><b>Note:</b> If <see cref="P:Infragistics.Windows.Helpers.EnumerableObjectWrapper.Items"/> implements the <see cref="T:System.ComponentModel.ITypedList"/> interface then the name is initialized by call <see cref="M:System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])"/> method. Otherwise the ToString method is called.</para>
            </remarks>
        </member>
        <member name="T:Infragistics.Windows.Helpers.FocusWithinManager">
            <summary>
            Class for managing IsFocusedWithin state of ui elements of specific types.
            To have the FocusWithinManager manage IsFocusedWithin state for ui elements
            of a specific type, register that type using the <see cref="M:Infragistics.Windows.Helpers.FocusWithinManager.RegisterType(System.Type)"/> 
            method.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Helpers.FocusWithinManager.CheckFocusWithinHelper(System.Windows.DependencyObject)">
            <summary>
            A helper method for checking to see the specified element contains focus.
            It checks to see if the focused element is a descendant of the specified
            elem.
            </summary>
            <param name="elem"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Helpers.FocusWithinManager.IsAncestorOf(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary>
            Checks to see if the specified ancestor is ancestor of elem.
            </summary>
            <param name="ancestor"></param>
            <param name="elem"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Helpers.FocusWithinManager.RegisterType(System.Type)">
            <summary>
            Registers the specified type. The IsFocusedWithin property will be managed on
            instances of classType classes, including derived classes.
            </summary>
            <param name="classType">The type of element for which the focus state will be managed</param>
            <exception cref="T:System.ArgumentException">The <paramref name="classType"/> is not a <see cref="T:System.Windows.UIElement"/> or <see cref="T:System.Windows.UIElement3D"/></exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="classType"/> cannot be null.</exception>
        </member>
        <member name="M:Infragistics.Windows.Helpers.FocusWithinManager.RegisterType(System.Type,System.Windows.PropertyChangedCallback)">
            <summary>
            Registers the specified type. The IsFocusedWithin property will be managed on
            instances of classType classes, including derived classes.
            </summary>
            <param name="classType">The type of element for which the focus state will be managed</param>
            <param name="callback">An instance of a PropertyChangeCallback that should be invoked when the <see cref="F:Infragistics.Windows.Helpers.FocusWithinManager.IsFocusWithinProperty"/> changes or null to not register a callback.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="classType"/> is not a <see cref="T:System.Windows.UIElement"/> or <see cref="T:System.Windows.UIElement3D"/></exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="classType"/> cannot be null.</exception>
        </member>
        <member name="M:Infragistics.Windows.Helpers.FocusWithinManager.IsAncestorOfHelper(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary>
            Checks to see if the specified ancestor is ancestor of elem.
            </summary>
            <param name="ancestor"></param>
            <param name="elem"></param>
            <returns></returns>
        </member>
        <member name="F:Infragistics.Windows.Helpers.FocusWithinManager.IsFocusWithinProperty">
            <summary>
            This property returns a value indicating whether the object has focus within or not.
            Only objects of types that are registered via <see cref="M:Infragistics.Windows.Helpers.FocusWithinManager.RegisterType(System.Type)"/> method will
            return a valid value from this property.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Helpers.HashSet">
            <summary>
            Data structure for use as a set.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Helpers.HashSet.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Helpers.HashSet.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Helpers.HashSet.#ctor(System.Int32,System.Single)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Helpers.HashSet.#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Helpers.HashSet.Add(System.Object)">
            <summary>
            Adds the item to the set. If the item already exists in the set, does nothing.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Infragistics.Windows.Helpers.HashSet.AddItems(System.Collections.IEnumerable)">
            <summary>
            Adds items from the specified set to this set.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Infragistics.Windows.Helpers.HashSet.AddItems(Infragistics.Windows.Helpers.HashSet)">
            <summary>
            Adds items from the specified set to this set.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Infragistics.Windows.Helpers.HashSet.AreEqual(Infragistics.Windows.Helpers.HashSet,Infragistics.Windows.Helpers.HashSet)">
            <summary>
            Returns true if both sets are equal. They have the same items.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Helpers.HashSet.Clear">
            <summary>
            Clears the set.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Helpers.HashSet.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies all the elements of this set to the spcified array starting at the specified index in the array.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Infragistics.Windows.Helpers.HashSet.DoesIntersect(Infragistics.Windows.Helpers.HashSet)">
            <summary>
            Returns true of the specified set and this set intersect.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Helpers.HashSet.Exists(System.Object)">
            <summary>
            Returns true if the specified item exists in this set.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Helpers.HashSet.GetEnumerator">
            <summary>
            Returns a new enumerator that enumerates all the elements of this set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Helpers.HashSet.GetEquivalentItem(System.Object)">
            <summary>
            Returns the item in the hash that has the equivalent key to the padded in item
            </summary>
            <param name="item">The item in question</param>
            <returns>The item from the hash with the equivalent key</returns>
        </member>
        <member name="M:Infragistics.Windows.Helpers.HashSet.GetIntersection(Infragistics.Windows.Helpers.HashSet,Infragistics.Windows.Helpers.HashSet)">
            <summary>
            Calculates the intersection of the specified sets.
            </summary>
            <param name="set1"></param>
            <param name="set2"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Helpers.HashSet.GetUnion(Infragistics.Windows.Helpers.HashSet,Infragistics.Windows.Helpers.HashSet)">
            <summary>
            Calculates the union of the specified sets.
            </summary>
            <param name="set1"></param>
            <param name="set2"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Helpers.HashSet.IsSubsetOf(Infragistics.Windows.Helpers.HashSet)">
            <summary>
            Returns true if this set is a subset of the specified set.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Helpers.HashSet.Remove(System.Object)">
            <summary>
            Removes the specified item from the set. If the item doesn't exist in the set
            does nothing.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Infragistics.Windows.Helpers.HashSet.ToArray``1">
            <summary>
            Returns an array containing all the elements of this set.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Windows.Helpers.HashSet.Count">
            <summary>
            Returns the number of items contained in the set.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Helpers.HashSet.IsEmpty">
            <summary>
            Returns true if the set is empty, that is it has no elements.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Helpers.HashSet.IsSynchronized">
            <summary>
            Indicates whether this data structure is synchronized.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Helpers.HashSet.SyncRoot">
            <summary>
            Returns the object that can be used to synchronize the access to this data structure.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Helpers.IMinMaxWatcherOwner">
            <summary>
            Interface implemented by a class that uses a <see cref="T:Infragistics.Windows.Helpers.MinMaxWatcher"/>
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Helpers.MinMaxWatcher">
            <summary>
            Helper class for relaying changes to an element's Min/Max Width/Height properties
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Helpers.MinMaxWatcher.MinWidthProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Helpers.MinMaxWatcher.MinWidth"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Helpers.MinMaxWatcher.MaxWidthProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Helpers.MinMaxWatcher.MaxWidth"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Helpers.MinMaxWatcher.MinHeightProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Helpers.MinMaxWatcher.MinHeight"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Helpers.MinMaxWatcher.MaxHeightProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Helpers.MinMaxWatcher.MaxHeight"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Helpers.MinMaxWatcher.MinWidth">
            <summary>
            Returns/sets the minimum extent
            </summary>
            <seealso cref="F:Infragistics.Windows.Helpers.MinMaxWatcher.MinWidthProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Helpers.MinMaxWatcher.MaxWidth">
            <summary>
            Returns/sets the maximum extent
            </summary>
            <seealso cref="F:Infragistics.Windows.Helpers.MinMaxWatcher.MaxWidthProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Helpers.MinMaxWatcher.MinHeight">
            <summary>
            Returns/sets the minimum extent
            </summary>
            <seealso cref="F:Infragistics.Windows.Helpers.MinMaxWatcher.MinHeightProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Helpers.MinMaxWatcher.MaxHeight">
            <summary>
            Returns/sets the maximum extent
            </summary>
            <seealso cref="F:Infragistics.Windows.Helpers.MinMaxWatcher.MaxHeightProperty"/>
        </member>
        <member name="T:Infragistics.Windows.Helpers.NameScopeProxy">
            <summary>
            Custom <see cref="T:System.Windows.Markup.INameScope"/> that acts as the proxy for the namescope of an ancestor element.
            </summary>
            <remarks>
            <p class="body">The NameScopeProxy is useful when a class needs to use the same namescope of another 
            element when the elements are not part of the same tree.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Helpers.NameScopeProxy.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Helpers.NameScopeProxy"/>
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Helpers.NameScopeProxy.StartingElement">
            <summary>
            Returns the element at which the search for the namescope should begin.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Helpers.NullableConverter`1">
            <summary>
            Custom type converter used for nullable types.
            </summary>
            <typeparam name="T">The underlying type for the nullable type represented or the nullable type itself</typeparam>
        </member>
        <member name="M:Infragistics.Windows.Helpers.NullableConverter`1.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Helpers.NullableConverter`1"/>
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Helpers.NativeWindowMethods.EncodeSize(System.Int32,System.Int32)">
            <summary>
            Encodes a size into and IntPtr to be used for certain window messages.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Helpers.StyleSelectorHelperBase">
            <summary>
            Abstract base class used to supply styles dynamically that can be triggered lazily off the Style 'get'
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Helpers.StyleSelectorHelperBase.#ctor(System.Windows.DependencyObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Windows.Helpers.StyleSelectorHelperBase"/> class
            </summary>
            <param name="target">The target FrameworkElement or FrameworkContentElement</param>
            <exception cref="T:System.NotSupportedException">Will be raised if the target is not a FrameworkElement or a FrameworkContentElement.</exception>
        </member>
        <member name="M:Infragistics.Windows.Helpers.StyleSelectorHelperBase.InvalidateStyle">
            <summary>
            Notifies listeners that the style has changed
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Helpers.StyleSelectorHelperBase.Style">
            <summary>
            The style to be used as the source of a binding (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.IGControlBase">
            <summary>
            Abstract base class for Infragistics controls
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.IGControlBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Windows.Controls.IGControlBase"/> class
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.IGControlBase.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positions child elements and determines a size for this element.
            </summary>
            <param name="finalSize">The size available to this element for arranging its children.</param>
            <returns>The <see cref="T:System.Windows.Size"/> used by this element to arrange its children.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.IGControlBase.GetVisualChild(System.Int32)">
            <summary>
            Gets the parent child at a specified index.
            </summary>
            <param name="index">The zero-based index of the specific child parent.</param>
            <returns>The parent child at the specified index.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.IGControlBase.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Called when a key is pressed
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.IGControlBase.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when mouse capture is lost
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.IGControlBase.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when the left mouse button is pressed
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.IGControlBase.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when the mouse is moved
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.IGControlBase.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when the left mouse button is released
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.IGControlBase.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when the left mouse button is pressed
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.IGControlBase.OnActiveSelectionStrategyChanged(Infragistics.Windows.Selection.SelectionStrategyBase)">
            <summary>
            Invoked when the active <see cref="T:Infragistics.Windows.Selection.SelectionStrategyBase"/> used by the control has been changed.
            </summary>
            <param name="strategy">The new strategy</param>
        </member>
        <member name="P:Infragistics.Windows.Controls.IGControlBase.VisualChildrenCount">
            <summary>
            Returns the total number of parent children (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.IGControlBase.Commands">
            <summary>
            Returns a collection of commands this control exposes (read-only).
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Internal.CloneBehaviorAttribute">
            <summary>
            An attribute placed on a class or property to determine whether to clone the object when its
            owing object is cloned (deep clone) or to set the same instance on the corresponding property of the cloned owner.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Internal.CloneBehaviorAttribute.#ctor(Infragistics.Windows.Internal.CloneBehavior)">
            <summary>
            Creates a new instance of a <b>CloneBehaviorAttribute</b>
            </summary>
            <param name="behavior">The desired behavior</param>
        </member>
        <member name="P:Infragistics.Windows.Internal.CloneBehaviorAttribute.Behavior">
            <summary>
            Returns the desired behavior (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Internal.CloneBehavior">
            <summary>
            Determines whether or not t perform a deep clone on a sub object property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Internal.CloneBehavior.ShareInstance">
            <summary>
            Share the same instance between the ordinal owner and irrts clone
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Internal.CloneBehavior.CloneObject">
            <summary>
            Clone the object so that the original owner and the cloned owner each have separate instances of the object.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Internal.PropertySerializationInfo">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Internal.PropertySerializationInfo.#ctor(System.Type,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="type">Type of the property.</param>
            <param name="name">Name of the property.</param>
        </member>
        <member name="M:Infragistics.Windows.Internal.PropertySerializationInfo.GetHashCode">
            <summary>
            Overridden. Returns the hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Internal.PropertySerializationInfo.Equals(System.Object)">
            <summary>
            Overridden. Checks to see if the specified object is equal to this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Internal.PropertySerializationInfo.Create(System.Windows.DependencyProperty)">
            <summary>
            Creates PropertySerializationInfo using the specified DependencyProperty.
            </summary>
            <param name="dpProperty"></param>
        </member>
        <member name="P:Infragistics.Windows.Internal.PropertySerializationInfo.Type">
            <summary>
            Type of the property.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Internal.PropertySerializationInfo.Name">
            <summary>
            Name of the property.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Internal.ObjectSerializerBase">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Internal.ObjectSerializerBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Internal.ObjectSerializerBase.AppendValueHelper(System.Xml.XmlElement,System.String,System.String,System.Object,System.Type)">
            <summary>
            Saves the specified value to the parentElem. It saves it as either attribute or child element depending
            on whether attributeName or elementName parameters are specified. If both are specified, then it 
            tries to save it as attribute if it can otherwise saves it as element.
            </summary>
            <param name="parentElem">Element where to save the value object.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="elementName">Name of the child element.</param>
            <param name="value">Value to save.</param>
            <param name="propertyType">Type of the property where the value came from. This will be used to determine if
            any type related information needs to be stored.</param>
            <returns>True if value was saved. False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Windows.Internal.ObjectSerializerBase.CreateNewElement(System.String)">
            <summary>
            Creates a new empty XmlElement.
            </summary>
            <param name="name">Name of the created XmlElement.</param>
            <returns>New empty XmlElement.</returns>
        </member>
        <member name="M:Infragistics.Windows.Internal.ObjectSerializerBase.ParseAttributeOverride(System.String,System.Type,System.Object@)">
            <summary>
            Parses the specified attribute. This along with the SaveAsAttributeOverride methods are meant 
            to be overridden by the derived classes to provide save/parse logic for object types
            for which default save/load logic does not exist.
            </summary>
            <param name="attributeValue">Attribute value.</param>
            <param name="propertyType">Type of the property whose value was serialized.</param>
            <param name="parsedValue">This out parameter is set to the result.</param>
            <returns>Returns true if the attribute value is parsed. False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Windows.Internal.ObjectSerializerBase.ParseElementOverride(System.Xml.XmlElement,System.Type,System.Object@)">
            <summary>
            Parses the specified element into an object of specified propertyType.
            This along with the SaveElementOverride methods are meant 
            to be overridden by the derived classes to provide save/parse logic for object types
            for which default save/load logic does not exist.
            </summary>
            <param name="element">XmlElement to parse.</param>
            <param name="propertyType">Type of property whose value was serialized.</param>
            <param name="parsedValue">This will be set to the parsed value.</param>
            <returns>Returns true if the element was succesfully parsed into an object of specified property type. Flase otherwise.</returns>
        </member>
        <member name="M:Infragistics.Windows.Internal.ObjectSerializerBase.SaveAsAttributeOverride(System.Object,System.Type,System.String@)">
            <summary>
            Saves the following object as an attribute. This along with the ParseAttributeOverride methods are meant 
            to be overridden by the derived classes to provide save/parse logic for object types
            for which default save/load logic does not exist.
            </summary>
            <param name="obj">Object to serialize.</param>
            <param name="propertyType">Type of the property whose value is being serialized.</param>
            <param name="attributeValue">This will be set to the resultant attribute value.</param>
            <returns>True if success, false if the specified object cannot be saved as an attribute.</returns>
        </member>
        <member name="M:Infragistics.Windows.Internal.ObjectSerializerBase.SaveAsElementOverride(System.Object,System.Type,System.Xml.XmlElement@)">
            <summary>
            Saves the following object as an XmlElement.
            This along with the ParseElementOverride methods are meant 
            to be overridden by the derived classes to provide save/parse logic for object types
            for which default save/load logic does not exist.
            </summary>
            <param name="obj">Object to save as an element.</param>
            <param name="propertyType">Type of property whose value is being saved.</param>
            <param name="element">This will be set to the element that was created.</param>
            <returns>True if success, false otherwise.</returns>
        </member>
        <member name="M:Infragistics.Windows.Internal.ObjectSerializerBase.ParseAttribute(System.Xml.XmlElement,System.String,System.Type,System.Object@)">
            <summary>
            Parses the specified attribute.
            </summary>
            <param name="elem">XmlElement whose attribute is to be parsed.</param>
            <param name="attributeName">Name of the attribute in the specified element that needs to be parsed back into an object.</param>
            <param name="propertyType">Type of the property whose value was serialized.</param>
            <param name="parsedValue">This out parameter is set to the result.</param>
            <returns>Returns true if the attribute value is parsed. False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Windows.Internal.ObjectSerializerBase.ParseAttribute(System.String,System.Type,System.Object@)">
            <summary>
            Parses the specified attribute.
            </summary>
            <param name="attributeValue">Attribute value.</param>
            <param name="propertyType">Type of the property whose value was serialized.</param>
            <param name="parsedValue">This out parameter is set to the result.</param>
            <returns>Returns true if the attribute value is parsed. False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Windows.Internal.ObjectSerializerBase.ParseElement(System.Xml.XmlElement,System.Type,System.Object@)">
            <summary>
            Parses the specified element back into an object.
            </summary>
            <param name="element">XmlElement to parse.</param>
            <param name="propertyType">Type of the property whose value was saved.</param>
            <param name="parsedValue">This will be set to the parsed value.</param>
            <returns>True if success, false otherwise.</returns>
        </member>
        <member name="M:Infragistics.Windows.Internal.ObjectSerializerBase.SaveAsAttribute(System.Object,System.Type,System.String@)">
            <summary>
            Saves the following object as an attribute.
            </summary>
            <param name="obj">Object to serialize.</param>
            <param name="propertyType">Type of the property whose value is being serialized.</param>
            <param name="attributeValue">This will be set to the resultant attribute value.</param>
            <returns>True if success, false if the specified object cannot be saved as an attribute.</returns>
        </member>
        <member name="M:Infragistics.Windows.Internal.ObjectSerializerBase.SaveAsElement(System.Object,System.Type,System.Xml.XmlElement@)">
            <summary>
            Saves the following object as an XmlElement.
            </summary>
            <param name="obj">Object to save as an element.</param>
            <param name="propertyType">Type of property whose value is being saved.</param>
            <param name="element">This will be set to the element that was created.</param>
            <returns>True if success, false otherwise.</returns>
        </member>
        <member name="M:Infragistics.Windows.Internal.ObjectSerializerBase.InternalParseElement(System.Xml.XmlElement,System.Type,System.Object@)">
            <summary>
            Parses the specified element back into an object.
            </summary>
            <param name="element">XmlElement to parse.</param>
            <param name="propertyType">Type of the property whose value was saved.</param>
            <param name="parsedValue">This will be set to the parsed value.</param>
            <returns>True if success, false otherwise.</returns>
        </member>
        <member name="M:Infragistics.Windows.Internal.ObjectSerializerBase.InternalSaveAsElement(System.Object,System.Type,System.Xml.XmlElement@)">
            <summary>
            Saves the following object as an XmlElement.
            </summary>
            <param name="obj">Object to save as an element.</param>
            <param name="propertyType">Type of property whose value is being saved.</param>
            <param name="element">This will be set to the element that was created.</param>
            <returns>True if success, false otherwise.</returns>
        </member>
        <member name="M:Infragistics.Windows.Internal.ObjectSerializerBase.RegisterInfo(System.Type,Infragistics.Windows.Internal.ObjectSerializationInfo)">
            <summary>
            Registers an instance of ObjectSerializationInfo for a specific type where ObjectSerializationInfo
            can serialize and deserialize instances of that type.
            </summary>
            <param name="type"></param>
            <param name="info"></param>
        </member>
        <member name="M:Infragistics.Windows.Internal.ObjectSerializerBase.AttributeValueParser.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Internal.ObjectSerializerBase.AttributeValueParser.TypeInfo.#ctor(System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Infragistics.Windows.Internal.ThrottleTimer.#ctor(System.Int64)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Internal.PropertyValueTracker">
            <summary>
            Class used for tracking value of a property (also a property path can be specified) of a source object.
            Specified callback is called whenever the property's value changes.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Internal.PropertyValueTracker._throttleTime">
            <summary>
            Throttle time in milliseconds. 0 means no throttling.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Internal.PropertyValueTracker.#ctor(System.Object,System.String,Infragistics.Windows.Internal.PropertyValueTracker.PropertyValueChangedHandler)">
            <summary>
            Constructor.
            </summary>
            <param name="source">Source object that the property path applies to.</param>
            <param name="propertyPath">Property path.</param>
            <param name="handler">Hanlder to call whenever the property specified by property path changes.</param>
        </member>
        <member name="M:Infragistics.Windows.Internal.PropertyValueTracker.#ctor(System.Object,System.String,Infragistics.Windows.Internal.PropertyValueTracker.PropertyValueChangedHandler,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="source">Source object that the property path applies to.</param>
            <param name="propertyPath">Property path.</param>
            <param name="handler">Hanlder to call whenever the property specified by property path changes.</param>
            <param name="callAsynchronously">Specifies whether to call the callback asynchronously using dispatcher.</param>
        </member>
        <member name="M:Infragistics.Windows.Internal.PropertyValueTracker.#ctor(System.Object,System.Windows.DependencyProperty,Infragistics.Windows.Internal.PropertyValueTracker.PropertyValueChangedHandler)">
            <summary>
            Constructor.
            </summary>
            <param name="source">Source object that the property belongs to.</param>
            <param name="dependencyProperty">Property whose value to track.</param>
            <param name="handler">Hanlder to call whenever the specified property's value changes.</param>
        </member>
        <member name="M:Infragistics.Windows.Internal.PropertyValueTracker.#ctor(System.Object,System.Windows.DependencyProperty,Infragistics.Windows.Internal.PropertyValueTracker.PropertyValueChangedHandler,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="source">Source object that the property belongs to.</param>
            <param name="dependencyProperty">Property whose value to track.</param>
            <param name="handler">Hanlder to call whenever the specified property's value changes.</param>
            <param name="callAsynchronously">Specifies whether to call the callback asynchronously using dispatcher.</param>
        </member>
        <member name="P:Infragistics.Windows.Internal.PropertyValueTracker.AsynchronousDispatcherPriority">
            <summary>
            Gets or sets the dispatcher priority to use to call asynchronously if 
            <see cref="P:Infragistics.Windows.Internal.PropertyValueTracker.CallAsynchronously"/> is set to true.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Internal.PropertyValueTracker.CallAsynchronously">
            <summary>
            Specifies whether to call the handler asyncrhonously using Dispatcher.BeginInvoke.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Internal.PropertyValueTracker.Tag">
            <summary>
            Gets or sets the tag.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Internal.PropertyValueTracker.ThrottleTime">
            <summary>
            Throttle time in milliseconds. Default is 0 which means there's no throttling.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Internal.PropertyValueTracker.PropertyValueChangedHandler">
            <summary>
            Callback delegate for 'handler' parameter to the constructor.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Layouts.Primitives.ILayoutItem">
            <summary>
            Interface for implementing layout items.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.ILayoutItem.Visibility">
            <summary>
            Indicates the visibility state of the item. Items that are collapsed are ignored.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.ILayoutItem.MaximumSize">
            <summary>
            Gets the maximum size of the layout item.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.ILayoutItem.MinimumSize">
            <summary>
            Gets the minimum size of the layout item.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.ILayoutItem.PreferredSize">
            <summary>
            Gets the preferred size of the layout item.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Layouts.Primitives.IAutoSizeLayoutItem">
            <summary>
            Used by the grid-bag layout manager to ensure that auto-sized items are not resized smaller 
            than their preferred sizes when shrinking all the items to auto-fit in the available extent.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.IAutoSizeLayoutItem.IsWidthAutoSized">
            <summary>
            Returns true to indicate that the width is auto-sized and thus the item should not be 
            resized smaller than its preferred width when proportionally shrinking all the items to
            auto-fit in the available space for the layout.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.IAutoSizeLayoutItem.IsHeightAutoSized">
            <summary>
            Returns true to indicate that the height is auto-sized and thus the item should not be 
            resized smaller than its preferred width when proportionally shrinking all the items to
            auto-fit in the available space for the layout.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Layouts.Primitives.ILayoutContainer">
            <summary>
            ILayoutContainer interface.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.ILayoutContainer.GetBounds(System.Object)">
            <summary>
            Returns the container bounds.
            </summary>        
            <param name="containerContext">Context used in calls to the container.</param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.ILayoutContainer.PositionItem(Infragistics.Controls.Layouts.Primitives.ILayoutItem,System.Windows.Rect,System.Object)">
            <summary>
            Called by the layout manager to position a layout item.
            </summary>
            <param name="item">The <see cref="T:Infragistics.Controls.Layouts.Primitives.ILayoutItem"/> to position.</param>
            <param name="rect">The <see cref="T:System.Windows.Rect"/> of the item.</param>
            <param name="containerContext">Context used in calls to the container.</param>
        </member>
        <member name="T:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection">
            <summary>
            ILayoutItem collection.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.#ctor(Infragistics.Controls.Layouts.Primitives.LayoutManagerBase)">
            <summary>
            Constructor.
            </summary>
            <param name="layoutManager">The <see cref="T:Infragistics.Controls.Layouts.Primitives.LayoutManagerBase"/>.</param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.InternalSetConstraint(Infragistics.Controls.Layouts.Primitives.ILayoutItem,System.Object,System.Int32)">
            <summary>
            Sets the constraint for the item. If the item doesn't exist in the collection, its added.
            </summary>
            <param name="item"></param>
            <param name="constraint"></param>
            <param name="index">Specify -1 to add the item at the end of the list.</param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.OnLayoutChanged">
            <summary>
            This method is called whenever a layout item is added, removed or the layout is cleared. Implementation of this method calls InvalidateLayout to invalidate any cached information.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.ValidateConstraintObject(System.Object)">
            <summary>
            Implementation should throw an exception if the passed in constraint is not a valid
            constraint for this layout manager. It usually checks the type.
            </summary>
            <param name="constraint"></param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.Add(Infragistics.Controls.Layouts.Primitives.ILayoutItem)">
            <summary>
            Adds an item to be managed by this layout manager. It uses null as the constraint so the underlying layout manager must support null constraints.
            </summary>
            <param name="item">The item to add to the layout manager.</param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.Add(Infragistics.Controls.Layouts.Primitives.ILayoutItem,System.Object)">
            <summary>
            Adds an item to be managed by this layout manager.
            </summary>
            <param name="item">The item to add to the layout manager.</param>
            <param name="constraint">The constraint to assign to the item.</param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.Contains(Infragistics.Controls.Layouts.Primitives.ILayoutItem)">
            <summary>
            Returns true if the passed in item contained in this layout manager.
            </summary>
            <param name="item">The <see cref="T:Infragistics.Controls.Layouts.Primitives.ILayoutItem"/> to check for in the collection.</param>
            <returns>True if the specified item is contained in this layout manager.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.Clear">
            <summary>
            Removes all the items.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.CopyTo(Infragistics.Controls.Layouts.Primitives.ILayoutItem[],System.Int32)">
            <summary>
            Copies the items from the collection into the array.
            </summary>
            <param name="array">Array to which to copy items.</param>
            <param name="arrayIndex">Index in the array at which to begin copying items.</param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.GetConstraint(Infragistics.Controls.Layouts.Primitives.ILayoutItem)">
            <summary>
            Returns the constraint object associated with the item. Throws an exception if the item
            does not exist (ie. it hasn't been added through AddLayoutItem method has been removed).
            </summary>
            <param name="item">The <see cref="T:Infragistics.Controls.Layouts.Primitives.ILayoutItem"/> whose constraint should be retrieved.</param>
            <returns>The constraint object associated with the item.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.GetItem(System.Int32)">
            <summary>
            Gets the item at specified index.
            </summary>
            <param name="index">The index of the item to retrieve.</param>
            <returns>The <see cref="T:Infragistics.Controls.Layouts.Primitives.ILayoutItem"/> at the specified index.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.IndexOf(Infragistics.Controls.Layouts.Primitives.ILayoutItem)">
            <summary>
            Retruns the index of the passed in item in the layout items collection.
            </summary>
            <param name="item">The <see cref="T:Infragistics.Controls.Layouts.Primitives.ILayoutItem"/> whose index should be retrieved.</param>
            <returns>The index of the specified item, or -1 if the item was not found.</returns>
            <remarks>
            <p>Layout manager keeps track of the order in which items are added. Some layout managers may layout items in the order in which they were added.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.Insert(System.Int32,Infragistics.Controls.Layouts.Primitives.ILayoutItem)">
            <summary>
            Inserts the item at specified index. It uses null as the constraint so the underlying layout manager must support null constraints.
            </summary>
            <param name="index">Specify -1 to add the item at the end of the list.</param>
            <param name="item">The <see cref="T:Infragistics.Controls.Layouts.Primitives.ILayoutItem"/> to add to the collection.</param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.Insert(System.Int32,Infragistics.Controls.Layouts.Primitives.ILayoutItem,System.Object)">
            <summary>
            Inserts the item at specified index in with the specified constraint.
            </summary>
            <param name="index">Specify -1 to add the item at the end of the list.</param>
            <param name="item">The <see cref="T:Infragistics.Controls.Layouts.Primitives.ILayoutItem"/> to add to the collection.</param>
            <param name="constraint">The constraint to apply to the specified item.</param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.Remove(Infragistics.Controls.Layouts.Primitives.ILayoutItem)">
            <summary>
            Removes an item from this layout manager if it exists.
            </summary>
            <param name="item">The <see cref="T:Infragistics.Controls.Layouts.Primitives.ILayoutItem"/> to remove.</param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the item at specified index.
            </summary>
            <param name="index">The index of the item to remove.</param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.SetConstraint(Infragistics.Controls.Layouts.Primitives.ILayoutItem,System.Object)">
            <summary>
            Sets the constraint for the item. If the item doesn't exist in the collection, its added.
            </summary>
            <param name="item">The <see cref="T:Infragistics.Controls.Layouts.Primitives.ILayoutItem"/> whose constraint should be set.</param>
            <param name="constraint">The constraint to assign to the specified object.</param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            IEnumerable Interface Implementation. Returns a type safe enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.LayoutItemsConstraints">
            <summary>
            Layout items with their constraints.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.LayoutItems">
            <summary>
            Layout items.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.Count">
            <summary>
            Returns the number of items this LayoutItemsCollection contains.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.Item(System.Int32)">
            <summary>
            Gets the item at specified index.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.System#Collections#Generic#ICollection{Infragistics#Controls#Layouts#Primitives#ILayoutItem}#IsReadOnly">
            <summary>
            Indicates whether the collection is read-only.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Layouts.Primitives.LayoutManagerBase">
            <summary>
            Base class for others to implement their own layout managers.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutManagerBase.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutManagerBase.GetContainerBoundsHelper(Infragistics.Controls.Layouts.Primitives.ILayoutContainer,System.Object,Infragistics.Controls.Layouts.Primitives.LayoutManagerBase)">
            <summary>
            If the container rect's width or height is NaN or infinity then it will use the preferred width or height for it.
            </summary>
            <param name="container"></param>
            <param name="containerContext"></param>
            <param name="lm"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutManagerBase.OnLayoutChanged">
            <summary>
            This method is called whenever a layout item is added, removed or the layout is cleared. Implementation of this method calls InvalidateLayout to invalidate any cached information.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutManagerBase.ValidateConstraintObject(System.Object)">
            <summary>
            Implementation should throw an exception if the passed in constraint is not a valid
            constraint for this layout manager. It usually checks the type.
            </summary>
            <param name="constraint">The constraint to check.</param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutManagerBase.CalculateMaximumSize(Infragistics.Controls.Layouts.Primitives.ILayoutContainer,System.Object)">
            <summary>
            Calculates the maximum size required to layout the items at their maximum sizes.
            </summary>
            <param name="container">Object that implements the ILayoutContainer to provide bounds information</param>
            <param name="containerContext">Context used in calls to the <paramref name="container"/></param>
            <returns>A <see cref="T:System.Windows.Size"/> object representing the minimum size required to layout the items.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutManagerBase.CalculateMinimumSize(Infragistics.Controls.Layouts.Primitives.ILayoutContainer,System.Object)">
            <summary>
            Calculates the minimum size required to layout the items.
            </summary>
            <param name="container">Object that implements the ILayoutContainer to provide bounds information</param>
            <param name="containerContext">Context used in calls to the <paramref name="container"/></param>
            <returns>A <see cref="T:System.Windows.Size"/> object representing the minimum size required to layout the items.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutManagerBase.CalculatePreferredSize(Infragistics.Controls.Layouts.Primitives.ILayoutContainer,System.Object)">
            <summary>
            Calculates the preferred size required to layout the items.
            </summary>
            <param name="container">Object that implements the ILayoutContainer to provide bounds information</param>
            <param name="containerContext">Context used in calls to the <paramref name="container"/></param>
            <returns>A <see cref="T:System.Windows.Size"/> object representing the preferred size required to layout the items.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutManagerBase.InvalidateLayout">
            <summary>
            Invalidates any cached information so the layout manager recalculates everything next.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutManagerBase.LayoutContainer(Infragistics.Controls.Layouts.Primitives.ILayoutContainer,System.Object)">
            <summary>
            Lays out items contained in this layout manager by calling PositionItem off the
            passed in container for each item.
            </summary>
            <param name="container">Object that implements the ILayoutContainer to provide bounds information</param>
            <param name="containerContext">Context used in calls to the <paramref name="container"/></param>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.LayoutManagerBase.LayoutItems">
            <summary>
            Layout items collection.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Layouts.Primitives.IGridBagConstraint">
            <summary>
            Interface for providing constraints to the grid-bag layout manager.
            </summary>
            <remarks>
            <b>IGridBagConstraint</b> interface is used to provide constraints of an item to the
            <see cref="T:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager"/>. <see cref="T:Infragistics.Controls.Layouts.Primitives.GridBagConstraint"/> class implements
            this interface so typically there is no need for you to implement this interface as
            you can use the <i>GridBagConstraint</i> objects directly to provide item constraints
            to the grid-bag layout manager.
            </remarks>
            <seealso cref="T:Infragistics.Controls.Layouts.Primitives.GridBagConstraint"/>
            <seealso cref="T:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager"/>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.IGridBagConstraint.Column">
            <summary>
            <p>Column and Row define where the layout item will be placed in the virtual grid of the grid-bag layout. Column specifies the location horizontally while specifies the location vertically. These locations are the coordinates of the cells in the virtual grid that the grid-bag layout represents.</p>
            <p>The leftmost cell has Column of 0. The constant <see cref="F:Infragistics.Controls.Layouts.Primitives.GridBagConstraintConstants.Relative"/> specifies that the item be placed just to the right of the item that was added to the layout manager just before this item was added. </p>
            <p>The default value is <see cref="F:Infragistics.Controls.Layouts.Primitives.GridBagConstraintConstants.Relative"/>. Column should be a non-negative value.</p>
            </summary>
            <seealso cref="P:Infragistics.Controls.Layouts.Primitives.IGridBagConstraint.Row"/>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.IGridBagConstraint.ColumnSpan">
            <summary>
            <p>Specifies the number of cells this item will span horizontally. The constant <see cref="F:Infragistics.Controls.Layouts.Primitives.GridBagConstraintConstants.Remainder"/> specifies that this item be the last one in the row and thus occupy remaining space.</p>
            </summary>
            <seealso cref="P:Infragistics.Controls.Layouts.Primitives.IGridBagConstraint.RowSpan"/>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.IGridBagConstraint.ColumnWeight">
            <summary>
            Indicates how the extra horizontal space will be distributed among items. Default value is 0.0. Higher values give higher priority. The weight of the column in the virtual grid the grid-bag layout represents is the maximum ColumnWeight of all the items in the row.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.IGridBagConstraint.HorizontalAlignment">
            <summary>
            Horizontal alignment of the item within its logical cell.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.IGridBagConstraint.Margin">
            <summary>
            Indicates the padding around the layout item.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.IGridBagConstraint.Row">
            <summary>
            <p>Column and Row define where the layout item will be placed in the virtual grid of the grid-bag layout. Column specifies the location horizontally while specifies the location vertically. These locations are the coordinates of the cells in the virtual grid that the grid-bag layout represents.</p>
            <p>The topmost cell has Row of 0. The constant <see cref="F:Infragistics.Controls.Layouts.Primitives.GridBagConstraintConstants.Relative"/> specifies that the item be placed just below the item that was added to the layout manager just before this item was added.</p>
            <p>The default value is <see cref="F:Infragistics.Controls.Layouts.Primitives.GridBagConstraintConstants.Relative"/>. Row should be a non-negative value.</p>
            </summary>
            <seealso cref="P:Infragistics.Controls.Layouts.Primitives.IGridBagConstraint.Column"/>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.IGridBagConstraint.RowSpan">
            <summary>
            <p>Specifies the number of cells this item will span vertically. The constant <see cref="F:Infragistics.Controls.Layouts.Primitives.GridBagConstraintConstants.Remainder"/> specifies that this item be the last one in the column and thus occupy remaining space.</p>
            </summary>
            <seealso cref="P:Infragistics.Controls.Layouts.Primitives.IGridBagConstraint.ColumnSpan"/>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.IGridBagConstraint.RowWeight">
            <summary>
            Indicates how the extra vertical space will be distributed among items. Default value is 0.0. Higher values give higher priority. The weight of the column in the virtual grid the grid-bag layout represents is the maximum RowWeight of all the items in the column.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.IGridBagConstraint.VerticalAlignment">
            <summary>
            Horizontal alignment of the item within its logical row.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Layouts.Primitives.GridBagConstraintConstants">
            <summary>
            Defines constants used by grid-bag constraint object.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Layouts.Primitives.GridBagConstraintConstants.Relative">
            <summary>
            This constant can be assigned to Column and Row to indicate that the cell be positioned relative to the last cell.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Layouts.Primitives.GridBagConstraintConstants.Remainder">
            <summary>
            This constant can be assigned to ColumnSpan and RowSpan to indicate that the cell occupy the rest of the row or the column respectively.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Layouts.Primitives.GridBagConstraint">
            <summary>
            Class for providing constraint objects to the grid-bag layout manager.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="column">Where the layout item will be placed horizontally in the virtual grid of the grid-bag layout.</param>
            <param name="row">Where the layout item will be placed horizontally in the virtual grid of the grid-bag layout.</param>
            <param name="columnSpan">Specifies the number of cells this item will span horizontally.</param>
            <param name="rowSpan">Specifies the number of cells this item will span vertically.</param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A copy of the current instance.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ResetColumn">
            <summary>
            Resets the Column property to its default value of GridBagConstraintConstants.Relative.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ResetColumnSpan">
            <summary>
            Resets the ColumnSpan property to its default value of 1.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ResetColumnWeight">
            <summary>
            Resets the ColumnWeight property to its default value of 0.0.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ResetHorizontalAlignment">
            <summary>
            Resets the HorizontalAlignment property to its default value of Center.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ResetMargin">
            <summary>
            Resets the Margin property to its default value which is Thickness of left, top, right, bottom being 0.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ResetRow">
            <summary>
            Resets the Row property to its default value of GridBagConstraintConstants.Relative.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ResetRowSpan">
            <summary>
            Resets the RowSpan property to its default value of 1.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ResetRowWeight">
            <summary>
            Resets the RowWeight property to its default value of 0.0.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ResetVerticalAlignment">
            <summary>
            Resets the VerticalAlignment property to its default value of Center.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.Reset">
            <summary>
            Resets the properties of this object to their default values.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ShouldSerialize">
            <summary>
            Returns true is any of the properties have been set to non-default values
            </summary>
            <returns>True if any properties have been set to non-default values.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ToString">
            <summary>
            Returns a string representation of the object
            </summary>
            <returns>The string representation of the object.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ShouldSerializeColumn">
            <summary>
            Returns true if the property is set to a non-default value.
            </summary>
            <returns>True if the property is set to a non-default value.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ShouldSerializeColumnSpan">
            <summary>
            Returns true if the property is set to a non-default value.
            </summary>
            <returns>True if the property is set to a non-default value.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ShouldSerializeColumnWeight">
            <summary>
            Returns true if the property is set to a non-default value.
            </summary>
            <returns>True if the property is set to a non-default value.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ShouldSerializeHorizontalAlignment">
            <summary>
            Returns true if the property is set to a non-default value.
            </summary>
            <returns>True if the property is set to a non-default value.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ShouldSerializeMargin">
            <summary>
            Returns true if the property is set to a non-default value.
            </summary>
            <returns>True if the property is set to a non-default value.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ShouldSerializeRow">
            <summary>
            Returns true if the property is set to a non-default value.
            </summary>
            <returns>True if the property is set to a non-default value.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ShouldSerializeRowSpan">
            <summary>
            Returns true if the property is set to a non-default value.
            </summary>
            <returns>True if the property is set to a non-default value.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ShouldSerializeRowWeight">
            <summary>
            Returns true if the property is set to a non-default value.
            </summary>
            <returns>True if the property is set to a non-default value.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ShouldSerializeVerticalAlignment">
            <summary>
            Returns true if the property is set to a non-default value.
            </summary>
            <returns>True if the property is set to a non-default value.</returns>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.HorizontalAlignment">
            <summary>
            Horizontal alignment of the item within its logical cell.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.Column">
            <summary>
            <p>Column and Row define where the layout item will be placed in the virtual grid of the grid-bag layout. Column specifies the location horizontally while specifies the location vertically. These locations are the coordinates of the cells in the virtual grid that the grid-bag layout represents.</p>
            <p>The leftmost cell has Column of 0. The constant <b>Relative</b> specifies that the item be placed just to the right of the item that was added to the layout manager just before this item was added. </p>
            <p>The default value is <b>Relative</b>. Column should be a non-negative value.</p>
            </summary>
            <seealso cref="P:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.Row"/>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ColumnSpan">
            <summary>
            <p>Specifies the number of cells this item will span horizontally. The constant <b>Remainder</b> specifies that this item be the last one in the row and thus occupy remaining space.</p>
            </summary>
            <seealso cref="P:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.RowSpan"/>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ColumnWeight">
            <summary>
            Indicates how the extra horizontal space will be distributed among items. Default value is 0.0. Higher values give higher priority. The weight of the column in the virtual grid the grid-bag layout represents is the maximum ColumnWeight of all the items in the row.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.Margin">
            <summary>
            Indicates the padding around the layout item.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.Row">
            <summary>
            <p>Column and Row define where the layout item will be placed in the virtual grid of the grid-bag layout. Column specifies the location horizontally while specifies the location vertically. These locations are the coordinates of the cells in the virtual grid that the grid-bag layout represents.</p>
            <p>The topmost cell has Row of 0. The constant <b>Relative</b> specifies that the item be placed just below the item that was added to the layout manager just before this item was added.</p>
            <p>The default value is <b>Relative</b>. Row should be a non-negative value.</p>
            </summary>
            <seealso cref="P:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.Column"/>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.RowSpan">
            <summary>
            <p>Specifies the number of cells this item will span vertically. The constant <b>Remainder</b> specifies that this item be the last one in the column and thus occupy remaining space.</p>
            </summary>
            <seealso cref="P:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ColumnSpan"/>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.RowWeight">
            <summary>
            Indicates how the extra vertical space will be distributed among items. Default value is 0.0. Higher values give higher priority. The weight of the column in the virtual grid the grid-bag layout represents is the maximum RowWeight of all the items in the column.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.VerticalAlignment">
            <summary>
            Vertical alignment of the item within its logical cell.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Layouts.Primitives.GridBagLayoutItemDimensions">
            <summary>
            For internal use. A class that contains dimensions of a layout item. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutItemDimensions.Bounds">
            <summary>
            Item bounds relative to the container's bounds.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutItemDimensions.Column">
            <summary>
            Returns the Column of the item.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutItemDimensions.ColumnRight">
            <summary>
            Returns Column + ColumnSpan.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutItemDimensions.ColumnSpan">
            <summary>
            Returns the ColumnSpan of the item.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutItemDimensions.Row">
            <summary>
            Returns the Row of the item.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutItemDimensions.RowBottom">
            <summary>
            Returns the Row + RowSpan.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutItemDimensions.RowSpan">
            <summary>
            Retruns the RowSpan of the item.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutItemDimensions.Size">
            <summary>
            Size of the item bounds.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Layouts.Primitives.GridBagLayoutItemDimensionsCollection">
            <summary>
            For internal use. A class that contains GridBagLayoutItemDimensions instances each of which 
            associated with a ILayoutItem.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutItemDimensionsCollection.Exists(Infragistics.Controls.Layouts.Primitives.ILayoutItem)">
            <summary>
            For Internal use. Returns true if the collection contains an entry for the passed in layout item.
            </summary>
            <param name="key">The <see cref="T:Infragistics.Controls.Layouts.Primitives.ILayoutItem"/> to check for.</param>
            <returns>True if the collection contains an entry for the specified key.</returns>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutItemDimensionsCollection.ColumnDims">
            <summary>
            For Internal use. Column coordinates relative to left of the container rect. These can be modified freely without effecting the layout.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutItemDimensionsCollection.MaximumSize">
            <summary>
            Maximum size of the layout.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutItemDimensionsCollection.MinimumSize">
            <summary>
            Minimum size of the layout.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutItemDimensionsCollection.PreferredSize">
            <summary>
            Preferred size of the layout.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutItemDimensionsCollection.RowDims">
            <summary>
            For Internal use. Row coordinates relative to top of the container rect. These can be modified freely without effecting the layout.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutItemDimensionsCollection.Item(Infragistics.Controls.Layouts.Primitives.ILayoutItem)">
            <summary>
            For Internal use. Indexer. Returns an instance GridBagLayoutItemDimensions associated with passed in layout item.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager">
            <summary>
            GridBagLayoutManager class.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.CalculateMaximumSize(Infragistics.Controls.Layouts.Primitives.ILayoutContainer,System.Object)">
            <summary>
            Calculates the minimum size required to layout the items.
            </summary>
            <param name="container">Object that implements the ILayoutContainer to provide bounds information</param>
            <param name="containerContext">Context used in calls to the <paramref name="container"/></param>
            <returns>A <see cref="T:System.Windows.Size"/> object representing the minimum size required to layout the items.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.CalculateMinimumSize(Infragistics.Controls.Layouts.Primitives.ILayoutContainer,System.Object)">
            <summary>
            Calculates the minimum size required to layout the items.
            </summary>
            <param name="container">Object that implements the ILayoutContainer to provide bounds information</param>
            <param name="containerContext">Context used in calls to the <paramref name="container"/></param>
            <returns>A <see cref="T:System.Windows.Size"/> object representing the minimum size required to layout the items.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.CalculatePreferredSize(Infragistics.Controls.Layouts.Primitives.ILayoutContainer,System.Object)">
            <summary>
            Calculates the preferred size required to layout the items.
            </summary>
            <param name="container">Object that implements the ILayoutContainer to provide bounds information</param>
            <param name="containerContext">Context used in calls to the <paramref name="container"/></param>
            <returns>A <see cref="T:System.Windows.Size"/> object representing the preferred size required to layout the items.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.InvalidateLayout">
            <summary>
            Invalidates any cached information so the layout manager recalculates everything next time.
            </summary>
            <remarks>
            <p>Gridbag layout manager caches layout information which needs to be invalidated any time a change is made that would effect how the items are laid out.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.LayoutContainer(Infragistics.Controls.Layouts.Primitives.ILayoutContainer,System.Object)">
            <summary>
            Lays out items contained in this layout manager by calling PositionItem off the
            passed in container for each item.
            </summary>
            <param name="container"></param>
            <param name="containerContext"></param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.LayoutContainer(Infragistics.Controls.Layouts.Primitives.ILayoutContainer,System.Object,System.Windows.Rect@)">
            <summary>
            Lays out items contained in this layout manager by calling PositionItem off the
            passed in container for each item.
            </summary>
            <param name="container">Layout container.</param>
            <param name="containerContext">Layout container context.</param>
            <param name="layoutRect">This out parameter will be set to the rect in which items were laid out which
            can be different from layout container's rect in case of min size constraints.</param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ValidateConstraintObject(System.Object)">
            <summary>
            Implementation should throw an exception if the passed in constraint is not a valid
            constraint for this layout manager. It usually checks the type.
            </summary>
            <param name="constraint">The constraint to validate.</param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.CalculateAutoLayout(System.Collections.Generic.IEnumerator{Infragistics.Controls.Layouts.Primitives.ILayoutItem},System.Windows.Controls.Orientation,System.Boolean,System.Windows.Size,System.Int32,System.Int32,System.Int32,System.Int32,System.Nullable{System.Windows.Controls.Orientation})">
            <summary>
            Calculates the row/column values for the specified items to fill the layout area.
            </summary>
            <param name="items">Items to auto-layout.</param>
            <param name="layoutOrientation">Direction in which to layout items.</param>
            <param name="autoFitAllItems">If true all items will be auto-fitted within the layout area.</param>
            <param name="constraint">Layout are size.</param>
            <param name="minRows">Minimum number of logical rows of items.</param>
            <param name="minColumns">Minimum number of logical columns of items.</param>
            <param name="maxRows">Maximum number of logical rows of items.</param>
            <param name="maxColumns">Maximum number of logical columns of items.</param>
            <param name="constraintedOrientation">
            If specified non-null, then items will be laid in such a way that they will be not be allowed 
            to go beyond the edge of the container in the constrained orientation (unless other constraints 
            force otherwise). If null then items will not be constrained in either orientation.</param>
            <returns>Calculated layout information in the form of a GridBagLayoutItemDimensionsCollection instance.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.GetLayoutItemDimensions(Infragistics.Controls.Layouts.Primitives.ILayoutContainer,System.Object)">
            <summary>
            For internal use. Returns dimensions of layout items. It contains entries for only the visible items.
            </summary>
            <param name="containerContext">The context used in calls to the <paramref name="container"/>.</param>
            <param name="container">The <see cref="T:Infragistics.Controls.Layouts.Primitives.ILayoutContainer"/> from which layout information should be determined.</param>
            <returns>The dimensions of layout items.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.GetResizeRange(Infragistics.Controls.Layouts.Primitives.ILayoutContainer,System.Object,Infragistics.Controls.Layouts.Primitives.ILayoutItem,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Gets the resize range of an item.
            </summary>
            <param name="layoutContainer">Layout container. Used for getting the layout area rect, which 
            is used when auto-fitting the layout in in an area that's different than the preferred size of the layout.
            </param>
            <param name="containerContext">Not used by the layout manager directly. It gets passed along to
            methods on the layout container.</param>
            <param name="resizeItem">Item being resized.</param>
            <param name="maxDeltaLeft">This will be set to how much smaller the item can be resized left of its right edge.</param>
            <param name="maxDeltaRight">This will be set to how much larger the item can be resized right of its right edge.</param>
            <param name="maxDeltaTop">This will be set to how much smaller the item can be resized above its bottom edge.</param>
            <param name="maxDeltaBottom">This will be set to how much larger the item can be resized below its bottom edge.</param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.GetResizeRange(Infragistics.Controls.Layouts.Primitives.ILayoutContainer,System.Object,Infragistics.Controls.Layouts.Primitives.ILayoutItem,System.Double@,System.Double@,System.Double@,System.Double@,System.Boolean,System.Boolean,System.Collections.Generic.IList{Infragistics.Controls.Layouts.Primitives.ILayoutItem})">
            <summary>
            Gets the resize range of an item.
            </summary>
            <param name="layoutContainer">Layout container. Used for getting the layout area rect, which 
            is used when auto-fitting the layout in in an area that's different than the preferred size of the layout.
            </param>
            <param name="containerContext">Not used by the layout manager directly. It gets passed along to
            methods on the layout container.</param>
            <param name="resizeItem">Item being resized.</param>
            <param name="maxDeltaLeft">This will be set to how much smaller the item can be resized left of its right edge.</param>
            <param name="maxDeltaRight">This will be set to how much larger the item can be resized right of its right edge.</param>
            <param name="maxDeltaTop">This will be set to how much smaller the item can be resized above its bottom edge.</param>
            <param name="maxDeltaBottom">This will be set to how much larger the item can be resized below its bottom edge.</param>
            <param name="autoFitWidth">Specifies whether items will be autofitted horizontally within the 
            layout container rect. Items will be resized in such a way that the width of the preferred size
            of the resultant layout will be equal container rect's width.</param>
            <param name="autoFitHeight">Specifies whether items will be autofitted vertically within the 
            layout container rect. Items will be resized in such a way that the height of the preferred size
            of the resultant layout will be equal container rect's height.</param>
            <param name="synchronizedItems">A list of items whose size will be synchronized during the resize operation with the specified <paramref name="resizeItem"/> or null/empty list if there are no items to be synchronized with the resize item.</param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.PerformAutoSize(Infragistics.Controls.Layouts.Primitives.ILayoutContainer,System.Object,System.Collections.Generic.Dictionary{Infragistics.Controls.Layouts.Primitives.ILayoutItem,System.Windows.Size},System.Boolean,System.Boolean,System.Collections.Generic.Dictionary{Infragistics.Controls.Layouts.Primitives.ILayoutItem,System.Boolean}@,System.Collections.Generic.Dictionary{Infragistics.Controls.Layouts.Primitives.ILayoutItem,System.Boolean}@)">
            <summary>
            Resizes the specified layout items to the specified preferred sizes.
            </summary>
            <param name="layoutContainer">Object used to determine the layout area rect, which is used when 
            auto-fitting the layout in in an area that's different than the preferred size of the layout.</param>
            <param name="containerContext">Not used by the layout manager directly. It gets passed along to
            methods on the layout container.</param>
            <param name="preferredSizes">A dictionary of the items to be resized and the preferred sizes to which they would like to be sized.</param>
            <param name="autoFitWidth">Specifies whether items will be autofitted horizontally within the 
            layout container rect. Items will be resized in such a way that the width of the preferred size
            of the resultant layout will be equal container rect's width.</param>
            <param name="autoFitHeight">Specifies whether items will be autofitted vertically within the 
            layout container rect. Items will be resized in such a way that the height of the preferred size
            of the resultant layout will be equal container rect's height.</param>
            <param name="newIsWidthAutoState">When an item is resized, items aligned with the resize item need to change
            their is-auto state to false. This parameter will be assigned a list of items whose is-auto state needs to
            change to false.</param>
            <param name="newIsHeightAutoState">Same as newIsWidthAutoState except for heights.</param>
            <returns>Returns the new preferred sizes of one or more items that will result in the preferred sizes of the specified layout items.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeItem(Infragistics.Controls.Layouts.Primitives.ILayoutContainer,System.Object,Infragistics.Controls.Layouts.Primitives.ILayoutItem,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Resizes the specified layout item by specified deltaWidth and deltaHeight. Returns the new
            calculated preferred sizes of one or more items that will result in the resize item's target size.
            </summary>
            <param name="layoutContainer">Layout container. Used for getting the layout area rect, which 
            is used when auto-fitting the layout in in an area that's different than the preferred size of the layout.
            </param>
            <param name="containerContext">Not used by the layout manager directly. It gets passed along to
            methods on the layout container.</param>
            <param name="resizeItem">Item being resized.</param>
            <param name="deltaWidth">Change in the width of the item. Can be 0 to indicate no change.</param>
            <param name="deltaHeight">Change in the height of the item. Can be 0 to indicate no change.</param>
            <param name="autoFitWidth">Specifies whether items will be autofitted horizontally within the 
            layout container rect. Items will be resized in such a way that the width of the preferred size
            of the resultant layout will be equal container rect's width.</param>
            <param name="autoFitHeight">Specifies whether items will be autofitted vertically within the 
            layout container rect. Items will be resized in such a way that the height of the preferred size
            of the resultant layout will be equal container rect's height.</param>
            <returns>Returns the new preferred sizes of one or more items that will result in the target size
            of the resize item.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeItem(Infragistics.Controls.Layouts.Primitives.ILayoutContainer,System.Object,Infragistics.Controls.Layouts.Primitives.ILayoutItem,System.Double,System.Double,System.Boolean,System.Boolean,System.Collections.Generic.IList{Infragistics.Controls.Layouts.Primitives.ILayoutItem},System.Collections.Generic.Dictionary{Infragistics.Controls.Layouts.Primitives.ILayoutItem,System.Boolean}@,System.Collections.Generic.Dictionary{Infragistics.Controls.Layouts.Primitives.ILayoutItem,System.Boolean}@)">
            <summary>
            Resizes the specified layout item by specified deltaWidth and deltaHeight. Returns the new
            calculated preferred sizes of one or more items that will result in the resize item's target size.
            </summary>
            <param name="layoutContainer">Layout container. Used for getting the layout area rect, which 
            is used when auto-fitting the layout in in an area that's different than the preferred size of the layout.
            </param>
            <param name="containerContext">Not used by the layout manager directly. It gets passed along to
            methods on the layout container.</param>
            <param name="resizeItem">Item being resized.</param>
            <param name="deltaWidth">Change in the width of the item. Can be 0 to indicate no change.</param>
            <param name="deltaHeight">Change in the height of the item. Can be 0 to indicate no change.</param>
            <param name="autoFitWidth">Specifies whether items will be autofitted horizontally within the 
            layout container rect. Items will be resized in such a way that the width of the preferred size
            of the resultant layout will be equal container rect's width.</param>
            <param name="autoFitHeight">Specifies whether items will be autofitted vertically within the 
            layout container rect. Items will be resized in such a way that the height of the preferred size
            of the resultant layout will be equal container rect's height.</param>
            <param name="synchronizedItems">A list of items whose size will be synchronized during the resize operation with the specified <paramref name="resizeItem"/></param>
            <param name="newIsWidthAutoState">When an item is resized, items aligned with the resize item need to change
            their is-auto state to false. This parameter will be assigned a list of items whose is-auto state needs to
            change to false.</param>
            <param name="newIsHeightAutoState">Same as newIsWidthAutoState except for heights.</param>
            <returns>Returns the new preferred sizes of one or more items that will result in the target size
            of the resize item.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ConvertToCoordinates(System.Double[])">
            <summary>
            Given an array that represents extents, it converts it to coordinates. The last item
            in the given array should be empty because coordinates require one more item than
            the extents.
            </summary>
            <param name="arr">Array of extents. This array will be modified to be coordinates where
            0th item in the modified array will be 0.</param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.GetContentOffset(System.Windows.Rect,System.Double@,System.Double@,System.Double[],System.Double[])">
            <summary>
            Calculates the offset of contents into the container rect if the container is larger
            than the necessary space.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.GetTotalSize(System.Double[],System.Double[])">
            <summary>
            Calculates the total size.
            </summary>
            <param name="widths">Sum of these values will determine the width of the returned size.</param>
            <param name="heights">Sum of these values will determine the height of the returned size.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.NormalizeRatios(System.Double[])">
            <summary>
            Normalizes ratios so they sum up to 1 by proportionally adjusting each value in the array.
            </summary>
            <param name="ratios"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ColumnWeights">
            <summary>
            Returns the column weights of the gridbag layout. You can change them however they get recalculated 
            once the layout is invalidated. Layout also gets invalidated whenever a layout item is added or removed.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ColumnWidths">
            <summary>
            Returns the preferred column widths of the gridbag layout. You can change them however they get recalculated 
            once the layout is invalidated. Layout also gets invalidated whenever a layout item is added or removed.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ExpandToFitHeight">
            <summary>
            Indicates whether to proportionally expand or shrink the heights of all the items to fit 
            the layout rect. This would only get applied if all the items had 0.0 rowWeight's.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ExpandToFitWidth">
            <summary>
            Indicates whether to proportionally expand or shrink the widths of all the items to fit 
            the layout rect. This would only get applied if all the items had 0.0 columnWeight's.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ShrinkToFitHeight">
            <summary>
            Indicates whether to shrink or not shrink the items' heights to fit the available layout area.
            Overrides the behavior of <see cref="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ExpandToFitHeight"/> property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ShrinkToFitWidth">
            <summary>
            Indicates whether to shrink or not shrink the items' widths to fit the available layout area.
            Overrides the behavior of <see cref="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ExpandToFitWidth"/> property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.HorizontalContentAlignment">
            <summary>
            Specifies where the contents are to be positioned horizontally if there is extra width available.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.VerticalContentAlignment">
            <summary>
            Specifies where the contents are to be positioned vertically if there is extra height available.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.IncludeMarginInPositionRect">
            <summary>
            Indicates whether to include layout item margins in the rect that's specified in when the layout
            item is positioned via PositionItem call on the container. This mirrors the fact that UIElement's 
            Arrange call takes a rect that includes the element's margins.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.InterItemSpacingHorizontal">
            <summary>
            Specifies the horizontal spacing between each item.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.InterItemSpacingVertical">
            <summary>
            Specifies the vertical spacing between each item.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.LayoutMode">
            <summary>
            Internal property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.PreferredSizeIncludesMargin">
            <summary>
            Indicates that the preferred size provided by layout items include their margins. This mirrors
            DesiredSize of UIElement which includes its margins. However note that MinimumSize and MaximumSize
            do not include the margins, just like the UIElement.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.RowHeights">
            <summary>
            Returns the preferred row heights of the gridbag layout. You can change them however they get recalculated 
            once the layout is invalidated. Layout also gets invalidated whenever a layout item is added or removed.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.RowWeights">
            <summary>
            Returns the row weights of the gridbag layout. You can change them however they get recalculated 
            once the layout is invalidated. Layout also gets invalidated whenever a layout item is added or removed.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.AutoLayoutCalc">
            <summary>
            Used for calculating an auto-layout.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.AutoLayoutCalc.#ctor(Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager,System.Windows.Controls.Orientation,System.Boolean,System.Windows.Size,System.Int32,System.Int32,System.Int32,System.Int32,System.Nullable{System.Windows.Controls.Orientation})">
            <summary>
            Constuctor
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.AutoLayoutCalc.GetGCC(Infragistics.Controls.Layouts.Primitives.ILayoutItem)">
            <summary>
            Gets the cached gcc for the specified item. If none has been cached then 
            creates a new gcc and caches it.
            </summary>
            <param name="item">Layout item.</param>
            <returns>Gcc for specified item.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.AutoLayoutCalc.GetLayoutItemDimensionsHelper">
            <summary>
            Returns calculated GridBagLayoutItemDimensionsCollection based on the _lines collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.AutoLayoutCalc.Line.#ctor(Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.AutoLayoutCalc)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.AutoLayoutCalc.Line.CalcExtentY(System.Boolean,System.Double@)">
            <summary>
            Calculates the extent in y direction - height if orientation is 
            horizontal, width if the orientation is vertical.
            </summary>
            <param name="isFirstLine">Whether this is the first line.</param>
            <param name="minExtentY">Min extent y will be stored in this out param.</param>
            <returns>Extent in y direction of the line.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.AutoLayoutCalc.Line.FitItem(Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.GridBagConstraintCache)">
            <summary>
            Tries to fit the specified item in the line and if it can't then returns false.
            </summary>
            <param name="gcc">Item to fit.</param>
            <returns>If the item fits the remaining space in the line then returns true. Returns false otherwise.</returns>
        </member>
        <member name="F:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager._infos">
            <summary>
            Array of LayoutItemInfo where each LayoutItemInfo wraps the original item 
            and caches various information about it.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager._glc">
            <summary>
            Gridbag layout cache.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager._mappings">
            <summary>
            Mapping of original layout items to LayoutItemInfo objects that wrap those layout items.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager._itemsEndingAtCache">
            <summary>
            Used to cache the items that end at a specific logical column or row.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager._isAutoSizing">
            <summary>
            Indicates that the resizing operation for which this manager instance is created is for auto-sizing.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.#ctor(Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager,Infragistics.Controls.Layouts.Primitives.ILayoutContainer,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="layoutManager">Layout manager.</param>
            <param name="layoutContainer">Layout container.</param>
            <param name="containerContext">Layout container context.</param>
            <param name="autoFitWidth">Specifies whether items will be autofitted horizontally within the 
            layout container rect. Items will be resized in such a way that the width of the preferred size
            of the resultant layout will be equal container rect's width.</param>
            <param name="autoFitHeight">Specifies whether items will be autofitted vertically within the 
            layout container rect. Items will be resized in such a way that the height of the preferred size
            of the resultant layout will be equal container rect's height.</param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.ResizeItems(System.Collections.Generic.Dictionary{Infragistics.Controls.Layouts.Primitives.ILayoutItem,System.Windows.Size})">
            <summary>
            Resizes the items to their new sizes.
            </summary>
            <param name="newSizes">Specifies the items to resize and their new sizes.</param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.GetItemsEndingAt(System.Int32,System.Boolean)">
            <summary>
            Gets the items that end at the specified edge (logical column or row depending 
            on the yDimension parameter).
            </summary>
            <param name="edge">If yDimension is true then logical column, otherwise logical row.</param>
            <param name="yDimension">If yDimension is true then edge parameter designates logical column, otherwise it designates logical row.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.GetResizeItemInfosHelper(Infragistics.Controls.Layouts.Primitives.ILayoutItem,System.Collections.Generic.IList{Infragistics.Controls.Layouts.Primitives.ILayoutItem},Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.LayoutItemInfo[]@)">
            <summary>
            A helper method that takes in a resizeItem and synchronizedItems and returns an array of
            LayoutItemInfo objects associated with resizeItem and synchronizedItems combined, making
            sure not duplicating the item.
            </summary>
            <param name="resizeItem"></param>
            <param name="synchronizedItems"></param>
            <param name="itemInfos"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.GetResizeRangeHelper_AdjustDeltaHelper(Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.LayoutItemInfo[],System.Double,System.Boolean)">
            <summary>
            Used when auto-fitting, items can't necessarily be resized to their fullest max or min sizes 
            because the auto-fitting process can potentially constraint the items. This method adjusts
            the delta which are based on the min/max values to a new delta value that takes into account
            this implicit constraint forced by the auto-fitting.
            </summary>
            <param name="resizeItems"></param>
            <param name="delta"></param>
            <param name="yDimension"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.GetResizeResultsHelper(Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.LayoutItemInfo[],System.Double,System.Boolean,System.Collections.Generic.Dictionary{Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.LayoutItemInfo,System.Windows.Size})">
            <summary>
            Calculates the new sizes of the resize items if they were to be resized by the specified delta.
            </summary>
            <param name="resizeItems"></param>
            <param name="delta"></param>
            <param name="yDimension"></param>
            <param name="restorePreferredSizes"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.IsExtentDifferent(Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.LayoutItemInfo[],System.Windows.Size[],System.Boolean)">
            <summary>
            Returns true if the new extent is different than the old extent for any of the resize items.
            </summary>
            <param name="resizeItems"></param>
            <param name="newSizes"></param>
            <param name="yDimension"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.ReCalculateLayout">
            <summary>
            This method is used to re-calculate the layout after changing preferred sizes of 
            one or more items. It updates the cached values as well.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.ResizeItemsHelper(Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.LayoutItemInfo[],System.Windows.Size[],System.Boolean)">
            <summary>
            Resizes the specified items to their new sizes in either horizontal or vertical dimension
            depending upon the yDimension parameter.
            </summary>
            <param name="resizeItems"></param>
            <param name="newSizes"></param>
            <param name="yDimension"></param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.SetPreferredSizes(System.Collections.Generic.Dictionary{Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.LayoutItemInfo,System.Windows.Size})">
            <summary>
            Sets the _preferredSize on the layout items.
            </summary>
            <param name="sizesToSet"></param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.SortResizeItemsHelper(Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.LayoutItemInfo[],System.Windows.Size[],System.Boolean)">
            <summary>
            Sorts the specified resize items and the new sizes so the items are in the order
            of lowest ColumnRight value to highest ColumnRight value.
            </summary>
            <param name="resizeItems"></param>
            <param name="newSizes"></param>
            <param name="yWise"></param>
        </member>
        <member name="T:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.LayoutItemInfo">
            <summary>
            This layout item wraps an item from the actual layout manager.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.LayoutItemInfo._i">
            <summary>
            Original layout item.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.LayoutItemInfo._preferredSize">
            <summary>
            Current preferred size. This may be different from the original preferred size of the
            underlying layout item.  Since resize process may be multi-pass, this value will be 
            updated to reflect the current item dimensions during each pass.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.LayoutItemInfo._gcc">
            <summary>
            Cached GridBagConstraintCache associated with this layout item. This is simply for 
            efficiency reasons as the gcc doesn't have to be retrieved from the 
            GridBagLayoutItemDimensionsCollection.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.LayoutItemInfo._dim">
            <summary>
            Cached current dimension of the item. Since resize process may be multi-pass, this
            value will be updated to reflect the current item dimensions during each pass.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.GridBagLayoutMode">
            <summary>
            GridBagLayout mode.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.GridBagLayoutMode.Standard">
            <summary>
            Standard.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.GridBagLayoutMode.LeftToRight">
            <summary>
            Left to right.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.Markup.CursorExtension">
            <summary>
            Implements a markup extension that creates a <see cref="T:System.Windows.Input.Cursor"/>
            </summary>
            <remarks>
            <p class="body">The CursorExtension is useful for two main scenarios. First, 
            custom cursors are not supported by WPF when run in a low trust scenario. The 
            extension will return the <see cref="P:Infragistics.Windows.Controls.Markup.CursorExtension.FallbackValue"/> in that case. Second, 
            the extension may also be used to build a uri where the name of the assembly 
            may change.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Controls.Markup.CursorExtension.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Controls.Markup.CursorExtension"/>
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.Markup.CursorExtension.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Controls.Markup.CursorExtension"/> with the specified relative path
            </summary>
            <param name="path">A path relative to the uri context where the resource can be located.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.Markup.CursorExtension.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Controls.Markup.CursorExtension"/> with the specified path in the specified assembly.
            </summary>
            <param name="path">The path in the assembly of the <paramref name="typeInAssembly"/> where the cursor resource can be located.</param>
            <param name="typeInAssembly">A type in the assembly that contains the cursor resource</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.Markup.CursorExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            Returns an <see cref="T:System.Windows.Input.Cursor"/> based on the properties of the markup extension.
            </summary>
            <param name="serviceProvider">Object that can provide services for the markup extension.</param>
            <returns>A <see cref="T:System.Windows.Input.Cursor"/> based on the <see cref="P:Infragistics.Windows.Controls.Markup.CursorExtension.Path"/> specified or the <see cref="P:Infragistics.Windows.Controls.Markup.CursorExtension.FallbackValue"/> if one could not be created.</returns>
        </member>
        <member name="P:Infragistics.Windows.Controls.Markup.CursorExtension.Path">
            <summary>
            Returns or sets the string path for the cursor resource within the assembly that includes the <see cref="P:Infragistics.Windows.Controls.Markup.CursorExtension.TypeInAssembly"/>
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.Markup.CursorExtension.TypeInAssembly">
            <summary>
            Returns or sets a type whose assembly contains the cursor resource specified by the <see cref="P:Infragistics.Windows.Controls.Markup.CursorExtension.Path"/>
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.Markup.CursorExtension.FallbackValue">
            <summary>
            Returns or sets the cursor that should be returned if the cursor resource could not be loaded.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.PopupHelper">
            <summary>
            Class that provides attached behaviors for dealing with a <see cref="T:System.Windows.Controls.Primitives.Popup"/>
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PopupHelper.DropDownButtonProperty">
            <summary>
            DropDownButton Attached Dependency Property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.PopupHelper.GetDropDownButton(System.Windows.DependencyObject)">
            <summary>
            Gets the button that acts as the dropdown button for the popup.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.PopupHelper.SetDropDownButton(System.Windows.DependencyObject,System.Windows.Controls.Primitives.ButtonBase)">
            <summary>
            Sets the button that acts as the dropdown button for the popup.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PopupHelper.HandleMouseDownOnCloseProperty">
            <summary>
            HandleMouseDownOnClose Attached Dependency Property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.PopupHelper.GetHandleMouseDownOnClose(System.Windows.DependencyObject)">
            <summary>
            Returns a boolean indicating if the PreviewMouseDown of the Popup should be marked as handled when the Popup is closed.
            </summary>
            <seealso cref="M:Infragistics.Windows.Controls.PopupHelper.SetHandleMouseDownOnClose(System.Windows.DependencyObject,System.Boolean)"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.PopupHelper.SetHandleMouseDownOnClose(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Returns a boolean indicating if the PreviewMouseDown of the Popup should be marked as handled when the Popup is closed.
            </summary>
            <remarks>
            <p class="body">The current implementation of a <see cref="T:System.Windows.Controls.Primitives.Popup"/> is to close itself during the PreviewMouseDown tunnel event 
            and release capture. However, it does not mark the PreviewMouseDown as handled and so the element on which you clicked will 
            still receive a MouseDown event. In certain cases, it is preferrable to have the mouse down that caused the click to be 
            intercepted and not affect the element on which it was clicked until the subsequent mouse click. Setting this property to 
            true will ensure that if the Popup's PreviewMouseDown is invoked and not handled even though the Popup was closed that the 
            PreviewMouseDown is handled and therefore the element on which the mouse was clicked will not receive the MouseDown.</p>
            <p class="note"><b>Note:</b> This property will not affect a popup type implementation whereby the popup was closed during 
            the PreviewMouseDownOutsideCapturedElement.</p>
            </remarks>
            <seealso cref="M:Infragistics.Windows.Controls.PopupHelper.GetHandleMouseDownOnClose(System.Windows.DependencyObject)"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.PopupHelper.BringToFront(System.Windows.Controls.Primitives.Popup)">
            <summary>
            Method used to try and bring a 
            </summary>
            <param name="popup">The popup that should be brought to the front of the z-order.</param>
            <remarks>
            <p class="note"><b>Note:</b> This method requires unmanaged code rights in order to function but will not throw an unhandled exception if 
            the rights are not available.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.Windows.Controls.SimpleTextBlock">
            <summary>
            Class which is optimized to draw single line text in a container which has a fixed size, 
            such as a cell in a data grid.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.SimpleTextBlock.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.Windows.Controls.SimpleTextBlock"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.SimpleTextBlock.MeasureOverride(System.Windows.Size)">
            <summary>
            Invoked to measure the element and its children.
            </summary>
            <param name="constraint">The size that reflects the available size that this element can give to its children.</param>
            <returns>The <see cref="T:System.Windows.Size"/> that represents the desired size of the element.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.SimpleTextBlock.OnCreateAutomationPeer">
            <summary>
            Returns an automation peer that exposes the <see cref="T:Infragistics.Windows.Controls.SimpleTextBlock"/> to UI Automation.
            </summary>
            <returns>A <see cref="T:Infragistics.Windows.Automation.Peers.SimpleTextBlockAutomationPeer"/>.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.SimpleTextBlock.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Renders the contents of the <see cref="T:Infragistics.Windows.Controls.SimpleTextBlock"/> to the drawing context.
            </summary>
            <param name="drawingContext">The drawing context to which the text should be drawn.</param>
        </member>
        <member name="F:Infragistics.Windows.Controls.SimpleTextBlock.FontFamilyProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.SimpleTextBlock.FontFamily"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.SimpleTextBlock.FontSizeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.SimpleTextBlock.FontSize"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.SimpleTextBlock.FontStretchProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.SimpleTextBlock.FontStretch"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.SimpleTextBlock.FontStyleProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.SimpleTextBlock.FontStyle"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.SimpleTextBlock.FontWeightProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.SimpleTextBlock.FontWeight"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.SimpleTextBlock.ForegroundProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.SimpleTextBlock.Foreground"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.SimpleTextBlock.TextProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.SimpleTextBlock.Text"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.SimpleTextBlock.TextAlignmentProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.SimpleTextBlock.TextAlignment"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.SimpleTextBlock.TextDecorationsProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.SimpleTextBlock.TextDecorations"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.SimpleTextBlock.TextTrimmingProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.SimpleTextBlock.TextTrimming"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.SimpleTextBlock.TextWrappingProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.SimpleTextBlock.TextWrapping"/> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SimpleTextBlock.FontFamily">
            <summary>
            Gets or sets the font family used to draw the text.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SimpleTextBlock.FontSize">
            <summary>
            Gets or sets the font size used to draw the text.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SimpleTextBlock.FontStretch">
            <summary>
            Gets or sets the degree to which the font is condensed or expanded when drawn.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SimpleTextBlock.FontStyle">
            <summary>
            Gets or sets the font style of the text.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SimpleTextBlock.FontWeight">
            <summary>
            Gets or sets the weight, or thickness, of the text.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SimpleTextBlock.Foreground">
            <summary>
            Gets or sets the brush used to draw the text.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SimpleTextBlock.Text">
            <summary>
            Gets or sets the text drawn by the element.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SimpleTextBlock.TextAlignment">
            <summary>
            Gets or sets the horizontal alignment of text.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SimpleTextBlock.TextDecorations">
            <summary>
            Gets or sets the collection of effects to apply to the text.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SimpleTextBlock.TextTrimming">
            <summary>
            Gets or sets the text trimming behavior to use when text overflows the render size of the element.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SimpleTextBlock.TextWrapping">
            <summary>
            Gets or sets the text wrapping behavior to use when text overflows the render width of the element.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.SynchronizedSizeDecorator">
            <summary>
            Custom class used to synchronize the extent of two elements separated within the visual tree.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.SynchronizedSizeDecorator.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Controls.SynchronizedSizeDecorator"/>
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.SynchronizedSizeDecorator.MeasureOverride(System.Windows.Size)">
            <summary>
            Invoked to measure the element and its children.
            </summary>
            <param name="availableSize">The size that reflects the available size that this element can give to its children.</param>
            <returns>The <see cref="T:System.Windows.Size"/> that represents the desired size of the element.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.SynchronizedSizeDecorator.OnChildDesiredSizeChanged(System.Windows.UIElement)">
            <summary>
            Invoked when the <see cref="P:System.Windows.UIElement.DesiredSize"/> of an element changes.
            </summary>
            <param name="child">The child whose size is being changed.</param>
        </member>
        <member name="F:Infragistics.Windows.Controls.SynchronizedSizeDecorator.SynchronizeHeightProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.SynchronizedSizeDecorator.SynchronizeHeight"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.SynchronizedSizeDecorator.SynchronizeWidthProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.SynchronizedSizeDecorator.SynchronizeWidth"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.SynchronizedSizeDecorator.TargetProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.SynchronizedSizeDecorator.Target"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.SynchronizedSizeDecorator.SynchronizeHeight">
            <summary>
            Returns or sets a boolean indicating if the height should be synchronized with the <see cref="P:Infragistics.Windows.Controls.SynchronizedSizeDecorator.Target"/>.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.SynchronizedSizeDecorator.SynchronizeHeightProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.SynchronizedSizeDecorator.SynchronizeWidth"/>
            <seealso cref="P:Infragistics.Windows.Controls.SynchronizedSizeDecorator.Target"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.SynchronizedSizeDecorator.SynchronizeWidth">
            <summary>
            Returns or sets a boolean indicating if the width should be synchronized with the <see cref="P:Infragistics.Windows.Controls.SynchronizedSizeDecorator.Target"/>.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.SynchronizedSizeDecorator.SynchronizeWidthProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.SynchronizedSizeDecorator.SynchronizeHeight"/>
            <seealso cref="P:Infragistics.Windows.Controls.SynchronizedSizeDecorator.Target"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.SynchronizedSizeDecorator.Target">
            <summary>
            Returns or sets the other SynchronizedSizeDecorator whose extent is to be synchronized.
            </summary>
            <remarks>
            <p class="note"><b>Note:</b>The Target cannot be an ancestor or descendant of this element.</p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.SynchronizedSizeDecorator.TargetProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.SynchronizedSizeDecorator.SynchronizeWidth"/>
            <seealso cref="P:Infragistics.Windows.Controls.SynchronizedSizeDecorator.SynchronizeHeight"/>
        </member>
        <member name="T:Infragistics.Windows.Tiles.TileDragIndicator">
            <summary>
            This control is used for displaying drag indicator when a tile is being dragged.
            </summary>
            <remarks>
            <b>Note</b> that there is no need for you to instantiate this directly. This control 
            is created autmatically when the user starts a drag operation.
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TileDragIndicator.#ctor">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Windows.Tiles.TileDragIndicator"/> class.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Tiles.TileDragIndicator.ContainerProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Tiles.TileDragIndicator.Container"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Tiles.TileDragIndicator.Container">
            <summary>
            Returns the FrameworkElement containing the item being dragged (read-only).
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Tiles.TileDragManager">
            <summary>
            Class with the logic for starting and managing dragging and dropping of a tile.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TileDragManager.#ctor(Infragistics.Windows.Tiles.TilesPanelBase,System.Windows.FrameworkElement,Infragistics.Windows.Tiles.ItemInfoBase,Infragistics.Windows.Internal.TileManager.LayoutItem,System.Windows.FrameworkElement,Infragistics.Windows.Tiles.AllowTileDragging)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TileDragManager.DragHelper_GetDropInfoHelper(Infragistics.Windows.Tiles.TileDragManager.PointInfo,System.Windows.Point@)">
            <summary>
            Gets the drop info and also displays/moves the drag indicator.
            </summary>
            <param name="mouseLoc"></param>
            <param name="dragIndicatorLocation"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TileDragManager.OnDragEnd(System.Windows.Input.MouseEventArgs,System.Boolean)">
            <summary>
            Called to indicate that the drag operation has ended. Drop will be processed if 'cancel' parameter
            is false.
            </summary>
            <param name="mouseEventArgs">Mouse event args associated with the drag end.</param>
            <param name="cancel">Indicates whether to process the drop operation.</param>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TileDragManager.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Called whenever mouse is moved while drag operation is in progress.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TileDragManager.StartDrag(System.Windows.Input.MouseEventArgs)">
            <summary>
            Starts dragging operation. It displays the drag indicator to indicate that dragging operation is in progress.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Tiles.TileDragManager.Panel">
            <summary>
            Returns the associated panel.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Tiles.TileDragManager.TileManager">
            <summary>
            Returns the associated tiles manager.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Tiles.TileDragManager.Tile">
            <summary>
            Returns the field being dragged.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Tiles.TileDragManager.DropInfo">
            <summary>
            Contains information about a specific drop. It contains info on the new layout.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TileDragManager.DropInfo.#ctor(Infragistics.Windows.Tiles.TileDragManager,System.Boolean)">
            <summary>
            Constructs an invalid drop info. Used for figuring out the drag indicator location.
            </summary>
            <param name="dragManager"></param>
            <param name="isDragAreaInvalid"></param>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TileDragManager.DropInfo.InitializeDropIndicator(Infragistics.Windows.Controls.ToolWindow)">
            <summary>
            Initializes the drop indicator. If the drop indicator should not be
            shown then returns false.
            </summary>
            <param name="indicatorWindow">Drop indicator window.</param>
            <returns>A value indicating whether the drop indicator should be shown.</returns>
        </member>
        <member name="P:Infragistics.Windows.Tiles.TileDragManager.DropInfo.IsDragAreaInvalid">
            <summary>
            Indicates if the item is currently being dragged outside of valid drop area.
            For example, if the item is 
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Tiles.TileDragManager.RectInfo">
            <summary>
            Contains rect information and the element its relative to.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TileDragManager.RectInfo.#ctor(Infragistics.Windows.Tiles.TileDragManager,System.Windows.Rect,System.Windows.FrameworkElement)">
            <summary>
            Constructor
            </summary>
            <param name="dragManager">Drag manager</param>
            <param name="rect">Rectangle</param>
            <param name="relativeTo">This is the element that the specified rectangle is relative to. If null then
            the rect is taken to be relative to the screen.</param>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TileDragManager.RectInfo.GetRect">
            <summary>
            Gets the rect relative to data presenter.
            </summary>
            <returns>Rect relative to data presenter.</returns>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TileDragManager.RectInfo.GetRect(System.Windows.UIElement)">
            <summary>
            Gets the rect relative to specified element. If null then gets the rect in screen coordinates.
            </summary>
            <param name="relativeTo"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TileDragManager.RectInfo.Contains(Infragistics.Windows.Tiles.TileDragManager.PointInfo)">
            <summary>
            Checks to see if the rect contains specified point.
            </summary>
            <param name="point">Point to check.</param>
            <returns>True if the rect contains the point, false otherwise.</returns>
        </member>
        <member name="T:Infragistics.Windows.Tiles.TileDragManager.PointInfo">
            <summary>
            Contains point info and which element its relative to.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TileDragManager.PointInfo.GetPosition">
            <summary>
            Returns the mouse position relative to data presenter.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Windows.Tiles.AllowTileDragging">
            <summary>
            Determines whether tiles can be dragged from one location to another.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Tiles.AllowTileDragging.No">
            <summary>
            Tiles can not be dragged from one location to another
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Tiles.AllowTileDragging.Swap">
            <summary>
            A tile can be dragged to a new location. The Tile is repositioned when the drop occurs at which time its swaps its location with the Tile being dropped upon. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Tiles.AllowTileDragging.Slide">
            <summary>
            A tile can be dragged to a new location. During the drag operation other tiles are dynamically animated over to make room for the Tile being dragged.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Tiles.MaximizedTileLayoutOrder">
            <summary>
            Determines how the maximized tiles will be arranged.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Tiles.MaximizedTileLayoutOrder.VerticalWithLastTileFill">
            <summary>
            Arrange maximized tiles one after another from top to bottom to fill all available space then move to the next column in a snaking fashion. If the resulting number of rows times columns doesn't exactly match the number of maximized tiles then the last tile will span any remaining rows in order to fill up all the avaialble space in the maximized area.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Tiles.MaximizedTileLayoutOrder.Vertical">
            <summary>
            Arrange maximized tiles one after another from top to bottom to fill all available space then move to the next column in a snaking fashion.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Tiles.MaximizedTileLayoutOrder.HorizontalWithLastTileFill">
            <summary>
            Arrange maximized tiles one after another from left to right to fill all available columns then move to the next row below in a snaking fashion. If the resulting number of rows times columns doesn't exactly match the number of maximized tiles then the last tile will span any remaining columns in order to fill up all the avaialble space in the maximized area.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Tiles.MaximizedTileLayoutOrder.Horizontal">
            <summary>
            Arrange maximized tiles one after another from left to right to fill all available columns then move to the next row below in a snaking fashion.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Tiles.MaximizedTileLayoutOrder.SingleColumn">
            <summary>
            Arrange maximized maxmized tiles vertically, one on top of the other.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Tiles.MaximizedTileLayoutOrder.SingleRow">
            <summary>
            Arrange maximized maxmized tiles horizontally, left to right.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Tiles.MaximizedTileLocation">
            <summary>
            Determines where the maximized tile area will be relative to the minimized tile area
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Tiles.MaximizedTileLocation.Left">
            <summary>
            Maximized tiles are arranged on the left therefore minimized tiles are on the right.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Tiles.MaximizedTileLocation.Right">
            <summary>
            Maximized tiles are arranged on the right therefore minimized tiles are on the left.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Tiles.MaximizedTileLocation.Top">
            <summary>
            Maximized tiles are arranged on the top therefore minimized tiles are on the bottom.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Tiles.MaximizedTileLocation.Bottom">
            <summary>
            Maximized tiles are arranged on the bottom therefore minimized tiles are on the top.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Tiles.TileLayoutOrder">
            <summary>
            Determines how the tiles will be laid out in normal mode
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Tiles.TileLayoutOrder.Vertical">
            <summary>
            Position tiles one after another from top to bottom to fill all available space vertically then move to the next column in a snaking fashion to form uniform rows and columns.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Tiles.TileLayoutOrder.VerticalVariable">
            <summary>
            Position tiles one after another from top to bottom to fill all available space vertically then move to the next column in a snaking fashion supporting variable height tiles so that each column can have a different number of tiles.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Tiles.TileLayoutOrder.Horizontal">
            <summary>
            Position tiles one after another from left to right to fill all available columns then move to the next row in a snaking fashion to form uniform rows and columns.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Tiles.TileLayoutOrder.HorizontalVariable">
            <summary>
            Position tiles one after another from left to right to fill all available space horizontally then move to the next row in a snaking fashion supporting variable width tiles so that each row can have a different number of tiles.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Tiles.TileLayoutOrder.UseExplicitRowColumnOnTile">
            <summary>
            Position tiles based on their explicit Row, RowSpan, Column, and ColumnSpan settings.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Tiles.TileState">
            <summary>
            Represents the state of an indiviual tile
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Tiles.TileState.Normal">
            <summary>
            All tiles will return 'Normal' as long as no tile is in a 'Maximized' state. Conversely if any Tile is 'Maximized' then no Tile with return 'Normal'.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Tiles.TileState.Maximized">
            <summary>
            If any tile is in a 'Maximized' state then all other tiles can only be 'Maximized', 'Minimized' or 'MinimizedExpanded'.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Tiles.TileState.Minimized">
            <summary>
            'Minimized' is only returned if there is at least one tile in a 'Maximized' state. A Tile in the 'Minimized' state will usually just display its Header not its Content.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Tiles.TileState.MinimizedExpanded">
            <summary>
            'MinimizedExpanded' is only returned if there is at least one tile in a 'Maximized' state. A Tile in the 'MinimizedExpanded' state will usually display its Header and its Content but the Tile will be grouped with all other minimized Tiles, both collapsed and expanded.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Tiles.ItemInfoBase">
            <summary>
            An object that maintains certain status information for an item in a tile
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Tiles.ItemInfoBase.#ctor(Infragistics.Windows.Internal.TileManager,System.Object,System.Int32)">
            <summary>
            Instantiates and instance of a <see cref="T:Infragistics.Windows.Tiles.ItemInfoBase"/>
            </summary>
            <param name="manager">The asociated managae</param>
            <param name="item">The item</param>
            <param name="index">The orginal index of the item (not required)</param>
        </member>
        <member name="M:Infragistics.Windows.Tiles.ItemInfoBase.BringIntoView">
            <summary>
            Brings the item into view
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Tiles.ItemInfoBase.ClearSizeCustomization">
            <summary>
            This clears any individual resize operations for this item 
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Tiles.ItemInfoBase.GetCurrentColumn">
            <summary>
            Returns the column of the item in the current display 
            </summary>
            <returns>The current zero-based column, if the item is currently displayed, otherwise it returns -1.</returns>
            <remarks>
            <para class="note"><b>Note:</b> this value is relative to the first column of items being currently displayed</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Tiles.ItemInfoBase.GetCurrentConstraints">
            <summary>
            Returns the resolved constraints of this item in the current display 
            </summary>
            <returns>An object that implements the <see cref="T:Infragistics.Windows.Tiles.ITileConstraints"/> interface for this item, if the item is currently displayed, otherwise it returns null.</returns>
        </member>
        <member name="M:Infragistics.Windows.Tiles.ItemInfoBase.GetCurrentRow">
            <summary>
            Returns the row of the item in the current display 
            </summary>
            <returns>The current zero-based row, if the item is currently displayed, otherwise it returns -1.</returns>
            <remarks>
            <para class="note"><b>Note:</b> this value is relative to the first row of items being currently displayed</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Tiles.ItemInfoBase.GetCurrentTargetRect">
            <summary>
            Returns the current target rect of the item 
            </summary>
            <returns>The current target rect, after animations have been completed. If the item will not be in view then Rect.Empty will be returned.</returns>
        </member>
        <member name="M:Infragistics.Windows.Tiles.ItemInfoBase.GetIsClosed">
            <summary>
            Determines if the item is closed
            </summary>
            <returns>True if the tile is closed</returns>
        </member>
        <member name="M:Infragistics.Windows.Tiles.ItemInfoBase.GetIsMaximized">
            <summary>
            Determines if the tile is maximized
            </summary>
            <returns>True if the item is maximized</returns>
        </member>
        <member name="M:Infragistics.Windows.Tiles.ItemInfoBase.GetResizeRange(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Returns the resize range for this item
            </summary>
            <param name="maxDeltaLeft"></param>
            <param name="maxDeltaRight"></param>
            <param name="maxDeltaTop"></param>
            <param name="maxDeltaBottom"></param>
        </member>
        <member name="M:Infragistics.Windows.Tiles.ItemInfoBase.OnResize(System.Double,System.Double)">
            <summary>
            Called when the item is resized
            </summary>
            <param name="deltaX"></param>
            <param name="deltaY"></param>
        </member>
        <member name="M:Infragistics.Windows.Tiles.ItemInfoBase.InvalidateScrollPosition">
            <summary>
            Invalidates the scroll position.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> dervied classes should call this when their IsClosed or IsMaximized state has changed</para>
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Tiles.ItemInfoBase.Index">
            <summary>
            Returns the index of the item in the Items collection (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Tiles.ItemInfoBase.Item">
            <summary>
            Returns the associated item (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Tiles.ItemInfoBase.LogicalIndex">
            <summary>
            Returns the logical index of the item (read-only)
            </summary>
            <value>A zero-based index reprresenting the item's relative position in the display or -1 if the item was not found.</value>
            <remarks>
            <para class="note"><b>Note:</b> this will return the same value as the <see cref="P:Infragistics.Windows.Tiles.ItemInfoBase.Index"/> property unless the user has re-positioned one or more <see cref="N:Infragistics.Windows.Tiles"/> in which case the logical index represents the position of this item relative to other items.</para>
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Tiles.ItemInfoBase.OccupiesScrollPosition">
            <summary>
            Returns true if this item occupies a scroll position (read-only)
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> this will return false if the item is closed or maximized.</para>
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Tiles.ItemInfoBase.ScrollPosition">
            <summary>
            Gets the overall scroll position of this item (read-only).
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> ietms that are collapsed or maximized are not included in the scroll count.</para>
            </remarks>
            <value>The zero based scroll position or -1 for collapsed or maximized items.</value>
        </member>
        <member name="P:Infragistics.Windows.Tiles.ItemInfoBase.Manager">
            <summary>
            Returns the asscciated manager (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Tiles.ItemInfoBase.PreferredSizeOverride">
            <summary>
            Gets/sets an explicit size to be returned as the item's preferred size.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> this setting may be ignored if a syncronized size is being used. Otherwise, if this property returns a width and/or height > 0 it will take precedence over all other settings but only when the item's state is normal.</para>
            </remarks>
        </member>
        <member name="T:Infragistics.Windows.Tiles.ITileConstraints">
            <summary>
            Returns constraint information for tiles
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Tiles.ITileConstraints.HorizontalAlignment">
            <summary>
            Gets the horizontal alignment of the tile within its allocated slot (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Tiles.ITileConstraints.Margin">
            <summary>
            Gets the margin used around a tile (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Tiles.ITileConstraints.MaxHeight">
            <summary>
            Gets the maximum height of a tile (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Tiles.ITileConstraints.MaxWidth">
            <summary>
            Gets the maximum width of a tile (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Tiles.ITileConstraints.MinHeight">
            <summary>
            Gets the minimum height of a tile (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Tiles.ITileConstraints.MinWidth">
            <summary>
            Gets the minimum width of a tile (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Tiles.ITileConstraints.PreferredHeight">
            <summary>
            Gets the preferred height of a tile (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Tiles.ITileConstraints.PreferredWidth">
            <summary>
            Gets the preferred width of a tile (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Tiles.ITileConstraints.VerticalAlignment">
            <summary>
            Gets the vertical alignment of the tile within its allocated slot (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Internal.TileManager">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Internal.TileManager.GetItemInfo(System.Object)">
            <summary>
            Retuns the <see cref="T:Infragistics.Windows.Tiles.ItemInfoBase"/> associated with a specific item
            </summary>
            <param name="item">The item</param>
            <returns>An <see cref="T:Infragistics.Windows.Tiles.ItemInfoBase"/> object</returns>
        </member>
        <member name="M:Infragistics.Windows.Internal.TileManager.GetItemInfo(System.Object,System.Boolean,System.Int32)">
            <summary>
            Retuns the <see cref="T:Infragistics.Windows.Tiles.ItemInfoBase"/> associated with a specific item
            </summary>
            <param name="item">The item</param>
            <param name="createIfNotFound">True to create an ItemInfoBase if one doesn't exist.</param>
            <param name="originalItemIndex">The index of the item in the items collection or -1.</param>
            <returns>An <see cref="T:Infragistics.Windows.Tiles.ItemInfoBase"/> object</returns>
        </member>
        <member name="M:Infragistics.Windows.Internal.TileManager.SortItems(System.Collections.Generic.IComparer{Infragistics.Windows.Tiles.ItemInfoBase})">
            <summary>
            Sorts the items (adjusts their logical index)
            </summary>
            <param name="comparer">The comparer to use</param>
        </member>
        <member name="M:Infragistics.Windows.Internal.TileManager.CreateItemInfo(System.Object,System.Int32)">
            <summary>
            Factory method to return a new instance of a ItemInfoBase derived class to represent an item.
            </summary>
            <param name="item">The item to represent</param>
            <param name="index">The index of the item in the items collection.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Internal.TileManager.InitializePanel(Infragistics.Windows.Tiles.TilesPanelBase)">
            <summary>
            For internal use only
            </summary>
            <param name="panel"></param>
        </member>
        <member name="P:Infragistics.Windows.Internal.TileManager.Panel">
            <summary>
            Gets the associated panel (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Tiles.TilesPanelBase">
            <summary>
            A <see cref="T:System.Windows.Controls.Panel"/> derived element that arranges and displays its child elements as tiles, with native support for scrolling and virtualizing those items.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Virtualization.RecyclingItemsPanel">
            <summary>
            Abstract base class for panels that want to take advantage of recycling item containers.
            </summary>
            <remarks>
            <para class="body">In order to recycle item containers, the panel must be the ItemsHost for a <see cref="T:Infragistics.Windows.Virtualization.RecyclingItemsControl"/>. Otherwise, one of the other <see cref="T:Infragistics.Windows.Controls.ItemContainerGenerationMode"/>s will be used.</para>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Virtualization.RecyclingItemsControl"/>
            <seealso cref="T:Infragistics.Windows.Controls.ItemContainerGenerationMode"/>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemsPanel.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemsPanel.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="removeDeactivatedContainersOnCleanup">If true then when recyling will remove deactivated containers during a cleanup operation.</param>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemsPanel.AddInternalChild(System.Windows.UIElement)">
            <summary>
            Adds the specified UIElement to the InternalChildren collection of a VirtualizingPanel element.
            </summary>
            <param name="child">The UIElement child to add to the collection.</param>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemsPanel.GetVisualChild(System.Int32)">
            <summary>
            Gets a child element at the specied index.
            </summary>
            <param name="index">The zero-based index of the child element</param>
            <returns>The child element.</returns>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemsPanel.InsertInternalChild(System.Int32,System.Windows.UIElement)">
            <summary>
            Adds the specified UIElement to the InternalChildren collection of a VirtualizingPanel element at the specified index position.
            </summary>
            <param name="index">The index position within the collection at which the child element is inserted.</param>
            <param name="child">The UIElement child to add to the collection.</param>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemsPanel.OnIsItemsHostChanged(System.Boolean,System.Boolean)">
            <summary>
            Invoked when the <see cref="P:System.Windows.Controls.Panel.IsItemsHost"/> has changed.
            </summary>
            <param name="oldIsItemsHost">The old property value</param>
            <param name="newIsItemsHost">The new property value</param>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemsPanel.OnItemsChanged(System.Object,System.Windows.Controls.Primitives.ItemsChangedEventArgs)">
            <summary>
            Called when one or more items have changed
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemsPanel.RemoveInternalChildRange(System.Int32,System.Int32)">
            <summary>
            Removes child elements from the InternalChildren collection.
            </summary>
            <param name="index">The beginning index position within the collection at which the first child element is removed.</param>
            <param name="range">The total number of child elements to remove from the collection.</param>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemsPanel.ContainerFromIndex(System.Int32)">
            <summary>
            Returns the element corresponding to the item at the given index within the ItemCollection.
            </summary>
            <param name="index">The index of the desired item.</param>
            <returns>Returns the element corresponding to the item at the given index within the ItemCollection or returns null if the item is not realized.</returns>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemsPanel.ContainerFromItem(System.Object)">
            <summary>
            Returns the UIElement container corresponding to the given item.
            </summary>
            <param name="item">The Object item to find the UIElement container for.</param>
            <returns>A UIElement that corresponds to the given item. Returns null if the item does not belong to the item collection, or if an UIElement has not been generated for it.</returns>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemsPanel.ItemFromContainer(System.Windows.DependencyObject)">
            <summary>
            Returns the item that corresponds to the specified, generated UIElement. 
            </summary>
            <param name="container">The DependencyObject that corresponds to the item to be returned.</param>
            <returns>A DependencyObject that is the item which corresponds to the specified, generated UIElement. If the UIElement has not been generated, UnsetValue is returned.</returns>
            <exception cref="T:System.ArgumentNullException">container is null</exception>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemsPanel.RemoveAllDeactivatedContainers">
            <summary>
            Removes all generated containers that have previously been deactivated.
            </summary>
            <remarks class="note"><b>Note:</b> This method does nothing unless the <see cref="P:Infragistics.Windows.Virtualization.RecyclingItemsPanel.ItemContainerGenerationModeResolved"/> property returns 'Recycle'.</remarks>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemsPanel.BeginGeneration(Infragistics.Windows.Selection.ScrollDirection)">
            <summary>
            Called at the beginning of the generation process.
            </summary>
            <remarks>
            <para class="body">This method is usually called at the beginnning of a <see cref="T:Infragistics.Windows.Virtualization.RecyclingItemsPanel"/> derived class's <b>MeasureOverride</b> logic. 
            This is normally followed by one or more <see cref="M:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.StartAt(System.Windows.Controls.Primitives.GeneratorPosition,System.Windows.Controls.Primitives.GeneratorDirection,System.Boolean)"/>/<see cref="M:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.GenerateNext(System.Boolean@)"/> loops to generate all 'active' containers. Finally, the <see cref="M:Infragistics.Windows.Virtualization.RecyclingItemsPanel.EndGeneration"/> method is called at the end of the measure logic.</para>
            </remarks>
            <param name="scrollDirection">Relative to the last generation to let the generator optimize the recycling logic.</param>
            <seealso cref="M:Infragistics.Windows.Virtualization.RecyclingItemsPanel.EndGeneration"/>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemsPanel.BeginGeneration(Infragistics.Windows.Selection.ScrollDirection,System.Collections.IEnumerable)">
            <summary>
            Called at the beginning of the generation process.
            </summary>
            <remarks>
            <para class="body">This method is usually called at the beginnning of a <see cref="T:Infragistics.Windows.Virtualization.RecyclingItemsPanel"/> derived class's <b>MeasureOverride</b> logic. 
            This is normally followed by one or more <see cref="M:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.StartAt(System.Windows.Controls.Primitives.GeneratorPosition,System.Windows.Controls.Primitives.GeneratorDirection,System.Boolean)"/>/<see cref="M:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.GenerateNext(System.Boolean@)"/> loops to generate all 'active' containers. Finally, the <see cref="M:Infragistics.Windows.Virtualization.RecyclingItemsPanel.EndGeneration"/> method is called at the end of the measure logic.</para>
            </remarks>
            <param name="scrollDirection">Relative to the last generation to let the generator optimize the recycling logic.</param>
            <param name="itemsExpectedToBeGenerated">An optional list of items are are expected to be generated. This is used to optimize eleme nt recycling.</param>
            <seealso cref="M:Infragistics.Windows.Virtualization.RecyclingItemsPanel.EndGeneration"/>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemsPanel.CleanupUnusedGeneratedElements">
            <summary>
            Causes previously generated elements that are no longer in view to be 'un-generated'
            and removed from our parent children collection.
            </summary>
            <returns>True if more unused (i.e., invisible) elements remain to be cleaned up, false if all unused elements have been cleaned up</returns>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemsPanel.DeactivateAllContainers">
            <summary>
            Deactivates all containers.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemsPanel.DeactivateContainer(System.Windows.DependencyObject)">
            <summary>
            Deactivates a specific container.
            </summary>
            <param name="container">The container to deactivate.</param>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemsPanel.EndGeneration">
            <summary>
            Called at the end of the generation process.
            </summary>
            <seealso cref="M:Infragistics.Windows.Virtualization.RecyclingItemsPanel.BeginGeneration(Infragistics.Windows.Selection.ScrollDirection,System.Collections.IEnumerable)"/>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemsPanel.InvalidateZOrder">
            <summary>
            Invalidates the Zorder of the elements.
            </summary>
            <remarks class="note"><b>Note:</b> This method does nothing if the <see cref="P:Infragistics.Windows.Virtualization.RecyclingItemsPanel.ItemContainerGenerationModeResolved"/> is not equal to 'Recycle' or the <see cref="P:Infragistics.Windows.Virtualization.RecyclingItemsPanel.CountOfActiveContainers"/> is less than 2.</remarks>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemsPanel.TriggerCleanupOfUnusedGeneratedItems(System.Boolean)">
            <summary>
            Called to trigger a cleanup of unused generated items.
            </summary>
            <param name="useDelay">True to cleanup items after a delay, false to cleanup items asynchronously in the background.</param>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemsPanel.GetCanCleanupItem(System.Int32)">
            <summary>
            Derived classes must return whether the item at the specified index can be cleaned up.
            </summary>
            <param name="itemIndex">The index of the item to be cleaned up.</param>
            <returns>True if the item at the specified index can be cleaned up, false if it cannot.</returns>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemsPanel.GetChildIndexFromItemIndex(System.Int32)">
            <summary>
            Returns the child index associated with the specified item index.
            </summary>
            <param name="itemIndex">The index of an item in the <see cref="T:System.Windows.Controls.ItemsControl"/>'s list.</param>
            <returns>The index of the child element that contains the specified item.</returns>
            <seealso cref="T:System.Windows.Controls.ItemsControl"/>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemsPanel.GetItemIndexFromChildIndex(System.Int32)">
            <summary>
            Returns the item index associated with the specified child index.
            </summary>
            <param name="childIndex">The index of the child element that contains the specified item.</param>
            <returns>The index of the item in the <see cref="T:System.Windows.Controls.ItemsControl"/>'s list.</returns>
            <seealso cref="T:System.Windows.Controls.ItemsControl"/>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemsPanel.OnNewElementRealized(System.Windows.UIElement,System.Int32)">
            <summary>
            Called after a newly realized element is generated, added to the children collection and 'prepared'.
            </summary>
            <param name="element">The newly realized element</param>
            <param name="index">The position at which the element was added to the children collection</param>
        </member>
        <member name="P:Infragistics.Windows.Virtualization.RecyclingItemsPanel.Children">
            <summary>
            Returns the collection of child elements for this panel when the <see cref="P:Infragistics.Windows.Virtualization.RecyclingItemsPanel.ItemContainerGenerationModeResolved"/> is set to something other than <b>Recycle</b>.
            </summary>
            <remarks>
            <p class="note">The <see cref="P:Infragistics.Windows.Virtualization.RecyclingItemsPanel.Children"/> property is not used when the <see cref="P:Infragistics.Windows.Virtualization.RecyclingItemsPanel.ItemContainerGenerationModeResolved"/> is set to <b>Recycle</b>. Instead, the 
            <see cref="P:Infragistics.Windows.Virtualization.RecyclingItemsPanel.ChildElements"/> property should be used.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Virtualization.RecyclingItemsPanel.ChildElements">
            <summary>
            Returns the collection of child elements for this panel.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Virtualization.RecyclingItemsPanel.LogicalChildren">
            <summary>
            Gets an enumerator that can iterate the logical child elements of this element.
            </summary>
            <value>An IEnumerator. This property has no default value.</value>
        </member>
        <member name="P:Infragistics.Windows.Virtualization.RecyclingItemsPanel.VisualChildrenCount">
            <summary>
            Returns the count of the parent child elements
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Virtualization.RecyclingItemsPanel.ActiveItemContainerGenerator">
            <summary>
            Returns the active item generator (read-only)
            </summary>
            <value>If the <see cref="P:Infragistics.Windows.Virtualization.RecyclingItemsPanel.ItemContainerGenerationModeResolved"/> property returns 'Recycle' this will return the <see cref="T:Infragistics.Windows.Virtualization.RecyclingItemsControl"/>'s <see cref="P:Infragistics.Windows.Virtualization.RecyclingItemsControl.RecyclingItemContainerGenerator"/>, otherwise it will return the base ItemsControl's ItemContainerGenerator.</value>
        </member>
        <member name="P:Infragistics.Windows.Virtualization.RecyclingItemsPanel.ItemContainerGenerationModeResolved">
            <summary>
            Returns the resolved value for the ItemContainerGenerationMode property (read-only)
            </summary>
            <remarks>
            <para class="note"><b>Note: </b>The default value of 'Recycle' only has meaning when the <see cref="T:Infragistics.Windows.Virtualization.RecyclingItemsPanel"/> is used within a <see cref="T:Infragistics.Windows.Virtualization.RecyclingItemsControl"/>. When used inside other ItemsControls this property will return 'Virtualize' place of 'Recycle'.</para>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Virtualization.RecyclingItemsControl"/>
            <seealso cref="P:Infragistics.Windows.Virtualization.RecyclingItemsControl.ItemContainerGenerationMode"/>
        </member>
        <member name="P:Infragistics.Windows.Virtualization.RecyclingItemsPanel.IsOkToCleanupUnusedGeneratedElements">
            <summary>
            Called when elements are about to be cleaned up.  Return true to allow cleanup, false to prevent cleanup.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Virtualization.RecyclingItemsPanel.TotalVisibleGeneratedItems">
            <summary>
            Derived classes must return the number of visible generated items.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Virtualization.RecyclingItemsPanel.MaximumUnusedGeneratedItemsToKeep">
            <summary>
            Returns the maximum number of unused generated items that should be kept around at any given time.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Scrolling.IDeferredScrollPanel">
            <summary>
            Interface implemented by the contents of a ScrollViewer that should support deferred scrolling.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Scrolling.IDeferredScrollPanel.SupportsDeferredScrolling(System.Windows.Controls.Orientation,System.Windows.Controls.ScrollViewer)">
            <summary>
            Returns a boolean indicating whether scrolling in the specified orientation can be deferred.
            </summary>
            <param name="scrollBarOrientation">Orientation of the scrollbar whose thumb is being dragged.</param>
            <param name="scrollViewer">ScrollViewer whose scroll thumb is being dragged.</param>
            <returns>Returns true if the panel could support deferred scrolling in the specified orientation.</returns>
        </member>
        <member name="M:Infragistics.Windows.Scrolling.IDeferredScrollPanel.OnThumbDragStart(System.Windows.Controls.Primitives.Thumb,System.Windows.Controls.Orientation)">
            <summary>
            Invoked when the scroll thumb has started being dragged.
            </summary>
            <param name="thumb">The thumb element being dragged</param>
            <param name="scrollBarOrientation">Orientation of the scrollbar whose thumb is being dragged</param>
        </member>
        <member name="M:Infragistics.Windows.Scrolling.IDeferredScrollPanel.OnThumbDragComplete(System.Boolean)">
            <summary>
            Invoked when the scroll thumb has been released after a drag operation.
            </summary>
            <param name="cancelled">True if the drag operation was cancelled; otherwise false.</param>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.#ctor">
            <summary>
            Instantiates a new instance of a <see cref="T:Infragistics.Windows.Tiles.TilesPanelBase"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positions child elements and determines a size for this element.
            </summary>
            <param name="finalSize">The size available to this element for arranging its children.</param>
            <returns>The <see cref="T:System.Windows.Size"/> used by this element to arrange its children.</returns>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.BringIndexIntoView(System.Int32)">
            <summary>
            Generates the container for the specific index and brings it into view
            </summary>
            <param name="index">The position of the item in the list</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the index is out of range.</exception>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.CreateUIElementCollection(System.Windows.FrameworkElement)">
            <summary>
            Returns a UIElementCollection instance for storing child elements.
            </summary>
            <param name="logicalParent">The logical parent element of the collection to be created.</param>
            <returns>An ordered collection of elements that have the specified logical parent.</returns>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetCanCleanupItem(System.Int32)">
            <summary>
            Derived classes must return whether the item at the specified index can be cleaned up.
            </summary>
            <param name="itemIndex">The index of the item to be cleaned up.</param>
            <returns>True if the item at the specified index can be cleaned up, false if it cannot.</returns>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetLayoutClip(System.Windows.Size)">
            <summary>
            Returns a geometry for the clipping mask for the element.
            </summary>
            <param name="layoutSlotSize">The size of the element</param>
            <returns>A geometry to clip that takes into account the TileAreaPadding</returns>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.MeasureOverride(System.Windows.Size)">
            <summary>
            Invoked to measure the element and its children.
            </summary>
            <param name="availableSize">The size that reflects the available size that this element can give to its children.</param>
            <returns>The <see cref="T:System.Windows.Size"/> that represents the desired size of the element.</returns>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.OnChildDesiredSizeChanged(System.Windows.UIElement)">
            <summary>
            Invoked when the <see cref="P:System.Windows.UIElement.DesiredSize"/> of an element changes.
            </summary>
            <param name="child">The child whose size is being changed.</param>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.OnItemsChanged(System.Object,System.Windows.Controls.Primitives.ItemsChangedEventArgs)">
            <summary>
            Called when the contents of the associated list changes.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="args">An instance of ItemsChangedEventArgs that contains information about the items that were changed.</param>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when mouse capture is lost
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when the left button is released.
            </summary>
            <param name="e">arguments</param>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when the mouse is moved.
            </summary>
            <param name="e">arguments</param>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.OnNewElementRealized(System.Windows.UIElement,System.Int32)">
            <summary>
            Called after a newly realized element is generated, added to the children collection and 'prepared'.
            </summary>
            <param name="element">The newly realized element</param>
            <param name="index">The position at which the element was added to the children collection</param>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary>
            Called when a child element is added or meoved
            </summary>
            <param name="visualAdded"></param>
            <param name="visualRemoved"></param>
        </member>
        <member name="F:Infragistics.Windows.Tiles.TilesPanelBase.ColumnProperty">
            <summary>
            Identifies the Column attached dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetColumn(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the Column attached property of the specified element, -1 indicates that the tile will be positioned relative to the previous tile in the panel. The default value is 0.
            </summary>
            <param name="elem">This element's Column value will be returned.</param>
            <returns>The value of the Column attached property. The default value is 0.</returns>
            <remarks>
            <para class="note"><b>Note:</b> this property is ignored unless <see cref="T:Infragistics.Windows.Tiles.TileLayoutOrder"/> is 'UseExplicitRowColumnOnTile'.</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.SetColumn(System.Windows.DependencyObject,System.Int32)">
            <summary>
            Sets the value of the Column attached property of the specified element, -1 indicates that the tile will be positioned relative to the previous tile in the panel. The default value is 0.
            </summary>
            <param name="elem">This element's Column value will be set.</param>
            <param name="value">Value to set. This can be -1 which will position the element relative to previous element in the panel.</param>
            <remarks>
            <para class="note"><b>Note:</b> this property is ignored unless <see cref="T:Infragistics.Windows.Tiles.TileLayoutOrder"/> is 'UseExplicitRowColumnOnTile'.</para>
            </remarks>
        </member>
        <member name="F:Infragistics.Windows.Tiles.TilesPanelBase.ColumnSpanProperty">
            <summary>
            Identifies the ColumnSpan attached dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetColumnSpan(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the ColumnSpan attached property of the specified element, 0 indicates
            that the element will occupy the remainder of the space in its logical column. The default is 1. 
            </summary>
            <param name="elem">This element's ColumnSpan value will be returned.</param>
            <returns>The value of the ColumnSpan attached property. The default value is 1.</returns>
            <remarks>
            <para class="note"><b>Note:</b> this property is ignored unless <see cref="T:Infragistics.Windows.Tiles.TileLayoutOrder"/> is 'UseExplicitRowColumnOnTile'.</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.SetColumnSpan(System.Windows.DependencyObject,System.Int32)">
            <summary>
            Sets the value of the ColumnSpan attached property of the specified element, 0 indicates
            that the element will occupy the remainder of the space in its logical column. The default is 1. 
            </summary>
            <param name="elem">This element's ColumnSpan value will be set.</param>
            <param name="value">Value to set. This can be 0 to indicate that the element should occupy the remainder of the logical column.</param>
            <remarks>
            <para class="note"><b>Note:</b> this property is ignored unless <see cref="T:Infragistics.Windows.Tiles.TileLayoutOrder"/> is 'UseExplicitRowColumnOnTile'.</para>
            </remarks>
        </member>
        <member name="F:Infragistics.Windows.Tiles.TilesPanelBase.ColumnWeightProperty">
            <summary>
            Identifies the ColumnWeight attached dependency property
            </summary>
            <seealso cref="M:Infragistics.Windows.Tiles.TilesPanelBase.GetColumnWeight(System.Windows.DependencyObject)"/>
            <seealso cref="M:Infragistics.Windows.Tiles.TilesPanelBase.SetColumnWeight(System.Windows.DependencyObject,System.Single)"/>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetColumnWeight(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the ColumnWeight attached property of the specified element. ColumnWeight specifies
            how any extra width will be distributed among elements.
            </summary>
            <returns>The value of the ColumnWeight attached property. The default vaue is 0.</returns>
            <seealso cref="F:Infragistics.Windows.Tiles.TilesPanelBase.ColumnWeightProperty"/>
            <seealso cref="M:Infragistics.Windows.Tiles.TilesPanelBase.SetColumnWeight(System.Windows.DependencyObject,System.Single)"/>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.SetColumnWeight(System.Windows.DependencyObject,System.Single)">
            <summary>
            Sets the value of the ColumnWeight attached property of the specified element. ColumnWeight specifies
            how any extra width will be distributed among elements.
            </summary>
            <returns>The value of the ColumnWeight attached property.</returns>
            <seealso cref="F:Infragistics.Windows.Tiles.TilesPanelBase.ColumnWeightProperty"/>
            <seealso cref="M:Infragistics.Windows.Tiles.TilesPanelBase.GetColumnWeight(System.Windows.DependencyObject)"/>
        </member>
        <member name="F:Infragistics.Windows.Tiles.TilesPanelBase.IsDraggingProperty">
            <summary>
            Identifies the IsDragging" attached readonly dependency property
            </summary>
            <seealso cref="M:Infragistics.Windows.Tiles.TilesPanelBase.GetIsDragging(System.Windows.DependencyObject)"/>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetIsDragging(System.Windows.DependencyObject)">
            <summary>
            Returns whether this tile is currently being dragged (read-only)
            </summary>
            <seealso cref="F:Infragistics.Windows.Tiles.TilesPanelBase.IsDraggingProperty"/>
        </member>
        <member name="F:Infragistics.Windows.Tiles.TilesPanelBase.IsSwapTargetProperty">
            <summary>
            Identifies the IsSwapTarget" attached readonly dependency property
            </summary>
            <seealso cref="M:Infragistics.Windows.Tiles.TilesPanelBase.GetIsSwapTarget(System.Windows.DependencyObject)"/>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetIsSwapTarget(System.Windows.DependencyObject)">
            <summary>
            Returns whether another tile is being dragged over this tile and if released will swap positions with this tile (read-only)
            </summary>
            <seealso cref="F:Infragistics.Windows.Tiles.TilesPanelBase.IsSwapTargetProperty"/>
        </member>
        <member name="F:Infragistics.Windows.Tiles.TilesPanelBase.RowProperty">
            <summary>
            Identifies the Row attached dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetRow(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the Row attached property of the specified element, -1 indicates that the tile will be positioned relative to the previous tile in the panel. The default value is 0. 
            </summary>
            <param name="elem">This element's Row value will be returned.</param>
            <returns>The value of the Row attached property. The default value is 0.</returns>
            <remarks>
            <para class="note"><b>Note:</b> this property is ignored unless <see cref="T:Infragistics.Windows.Tiles.TileLayoutOrder"/> is 'UseExplicitRowColumnOnTile'.</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.SetRow(System.Windows.DependencyObject,System.Int32)">
            <summary>
            Sets the value of the Row attached property of the specified element, -1 indicates that the tile will be positioned relative to the previous tile in the panel. The default value is 0.
            </summary>
            <param name="elem">This element's Row value will be set.</param>
            <param name="value">Value to set. This can be -1 which will position the element relative to previous element in the panel.</param>
            <remarks>
            <para class="note"><b>Note:</b> this property is ignored unless <see cref="T:Infragistics.Windows.Tiles.TileLayoutOrder"/> is 'UseExplicitRowColumnOnTile'.</para>
            </remarks>
        </member>
        <member name="F:Infragistics.Windows.Tiles.TilesPanelBase.RowSpanProperty">
            <summary>
            Identifies the RowSpan attached dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetRowSpan(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the RowSpan attached property of the specified element, 0 indicates
            that the element will occupy the remainder of the space in its logical column. The default is 1. 
            </summary>
            <param name="elem">This element's RowSpan value will be returned.</param>
            <returns>The value of the RowSpan attached property. The default value is 1.</returns>
            <remarks>
            <para class="note"><b>Note:</b> this property is ignored unless <see cref="T:Infragistics.Windows.Tiles.TileLayoutOrder"/> is 'UseExplicitRowColumnOnTile'.</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.SetRowSpan(System.Windows.DependencyObject,System.Int32)">
            <summary>
            Sets the value of the RowSpan attached property of the specified element, 0 indicates
            that the element will occupy the remainder of the space in its logical column. The default is 1. 
            </summary>
            <param name="elem">This element's RowSpan value will be set.</param>
            <param name="value">Value to set. This can be 0 to indicate that the element should occupy the remainder of the logical row.</param>
            <remarks>
            <para class="note"><b>Note:</b> this property is ignored unless <see cref="T:Infragistics.Windows.Tiles.TileLayoutOrder"/> is 'UseExplicitRowColumnOnTile'.</para>
            </remarks>
        </member>
        <member name="F:Infragistics.Windows.Tiles.TilesPanelBase.RowWeightProperty">
            <summary>
            Identifies the RowWeight attached dependency property
            </summary>
            <seealso cref="M:Infragistics.Windows.Tiles.TilesPanelBase.GetRowWeight(System.Windows.DependencyObject)"/>
            <seealso cref="M:Infragistics.Windows.Tiles.TilesPanelBase.SetRowWeight(System.Windows.DependencyObject,System.Single)"/>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetRowWeight(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the RowWeight attached property of the specified element. RowWeight specifies
            how any extra height will be distributed among elements.
            </summary>
            <returns>The value of the RowWeight attached property. The default value is 0.</returns>
            <seealso cref="F:Infragistics.Windows.Tiles.TilesPanelBase.RowWeightProperty"/>
            <seealso cref="M:Infragistics.Windows.Tiles.TilesPanelBase.SetRowWeight(System.Windows.DependencyObject,System.Single)"/>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.SetRowWeight(System.Windows.DependencyObject,System.Single)">
            <summary>
            Sets the value of the RowWeight attached property of the specified element. RowWeight specifies
            how any extra height will be distributed among elements.
            </summary>
            <returns>The value of the RowWeight attached property.</returns>
            <seealso cref="F:Infragistics.Windows.Tiles.TilesPanelBase.RowWeightProperty"/>
            <seealso cref="M:Infragistics.Windows.Tiles.TilesPanelBase.GetRowWeight(System.Windows.DependencyObject)"/>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetInViewRect(System.Windows.DependencyObject)">
            <summary>
            Returns the area of the specified container that is in view or will be in view when the current animations end.
            </summary>
            <param name="container">The container in question.</param>
            <returns>A rect (in coordinates relative to the container) that represents the area of the container that will be in view once all animations have ended. If no part of the container will be in view then an empty rect is returned.</returns>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetActualMinimizedAreaExtent">
            <summary>
            Gets the actual extent of the minimized area
            </summary>
            <returns>An value that represents the actual width of the minimized area in maximized mode when MaximizedTileLocation is 'Left' or 'Right'. When MaximizedTileLocation is 'Top' or 'Bottom', it represents the actual height.</returns>
            <remarks>
            <para class="note"><b>Note:</b> if not in maximizd mode then this method returns 0.</para>
            </remarks>
            <seealso cref="M:Infragistics.Windows.Tiles.TilesPanelBase.GetExplicitMinimizedAreaExtent"/>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetItemsInView">
            <summary>
            Returns an array if <see cref="T:Infragistics.Windows.Tiles.ItemInfoBase"/> objects representing all of the items that will be arranged in view.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> this array represents the items that will be in view after pending animations have been completed. Also, in normal mode with a <see cref="T:Infragistics.Windows.Tiles.TileLayoutOrder"/> of 'UseExplicitRowColumnOnTile' all items will be returned from this list, not just those in view, since in this mode all items are measured and arranged.</para>
            </remarks>
            <returns>An array of ItemInfoBase objects</returns>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetItemAtScrollIndex(System.Int32)">
            <summary>
            Returns the item at the specified scroll index
            </summary>
            <param name="scrollIndex">The zero-based index.</param>
            <returns>The item at the specified scroll index</returns>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetMaximizedTileArea(System.Boolean)">
            <summary>
            Returns the area of the panel that will include maximized tiles.
            </summary>
            <param name="clipToOverallTileArea">If true will clip the returned rect to the tile area, inside the TileAreaPadding.</param>
            <returns>A rect of the tile area that includes maximized tiles</returns>
            <remarks>
            <para class="note"><b>Note:</b> this rect is only reliable after a measure has been processed. Also, if the last measure wasn't processed while in maxmized mode this will return the entire tile area.</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetMaximizedTileAreaConstraints">
            <summary>
            Returns the constraints for the maximized tile area
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> this is only reliable after a measure has been processed.</para>
            </remarks>
            <returns>A constraints object for the maximized tile area or null if not in maximized mode.</returns>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetMinimizedTileArea(System.Boolean)">
            <summary>
            Returns the area of the panel that will include minimized tiles.
            </summary>
            <param name="clipToOverallTileArea">If true will clip the returned rect to the tile area, inside the TileAreaPadding.</param>
            <returns>A rect of the tile area that includes minimized tiles</returns>
            <remarks>
            <para class="note"><b>Note:</b> this rect is only reliable after a measure has been processed. Also, if the last measure wasn't processed while in maxmized mode this will return the entire tile area.</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetMinimizedTileAreaConstraints">
            <summary>
            Returns the constraints for the minimized tile area
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> this is only reliable after a measure has been processed.</para>
            </remarks>
            <returns>A constraints object for the minimized tile area or null if not in maximized mode.</returns>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetOffsetFromScrollPosition(System.Int32)">
            <summary>
            Returns the offset that corresponds to the specified scrollposition.
            </summary>
            <param name="scrollPosition">The specified scroll position</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetScrollPositionFromOffset(System.Double)">
            <summary>
            Returns the scrollposition that corresponds to the specified offset.
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetTargetRectOfItem(System.Object)">
            <summary>
            Returns the final rect where this item will be arranged once animations have been completed 
            </summary>
            <param name="item">The item in question.</param>
            <returns>The target rect</returns>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetTargetRectOfContainer(System.Windows.DependencyObject)">
            <summary>
            Returns the final rect where this container will be arranged once animations have been completed 
            </summary>
            <param name="container">The elemment in question.</param>
            <returns>The target rect</returns>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetTileArea">
            <summary>
            Returns the area of the panel that will include tiles, (i.e inside the padding).
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> this rect is only reliable after a measure has been processed.</para>
            </remarks>
            <returns>A rect of the tile area</returns>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetTotalColumnsDisplayed">
            <summary>
            Returns the total number of columns that will be displayed once animations have been completed.
            </summary>
            <returns>The total number of columns that will be displayed once animations have completed</returns>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetTotalRowsDisplayed">
            <summary>
            Returns the total number of rows that will be displayed once animations have been completed.
            </summary>
            <returns>The total number of rows that will be displayed once animations have completed</returns>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.IsContainerInArrangeCache(System.Windows.DependencyObject)">
            <summary>
            Returns if a specific container is currently in the arrange cache
            </summary>
            <param name="container">The container in question</param>
            <returns>True if the container is being processed by the arrange logic</returns>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.MoveTile(System.Windows.FrameworkElement,System.Object,System.Windows.Point)">
            <summary>
            Moves a tile to another location.
            </summary>
            <param name="container">The tile to maove</param>
            <param name="item">The assocated item</param>
            <param name="point">The point relative to this panel.</param>
            <returns>True if the tile was successfully moved.</returns>
            <remarks>
            <para class="body">This will result in an equilalent action as if the user had dragged the tile to the speecidied point.</para>
            <para class="note">This method will return false if <see cref="T:Infragistics.Windows.Tiles.AllowTileDragging"/> is not 'Swap' or 'Slide' or the specified point is not over another Tile that can be moved.</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.StartTileDrag(System.Windows.FrameworkElement,System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Called to start a drag operation on a tile
            </summary>
            <param name="container"></param>
            <param name="item"></param>
            <param name="e">Mouse event args</param>
            <returns>True if the drag operation was started.</returns>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.CanSwapContainers(System.Windows.FrameworkElement,Infragistics.Windows.Tiles.ItemInfoBase,System.Windows.FrameworkElement,Infragistics.Windows.Tiles.ItemInfoBase)">
            <summary>
            Returns true if the containers can be swapped
            </summary>
            <param name="dragItemContainer">The container of the item to be dragged.</param>
            <param name="dragItemInfo">The associated drag item's info</param>
            <param name="swapTargetContainer">The container that is the targetof the swap.</param>
            <param name="swapTargetItemInfo">he associated swap target item's info</param>
            <returns>The default implementaion returns true if both are maximizd or both are not maximized.</returns>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetAllowTileDragging(System.Windows.FrameworkElement,Infragistics.Windows.Tiles.ItemInfoBase)">
            <summary>
            Returns whether this item can be dragged
            </summary>
            <param name="container">The container of the item to be dragged.</param>
            <param name="itemInfo">The associated item's info</param>
            <returns>The default implementaion returns 'No'.</returns>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetCanDropContainer(System.Windows.FrameworkElement,Infragistics.Windows.Tiles.ItemInfoBase,Infragistics.Windows.Tiles.TileState,System.Int32)">
            <summary>
            Returns whether this container can be dropped at this location.
            </summary>
            <param name="container">The container to be dropped.</param>
            <param name="itemInfo">The associated item's info</param>
            <param name="newState">The new state of the item if the container is dropped here.</param>
            <param name="newLogicalIndex">The new logical index of the item if the container is dropped here.</param>
            <returns>The default implementaion return true.</returns>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetContainerConstraints(System.Windows.DependencyObject,Infragistics.Windows.Tiles.TileState)">
            <summary>
            Gets any explicit constraints for a container
            </summary>
            <param name="container">The container in question.</param>
            <param name="state">The current state of the container.</param>
            <returns>A <see cref="T:Infragistics.Windows.Tiles.ITileConstraints"/> object or null.</returns>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetContainerState(System.Windows.DependencyObject)">
            <summary>
            Gets the state of a container
            </summary>
            <param name="container">The container in question.</param>
            <returns>A <see cref="T:Infragistics.Windows.Tiles.TileState"/> enumeration. The default is 'Normal'.</returns>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetDefaultConstraints(Infragistics.Windows.Tiles.TileState)">
            <summary>
            Gets the default constraints for a specific state
            </summary>
            <param name="state">The state in question.</param>
            <returns>A <see cref="T:Infragistics.Windows.Tiles.ITileConstraints"/> object or null.</returns>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetDefaultMinimumItemSize">
            <summary>
            Gets the default minimium size for items.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> this default value is used if the constraints are left set to 0.</para>
            </remarks>
            <returns>The default minimum size for items.</returns>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetExplicitMinimizedAreaExtent">
            <summary>
            Gets an explicit extent for the minimized tile area
            </summary>
            <returns>An value that represents the width of the minimized area in maximized mode when MaximizedTileLocation is 'Left' or 'Right'. When MaximizedTileLocation is 'Top' or 'Bottom', it represents the height.</returns>
            <remarks>
            <para class="note"><b>Note:</b> if this method returns the default value of 0 then the indivdual tile preferred sizes will be used to determine the extent of this area.</para>
            </remarks>
            <seealso cref="M:Infragistics.Windows.Tiles.TilesPanelBase.GetActualMinimizedAreaExtent"/>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetHorizontalTileAreaAlignment">
            <summary>
            Determines the horizontal alignment of the complete block of visible tiles within the control.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetInterTileAreaSpacing">
            <summary>
            Determines the amount of spacing between the maximized tile area and the miminized tile area when in maximized mode.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetInterTileSpacing(System.Boolean,Infragistics.Windows.Tiles.TileState)">
            <summary>
            Gets the amount of spacing between tiles in a specific state.
            </summary>
            <param name="vertical">True for vertical spacing, false for horzontal spacing.</param>
            <param name="state">The state of the tiles.</param>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetIsInDeferredScrollingMode">
            <summary>
            Returns true if scrolling is deferred until the scroll thumb is released.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetIsInMaximizedMode">
            <summary>
            Returns true if there is at least one tile whose <see cref="T:Infragistics.Windows.Tiles.TileState"/> is 'Maximized'.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetManager">
            <summary>
            Gets the associated <see cref="T:Infragistics.Windows.Internal.TileManager"/>
            </summary>
            <returns>Must return a TileManager object</returns>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetMaximizedItems">
            <summary>
            Returns a read-only collection of the items that are maximized.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetMaximizedItemLimit">
            <summary>
            Returns the maximimum number of items allowed in the collection returned from <see cref="M:Infragistics.Windows.Tiles.TilesPanelBase.GetMaximizedItems"/>
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetMaximizedTileLocation">
            <summary>
            Gets where the maximized tiles will be arranged relative to the minimized tiles.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetMaximizedTileLayoutOrder">
            <summary>
            Gets how multiple maximized tiles are laid out relative to one another
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetMaxColumns">
            <summary>
            Gets the maximum number of colums to use when arranging tiles in 'Normal' mode..
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetMaxRows">
            <summary>
            Gets the maximum number of rows to use when arranging tiles in 'Normal' mode..
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetMinColumns">
            <summary>
            Gets the minimum number of colums to use when arranging tiles in 'Normal' mode..
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetMinRows">
            <summary>
            Gets the minimum number of rows to use when arranging tiles in 'Normal' mode..
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetRepositionAnimation">
            <summary>
            Determines how a tile&gt; animates from one location to another.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> this property will be ignored if <see cref="M:Infragistics.Windows.Tiles.TilesPanelBase.GetShouldAnimate"/> returns 'False'.</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetResizeAnimation">
            <summary>
            Determines how a tile&gt; animates from one size to another.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> this property will be ignored if <see cref="M:Infragistics.Windows.Tiles.TilesPanelBase.GetShouldAnimate"/> returns 'False'.</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetShouldAnimate">
            <summary>
            Gets/sets whether tiles will animate to their new position and size
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetShowAllTiles">
            <summary>
            Gets whether all tiles should be arranged in view
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetShowAllMinimizedTiles">
            <summary>
            Gets whether all minimized tiles should be arranged in view
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetSupportsDeferredScrolling(System.Windows.Controls.Orientation,System.Windows.Controls.ScrollViewer)">
            <summary>
            Returns a boolean indicating whether scrolling in the specified orientation can be deferred.
            </summary>
            <param name="scrollBarOrientation">Orientation of the scrollbar whose thumb is being dragged.</param>
            <param name="scrollViewer">ScrollViewer whose scroll thumb is being dragged.</param>
            <returns>Returns true if the panel could support deferred scrolling in the specified orientation.</returns>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetSynchronizedSize">
            <summary>
            Gets a size that will be used for all items
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> this size is ignored in maximized mode or if <see cref="M:Infragistics.Windows.Tiles.TilesPanelBase.GetTileLayoutOrder"/> returns 'UseExplicitRowColumnOnTile'. 
            Also, if TileLayoutOrder is 'HorizontalVariable' only the synchronized height will be used. Likewise, if it is 'VerticalVaraible' only
            the synchronized width will be used.</para>
            </remarks>
            <returns>The size to use for all items or null</returns>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetTileAreaPadding">
            <summary>
            Get the amount of space between the panel and the area where the tiles are arranged.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetTileLayoutOrder">
            <summary>
            Determines how the panel will layout the tiles.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.GetVerticalTileAreaAlignment">
            <summary>
            Determines the vertical alignment of the complete block of visible tiles within the control.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.OnAnimationEnded(System.Windows.DependencyObject)">
            <summary>
            Called when animations have completed on a specific container
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.OnContainersSwapped(System.Windows.FrameworkElement,Infragistics.Windows.Tiles.ItemInfoBase,System.Windows.FrameworkElement,Infragistics.Windows.Tiles.ItemInfoBase)">
            <summary>
            Called when a container dropped on another to swap it.
            </summary>
            <param name="dragItemContainer">The container of the item that was dragged.</param>
            <param name="dragItemInfo">The associated drag item's info</param>
            <param name="swapTargetContainer">The container that is the target of the swap.</param>
            <param name="swapTargetItemInfo">The associated swap target item's info</param>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.OnDeferredScrollingStarted(System.Windows.Controls.Primitives.Thumb,System.Windows.Controls.Orientation)">
            <summary>
            Called when the user has initiated a scrolling operation by dragging the scroll thumb.
            </summary>
            <remarks>
            <para class="note"><b>Note: </b> This method will only be called if <see cref="M:Infragistics.Windows.Tiles.TilesPanelBase.GetIsInDeferredScrollingMode"/> returns true.</para>
            <para></para>
            This is a convenient place for derived classes to create a ToolTip to use as a scroll tip.  The <see cref="M:Infragistics.Windows.Tiles.TilesPanelBase.OnDeferredScrollingEnded(System.Boolean)"/> method will be called when the user stops dragging the scroll thumb.
            </remarks>
            <seealso cref="M:Infragistics.Windows.Tiles.TilesPanelBase.GetIsInDeferredScrollingMode"/> cref=""/&gt;
            <seealso cref="M:Infragistics.Windows.Tiles.TilesPanelBase.OnDeferredScrollingEnded(System.Boolean)"/> cref=""/&gt;
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.OnDeferredScrollingEnded(System.Boolean)">
            <summary>
            Called when the user has completed a scroll thumb drag operation by releasing the mouse.
            </summary>
            <remarks>
            <para class="note"><b>Note: </b> This method will only be called if <see cref="M:Infragistics.Windows.Tiles.TilesPanelBase.GetIsInDeferredScrollingMode"/> returns true.</para>
            <para></para>
            This is a convenient place for derived classes to cleanup a ToolTip previously created in OnDeferredScrollingStarted.
            </remarks>
            <seealso cref="M:Infragistics.Windows.Tiles.TilesPanelBase.GetIsInDeferredScrollingMode"/> cref=""/&gt;
            <seealso cref="M:Infragistics.Windows.Tiles.TilesPanelBase.OnDeferredScrollingStarted(System.Windows.Controls.Primitives.Thumb,System.Windows.Controls.Orientation)"/> cref=""/&gt;
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.OnDeferredScrollOffsetChanged(System.Double)">
            <summary>
            Called when the scroll position changes while we are in deferred drag mode.
            </summary>
            <remarks>
            <para class="note"><b>Note: </b> This method will only be called if <see cref="M:Infragistics.Windows.Tiles.TilesPanelBase.GetIsInDeferredScrollingMode"/> returns true.</para>
            </remarks>
            <seealso cref="M:Infragistics.Windows.Tiles.TilesPanelBase.GetIsInDeferredScrollingMode"/> cref=""/&gt;
            <seealso cref="M:Infragistics.Windows.Tiles.TilesPanelBase.OnDeferredScrollingStarted(System.Windows.Controls.Primitives.Thumb,System.Windows.Controls.Orientation)"/> cref=""/&gt;
            <seealso cref="M:Infragistics.Windows.Tiles.TilesPanelBase.OnDeferredScrollingEnded(System.Boolean)"/> cref=""/&gt;
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.OnItemsInViewChanged">
            <summary>
            Called when animations have completed after the items in view have changed
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.OnTileDragStart(System.Windows.FrameworkElement)">
            <summary>
            Called when a drag operation has started
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.OnTileDragEnd(System.Windows.FrameworkElement)">
            <summary>
            Called when a drag operation has ended
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.UpdateTransform(System.Windows.DependencyObject,System.Windows.Rect,System.Windows.Rect,System.Windows.Rect,System.Windows.Vector,System.Double,System.Boolean)">
            <summary>
            Called during animations to reposition, resize elements.
            </summary>
            <remarks>
            <para clas="note"><b>Note:</b> derived classeds must override this method to update the RenderTransform for the container</para>
            </remarks>
            <param name="container">The element being moved.</param>
            <param name="originalRect">The original location of the element before the animation started.</param>
            <param name="currentRect">The current location of the element.</param>
            <param name="targetRect">The target location of the element once the animation has completed.</param>
            <param name="offset">Any addition offset to apply to the current rect.</param>
            <param name="resizeFactor">A number used during a resize animation where 0 repreents the starting size and 1 represents the ending size.</param>
            <param name="calledFromArrange">True is called during the initial arrange pass.</param>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.VerifyMaximizedItems">
            <summary>
            Called to make sure the list returned from <see cref="M:Infragistics.Windows.Tiles.TilesPanelBase.GetMaximizedItems"/> is in synch with the items collection.
            </summary>
            <remarks>
            <para class="note"><b>Note: </b>Derived classes that support maximized tiles should override this method and ensure that the MaximizedItems collection is in synch.</para>
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Tiles.TilesPanelBase.HasLogicalOrientation">
            <summary>
            Gets a value that indicates whether the Panel arranges its descendants in a single dimension.
            </summary>
            <remarks>Always returns True.</remarks>
        </member>
        <member name="P:Infragistics.Windows.Tiles.TilesPanelBase.IsOkToCleanupUnusedGeneratedElements">
            <summary>
            Called when elements are about to be cleaned up.  Return true to allow cleanup, false to prevent cleanup.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Tiles.TilesPanelBase.LogicalOrientation">
            <summary>
            The orientation of the panel
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Tiles.TilesPanelBase.MaximumUnusedGeneratedItemsToKeep">
            <summary>
            Returns the maximum number of unused generated items that should be kept around at any given time.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Tiles.TilesPanelBase.TotalVisibleGeneratedItems">
            <summary>
            Derived classes must return the number of visible generated items.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Tiles.TilesPanelBase.IsAnimationInProgress">
            <summary>
            Returns true if a reposition ot resize animation is in progress (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Tiles.TilesPanelBase.ScrollPosition">
            <summary>
            Returns/sets the current scroll position in the list of items.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Tiles.TilesPanelBase.ScrollIndexOfFirstArrangedItem">
            <summary>
            Returns the zero-based index of the first item that is arranged (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Tiles.TilesPanelBase.ScrollIndexOfLastArrangedItem">
            <summary>
            Returns the zero-based index of the last item that is arranged (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Tiles.TilesPanelBase.TilesPanelUIElementCollection">
            <summary>
            The Collection containg the child elements of a <see cref="P:Infragistics.Windows.Tiles.TilesPanelBase.TilesPanelUIElementCollection.TilesPanelBase"/> 
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.TilesPanelUIElementCollection.#ctor(Infragistics.Windows.Tiles.TilesPanelBase,System.Windows.UIElement,System.Windows.FrameworkElement)">
            <summary>
            Creates an instance of the TilesPanelUIElementCollection class.
            </summary>
            <remarks>
            <p class="note"><b>Note: </b>This class is for internal use only.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.TilesPanelUIElementCollection.Add(System.Windows.UIElement)">
            <summary>
            Adds an element to the collection.
            </summary>
            <param name="element">The element to add</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.TilesPanelUIElementCollection.Clear">
            <summary>
            Clears the collection
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.TilesPanelUIElementCollection.GetEnumerator">
            <summary>
            Returns an IEnumerator that can be used to iterate through the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.TilesPanelUIElementCollection.Insert(System.Int32,System.Windows.UIElement)">
            <summary>
            Inserts an item into the collection at a specified index
            </summary>
            <param name="index">The location to insert the item</param>
            <param name="element">The item to insert.</param>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.TilesPanelUIElementCollection.Remove(System.Windows.UIElement)">
            <summary>
            Removes an item from the collection.
            </summary>
            <param name="element">The item to remove</param>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.TilesPanelUIElementCollection.RemoveAt(System.Int32)">
            <summary>
            Removes an item from the collection at a specific index..
            </summary>
            <param name="index">The index of the item to be removed</param>
        </member>
        <member name="M:Infragistics.Windows.Tiles.TilesPanelBase.TilesPanelUIElementCollection.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of items from the collection
            </summary>
            <param name="index">The index of the first items to remove.</param>
            <param name="count">The number of items to remove.</param>
        </member>
        <member name="T:Infragistics.Windows.Controls.UniformGridEx">
            <summary>
            A custom panel that positions each item in a separate cell within a grid of evenly sized cells.
            </summary>
            <remarks>
            <p class="body">The number of rows and columns of cells are based on the <see cref="P:Infragistics.Windows.Controls.UniformGridEx.Rows"/> and 
            <see cref="P:Infragistics.Windows.Controls.UniformGridEx.Columns"/> properties respectively. The first item is positioned based on the 
            <see cref="P:Infragistics.Windows.Controls.UniformGridEx.FirstRow"/> and <see cref="P:Infragistics.Windows.Controls.UniformGridEx.FirstColumn"/>. Each subsequent item is positioned in the 
            next column. When there are no more columns within the row, the next item will be positioned in 
            the first cell of the next row.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Controls.UniformGridEx.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Controls.UniformGridEx"/>
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.UniformGridEx.ColumnsProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.UniformGridEx.Columns"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.UniformGridEx.FirstColumnProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.UniformGridEx.FirstColumn"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.UniformGridEx.FirstRowProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.UniformGridEx.FirstRow"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.UniformGridEx.RowsProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.UniformGridEx.Rows"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.UniformGridEx.MeasureOverride(System.Windows.Size)">
            <summary>
            Invoked to measure the element and its children.
            </summary>
            <param name="availableSize">The size that reflects the available size that this element can give to its children.</param>
            <returns>The <see cref="T:System.Windows.Size"/> that represents the desired size of the element.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.UniformGridEx.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positions child elements and determines a size for this element.
            </summary>
            <param name="finalSize">The size available to this element for arranging its children.</param>
            <returns>The <see cref="T:System.Windows.Size"/> used by this element to arrange its children.</returns>
        </member>
        <member name="P:Infragistics.Windows.Controls.UniformGridEx.Columns">
            <summary>
            Gets or sets the number of columns in the grid
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.UniformGridEx.ColumnsProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.UniformGridEx.FirstColumn">
            <summary>
            Gets or sets the number of leading blank columns in the first row of the grid
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.UniformGridEx.FirstColumnProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.UniformGridEx.FirstRow">
            <summary>
            Gets or sets the number of blank rows to display before the first item is arranged.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.UniformGridEx.FirstRowProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.UniformGridEx.Rows">
            <summary>
            Gets or sets the number of rows in the grid
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.UniformGridEx.RowsProperty"/>
        </member>
        <member name="T:Infragistics.Windows.Internal.AdornerEx">
            <summary>
            Abstract class for internal use only
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Internal.AdornerEx.#ctor(System.Windows.FrameworkElement)">
            <summary>
            Creates an instance of an AdornerEx derived class
            </summary>
            <param name="adornedElement"></param>
        </member>
        <member name="T:Infragistics.Windows.Internal.DataBindingUtilities">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Internal.DataBindingUtilities.GetUnderlyingItemSource(System.Object)">
            <summary>
            Gets the underlying data source.
            </summary>
            <param name="source">The source object.</param>
            <returns>The underlying source of the items.</returns>
            <remarks>
            <para class="note"><b>Note:</b> if source implements <see cref="T:System.ComponentModel.ICollectionView"/> then its <see cref="P:System.ComponentModel.ICollectionView.SourceCollection"/> will be returned. If it implements <see cref="T:System.ComponentModel.IListSource"/> then its <see cref="M:System.ComponentModel.IListSource.GetList"/> method is called.</para></remarks>
        </member>
        <member name="M:Infragistics.Windows.Internal.DataBindingUtilities.GetXmlNodeProperties(System.Xml.XmlNode)">
            <summary>
            Gets the collection of property descriptors for an XmlNode. 
            </summary>
            <param name="node">the node</param>
            <returns>Property collection.</returns>
        </member>
        <member name="M:Infragistics.Windows.Internal.DataBindingUtilities.IsKnownType(System.Type)">
            <summary>
            Checks if the type is a known type (to Infragistics controls).
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Internal.DataBindingUtilities.StripMember(System.String)">
            <summary>
            Used to strip out all characters that are before the last period
            of the passed in value.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Internal.DataBindingUtilities.GetObjectForComparison(System.Object)">
            <summary>
            This method returns the object that will be compared against when syncing data bound items
            with the underlying bound list.
            </summary>
            <param name="listObject"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Internal.DataBindingUtilities.GetDataSourceNullValue(System.ComponentModel.PropertyDescriptor,System.Object@)">
            <summary>
            Gets the null or empty value that should be used for the specified property descriptor.
            </summary>
            <param name="propertyDescriptor">Property descriptor instance</param>
            <param name="nullValue">This out param will be set to the null value.</param>
            <returns>True if null value was ascertained from property descriptor, false otherwise.</returns>
        </member>
        <member name="M:Infragistics.Windows.Internal.DataBindingUtilities.DataBindConvert(System.Object,System.Type,System.Globalization.CultureInfo,System.String,System.IFormatProvider,System.Boolean@)">
            <summary>
            Converts source value to destination type using specific culture.
            </summary>
            <param name="source">Value to convert. Can be null or DBNull.</param>
            <param name="destinationType">Type to convert to.</param>
            <param name="culture">Specific culture used for conversion. If null, default culture is used.</param>
            <param name="format">Format string.</param>
            <param name="formatInfo">Format provider.</param>
            <param name="validConversion">True if the conversion was valid.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Infragistics.Windows.Internal.DataBindingUtilities.GetSampleData">
            <summary>
            Creates an xml data provider used to display sample data
            </summary>
            <returns>Returns an object suitable for use as a item source for an ItemsControl derived class"/></returns>
        </member>
        <member name="T:Infragistics.Windows.Internal.DataBindingUtilities.ValuePropertyDescriptorCreator">
            <summary>
            Delegate for property descriptor creators.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Internal.DataColumnPropertyDescriptor">
            <summary>
            Wraps a DataColumn to provide consisten access to cell data
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Internal.DataColumnPropertyDescriptor.#ctor(System.Data.DataColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Windows.Internal.DataColumnPropertyDescriptor"/> class.
            </summary>
            <param name="column">The associated <see cref="T:System.Data.DataColumn"/></param>
        </member>
        <member name="M:Infragistics.Windows.Internal.DataColumnPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            Returns false.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Internal.DataColumnPropertyDescriptor.GetValue(System.Object)">
            <summary>
            Returns the value of the property on the passed in object.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Internal.DataColumnPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            Does nothing.
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:Infragistics.Windows.Internal.DataColumnPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            Returns true.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Internal.DataColumnPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the property on the passed in object.
            </summary>
            <param name="component"></param>
            <param name="value"></param>
        </member>
        <member name="P:Infragistics.Windows.Internal.DataColumnPropertyDescriptor.Column">
            <summary>
            Gets the DataColumn
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Internal.DataColumnPropertyDescriptor.ComponentType">
            <summary>
            Gets component type.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Internal.DataColumnPropertyDescriptor.DisplayName">
            <summary>
            Returns the name to display for the property
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Internal.DataColumnPropertyDescriptor.PropertyType">
            <summary>
            Gets property type.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Internal.DataColumnPropertyDescriptor.IsBrowsable">
            <summary>
            Returns true is the value is browsable.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Internal.DataColumnPropertyDescriptor.IsReadOnly">
            <summary>
            Returns true is the value is read-only.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Internal.ValuePropertyDescriptor">
            <summary>
            Represents a pseudo property to deal with arrays of 
            primitive types.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Internal.ValuePropertyDescriptor.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Windows.Internal.ValuePropertyDescriptor"/> class
            </summary>
            <param name="type">The associated property type</param>
            <param name="name">The name of the property</param>
        </member>
        <member name="M:Infragistics.Windows.Internal.ValuePropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            Returns false.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Internal.ValuePropertyDescriptor.GetValue(System.Object)">
            <summary>
            Returns the passed in object.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Internal.ValuePropertyDescriptor.ResetValue(System.Object)">
            <summary>
            Does nothing.
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:Infragistics.Windows.Internal.ValuePropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            Returns true.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Internal.ValuePropertyDescriptor.IsReadOnlyList(System.Collections.IEnumerable)">
            <summary>
            Returns a value indicating whether the source list is read-only.
            </summary>
            <param name="sourceList"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Internal.ValuePropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Component is an instance of a DataItem for which to set
            the value to the bound list.
            </summary>
            <param name="dataitem"></param>
            <param name="value"></param>
        </member>
        <member name="P:Infragistics.Windows.Internal.ValuePropertyDescriptor.ComponentType">
            <summary>
            Gets component type.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Internal.ValuePropertyDescriptor.PropertyType">
            <summary>
            Gets property type.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Internal.ValuePropertyDescriptor.IsReadOnly">
            <summary>
            Returns a value indicating whether the property is read-only.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Internal.XmlNodePropertyDescriptor">
            <summary>
            Represents a property on an xml node..
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Internal.XmlNodePropertyDescriptor.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Windows.Internal.XmlNodePropertyDescriptor"/> class
            </summary>
            <param name="node">The associated xml node</param>
        </member>
        <member name="M:Infragistics.Windows.Internal.XmlNodePropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            Returns false.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Internal.XmlNodePropertyDescriptor.GetValue(System.Object)">
            <summary>
            Returns the value of the property on the passed in object.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Internal.XmlNodePropertyDescriptor.ResetValue(System.Object)">
            <summary>
            Does nothing.
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:Infragistics.Windows.Internal.XmlNodePropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            Returns true.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Internal.XmlNodePropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the property on the passed in object.
            </summary>
            <param name="component"></param>
            <param name="value"></param>
        </member>
        <member name="P:Infragistics.Windows.Internal.XmlNodePropertyDescriptor.SchemaInfo">
            <summary>
            Returns the IXmlSchemaInfo object
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Internal.XmlNodePropertyDescriptor.ComponentType">
            <summary>
            Gets component type.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Internal.XmlNodePropertyDescriptor.DisplayName">
            <summary>
            Returns the name to display for the property
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Internal.XmlNodePropertyDescriptor.PropertyType">
            <summary>
            Gets property type.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Internal.XmlNodePropertyDescriptor.IsReadOnly">
            <summary>
            Returns true is the value is read-only.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Internal.PropertyDescriptorProvider">
            <summary>
            Abstract base class used to get a set of PropertyDescriptors for an object.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Internal.PropertyDescriptorProvider.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Windows.Internal.PropertyDescriptorProvider"/> class
            </summary>
            <param name="source">The underlying object that will be used to get the properties</param>
        </member>
        <member name="M:Infragistics.Windows.Internal.PropertyDescriptorProvider.ToString">
            <summary>
            Returns a string representation of the object
            </summary>
            <returns>The <see cref="P:Infragistics.Windows.Internal.PropertyDescriptorProvider.Name"/> property</returns>
        </member>
        <member name="M:Infragistics.Windows.Internal.PropertyDescriptorProvider.RaisePropertyDescriptorsChangedEvent(Infragistics.Windows.Internal.PropertyDescriptorsChangedEventArgs)">
            <summary>
            Raises the PropertyDescriptorsChanged event
            </summary>
            <param name="args">The event args.</param>
        </member>
        <member name="M:Infragistics.Windows.Internal.PropertyDescriptorProvider.OnPropertiesChangedHelper(System.ComponentModel.PropertyDescriptorCollection,System.ComponentModel.PropertyDescriptorCollection)">
            <summary>
            Compares the old and new list of properties and raises the PropertyDescriptorsChanged event 
            if necessary
            </summary>
            <param name="oldProperties">The old list of properties</param>
            <param name="newProperties">The new list of properties</param>
        </member>
        <member name="M:Infragistics.Windows.Internal.PropertyDescriptorProvider.CreateProvider(System.Object,System.Collections.IEnumerable)">
            <summary>
            Creates an instance of a PropertyDescriptorProvider class
            </summary>
            <param name="item">The source item.</param>
            <param name="containingList">The list that contains the item (optional).</param>
            <returns>An instance of a PropertyDescriptorProvider derived class that can supply a PropertyDescriptionCollection.</returns>
            <remarks> The optional containingList is checked to see if it implements the ITypedList interface.</remarks>
        </member>
        <member name="M:Infragistics.Windows.Internal.PropertyDescriptorProvider.GetProperties">
            <summary>
            Creates a collection of property descriptors
            </summary>
            <returns>A collection of property descriptors</returns>
        </member>
        <member name="M:Infragistics.Windows.Internal.PropertyDescriptorProvider.IsCompatibleItem(System.Object,System.Collections.IEnumerable)">
            <summary>
            Determines if the passed in item is compatible with the property descriptors this provider will return
            </summary>
            <param name="item">The source item.</param>
            <param name="containingList">The list that contains the item (optional).</param>
            <returns>True if the item is compatible.</returns>
            <remarks> The optional containingList is checked to see if it implements the ITypedList interface.</remarks>
        </member>
        <member name="M:Infragistics.Windows.Internal.PropertyDescriptorProvider.IsCompatibleList(System.Collections.IEnumerable)">
            <summary>
            Determines if the passed in list will return the same collection of property descriptors
            </summary>
            <returns>True if the list will return the same collection of PropertyDescriptors.</returns>
        </member>
        <member name="M:Infragistics.Windows.Internal.PropertyDescriptorProvider.IsCompatibleProvider(Infragistics.Windows.Internal.PropertyDescriptorProvider)">
            <summary>
            Determines if the passed in provider will return the same collection of property descriptors
            </summary>
            <returns>True if the provider will return the same collection of PropertyDescriptors.</returns>
        </member>
        <member name="M:Infragistics.Windows.Internal.PropertyDescriptorProvider.GetTypedListFromContainingList(System.Collections.IEnumerable,System.Type@)">
            <summary>
            Gets an ITypedList from an IEnumerable if it implements the interface
            </summary>
            <param name="sourceList">The source list</param>
            <param name="itemType">an out parameter that returns a type if the csourcelist implements IEnumerable&lt;T&gt;</param>
            <returns>An ITypedList if the sourcelist implements it or null.</returns>
        </member>
        <member name="E:Infragistics.Windows.Internal.PropertyDescriptorProvider.PropertyDescriptorsChanged">
            <summary>
            Occurs whr
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Internal.PropertyDescriptorProvider.Key">
            <summary>
            Returns the Name of the provider (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Internal.PropertyDescriptorProvider.Name">
            <summary>
            Returns the Name of the provider (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Internal.PropertyDescriptorProvider.RaisesPropertyDescriptorsChangedEvent">
            <summary>
            Returns whether or not this provider can raise the <see cref="E:Infragistics.Windows.Internal.PropertyDescriptorProvider.PropertyDescriptorsChanged"/> event
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Internal.PropertyDescriptorProvider.Source">
            <summary>
            The underlying object that provides the properties (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Internal.DataTablePropertyDescriptorProvider">
            <summary>
            Class used to get a set of PropertyDescriptors for an DataTable.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Internal.DataTablePropertyDescriptorProvider.#ctor(System.Data.DataTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Windows.Internal.DataTablePropertyDescriptorProvider"/> class
            </summary>
            <param name="table">The underlying object that will be used to get the properties</param>
        </member>
        <member name="M:Infragistics.Windows.Internal.DataTablePropertyDescriptorProvider.GetProperties">
            <summary>
            Creates a collection of property descriptors
            </summary>
            <returns>A collection of property descriptors</returns>
        </member>
        <member name="P:Infragistics.Windows.Internal.DataTablePropertyDescriptorProvider.Table">
            <summary>
            The underlying object that provides the properties (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Internal.DataTablePropertyDescriptorProvider.Name">
            <summary>
            Returns the name of the provider (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Internal.DataViewPropertyDescriptorProvider">
            <summary>
            Class used to get a set of PropertyDescriptors for an DataView.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Internal.TypedListPropertyDescriptorProvider">
            <summary>
            Class used to get a set of PropertyDescriptors for an ITypedList.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Internal.TypedListPropertyDescriptorProvider.#ctor(System.ComponentModel.ITypedList)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Windows.Internal.TypedListPropertyDescriptorProvider"/> class
            </summary>
            <param name="typedList">The underlying object that will be used to get the properties</param>
        </member>
        <member name="M:Infragistics.Windows.Internal.TypedListPropertyDescriptorProvider.GetProperties">
            <summary>
            Creates a collection of property descriptors
            </summary>
            <returns>A collection of property descriptors</returns>
        </member>
        <member name="M:Infragistics.Windows.Internal.TypedListPropertyDescriptorProvider.GetProviderTree">
            <summary>
            Creates and returns a tree of <see cref="T:Infragistics.Windows.Internal.TypedListPropertyDescriptorProvider.ProviderTreeNode"/>s
            </summary>
            <returns>The root <see cref="T:Infragistics.Windows.Internal.TypedListPropertyDescriptorProvider.ProviderTreeNode"/>.</returns>
        </member>
        <member name="P:Infragistics.Windows.Internal.TypedListPropertyDescriptorProvider.TypedList">
            <summary>
            The underlying object that provides the properties (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Internal.TypedListPropertyDescriptorProvider.Name">
            <summary>
            Returns the name of the provider (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Internal.TypedListPropertyDescriptorProvider.ProviderTreeNode">
            <summary>
            Represents a node in the data
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Internal.TypedListPropertyDescriptorProvider.ProviderTreeNode.PropertyDescriptorProvider">
            <summary>
            Returns the PropertyDescriptorProvider that is used to access data for this node (Read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Internal.TypedListPropertyDescriptorProvider.ProviderTreeNode.ChildNodes">
            <summary>
            Returns a read-only collection of child nodes.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Internal.TypedListPropertyDescriptorProvider.ProviderTreeNodePropertyDescriptorProvider">
            <summary>
            Class used to get a set of PropertyDescriptors for a descendant node of a <see cref="T:Infragistics.Windows.Internal.TypedListPropertyDescriptorProvider"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Internal.TypedListPropertyDescriptorProvider.ProviderTreeNodePropertyDescriptorProvider.GetProperties">
            <summary>
            Creates a collection of property descriptors
            </summary>
            <returns>A collection of property descriptors</returns>
        </member>
        <member name="P:Infragistics.Windows.Internal.TypedListPropertyDescriptorProvider.ProviderTreeNodePropertyDescriptorProvider.TypedList">
            <summary>
            The underlying object that provides the properties (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Internal.TypedListPropertyDescriptorProvider.ProviderTreeNodePropertyDescriptorProvider.Key">
            <summary>
            Returns the key of the provider (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Internal.TypedListPropertyDescriptorProvider.ProviderTreeNodePropertyDescriptorProvider.Name">
            <summary>
            Returns the name of the provider (read-only)
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Internal.DataViewPropertyDescriptorProvider.#ctor(System.Data.DataView)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Windows.Internal.DataViewPropertyDescriptorProvider"/> class
            </summary>
            <param name="view">The underlying object that will be used to get the properties</param>
        </member>
        <member name="P:Infragistics.Windows.Internal.DataViewPropertyDescriptorProvider.View">
            <summary>
            The underlying object that provides the properties (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Internal.TypePropertyDescriptorProvider">
            <summary>
            Class used to get a set of PropertyDescriptors for a Type.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Internal.TypePropertyDescriptorProvider.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Windows.Internal.TypePropertyDescriptorProvider"/> class
            </summary>
            <param name="type">The underlying object that will be used to get the properties</param>
        </member>
        <member name="M:Infragistics.Windows.Internal.TypePropertyDescriptorProvider.GetProperties">
            <summary>
            Creates a collection of property descriptors
            </summary>
            <returns>A collection of property descriptors</returns>
        </member>
        <member name="P:Infragistics.Windows.Internal.TypePropertyDescriptorProvider.Type">
            <summary>
            The underlying object that provides the properties (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Internal.TypePropertyDescriptorProvider.Key">
            <summary>
            Returns the Name of the provider (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Internal.TypePropertyDescriptorProvider.Name">
            <summary>
            Returns the name of the provider (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Internal.TypePropertyDescriptorProvider.RaisesPropertyDescriptorsChangedEvent">
            <summary>
            Returns whether or not this provider can raise the <see cref="E:Infragistics.Windows.Internal.PropertyDescriptorProvider.PropertyDescriptorsChanged"/> event
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Internal.XmlNodePropertyDescriptorProvider">
            <summary>
            Class used to get a set of PropertyDescriptors for an XmlNode.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Internal.XmlNodePropertyDescriptorProvider.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Windows.Internal.XmlNodePropertyDescriptorProvider"/> class
            </summary>
            <param name="node">The underlying object that will be used to get the properties</param>
        </member>
        <member name="M:Infragistics.Windows.Internal.XmlNodePropertyDescriptorProvider.GetProperties">
            <summary>
            Creates a collection of property descriptors
            </summary>
            <returns>A collection of property descriptors</returns>
        </member>
        <member name="M:Infragistics.Windows.Internal.XmlNodePropertyDescriptorProvider.IsCompatibleProvider(Infragistics.Windows.Internal.PropertyDescriptorProvider)">
            <summary>
            Determines if the passed in provider will return the same collection of property descriptors
            </summary>
            <returns>True if the provider will return the same collection of PropertyDescriptors.</returns>
        </member>
        <member name="M:Infragistics.Windows.Internal.XmlNodePropertyDescriptorProvider.MergePropertiesFromNode(System.Xml.XmlNode)">
            <summary>
            Merges properties from the passed in node to the exiisting set of properties.
            </summary>
            <remarks>
            <para class="body">Since each node doesn't necessarily contain all of the possible attributes and 
            child nodes that can make up its set of properties we want to add new properties as we encounter nodes.</para>
            <para class="note"><b>Note:</b> if properties are added then the <see cref="E:Infragistics.Windows.Internal.PropertyDescriptorProvider.PropertyDescriptorsChanged"/> event will be raised.</para>
            </remarks>
            <seealso cref="M:Infragistics.Windows.Internal.XmlNodePropertyDescriptorProvider.GetProperties"/>
            <param name="node">The node whose properties will be merged.</param>
        </member>
        <member name="P:Infragistics.Windows.Internal.XmlNodePropertyDescriptorProvider.Node">
            <summary>
            The underlying object that provides the properties (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Internal.XmlNodePropertyDescriptorProvider.Key">
            <summary>
            Returns the name of the provider (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Internal.XmlNodePropertyDescriptorProvider.Name">
            <summary>
            Returns the name of the provider (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Internal.XmlNodePropertyDescriptorProvider.RaisesPropertyDescriptorsChangedEvent">
            <summary>
            Returns whether or not this provider can raise the <see cref="E:Infragistics.Windows.Internal.PropertyDescriptorProvider.PropertyDescriptorsChanged"/> event
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Internal.PropertyDescriptorsChangedEventArgs">
            <summary>
            Event arguments used in the <see cref="T:Infragistics.Windows.Internal.PropertyDescriptorProvider"/>'s <see cref="E:Infragistics.Windows.Internal.PropertyDescriptorProvider.PropertyDescriptorsChanged"/> event
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Internal.PropertyDescriptorsChangedEventArgs.Provider">
            <summary>
            The provider whose properies have changed
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Internal.PropertyDescriptorsChangedEventArgs.PropertiesAdded">
            <summary>
            The properties that have been added
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Internal.PropertyDescriptorsChangedEventArgs.PropertiesChanged">
            <summary>
            The properties that have been changed
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Internal.PropertyDescriptorsChangedEventArgs.PropertiesRemoved">
            <summary>
            The properties that have been removed
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.IToolWindowHost">
            <summary>
            Interface implemented by a class that hosts the <see cref="T:Infragistics.Windows.Controls.ToolWindow"/>
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.IToolWindowHost.DragMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Used to trigger the initiation of a drag operation.
            </summary>
            <param name="e">The mouse event args available when the drag started.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.IToolWindowHost.DragResize(Infragistics.Windows.Controls.ToolWindowResizeElementLocation,System.Windows.Input.Cursor,System.Windows.Input.MouseEventArgs)">
            <summary>
            Used to trigger the initiation of a resize operation.
            </summary>
            <param name="location">The type of resize operation</param>
            <param name="cursor">The cursor to use during the drag operation</param>
            <param name="e">The mouse event args available when the drag started.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.IToolWindowHost.Activate">
            <summary>
            Used to activate the specified window.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.IToolWindowHost.Close">
            <summary>
            Used to close/unload the window.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.IToolWindowHost.RelativePositionStateChanged">
            <summary>
            Used to notify the host that the relative position state of the item has changed.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.IToolWindowHost.BringToFront">
            <summary>
            Moves the toolwindow to the front of the zorder.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.PrimitivesBrushKeys">
            <summary>
            Static class that exposes the resource keys used by the elements in the assembly. 
            </summary>
            <remarks>
            <para class="body">These keys are referenced in the templates of the elements defined within the assembly via dynamic references. Therefore, the default brushes can be easily changed
            by defining replacement brushes, keyed with these keys, in resources anywhere within the resolution scope of their use.
            </para>
            <para class="note"><b>Note:</b> These brushes are normally added to the Resources collection of the window or the application.</para> 
            </remarks>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.TabContentBackgroundFillKey">
            <summary>
            The key that identifies a resource to be used as the TabContentBackgroundFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.TabControlTabStripCenterFillKey">
            <summary>
            The key that identifies a resource to be used as the TabControlTabStripCenterFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.TabControlTopCenterFillKey">
            <summary>
            The key that identifies a resource to be used as the TabControlTopCenterFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.TabControlBottomCenterFillKey">
            <summary>
            The key that identifies a resource to be used as the TabControlBottomCenterFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.TabControlLeftCenterFillKey">
            <summary>
            The key that identifies a resource to be used as the TabControlLeftCenterFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.TabControlRightCenterFillKey">
            <summary>
            The key that identifies a resource to be used as the TabControlRightCenterFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.TabItemNormalOuterBorderFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowBackgroundFill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.TabItemNormalBottomCenterFillKey">
            <summary>
            The key that identifies a resource to be used as the TabItemNormalBottomCenterFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.TabItemNormalTopCenterFillKey">
            <summary>
            The key that identifies a resource to be used as the TabItemNormalTopCenterFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.TabItemNormalLeftCenterFillKey">
            <summary>
            The key that identifies a resource to be used as the TabItemNormalLeftCenterFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.TabItemNormalRightCenterFillKey">
            <summary>
            The key that identifies a resource to be used as the TabItemNormalRightCenterFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.TabItemNormalHighlightDarkFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowBackgroundFill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.TabItemNormalHighlightLightFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowBackgroundFill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.TabItemNormalTextFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowBackgroundFill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.TabItemHottrackOuterBorderFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowBackgroundFill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.TabItemHottrackMiddleCenterFillKey">
            <summary>
            The key that identifies a resource to be used as the TabItemHottrackMiddleCenterFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.TabItemHottrackBottomCenterFillKey">
            <summary>
            The key that identifies a resource to be used as the TabItemHottrackBottomCenterFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.TabItemHottrackTopCenterFillKey">
            <summary>
            The key that identifies a resource to be used as the TabItemHottrackTopCenterFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.TabItemHottrackLeftCenterFillKey">
            <summary>
            The key that identifies a resource to be used as the TabItemHottrackLeftCenterFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.TabItemHottrackRightCenterFillKey">
            <summary>
            The key that identifies a resource to be used as the TabItemHottrackRightCenterFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.TabItemHottrackHighlightDarkFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowBackgroundFill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.TabItemHottrackHighlightLightFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowBackgroundFill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.TabItemHottrackTextFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowBackgroundFill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.TabItemIsSelectedOuterBorderFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowBackgroundFill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.TabItemIsSelectedBottomCenterFillKey">
            <summary>
            The key that identifies a resource to be used as the TabItemIsSelectedBottomCenterFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.TabItemIsSelectedTopCenterFillKey">
            <summary>
            The key that identifies a resource to be used as the TabItemIsSelectedTopCenterFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.TabItemIsSelectedLeftCenterFillKey">
            <summary>
            The key that identifies a resource to be used as the TabItemIsSelectedLeftCenterFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.TabItemIsSelectedRightCenterFillKey">
            <summary>
            The key that identifies a resource to be used as the TabItemIsSelectedRightCenterFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.TabItemIsSelectedHighlightDarkFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowBackgroundFill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.TabItemIsSelectedHighlightLightFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowBackgroundFill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.TabItemIsSelectedLeftHighlightFillKey">
            <summary>
            The key that identifies a resource to be used as the TabItemIsSelectedLeftHighlightFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.TabItemIsSelectedRightHighlightFillKey">
            <summary>
            The key that identifies a resource to be used as the TabItemIsSelectedRightHighlightFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.TabItemIsSelectedTextFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowBackgroundFill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.TabItemIsSelectedHottrackOuterBorderFillKey">
            <summary>
            The key that identifies a resource to be used as the TabItemIsSelectedHottrackOuterBorderFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.TabItemIsSelectedHottrackOuterGlowFillKey">
            <summary>
            The key that identifies a resource to be used as the TabItemIsSelectedHottrackOuterGlowFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.TabItemIsSelectedHottrackSideHighlightFillKey">
            <summary>
            The key that identifies a resource to be used as the TabItemIsSelectedHottrackSideHighlightFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.TabItemIsSelectedHottrackTopHighlightFillKey">
            <summary>
            The key that identifies a resource to be used as the TabItemIsSelectedHottrackTopHighlightFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.TabItemDisabledOuterBorderFillKey">
            <summary>
            The key that identifies a resource to be used as the TabItemDisabledOuterBorderFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.TabItemDisabledCenterFillKey">
            <summary>
            The key that identifies a resource to be used as the TabItemDisabledCenterFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.TabItemHottrackCenterGlowFillKey">
            <summary>
            The key that identifies a resource to be used as the TabItemHottrackCenterGlowFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.XamPagerButtonGlyphFillKey">
            <summary>
            The key that identifies a resource to be used as the XamPagerButtonGlyphFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.XamPagerButtonBlueGradientFillKey">
            <summary>
            The key that identifies a resource to be used as the XamPagerButtonBlueGradientFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.XamPagerButtonLeftInnerBorderGradientFillKey">
            <summary>
            The key that identifies a resource to be used as the XamPagerButtonLeftInnerBorderGradientFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.XamPagerButtonOuterBorderFillKey">
            <summary>
            The key that identifies a resource to be used as the XamPagerButtonOuterBorderFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.XamPagerButtonCenterGrayGradientFillKey">
            <summary>
            The key that identifies a resource to be used as the XamPagerButtonCenterGrayGradientFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.XamPagerButtonLeftOuterBorderGradientFillKey">
            <summary>
            The key that identifies a resource to be used as the XamPagerButtonLeftOuterBorderGradientFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.XamPagerButtonHottrackFillKey">
            <summary>
            The key that identifies a resource to be used as the XamPagerButtonHottrackFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.XamPagerButtonHottrackBorderFillKey">
            <summary>
            The key that identifies a resource to be used as the XamPagerButtonHottrackBorderFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.XamPagerButtonPressedBorderFillKey">
            <summary>
            The key that identifies a resource to be used as the XamPagerButtonPressedBorderFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.XamPagerButtonPressedCenterFillKey">
            <summary>
            The key that identifies a resource to be used as the XamPagerButtonPressedCenterFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.XamPagerButtonHGlyphFillKey">
            <summary>
            The key that identifies a resource to be used as the XamPagerButtonHGlyphFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.XamPagerButtonHBlueGradientFillKey">
            <summary>
            The key that identifies a resource to be used as the XamPagerButtonHBlueGradientFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.XamPagerButtonHLeftInnerBorderGradientFillKey">
            <summary>
            The key that identifies a resource to be used as the XamPagerButtonHLeftInnerBorderGradientFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.XamPagerButtonHOuterBorderFillKey">
            <summary>
            The key that identifies a resource to be used as the XamPagerButtonHOuterBorderFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.XamPagerButtonHCenterGrayGradientFillKey">
            <summary>
            The key that identifies a resource to be used as the XamPagerButtonHCenterGrayGradientFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.XamPagerButtonHLeftOuterBorderGradientFillKey">
            <summary>
            The key that identifies a resource to be used as the XamPagerButtonHLeftOuterBorderGradientFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.XamPagerButtonHHottrackFillKey">
            <summary>
            The key that identifies a resource to be used as the XamPagerButtonHHottrackFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.XamPagerButtonHHottrackBorderFillKey">
            <summary>
            The key that identifies a resource to be used as the XamPagerButtonHHottrackBorderFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.XamPagerButtonHPressedBorderFillKey">
            <summary>
            The key that identifies a resource to be used as the XamPagerButtonHPressedBorderFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.XamPagerButtonHPressedCenterFillKey">
            <summary>
            The key that identifies a resource to be used as the XamPagerButtonHPressedCenterFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.ToolWindowBackgroundFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowBackgroundFill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.ToolWindowActiveOuterBorderFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowActiveOuterBorderFill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.ToolWindowActiveInnerBorderFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowActiveInnerBorderFill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.ToolWindowActiveCenterFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowActiveCenterFill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.ToolWindowActiveCaptionFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowActiveCenterFill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.ToolWindowInactiveOuterBorderFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowInactiveOuterBorderFill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.ToolWindowInactiveInnerBorderFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowInactiveInnerBorderFill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.ToolWindowInactiveCenterFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowInactiveCenterFill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.ToolWindowInactiveCaptionFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowInactiveCenterFill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.ToolWindowActiveCaptionTextFillKey">
            <summary>
            The key that identifies a resource to be used as the PaneCaptionButtonNotActiveGlyphFill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.ToolWindowInactiveCaptionTextFillKey">
            <summary>
            The key that identifies a resource to be used as the PaneCaptionButtonNotActiveGlyphFill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.ToolWindowActiveCaptionOuterBorderFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowActiveCaptionOuterBorderFill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.ToolWindowActiveCaptionInnerBorderFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowActiveCaptionInnerBorderFill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.ToolWindowActiveCaptionCenterFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowActiveCaptionCenterFill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.ToolWindowActiveOuterBorder1FillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowActiveOuterBorder1Fill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.ToolWindowActiveOuterBorder2FillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowActiveOuterBorder2Fill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.ToolWindowActiveOuterBorder3FillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowActiveOuterBorder3Fill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.ToolWindowActiveOuterBorder4FillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowActiveOuterBorder4Fill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.ToolWindowInactiveCaptionOuterBorderFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowInactiveCaptionOuterBorderFill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.ToolWindowInactiveCaptionInnerBorderFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowInactiveCaptionInnerBorderFill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.ToolWindowInactiveCaptionCenterFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowInactiveCaptionCenterFill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.ToolWindowInactiveOuterBorder1FillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowInactiveOuterBorder1Fill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.ToolWindowInactiveOuterBorder2FillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowInactiveOuterBorder2Fill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.ToolWindowInactiveOuterBorder3FillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowInactiveOuterBorder3Fill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.ToolWindowInactiveOuterBorder4FillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowInactiveOuterBorder4Fill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.ToolWindowActiveCloseButtonNormalOuterBorderFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowInactiveOuterBorder4Fill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.ToolWindowActiveCloseButtonNormalInnerBorderFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowInactiveOuterBorder4Fill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.ToolWindowActiveCloseButtonNormalCenterFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowInactiveOuterBorder4Fill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.ToolWindowActiveCloseButtonHottrackOuterBorderFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowInactiveOuterBorder4Fill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.ToolWindowActiveCloseButtonHottrackInnerBorderFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowInactiveOuterBorder4Fill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.ToolWindowActiveCloseButtonHottrackCenterFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowInactiveOuterBorder4Fill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.ToolWindowActiveCloseButtonPressedOuterBorderFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowInactiveOuterBorder4Fill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.ToolWindowActiveCloseButtonPressedInnerBorderFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowInactiveOuterBorder4Fill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.ToolWindowActiveCloseButtonPressedCenterFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowInactiveOuterBorder4Fill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.ToolWindowNotActiveCloseButtonNormalOuterBorderFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowInactiveOuterBorder4Fill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.ToolWindowNotActiveCloseButtonNormalInnerBorderFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowInactiveOuterBorder4Fill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.ToolWindowNotActiveCloseButtonNormalCenterFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowInactiveOuterBorder4Fill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.ToolWindowActiveCloseButtonNormalGlyphFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowInactiveOuterBorder4Fill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.ToolWindowActiveCloseButtonHottrackGlyphFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowInactiveOuterBorder4Fill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.ToolWindowActiveCloseButtonPressedGlyphFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowInactiveOuterBorder4Fill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.ToolWindowDisabledCloseButtonOuterBorderFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowDisabledCloseButtonOuterBorderFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.ToolWindowDisabledCloseButtonInnerBorderFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowDisabledCloseButtonInnerBorderFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.ToolWindowDisabledCloseButtonCenterFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowDisabledCloseButtonCenterFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.ToolWindowDisabledCloseButtonGlyphFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowDisabledCloseButtonGlyphFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.DropTargetStrokeKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowInactiveOuterBorder4Fill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.DropIndicatorFillKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowInactiveOuterBorder4Fill.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PrimitivesBrushKeys.GrayTextBrushKey">
            <summary>
            The key that identifies a resource to be used as the ToolWindowDisabledCloseButtonGlyphFillKey.  Look here <see cref="T:Infragistics.Windows.Controls.PrimitivesBrushKeys"/> for 
            an explanation of how these keys are used. 
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Reporting.ReportBase">
            <summary>
            Abstract base class for reporting. 
            </summary>
            <remarks>
            <p class="body">The class exposes properties that determine the default settings for the report.</p>
            <para class="note"><b>Note:</b> the derived class, Report, is in the Infragistics.Wpf.Reporting assembly, and it exposes a 
            collection of <see cref="T:Infragistics.Windows.Reporting.ReportSection"/>s which surface additional properties that can be used to override the defaults specified here.</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Reporting.ReportBase.#ctor">
            <summary>
            Protected constructor
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Reporting.ReportBase.PageContentTemplate">
            <summary>
            The template used to display the content of ReportPagePresenter control.
            </summary>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageContentTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageFooter"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageFooterTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageFooterTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageHeader"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageHeaderTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageHeaderTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PagePresenterStyle"/>
        </member>
        <member name="P:Infragistics.Windows.Reporting.ReportBase.PageContentTemplateSelector">
            <summary>
            A DataTemplateSelector that can be used to provide custom logic for choosing the template for the ReportPagePresenter's content.
            </summary>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageContentTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageFooter"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageFooterTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageFooterTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageHeader"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageHeaderTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageHeaderTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PagePresenterStyle"/>
        </member>
        <member name="P:Infragistics.Windows.Reporting.ReportBase.PageFooter">
            <summary>
            Gets or sets the content of the footer used inside the ReportPagePresenter element.
            </summary>
            <remarks>
            <p class="body">This property is used to set the content of the footer used inside the ReportPagePresenter element, in the Infragistics.Wpf.Reporting assembly.   
            </p>
            </remarks>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageFooterTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageFooterTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageHeader"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageHeaderTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageHeaderTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageContentTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageContentTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PagePresenterStyle"/>
        </member>
        <member name="P:Infragistics.Windows.Reporting.ReportBase.PageFooterTemplate">
            <summary>
            The template used to display the footer content of ReportPagePresenter control.
            </summary>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageFooter"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageFooterTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageHeader"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageHeaderTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageHeaderTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageContentTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageContentTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PagePresenterStyle"/>
        </member>
        <member name="P:Infragistics.Windows.Reporting.ReportBase.PageFooterTemplateSelector">
            <summary>
            A DataTemplateSelector that can be used to provide custom logic for choosing the template for the footer in the ReportPagePresenter control.
            </summary>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageFooter"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageFooterTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageHeader"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageHeaderTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageHeaderTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageContentTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageContentTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PagePresenterStyle"/>
        </member>
        <member name="P:Infragistics.Windows.Reporting.ReportBase.PageHeader">
            <summary>
            Gets or sets the content of the header used inside the ReportPagePresenter element.
            </summary>
            <remarks>
            <p class="body">This property is used to set the content of the header used inside the ReportPagePresenter element, in the Infragistics.Wpf.Reporting assembly.   
            </p>
            </remarks>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageFooter"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageFooterTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageFooterTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageHeaderTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageHeaderTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PagePresenterStyle"/>
        </member>
        <member name="P:Infragistics.Windows.Reporting.ReportBase.PageHeaderTemplate">
            <summary>
            The template used to display the header content of ReportPagePresenter control.
            </summary>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageHeader"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageHeaderTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageFooter"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageFooterTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageFooterTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageContentTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageContentTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PagePresenterStyle"/>
        </member>
        <member name="P:Infragistics.Windows.Reporting.ReportBase.PageHeaderTemplateSelector">
            <summary>
            A DataTemplateSelector that can be used to provide custom logic for choosing the template for the header in the ReportPagePresenter control.
            </summary>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageHeader"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageHeaderTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageFooter"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageFooterTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageFooterTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageContentTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageContentTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PagePresenterStyle"/>
        </member>
        <member name="P:Infragistics.Windows.Reporting.ReportBase.PageImageableAreaExtent">
            <summary>
            The size of the imageable area that the printer will support.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> this value is only valid during a report generation or export operation. Also it doesn't take into account the page orientation.</para>
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Reporting.ReportBase.PageOrigin">
            <summary>
            The origin of the page i.e. offset to allow for the capabilities of the printer.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> this value is only valid during a report generation or export operation. Also it doesn't take into account the page orientation.</para>
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Reporting.ReportBase.PagePresenterStyle">
            <summary>
            Gets or sets the style for the ReportPagePresenter
            </summary>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageHeader"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageHeaderTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageHeaderTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageFooter"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageFooterTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageFooterTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageContentTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.PageContentTemplateSelector"/>
        </member>
        <member name="P:Infragistics.Windows.Reporting.ReportBase.PageSizeResolved">
            <summary>
            The actual size of the page used during a report generation or export operation (read-only).
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> this value is only valid during a report generation or export operation. Also it doesn't take into account the page orientation.</para>
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Reporting.ReportBase.ReportSettings">
            <summary>
            Gets the object that contains the settings for the entire Report (read-only)
            </summary>
            <remarks>
            <p class="body">This is an abstract property and must be overriden in derived classes to provide the settings object for report.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.Windows.Reporting.IEmbeddedVisualPaginator">
            <summary>
            Interface implemented by embedded visual elements within a <see cref="T:Infragistics.Windows.Reporting.ReportSection"/> that need to alter 
            their visual tree in response to pagination in the containing <see cref="T:Infragistics.Windows.Reporting.ReportSection"/>.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> This interface, or the <see cref="T:Infragistics.Windows.Reporting.IEmbeddedVisualPaginatorFactory"/> interface, is implemented by controls that may represent multiple pages of data, e.g. XamDateGrid. The interface is used 
            by the EmbeddedVisualReportSection, found in the Infragistic.Wpf.Reporting assembly, to generate all of the appropriate pages.</para>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Reporting.ReportSection"/>
            <seealso cref="T:Infragistics.Windows.Reporting.IEmbeddedVisualPaginatorFactory"/>
        </member>
        <member name="M:Infragistics.Windows.Reporting.IEmbeddedVisualPaginator.BeginPagination(Infragistics.Windows.Reporting.ReportSection)">
            <summary>
            Called when a pagination process is about to begin.
            </summary>
            <param name="section">The section of the report.</param>
        </member>
        <member name="M:Infragistics.Windows.Reporting.IEmbeddedVisualPaginator.EndPagination">
            <summary>
            Called when the pagination has ended.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Reporting.IEmbeddedVisualPaginator.MoveToNextPage">
            <summary>
            Requests that the implementor move to the next page and update its visual tree if necessary..
            </summary>
            <returns>True if the implementor was able to move to the next page, or false if there was no next page.</returns>
        </member>
        <member name="M:Infragistics.Windows.Reporting.IEmbeddedVisualPaginator.MoveToPosition(Infragistics.Windows.Reporting.PagePosition)">
            <summary>
            Requests that the implementor move to a specific page represented by the supplied <see cref="T:Infragistics.Windows.Reporting.PagePosition"/> and update its visual tree if necessary.
            </summary>
            <param name="pagePosition">A <see cref="T:Infragistics.Windows.Reporting.PagePosition"/> instance that represents the page to move to.</param>
            <returns>True if the implementor was able to move to the requested page, or false if the move failed.</returns>
        </member>
        <member name="P:Infragistics.Windows.Reporting.IEmbeddedVisualPaginator.CurrentPageDataContext">
            <summary>
            Returns a piece of opaque data that will be set as the DataContext on the root visual of a Report's current page.
            </summary>
            <value>The current page's data context or null if there is no data context for the current page.</value>
        </member>
        <member name="P:Infragistics.Windows.Reporting.IEmbeddedVisualPaginator.CurrentPagePosition">
            <summary>
            Returns a PagePosition instance that represents the current page position in the embedded visual (read-only).
            </summary>
            <seealso cref="T:Infragistics.Windows.Reporting.PagePosition"/>
        </member>
        <member name="P:Infragistics.Windows.Reporting.IEmbeddedVisualPaginator.EstimatedPageCount">
            <summary>
            Returns the estimated count of page that will be printed (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Reporting.IEmbeddedVisualPaginator.LogicalPageNumber">
            <summary>
            Returns an integer that indicates the logical row of the current page (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Reporting.IEmbeddedVisualPaginator.LogicalPagePartNumber">
            <summary>
            Returns an integer that indicates the logical column of the current page(read-only).
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> when the <see cref="T:Infragistics.Windows.Reporting.ReportSettings"/> <see cref="P:Infragistics.Windows.Reporting.ReportSettings.HorizontalPaginationMode"/> is set to 'Scale', this property will return 1.</para></remarks>
        </member>
        <member name="T:Infragistics.Windows.Reporting.IEmbeddedVisualPaginatorFactory">
            <summary>
            Interface implemented by a control that can create an element that implements the <see cref="T:Infragistics.Windows.Reporting.IEmbeddedVisualPaginator"/> interface.
            </summary>
            <remarks><p class="body">A control that implements this interface, e.g. a XamDataGrid, can be passed into the constructor of an EmbeddedVisualReportSection, defined in the Infragistics.Wpf.Reporting assembly, which will then drive the pagination logic.</p>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Reporting.IEmbeddedVisualPaginator"/>
        </member>
        <member name="M:Infragistics.Windows.Reporting.IEmbeddedVisualPaginatorFactory.Create">
            <summary>
            Creates an instance of an element that implemets the <see cref="T:Infragistics.Windows.Reporting.IEmbeddedVisualPaginator"/> interface.
            </summary>
            <returns>A instance of a visual that implements the <see cref="T:Infragistics.Windows.Reporting.IEmbeddedVisualPaginator"/> interface.</returns>
            <seealso cref="T:Infragistics.Windows.Reporting.IEmbeddedVisualPaginator"/>
        </member>
        <member name="T:Infragistics.Windows.Reporting.PagePosition">
            <summary>
            Base class for storing position information during pagination.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> other than the 3 special PagePosition instances, <see cref="F:Infragistics.Windows.Reporting.PagePosition.FirstPage"/>, <see cref="F:Infragistics.Windows.Reporting.PagePosition.LastPage"/> and <see cref="F:Infragistics.Windows.Reporting.PagePosition.InvalidPage"/>, 
            these objects are normally instances of derived classes that maintain state information that is only relevant to the implementor of the associated <see cref="T:Infragistics.Windows.Reporting.IEmbeddedVisualPaginator"/> interface. 
            In other words, it is opaque to the driving logic.</para>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Reporting.IEmbeddedVisualPaginator"/>
            <seealso cref="T:Infragistics.Windows.Reporting.IEmbeddedVisualPaginatorFactory"/>
        </member>
        <member name="F:Infragistics.Windows.Reporting.PagePosition.FirstPage">
            <summary>
            Static read-only property that returns an instance of a PagePosition that represents an invalid page. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Reporting.PagePosition.LastPage">
            <summary>
            Static read-only property that returns an instance of a PagePosition that represents the last page. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Reporting.PagePosition.InvalidPage">
            <summary>
            Static read-only property that returns an instance of a PagePosition that represents an invalid page. 
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Reporting.ReportSection">
            <summary>
            Abstract base class that represents a section in a report. 
            </summary>
            <remarks>
            <p class="body">The class exposes properties that relate to a specific section in a report and are used to override any report-wide default settings specified on the <see cref="T:Infragistics.Windows.Reporting.ReportBase"/>.</p>
            <para class="body">The Report class, derived from <see cref="T:Infragistics.Windows.Reporting.ReportBase"/>, is in the Infragistics.Wpf.Reporting assembly and it exposes a 
            collection of ReportSections. Each section can represent 1 or more pages in the report. For example the derived class EmbeddedVisualReportSection, also in the Infragistics.Wpf.Reporting assembly, 
            will accept in its constructor an element that implements either the <see cref="T:Infragistics.Windows.Reporting.IEmbeddedVisualPaginator"/> or <see cref="T:Infragistics.Windows.Reporting.IEmbeddedVisualPaginatorFactory"/> interface 
            to support printing multiple pages. This is how the XamDataGrid supports printing.</para>
            <para class="note"><b>Note:</b> each section in the report starts on a new page. For example, if you created a Report with 3 EmbeddedVisualReportSections, one with a XamDataGrid and 2 others with 
            simple elements, each section would start on a new page even though there might have been available space on the last page from the previous section.</para>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Reporting.ReportBase"/>
            <seealso cref="T:Infragistics.Windows.Reporting.IEmbeddedVisualPaginator"/>
            <seealso cref="T:Infragistics.Windows.Reporting.IEmbeddedVisualPaginatorFactory"/>
        </member>
        <member name="M:Infragistics.Windows.Reporting.ReportSection.#ctor">
            <summary>
            Initializes member variables
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Reporting.ReportSection.IsInReportProperty">
            <summary>
            Identifies the "IsInReport" attached readonly dependency property
            </summary>
            <remarks>
            <p class="body">Since this is an attached inherited property it can be useful inside a template of any element to trigger changes to its look for printing.</p>
            </remarks>
            <seealso cref="M:Infragistics.Windows.Reporting.ReportSection.GetIsInReport(System.Windows.DependencyObject)"/>
        </member>
        <member name="M:Infragistics.Windows.Reporting.ReportSection.GetIsInReport(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the "IsInReport" attached readonly property
            </summary>
            <remarks>
            <p class="body">Since this is an attached inherited property it can be useful inside a template of any element to trigger changes to its look for printing.</p>
            </remarks>
            <param name="d">The target object.</param>
            <seealso cref="F:Infragistics.Windows.Reporting.ReportSection.IsInReportProperty"/>
        </member>
        <member name="M:Infragistics.Windows.Reporting.ReportSection.SetIsInReport(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the "IsInReport" attached readonly property
            </summary>
            <param name="d">The target object.</param>
            <param name="value">Value of the property</param>
            <seealso cref="F:Infragistics.Windows.Reporting.ReportSection.IsInReportProperty"/>
        </member>
        <member name="M:Infragistics.Windows.Reporting.ReportSection.GetPage(System.Int32)">
            <summary>
            Gets the page from the section
            </summary>
            <param name="pageNumber">Zero-based physical page number relative to the beginning of the section.</param>
            <returns>A DocumentPage containing the page or null if past end of section.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The page number parameter is less than zero.</exception>
        </member>
        <member name="M:Infragistics.Windows.Reporting.ReportSection.OnBeginPagination(Infragistics.Windows.Reporting.ReportBase)">
            <summary>
            Called when a pagination operation is about to begin.
            </summary>
            <param name="report">The report that will be printed.</param>
            <remarks>
            <p class="body">This method is called once at the beginning of a pagination operation.</p>
            </remarks>
            <exception cref="T:System.ArgumentNullException">If report is null</exception>
            <seealso cref="M:Infragistics.Windows.Reporting.ReportSection.OnEndPagination"/>
        </member>
        <member name="M:Infragistics.Windows.Reporting.ReportSection.OnEndPagination">
            <summary>
            Called after a pagination operation has ended.
            </summary>
            <seealso cref="M:Infragistics.Windows.Reporting.ReportSection.OnBeginPagination(Infragistics.Windows.Reporting.ReportBase)"/>
        </member>
        <member name="P:Infragistics.Windows.Reporting.ReportSection.GeneratedPageCount">
            <summary>
            The number of physical pages generated so far (read-only). 
            </summary>
            <remarks>
            <p class="note">This property only has meaning during a pagination, otherwise it returns 0.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Reporting.ReportSection.IsEndReached">
            <summary>
            Returns whether the report section is on the last page (read-only).
            </summary>
            <remarks>
            <p class="note">This property only has meaning during a pagination.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Reporting.ReportSection.LogicalPageNumber">
            <summary>
            The logical page number of the current page being printed within this section (read-only). 
            </summary>
            <value>A 1-based integer representing the logical page number of the current page being printed within this section.</value>
            <remarks>
            <p class="body">If there are multiple sections within a report this property restarts at 1 within each section.</p>
            <p class="note"><b>Note:</b> if <see cref="P:Infragistics.Windows.Reporting.ReportSettings.HorizontalPaginationMode"/> property is set to 'Scale' then this property will return the same value as <see cref="P:Infragistics.Windows.Reporting.ReportSection.PhysicalPageNumber"/>.</p>
            </remarks>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.LogicalPagePartNumber"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PhysicalPageNumber"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSettings.HorizontalPaginationMode"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSettings.PagePrintOrder"/>
        </member>
        <member name="P:Infragistics.Windows.Reporting.ReportSection.LogicalPagePartNumber">
            <summary>
            The logical page part number of the current page being printed within this section (read-only). 
            </summary>
            <value>A 1-based integer representing the logical page part number of the current page being printed within this section.</value>
            <remarks>
            <p class="note"><b>Note:</b> if the logical page is not wide enough to span multiple pages or the <see cref="P:Infragistics.Windows.Reporting.ReportSettings.HorizontalPaginationMode"/> property is set to 'Scale' then this property will return 1.
            </p>
            </remarks>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.LogicalPageNumber"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSettings.HorizontalPaginationMode"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSettings.PagePrintOrder"/>
        </member>
        <member name="P:Infragistics.Windows.Reporting.ReportSection.PageContentTemplate">
            <summary>
            The template used to display the content of ReportPagePresenter control.
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> this property takes precedence over the setting on the <see cref="T:Infragistics.Windows.Reporting.ReportBase"/>'s <see cref="P:Infragistics.Windows.Reporting.ReportBase.PageContentTemplate"/>.</p>
            </remarks>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageContentTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageFooter"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageFooterTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageFooterTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageHeader"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageHeaderTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageHeaderTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PagePresenterStyle"/>
        </member>
        <member name="P:Infragistics.Windows.Reporting.ReportSection.PageContentTemplateSelector">
            <summary>
            A DataTemplateSelector that can be used to provide custom logic for choosing the template for the ReportPagePresenter's content.
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> this property takes precedence over the setting on the <see cref="T:Infragistics.Windows.Reporting.ReportBase"/>'s <see cref="P:Infragistics.Windows.Reporting.ReportBase.PageContentTemplateSelector"/>.</p>
            </remarks>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageContentTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageFooter"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageFooterTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageFooterTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageHeader"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageHeaderTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageHeaderTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PagePresenterStyle"/>
        </member>
        <member name="P:Infragistics.Windows.Reporting.ReportSection.PageFooter">
            <summary>
            Gets or sets the content of the footer used inside the ReportPagePresenter element.
            </summary>
            <remarks>
            <p class="body">This property is used to set the content of the footer used inside the ReportPagePresenter element, in the Infragistics.Wpf.Reporting assembly.   
            </p>
            <p class="note"><b>Note:</b> this property takes precedence over the setting on the <see cref="T:Infragistics.Windows.Reporting.ReportBase"/>'s <see cref="P:Infragistics.Windows.Reporting.ReportBase.PageFooter"/>.
            </p>
            </remarks>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageFooterTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageFooterTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageHeader"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageHeaderTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageHeaderTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageContentTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageContentTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PagePresenterStyle"/>
        </member>
        <member name="P:Infragistics.Windows.Reporting.ReportSection.PageFooterTemplate">
            <summary>
            The template used to display the footer content of ReportPagePresenter control.
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> this property takes precedence over the setting on the <see cref="T:Infragistics.Windows.Reporting.ReportBase"/>'s <see cref="P:Infragistics.Windows.Reporting.ReportBase.PageFooterTemplate"/>.</p>
            </remarks>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageFooter"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageFooterTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageHeader"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageHeaderTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageHeaderTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageContentTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageContentTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PagePresenterStyle"/>
        </member>
        <member name="P:Infragistics.Windows.Reporting.ReportSection.PageFooterTemplateSelector">
            <summary>
            A DataTemplateSelector that can be used to provide custom logic for choosing the template for the footer in the ReportPagePresenter control.
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> this property takes precedence over the setting on the <see cref="T:Infragistics.Windows.Reporting.ReportBase"/>'s <see cref="P:Infragistics.Windows.Reporting.ReportBase.PageFooterTemplateSelector"/>.</p>
            </remarks>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageFooter"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageFooterTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageHeader"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageHeaderTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageHeaderTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageContentTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageContentTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PagePresenterStyle"/>
        </member>
        <member name="P:Infragistics.Windows.Reporting.ReportSection.PageHeader">
            <summary>
            Gets or sets the content of the header used inside the ReportPagePresenter element.
            </summary>
            <remarks>
            <p class="body">This property is used to set the content of the header used inside the ReportPagePresenter element, in the Infragistics.Wpf.Reporting assembly.   
            </p>
            <p class="note"><b>Note:</b> this property takes precedence over the setting on the <see cref="T:Infragistics.Windows.Reporting.ReportBase"/>'s <see cref="P:Infragistics.Windows.Reporting.ReportBase.PageHeader"/>.</p>
            </remarks>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageFooter"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageFooterTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageFooterTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageHeaderTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageHeaderTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PagePresenterStyle"/>
        </member>
        <member name="P:Infragistics.Windows.Reporting.ReportSection.PageHeaderTemplate">
            <summary>
            The template used to display the header content of ReportPagePresenter control.
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> this property takes precedence over the setting on the <see cref="T:Infragistics.Windows.Reporting.ReportBase"/>'s <see cref="P:Infragistics.Windows.Reporting.ReportBase.PageHeaderTemplate"/>.</p>
            </remarks>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageHeader"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageHeaderTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageFooter"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageFooterTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageFooterTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageContentTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageContentTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PagePresenterStyle"/>
        </member>
        <member name="P:Infragistics.Windows.Reporting.ReportSection.PageHeaderTemplateSelector">
            <summary>
            A DataTemplateSelector that can be used to provide custom logic for choosing the template for the header in the ReportPagePresenter control.
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> this property takes precedence over the setting on the <see cref="T:Infragistics.Windows.Reporting.ReportBase"/>'s <see cref="P:Infragistics.Windows.Reporting.ReportBase.PageHeaderTemplateSelector"/>.</p>
            </remarks>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageHeader"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageHeaderTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageFooter"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageFooterTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageFooterTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageContentTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageContentTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PagePresenterStyle"/>
        </member>
        <member name="P:Infragistics.Windows.Reporting.ReportSection.PagePresenterStyle">
            <summary>
            Gets or sets the style for the ReportPagePresenter
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> this property takes precedence over the setting on the <see cref="T:Infragistics.Windows.Reporting.ReportBase"/>'s <see cref="P:Infragistics.Windows.Reporting.ReportBase.PagePresenterStyle"/>.</p>
            </remarks>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageHeader"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageHeaderTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageHeaderTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageFooter"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageFooterTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageFooterTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageContentTemplate"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PageContentTemplateSelector"/>
        </member>
        <member name="P:Infragistics.Windows.Reporting.ReportSection.PhysicalPageNumber">
            <summary>
            The physical page number of the current page being printed within this section (read-only). 
            </summary>
            <value>A 1-based integer representing the physical page number of the current page being printed within this section.</value>
            <remarks>
            <p class="body">If there are multiple sections within a report this property restarts at 1 within each section.</p>
            <p class="note"><b>Note:</b> if <see cref="P:Infragistics.Windows.Reporting.ReportSettings.HorizontalPaginationMode"/> property is set to 'Scale' then this property will return the same value as <see cref="P:Infragistics.Windows.Reporting.ReportSection.LogicalPageNumber"/>.</p>
            </remarks>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.LogicalPageNumber"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.LogicalPagePartNumber"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSettings.HorizontalPaginationMode"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSettings.PagePrintOrder"/>
        </member>
        <member name="P:Infragistics.Windows.Reporting.ReportSection.Report">
            <summary>
            The associated report (read-only).
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> this property is initialized at the begiining of the first pagination. Until then it returns null.</para>
            </remarks>
        </member>
        <member name="T:Infragistics.Windows.Reporting.ReportSettings">
            <summary>
            A class that exposes settings that relate to a Report.
            </summary>
            <remarks>
            <p class="body">This class is used to specify settings that determine the way a report will be printed.</p>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Reporting.ReportBase"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportBase.ReportSettings"/>
        </member>
        <member name="M:Infragistics.Windows.Reporting.ReportSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Windows.Reporting.ReportSettings"/>  class.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Reporting.ReportSettings.ShouldSerializeMargin">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Reporting.ReportSettings.Margin"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Reporting.ReportSettings.ResetMargin">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Reporting.ReportSettings.Margin"/> property to its default value.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Reporting.ReportSettings.ShouldSerializePageRange">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Reporting.ReportSettings.PageRange"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Reporting.ReportSettings.ResetPageRange">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Reporting.ReportSettings.PageRange"/> property to its default value.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Reporting.ReportSettings.ShouldSerializePageSize">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Reporting.ReportSettings.PageSize"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Reporting.ReportSettings.ResetPageSize">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Reporting.ReportSettings.PageSize"/> property to its default value.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Reporting.ReportSettings.FileName">
            <summary>
            Returns/sets the name of the file where the report will be saved.
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> if this property is not set when exporting a report then a default name of <b>Export.xps</b> 
            will be used. If the FileName does not contain a fully qualified path then the 
            <see cref="P:System.Environment.CurrentDirectory"/> will be used.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Reporting.ReportSettings.HorizontalPaginationMode">
            <summary>
            Returns/sets the way logical pages are printed when they are too wide to fit on one page.
            </summary>
            <remarks>
            <p class="body">This property defines how to print a logical page when it is too wide to fit on a single physical page. 
            You can either scale it down so to fits on a single page or split it up over multiple page parts horizontally with the default 'Mosaic' setting.</p>
            <p class="note"><b>Note:</b> if 'Scale' is specified then the aspect ratio will be maintained, i.e. the scale factor for the width and height will be the same.</p>
            </remarks>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSettings.PagePrintOrder"/>
            <seealso cref="T:Infragistics.Windows.Reporting.HorizontalPaginationMode"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.LogicalPageNumber"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.LogicalPagePartNumber"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PhysicalPageNumber"/>
        </member>
        <member name="P:Infragistics.Windows.Reporting.ReportSettings.Margin">
            <summary>
            Gets or sets the margin around the ReportPagePresenter
            </summary>
            <remarks>
            <p class="body">The margin is the space between page presenter and page’s bounds, see <see cref="P:Infragistics.Windows.Reporting.ReportSettings.PageSize"/>.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Reporting.ReportSettings.PageOrientation">
            <summary>
            Returns/sets the orientation of the page.
            </summary>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSettings.PageOrientation"/>
        </member>
        <member name="P:Infragistics.Windows.Reporting.ReportSettings.PagePrintOrder">
            <summary>
            Returns/sets the order that pages are printed when HorizontalPaginationMode is set to 'Mosaic'.
            </summary>
            <remarks>
            <p class="body">When the visual you want to print doesn't fit on a single page, and the <see cref="P:Infragistics.Windows.Reporting.ReportSettings.HorizontalPaginationMode"/> is set to "Mosaic", you must decide the order you want to split the visual on the page. There are two way to paginate visual. First print down, then over and second print over, then down. </p>
            </remarks>
            <p class="body">When a logical page within a report is too wide to fit and <see cref="P:Infragistics.Windows.Reporting.ReportSettings.HorizontalPaginationMode"/> is set to 'Mosaic' 
            then it will be will be split up into multiple page parts horizontally. This property determines the order that the page parts are placed in the report.</p>
            <seealso cref="T:Infragistics.Windows.Reporting.PagePrintOrder"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSettings.HorizontalPaginationMode"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.LogicalPageNumber"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.LogicalPagePartNumber"/>
            <seealso cref="P:Infragistics.Windows.Reporting.ReportSection.PhysicalPageNumber"/>
        </member>
        <member name="P:Infragistics.Windows.Reporting.ReportSettings.PageRange">
            <summary>
            Returns/sets the range of pages to be included in the report. 
            </summary>
            <remarks>
            <para class="note">If PageTo is zero then the report will go from PageFrom until the end of the report.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">PageFrom is less than 1 or PageTo is less than 0 or PageTo greater than 0 but less than PageFrom.
            </exception>
        </member>
        <member name="P:Infragistics.Windows.Reporting.ReportSettings.UserPageRangeEnabled">
            <summary>
            Returns/sets whether the standard PrintDialog will allow to user to select a range of pages. 
            </summary>
            <remarks>
            <p class="body">Specifies whether the user will be able so specify whether all the pages or only a limited range will be printed or exported.
            The default value is true.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Reporting.ReportSettings.PageSize">
            <summary>
            Returns/sets the size of the page.
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> normally you won’t need to explicitly set the page size since it will be picked up through the PrintDialog and via the optional <see cref="P:Infragistics.Windows.Reporting.ReportSettings.PrintQueue"/> property. </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Reporting.ReportSettings.RepeatType">
            <summary>
            Determines how logical headers within the page content area will be treated within a report section..
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> In the case of a XamDataGrid this setting determines when field headers are displayed.</para>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Reporting.RepeatType"/>
        </member>
        <member name="P:Infragistics.Windows.Reporting.ReportSettings.PrintQueue">
            <summary>
            Gets or sets a PrintQueue object that represents the target printer.
            </summary>
            <remarks>
            <p class="body">You supply a <see cref="T:System.Printing.PrintQueue"/> object if you prefer not showing the standard <see cref="T:System.Windows.Controls.PrintDialog"/>.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.Windows.Controls.PopupResizerBar">
            <summary>
            Class created by a <see cref="T:Infragistics.Windows.Controls.PopupResizerDecorator"/> to allow resizing of a <see cref="T:System.Windows.Controls.Primitives.Popup"/> control.
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.PopupResizerDecorator"/>
            <seealso cref="P:Infragistics.Windows.Controls.PopupResizerBar.Location"/>
            <seealso cref="P:Infragistics.Windows.Controls.PopupResizerBar.ResizeMode"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.PopupResizerBar.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Infragistics.Windows.Controls.PopupResizerBar"/>
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.PopupResizerBar.OnApplyTemplate">
            <summary>
            Invoked when the template for the control has been changed.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.PopupResizerBar.OnCreateAutomationPeer">
            <summary>
            Returns <see cref="T:Infragistics.Windows.Controls.PopupResizerBar"/> Automation Peer Class <see cref="T:Infragistics.Windows.Automation.Peers.PopupResizerBarAutomationPeer"/>
            </summary> 
            <returns>AutomationPeer</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.PopupResizerBar.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when the mouse is pressed down on the element. The panning operation is cancelled when the next mouse down occurs.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.PopupResizerBar.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when a mouse button has been released. If a scroll operation has initiated, the panning operation will end. Otherwise, it will continue until the next mouse button is pressed.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:Infragistics.Windows.Controls.PopupResizerBar.ResizeModeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.PopupResizerBar.ResizeMode"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PopupResizerBar.LocationProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.PopupResizerBar.Location"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.PopupResizerBar.SetVisualState(System.Boolean)">
            <summary>
            Called to set the VisualStates of the control
            </summary>
            <param name="useTransitions">Determines whether transitions should be used.</param>
        </member>
        <member name="P:Infragistics.Windows.Controls.PopupResizerBar.ResizeMode">
            <summary>
            Gets/sets how the popup will be able to be resized.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.PopupResizerBar.ResizeModeProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.PopupResizerBar.Location">
            <summary>
            Determines where the resizer bar is positioned.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> this is determined based on where the popup is finally positioned relative to its PlacementTarget.</para></remarks>
            <seealso cref="F:Infragistics.Windows.Controls.PopupResizerBar.LocationProperty"/>
            <seealso cref="T:Infragistics.Windows.Controls.PopupResizerBarLocation"/>
            <seealso cref="P:Infragistics.Windows.Controls.PopupResizerBar.ResizeMode"/>
        </member>
        <member name="T:Infragistics.Windows.Controls.PopupResizerDecorator">
            <summary>
            Class used inside a <see cref="T:System.Windows.Controls.Primitives.Popup"/> control to position a resizerbar above or below its content.
            </summary>
            <remarks>
            <para class="body">This is placed inside the shadow chrome and main border of a <see cref="T:System.Windows.Controls.Primitives.Popup"/> control.</para>
            <para class="note"><b>Note:</b> the implementation uses a RenderTransform to arrange the resizer bar appropriately. Therefore, any RenderTransform placed on its immediate child element will be ignored.</para>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Controls.PopupResizerBar"/>
            <seealso cref="P:Infragistics.Windows.Controls.PopupResizerDecorator.ResizeMode"/>
            <seealso cref="P:Infragistics.Windows.Controls.PopupResizerDecorator.ResizerBarLocation"/>
            <seealso cref="P:Infragistics.Windows.Controls.PopupResizerDecorator.ResizerBarStyle"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.PopupResizerDecorator.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Infragistics.Windows.Controls.PopupResizerDecorator"/>
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.PopupResizerDecorator.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positions child elements and determines a size for this element.
            </summary>
            <param name="arrangeSize">The size available to this element for arranging its children.</param>
            <returns>The <see cref="T:System.Windows.Size"/> used by this element to arrange its children.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.PopupResizerDecorator.GetVisualChild(System.Int32)">
            <summary>
            Gets a child element at the specied index.
            </summary>
            <param name="index">The zero-based index of the child element</param>
            <returns>The child element.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.PopupResizerDecorator.MeasureOverride(System.Windows.Size)">
            <summary>
            Invoked to measure the element and its children.
            </summary>
            <param name="constraint">The size that reflects the available size that this element can give to its children.</param>
            <returns>The <see cref="T:System.Windows.Size"/> that represents the desired size of the element.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.PopupResizerDecorator.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Called when the element should render its contents.
            </summary>
            <param name="drawingContext">An initialized DrawingContext that should be used for all drawing within this method.</param>
        </member>
        <member name="F:Infragistics.Windows.Controls.PopupResizerDecorator.ResizeConstraintsProperty">
            <summary>
            Identifies the ResizeConstraints attached dependency property
            </summary>
            <seealso cref="M:Infragistics.Windows.Controls.PopupResizerDecorator.GetResizeConstraints(System.Windows.FrameworkElement)"/>
            <seealso cref="M:Infragistics.Windows.Controls.PopupResizerDecorator.SetResizeConstraints(System.Windows.FrameworkElement,Infragistics.Windows.Controls.PopupResizerDecorator.Constraints)"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.PopupResizerDecorator.GetResizeConstraints(System.Windows.FrameworkElement)">
            <summary>
            Gets the value of the 'ResizeConstraints' attached property
            </summary>
            <param name="element">The target element.</param>
            <returns>The constraints object or null if not set.</returns>
            <seealso cref="F:Infragistics.Windows.Controls.PopupResizerDecorator.ResizeConstraintsProperty"/>
            <seealso cref="M:Infragistics.Windows.Controls.PopupResizerDecorator.SetResizeConstraints(System.Windows.FrameworkElement,Infragistics.Windows.Controls.PopupResizerDecorator.Constraints)"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.PopupResizerDecorator.SetResizeConstraints(System.Windows.FrameworkElement,Infragistics.Windows.Controls.PopupResizerDecorator.Constraints)">
            <summary>
            Sets the value of the 'ResizeConstraints' attached property
            </summary>
            <param name="element">The target element.</param>
            <param name="value">The new constrant object to apply to this element.</param>
            <seealso cref="F:Infragistics.Windows.Controls.PopupResizerDecorator.ResizeConstraintsProperty"/>
            <seealso cref="M:Infragistics.Windows.Controls.PopupResizerDecorator.GetResizeConstraints(System.Windows.FrameworkElement)"/>
        </member>
        <member name="F:Infragistics.Windows.Controls.PopupResizerDecorator.ResizeModeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.PopupResizerDecorator.ResizeMode"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PopupResizerDecorator.ResizerBarLocationProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.PopupResizerDecorator.ResizerBarLocation"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PopupResizerDecorator.ResizerBarStyleProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.PopupResizerDecorator.ResizerBarStyle"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.PopupResizerDecorator.LogicalChildren">
            <summary>
            Gets an enumerator that can iterate the logical child elements of this element.
            </summary>
            <value>An IEnumerator. This property has no default value.</value>
        </member>
        <member name="P:Infragistics.Windows.Controls.PopupResizerDecorator.VisualChildrenCount">
            <summary>
            Returns the count of the parent child elements
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.PopupResizerDecorator.ResizeMode">
            <summary>
            Gets/sets how the popup will be able to be resized.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.PopupResizerDecorator.ResizeModeProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.PopupResizerDecorator.ResizerBarLocation">
            <summary>
            Returns where the resizer bar is positioned (read-only).
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> this is determined based on where the popup is finally positioned relative to its PlacementTarget.</para></remarks>
            <seealso cref="F:Infragistics.Windows.Controls.PopupResizerDecorator.ResizerBarLocationProperty"/>
            <seealso cref="T:Infragistics.Windows.Controls.PopupResizerBarLocation"/>
            <seealso cref="P:Infragistics.Windows.Controls.PopupResizerDecorator.ResizeMode"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.PopupResizerDecorator.ResizerBarStyle">
            <summary>
            Gets/sets the style used for the PopupResizerBar
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.PopupResizerDecorator.ResizerBarStyleProperty"/>
        </member>
        <member name="T:Infragistics.Windows.Controls.PopupResizerDecorator.Constraints">
            <summary>
            Resize constraints passed into the RegisterDescendantResizeConstraints method
            </summary>
            <see cref="M:Infragistics.Windows.Controls.PopupResizerDecorator.RegisterDescendantResizeConstraints(System.Windows.FrameworkElement,Infragistics.Windows.Controls.PopupResizerDecorator.Constraints)"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.PopupResizerDecorator.Constraints.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Infragistics.Windows.Controls.PopupResizerDecorator.Constraints"/>
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.PopupResizerDecorator.Constraints.MaximumHeight">
            <summary>
            The maximum height this element can be resized to.
            </summary>
            <value>The maximum height in device-independent units (1/96th inch per unit), or double.NaN if no maximum is set.</value>
            <seealso cref="P:Infragistics.Windows.Controls.PopupResizerDecorator.Constraints.MinimumHeight"/>
            <seealso cref="P:Infragistics.Windows.Controls.PopupResizerDecorator.Constraints.MinimumWidth"/>
            <seealso cref="P:Infragistics.Windows.Controls.PopupResizerDecorator.Constraints.MaximumWidth"/>
            <exception cref="T:System.ArgumentOutOfRangeException">If value is negative.</exception>
        </member>
        <member name="P:Infragistics.Windows.Controls.PopupResizerDecorator.Constraints.MaximumWidth">
            <summary>
            The maximum height this element can be resized to.
            </summary>
            <value>The maximum height in device-independent units (1/96th inch per unit), or double.NaN if no maximum is set.</value>
            <seealso cref="P:Infragistics.Windows.Controls.PopupResizerDecorator.Constraints.MaximumHeight"/>
            <seealso cref="P:Infragistics.Windows.Controls.PopupResizerDecorator.Constraints.MaximumWidth"/>
            <seealso cref="P:Infragistics.Windows.Controls.PopupResizerDecorator.Constraints.MaximumHeight"/>
            <seealso cref="P:Infragistics.Windows.Controls.PopupResizerDecorator.Constraints.MaximumWidth"/>
            <exception cref="T:System.ArgumentOutOfRangeException">If value is negative.</exception>
        </member>
        <member name="P:Infragistics.Windows.Controls.PopupResizerDecorator.Constraints.MinimumHeight">
            <summary>
            The minimum height this element can be resized to.
            </summary>
            <value>The minimum height in device-independent units (1/96th inch per unit), or double.NaN if no minimum is set.</value>
            <seealso cref="P:Infragistics.Windows.Controls.PopupResizerDecorator.Constraints.MinimumWidth"/>
            <seealso cref="P:Infragistics.Windows.Controls.PopupResizerDecorator.Constraints.MaximumHeight"/>
            <seealso cref="P:Infragistics.Windows.Controls.PopupResizerDecorator.Constraints.MaximumWidth"/>
            <exception cref="T:System.ArgumentOutOfRangeException">If value is negative.</exception>
        </member>
        <member name="P:Infragistics.Windows.Controls.PopupResizerDecorator.Constraints.MinimumWidth">
            <summary>
            The minimum height this element can be resized to.
            </summary>
            <value>The minimum height in device-independent units (1/96th inch per unit), or double.NaN if no minimum is set.</value>
            <seealso cref="P:Infragistics.Windows.Controls.PopupResizerDecorator.Constraints.MinimumHeight"/>
            <seealso cref="P:Infragistics.Windows.Controls.PopupResizerDecorator.Constraints.MaximumHeight"/>
            <seealso cref="P:Infragistics.Windows.Controls.PopupResizerDecorator.Constraints.MaximumWidth"/>
            <exception cref="T:System.ArgumentOutOfRangeException">If value is negative.</exception>
        </member>
        <member name="T:Infragistics.Windows.Themes.Internal.PrimitivesThemeTypeConverter">
            <summary>
            A custom type converter for providing a list of themes available for the controls in the Infragistics.Wpf assembly such as <see cref="T:Infragistics.Windows.Controls.XamTabControl"/>
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.ThemeTypeConverter">
            <summary>
            TypeConverter used by string properties that identify themes. It provides a list of standard values based on all registered themes.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Themes.ThemeTypeConverter.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Themes.ThemeTypeConverter"/> that will include all registered themes from its <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"/> method.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Themes.ThemeTypeConverter.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Themes.ThemeTypeConverter"/> that will include all registered themes for a given grouping from its <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"/> method.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Themes.ThemeTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the list of registered themes.
            </summary>
            <returns>The list of registered themes.</returns>
        </member>
        <member name="M:Infragistics.Windows.Themes.ThemeTypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Indicates if a valkue can be supplied that is not in the standard values list
            </summary>
            <returns>False</returns>
        </member>
        <member name="M:Infragistics.Windows.Themes.ThemeTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Indicates that there is a list of standard values
            </summary>
            <returns>True</returns>
        </member>
        <member name="M:Infragistics.Windows.Themes.Internal.PrimitivesThemeTypeConverter.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Themes.Internal.PrimitivesThemeTypeConverter"/>
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.Markup.SafeOuterGlowExtension">
            <summary>
            Implements a markup extension that creates a <see cref="T:System.Windows.Media.Effects.OuterGlowBitmapEffect"/>
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.Markup.SafeOuterGlowExtension.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Controls.Markup.SafeOuterGlowExtension"/>
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.Markup.SafeOuterGlowExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            Returns an <see cref="T:System.Windows.Media.Effects.OuterGlowBitmapEffect"/> based on the properties of the markup extension.
            </summary>
            <param name="serviceProvider">Object that can provide services for the markup extension.</param>
            <returns>An <see cref="T:System.Windows.Media.Effects.OuterGlowBitmapEffect"/> or null if one could not be created.</returns>
        </member>
        <member name="P:Infragistics.Windows.Controls.Markup.SafeOuterGlowExtension.GlowColor">
            <summary>
            Returns or sets the color of the halo glow.
            </summary>
            <value>
            <p class="body">The color of the glow. The default value is Gold.</p>
            </value>
        </member>
        <member name="P:Infragistics.Windows.Controls.Markup.SafeOuterGlowExtension.GlowSize">
            <summary>
            Returns or sets the thickness of the halo glow.
            </summary>
            <value>
            <p class="body">The thickness of the glow. The valid is range is from 1 through 199. The default is 5.</p>
            </value>
        </member>
        <member name="P:Infragistics.Windows.Controls.Markup.SafeOuterGlowExtension.Noise">
            <summary>
            Returns or sets the graininess of the halo glow.
            </summary>
            <value>
            <p class="body">The noise level of the glow. A value of 0 is consider no noise and a value of 1 indicates maximum noise. The default is 0.</p>
            </value>
        </member>
        <member name="P:Infragistics.Windows.Controls.Markup.SafeOuterGlowExtension.Opacity">
            <summary>
            Returns or sets the transparency of the halo glow.
            </summary>
            <value>
            <p class="body">The opacity/transparency of the glow. A value of 0 is completely transparent and a value of 1 
            is completely opaque. The default is 1.</p>
            </value>
        </member>
        <member name="T:Infragistics.Windows.Controls.StringFormatConverter">
            <summary>
            Value converter for invoking the <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/> method taking a specified format and one or more parameters.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.StringFormatConverter.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Controls.StringFormatConverter"/>
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.StringFormatConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Takes a series of values to use in a call to the <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/> to create a string.
            </summary>
            <param name="values">An array providing the arguments for the call to <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>. If the first element is null or <see cref="F:System.Windows.DependencyProperty.UnsetValue"/>, the converter culture will be used.</param>
            <param name="targetType">The type to which the converter must be convert the value. This parameter is not used. A String value is always returned</param>
            <param name="parameter">The string to use as the format. If null, then the first value is assumed to be the format.</param>
            <param name="culture">The culture used as the IFormatProvider for the Format method call.</param>
            <returns><see cref="F:System.Windows.DependencyProperty.UnsetValue"/> if the parameters do not match the information. Otherwise a formatted string is returned.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.StringFormatConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            This method is not implemented for this converter.
            </summary>
            <returns><see cref="F:System.Windows.Data.Binding.DoNothing"/> is always returned.</returns>
        </member>
        <member name="T:Infragistics.Windows.Controls.StringWithoutMnemonicsConverter">
            <summary>
            Value converter used to remove mnemonic characters from a string.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.StringWithoutMnemonicsConverter.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Controls.StringWithoutMnemonicsConverter"/>
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.StringWithoutMnemonicsConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a given <see cref="T:System.String"/> value to a string that removes '_' characters which would normally be used to identify that the character following be rendered as a mnemonic.
            </summary>
            <param name="value">A string whose text is to be cleared of unescaped '_' characters. Any instances where 2 consecutive '_' exist in the string are replaced with a single '_' character.</param>
            <param name="targetType">The type to which the converter must be convert the value. This parameter is not used. A String value is always returned</param>
            <param name="parameter">This parameter is not used.</param>
            <param name="culture">The culture to use when calling the <see cref="M:Infragistics.Windows.Utilities.StripMnemonics(System.String,System.Boolean)"/>.</param>
            <returns><see cref="F:System.Windows.DependencyProperty.UnsetValue"/> if the parameters do not match the required information. Otherwise a string with any '_' characters removed. If the string contains a sequence of two consecutive '_' characters then a single '_' is left in the string.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.StringWithoutMnemonicsConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This method is not implemented for this converter.
            </summary>
            <returns><see cref="F:System.Windows.Data.Binding.DoNothing"/> is always returned.</returns>
        </member>
        <member name="T:Infragistics.Windows.Controls.TabItemEx">
            <summary>
            A derived <see cref="T:System.Windows.Controls.TabItem"/> class that provides additional functionality when used with a <see cref="T:Infragistics.Windows.Controls.XamTabControl"/>
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.TabItemEx.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Controls.TabItemEx"/>
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabItemEx.ExecutingCommandEvent">
            <summary>
            Event ID for the <see cref="E:Infragistics.Windows.Controls.TabItemEx.ExecutingCommand"/> routed event
            </summary>
            <seealso cref="E:Infragistics.Windows.Controls.TabItemEx.ExecutingCommand"/>
            <seealso cref="M:Infragistics.Windows.Controls.TabItemEx.OnExecutingCommand(Infragistics.Windows.Controls.Events.ExecutingCommandEventArgs)"/>
            <seealso cref="T:Infragistics.Windows.Controls.Events.ExecutingCommandEventArgs"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.TabItemEx.OnExecutingCommand(Infragistics.Windows.Controls.Events.ExecutingCommandEventArgs)">
            <summary>
            Occurs before a command is executed.
            </summary>
            <remarks><para class="body">This event is cancellable.</para></remarks>
            <seealso cref="M:Infragistics.Windows.Controls.TabItemEx.ExecuteCommand(System.Windows.Input.RoutedCommand)"/>
            <seealso cref="E:Infragistics.Windows.Controls.TabItemEx.ExecutedCommand"/>
            <seealso cref="E:Infragistics.Windows.Controls.TabItemEx.ExecutingCommand"/>
            <seealso cref="F:Infragistics.Windows.Controls.TabItemEx.ExecutingCommandEvent"/>
            <seealso cref="T:Infragistics.Windows.Controls.Events.ExecutingCommandEventArgs"/>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabItemEx.ExecutedCommandEvent">
            <summary>
            Event ID for the <see cref="E:Infragistics.Windows.Controls.TabItemEx.ExecutedCommand"/> routed event
            </summary>
            <seealso cref="M:Infragistics.Windows.Controls.TabItemEx.ExecuteCommand(System.Windows.Input.RoutedCommand)"/>
            <seealso cref="E:Infragistics.Windows.Controls.TabItemEx.ExecutedCommand"/>
            <seealso cref="M:Infragistics.Windows.Controls.TabItemEx.OnExecutedCommand(Infragistics.Windows.Controls.Events.ExecutedCommandEventArgs)"/>
            <seealso cref="T:Infragistics.Windows.Controls.Events.ExecutedCommandEventArgs"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.TabItemEx.OnExecutedCommand(Infragistics.Windows.Controls.Events.ExecutedCommandEventArgs)">
            <summary>
            Occurs after a command is executed
            </summary>
            <seealso cref="M:Infragistics.Windows.Controls.TabItemEx.ExecuteCommand(System.Windows.Input.RoutedCommand)"/>
            <seealso cref="E:Infragistics.Windows.Controls.TabItemEx.ExecutingCommand"/>
            <seealso cref="E:Infragistics.Windows.Controls.TabItemEx.ExecutedCommand"/>
            <seealso cref="F:Infragistics.Windows.Controls.TabItemEx.ExecutedCommandEvent"/>
            <seealso cref="T:Infragistics.Windows.Controls.Events.ExecutedCommandEventArgs"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.TabItemEx.MeasureOverride(System.Windows.Size)">
            <summary>
            Invoked to measure the element and its children.
            </summary>
            <param name="constraint">The size that reflects the available size that this element can give to its children.</param>
            <returns>The <see cref="T:System.Windows.Size"/> that represents the desired size of the element.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.TabItemEx.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)">
            <summary>
            Invoked when the access key for the tab item has been pressed.
            </summary>
            <param name="e">Event arguments for the mnemonic that was pressed</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.TabItemEx.OnApplyTemplate">
            <summary>
            Invoked when the template for the control has been changed.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.TabItemEx.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Helper method for processing a keydown.
            </summary>
            <param name="e">Provides information about the keyboard event</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.TabItemEx.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when the mouse is moved within the bounds of the element.
            </summary>
            <param name="e">Provides information about the mouse position.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.TabItemEx.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when the mouse is moved outside the bounds of the element.
            </summary>
            <param name="e">Provides information about the mouse position.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.TabItemEx.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when the left mouse button is pressed on the tab item.
            </summary>
            <param name="e">Provides information about the mouse button pressed.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.TabItemEx.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when any mouse button is pressed on the tab item
            </summary>
            <param name="e">Provides information about the mouse button pressed.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.TabItemEx.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when the mouse is moved within the bounds of the element.
            </summary>
            <param name="e">Provides information about the mouse position.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.TabItemEx.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
            <summary>
            Invoked before the element receives the keyboard focus.
            </summary>
            <param name="e">Provides information about the focus change.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.TabItemEx.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when a property value changes.
            </summary>
            <param name="e">An instance of DependencyPropertyChangedEventArgs that contains information about the property that changed.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.TabItemEx.OnSelected(System.Windows.RoutedEventArgs)">
            <summary>
            Called when this tab item is selected
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.TabItemEx.OnUnselected(System.Windows.RoutedEventArgs)">
            <summary>
            Called when this tab item is unselected
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.TabItemEx.OnVisualParentChanged(System.Windows.DependencyObject)">
            <summary>
            Called when the visual parent has changed
            </summary>
            <param name="oldParent">The old parent visual</param>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabItemEx.ClosingEvent">
            <summary>
            Event ID for the <see cref="E:Infragistics.Windows.Controls.TabItemEx.Closing"/> routed event
            </summary>
            <seealso cref="E:Infragistics.Windows.Controls.TabItemEx.Closing"/>
            <seealso cref="M:Infragistics.Windows.Controls.TabItemEx.OnClosing(Infragistics.Windows.Controls.Events.TabClosingEventArgs)"/>
            <seealso cref="T:Infragistics.Windows.Controls.Events.TabClosingEventArgs"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.TabItemEx.OnClosing(Infragistics.Windows.Controls.Events.TabClosingEventArgs)">
            <summary>
            Occurs when the TabItem is about to be closed (cancellable)
            </summary>
            <seealso cref="E:Infragistics.Windows.Controls.TabItemEx.Closing"/>
            <seealso cref="F:Infragistics.Windows.Controls.TabItemEx.ClosingEvent"/>
            <seealso cref="T:Infragistics.Windows.Controls.Events.TabClosingEventArgs"/>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabItemEx.ClosedEvent">
            <summary>
            Event ID for the <see cref="E:Infragistics.Windows.Controls.TabItemEx.Closed"/> routed event
            </summary>
            <seealso cref="E:Infragistics.Windows.Controls.TabItemEx.Closed"/>
            <seealso cref="M:Infragistics.Windows.Controls.TabItemEx.OnClosed(System.Windows.RoutedEventArgs)"/>
            <seealso cref="E:Infragistics.Windows.Controls.TabItemEx.Closing"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.TabItemEx.OnClosed(System.Windows.RoutedEventArgs)">
            <summary>
            Occurs after the tab has been closed.
            </summary>
            <seealso cref="E:Infragistics.Windows.Controls.TabItemEx.Closed"/>
            <seealso cref="F:Infragistics.Windows.Controls.TabItemEx.ClosedEvent"/>
            <seealso cref="E:Infragistics.Windows.Controls.TabItemEx.Closing"/>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabItemEx.AllowClosingProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.TabItemEx.AllowClosing"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabItemEx.CloseButtonVisibilityProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.TabItemEx.CloseButtonVisibility"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabItemEx.ComputedCloseButtonVisibilityProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.TabItemEx.ComputedCloseButtonVisibility"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabItemEx.IsMouseOverTabProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.TabItemEx.IsMouseOverTab"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.TabItemEx.ExecuteCommand(System.Windows.Input.RoutedCommand)">
            <summary>
            Executes the specified RoutedCommand.
            </summary>
            <param name="command">The RoutedCommand to execute.</param>
            <returns>True if command was executed, false if canceled.</returns>
            <seealso cref="E:Infragistics.Windows.Controls.TabItemEx.ExecutingCommand"/>
            <seealso cref="E:Infragistics.Windows.Controls.TabItemEx.ExecutedCommand"/>
            <seealso cref="T:Infragistics.Windows.Controls.TabItemExCommands"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.TabItemEx.SetVisualState(System.Boolean)">
            <summary>
            Called to set the VisualStates of the control
            </summary>
            <param name="useTransitions">Determines whether transitions should be used.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.TabItemEx.UpdateVisualStates">
            <summary>
            Called to set the visual states of the control
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.TabItemEx.UpdateVisualStates(System.Boolean)">
            <summary>
            Called to set the visual states of the control
            </summary>
            <param name="useTransitions">Determines whether transitions should be used.</param>
        </member>
        <member name="E:Infragistics.Windows.Controls.TabItemEx.ExecutingCommand">
            <summary>
            Occurs before a command is executed
            </summary>
            <remarks><para class="body">This event is cancellable.</para></remarks>
            <seealso cref="M:Infragistics.Windows.Controls.TabItemEx.ExecuteCommand(System.Windows.Input.RoutedCommand)"/>
            <seealso cref="M:Infragistics.Windows.Controls.TabItemEx.OnExecutingCommand(Infragistics.Windows.Controls.Events.ExecutingCommandEventArgs)"/>
            <seealso cref="F:Infragistics.Windows.Controls.TabItemEx.ExecutingCommandEvent"/>
            <seealso cref="T:Infragistics.Windows.Controls.Events.ExecutingCommandEventArgs"/>
        </member>
        <member name="E:Infragistics.Windows.Controls.TabItemEx.ExecutedCommand">
            <summary>
            Occurs after a command is executed
            </summary>
            <seealso cref="M:Infragistics.Windows.Controls.TabItemEx.ExecuteCommand(System.Windows.Input.RoutedCommand)"/>
            <seealso cref="M:Infragistics.Windows.Controls.TabItemEx.OnExecutedCommand(Infragistics.Windows.Controls.Events.ExecutedCommandEventArgs)"/>
            <seealso cref="E:Infragistics.Windows.Controls.TabItemEx.ExecutingCommand"/>
            <seealso cref="F:Infragistics.Windows.Controls.TabItemEx.ExecutedCommandEvent"/>
            <seealso cref="T:Infragistics.Windows.Controls.Events.ExecutedCommandEventArgs"/>
        </member>
        <member name="E:Infragistics.Windows.Controls.TabItemEx.Closing">
            <summary>
            Occurs when the TabItem is about to be closed (cancellable)
            </summary>
            <seealso cref="M:Infragistics.Windows.Controls.TabItemEx.OnClosing(Infragistics.Windows.Controls.Events.TabClosingEventArgs)"/>
            <seealso cref="F:Infragistics.Windows.Controls.TabItemEx.ClosingEvent"/>
            <seealso cref="T:Infragistics.Windows.Controls.Events.TabClosingEventArgs"/>
        </member>
        <member name="E:Infragistics.Windows.Controls.TabItemEx.Closed">
            <summary>
            Occurs after the tab has been closed.
            </summary>
            <seealso cref="M:Infragistics.Windows.Controls.TabItemEx.OnClosed(System.Windows.RoutedEventArgs)"/>
            <seealso cref="E:Infragistics.Windows.Controls.TabItemEx.Closing"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.TabItemEx.AllowClosing">
            <summary>
            Returns or sets a value that indicates whether the tab item is allowed to be closed.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> By default this value is null in which case the <see cref="P:Infragistics.Windows.Controls.XamTabControl.TabItemCloseButtonVisibility"/> and <see cref="P:Infragistics.Windows.Controls.XamTabControl.AllowTabClosing"/> of the containing <see cref="T:Infragistics.Windows.Controls.XamTabControl"/> will be used.</para>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.TabItemEx.AllowClosingProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.TabItemEx.CloseButtonVisibility"/>
            <seealso cref="P:Infragistics.Windows.Controls.TabItemEx.ComputedCloseButtonVisibility"/>
            <seealso cref="F:Infragistics.Windows.Controls.XamTabControl.AllowTabClosingProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamTabControl.TabItemCloseButtonVisibility"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.TabItemEx.CloseButtonVisibility">
            <summary>
            Returns or sets a value that indicates when the close button should be displayed within the tab item. 
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> By default this value is null in which case the state is based on that of the containing <see cref="T:Infragistics.Windows.Controls.XamTabControl"/> <see cref="P:Infragistics.Windows.Controls.XamTabControl.TabItemCloseButtonVisibility"/> property.</para>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.TabItemEx.CloseButtonVisibilityProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.TabItemEx.AllowClosing"/>
            <seealso cref="P:Infragistics.Windows.Controls.TabItemEx.ComputedCloseButtonVisibility"/>
            <seealso cref="F:Infragistics.Windows.Controls.XamTabControl.AllowTabClosingProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamTabControl.TabItemCloseButtonVisibility"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.TabItemEx.ComputedCloseButtonVisibility">
            <summary>
            Returns the calculated visibility of the close button within the tab item based on its settings and those of the containing XamTabControl.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.TabItemEx.ComputedCloseButtonVisibilityProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.TabItemEx.AllowClosing"/>
            <seealso cref="P:Infragistics.Windows.Controls.TabItemEx.CloseButtonVisibility"/>
            <seealso cref="P:Infragistics.Windows.Controls.TabItemEx.ComputedCloseButtonVisibility"/>
            <seealso cref="F:Infragistics.Windows.Controls.XamTabControl.AllowTabClosingProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamTabControl.TabItemCloseButtonVisibility"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamTabControl.ShowTabHeaderCloseButton"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.TabItemEx.IsMouseOverTab">
            <summary>
            Returns a boolean indicating whether the mouse is over the tab item header.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.TabItemEx.IsMouseOverTabProperty"/>
        </member>
        <member name="T:Infragistics.Windows.Controls.TabItemExCommands">
            <summary>
            Provides the list of RoutedCommands supported by the <see cref="T:Infragistics.Windows.Controls.TabItemEx"/>. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabItemExCommands.Close">
            <summary>
            Closes the tab item. This command will be disabled if the tab item does not allow being closed (i.e. it is not closable).
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabItemExCommands.CloseAllButThis">
            <summary>
            Closes all closable tab items within the containing XamTabControl except the current tab item. If this command is executed against the XamTabControl itself (i.e. with the XamTabControl as the target of the command), all closable tabs except the selected tab will be closed. 
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.TabItemExCommands.GetCommandWrappers">
            <summary>
            The list of CommandWrappers for each supported command.
            </summary>
            <seealso cref="T:Infragistics.Windows.Commands.CommandWrapper"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.TabItemExCommands.LoadCommands">
            <summary>
            This method is provided as a convenience for initializing the statics in this class which kicks off
            the process of setting up and registering the commands.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.TabItemPanel">
            <summary>
            Panel used to arrange items like tab headers in single or multiple rows.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.TabItemPanel.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Controls.TabItemPanel"/>
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.TabItemPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positions child elements and determines a size for this element.
            </summary>
            <param name="finalSize">The size available to this element for arranging its children.</param>
            <returns>The <see cref="T:System.Windows.Size"/> used by this element to arrange its children.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.TabItemPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Invoked to measure the element and its children.
            </summary>
            <param name="availableSize">The size that reflects the available size that this element can give to its children.</param>
            <returns>The <see cref="T:System.Windows.Size"/> that represents the desired size of the element.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.TabItemPanel.OnChildDesiredSizeChanged(System.Windows.UIElement)">
            <summary>
            Invoked when the <see cref="P:System.Windows.UIElement.DesiredSize"/> of an element changes.
            </summary>
            <param name="child">The child whose size is being changed.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.TabItemPanel.OnIsItemsHostChanged(System.Boolean,System.Boolean)">
            <summary>
            Invoked when the <see cref="P:System.Windows.Controls.Panel.IsItemsHost"/> has changed.
            </summary>
            <param name="oldIsItemsHost">The old property value</param>
            <param name="newIsItemsHost">The new property value</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.TabItemPanel.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked when a property has changed on the object
            </summary>
            <param name="e">Provides information about the property change</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.TabItemPanel.OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary>
            Invoked when a tab item has been removed.
            </summary>
            <param name="visualAdded">Visual being added</param>
            <param name="visualRemoved">Visual being removed</param>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabItemPanel.InterRowSpacingProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.TabItemPanel.InterRowSpacing"/> property
            </summary>
            <seealso cref="P:Infragistics.Windows.Controls.TabItemPanel.InterRowSpacing"/>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabItemPanel.InterTabSpacingProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.TabItemPanel.InterTabSpacing"/> property
            </summary>
            <seealso cref="P:Infragistics.Windows.Controls.TabItemPanel.InterTabSpacing"/>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabItemPanel.IsFirstTabInRowProperty">
            <summary>
            Identifies the 'IsFirstTabInRow' attached readonly dependency property
            </summary>
            <seealso cref="M:Infragistics.Windows.Controls.TabItemPanel.GetIsFirstTabInRow(System.Windows.DependencyObject)"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.TabItemPanel.GetIsFirstTabInRow(System.Windows.DependencyObject)">
            <summary>
            Returns a boolean indicating if the item is the first item in a row.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.TabItemPanel.IsFirstTabInRowProperty"/>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabItemPanel.MaximumSizeToFitAdjustmentProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.TabItemPanel.MaximumSizeToFitAdjustment"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabItemPanel.TabSeparatorOpacityProperty">
            <summary>
            Identifies the TabSeparatorOpacity attached readonly dependency property
            </summary>
            <seealso cref="M:Infragistics.Windows.Controls.TabItemPanel.GetTabSeparatorOpacity(System.Windows.DependencyObject)"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.TabItemPanel.GetTabSeparatorOpacity(System.Windows.DependencyObject)">
            <summary>
            Returns the opacity (as a value between 0.0 and 1.0) of the separator for a tab item based on the current layout style.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.TabItemPanel.TabSeparatorOpacityProperty"/>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabItemPanel.MinimumTabExtentProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.TabItemPanel.MinimumTabExtent"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabItemPanel.MaximumTabRowsProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.TabItemPanel.MaximumTabRows"/> dependency property
            </summary>
            <seealso cref="P:Infragistics.Windows.Controls.TabItemPanel.MaximumTabRows"/>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabItemPanel.TabLayoutStyleProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.TabItemPanel.TabLayoutStyle"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabItemPanel.TabStripPlacementProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.TabItemPanel.TabStripPlacement"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.TabItemPanel.HorizontalOffsetInternal">
            <summary>
            Returns the actual horizontal offset
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.TabItemPanel.InterRowSpacing">
            <summary>
            The amount of spacing between rows of tab items.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.TabItemPanel.InterRowSpacingProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.TabItemPanel.InterTabSpacing">
            <summary>
            The amount of spacing between the tab items in a row.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.TabItemPanel.InterTabSpacingProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.TabItemPanel.MaximumSizeToFitAdjustment">
            <summary>
            The maximum amount of additional size to add to an element when the TabLayoutStyle is 'SingleRowSizeToFit' or 'MultiRowSizeToFit'.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.TabItemPanel.MaximumSizeToFitAdjustmentProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamTabControl.MaximumSizeToFitAdjustment"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamTabControl.TabLayoutStyle"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.TabItemPanel.MinimumTabExtent">
            <summary>
            The minimum extent for a tab item. That is, the minimum physical width when the TabStripPlacement is Top or Bottom and the minimum physical height when the TabStripPlacement is Left or Right.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.TabItemPanel.MinimumTabExtentProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.TabItemPanel.MaximumTabRows">
            <summary>
            Determines the maximum number of tab rows that will be displayed before a vertical scrollbar will appear.
            </summary>
            <remarks>
            <para class="body">The property can only be set to a positive integer. It defaults to 3.</para>
            <para class="note"><b>Note:</b> This property is ignored if the <see cref="P:Infragistics.Windows.Controls.TabItemPanel.TabLayoutStyle"/> property is not set to one of the 'Multi...' layouts.</para>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.TabItemPanel.MaximumTabRowsProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.TabItemPanel.TabLayoutStyle"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.TabItemPanel.TabLayoutStyle">
            <summary>
            Determines how the tab items will be arranged.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.TabItemPanel.TabLayoutStyleProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.TabItemPanel.TabStripPlacement">
            <summary>
            Determines the orientation and placement of the tab items.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.TabItemPanel.TabStripPlacementProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.TabItemPanel.VerticalOffsetInternal">
            <summary>
            Returns the actual vertical offset
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Licensing.UltraLicense">
            <summary>
            The license object for Infragistics components and controls
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Licensing.UltraLicense.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Licensing.UltraLicense.ProductInfo">
            <summary>
            Returns the product info object
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Licensing.UltraLicense.ComponentName">
            <summary>
            Returns the display name of the component (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Licensing.UltraLicense.LicenseKey">
            <summary>
            Returns the license key (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Licensing.UltraLicense.LicenseKeyForDisplay">
            <summary>
            Returns the license key, without any license option tokens (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Licensing.UltraLicense.LicenseOptions">
            <summary>
            Returns the additional licensed options for this instance (e.g., Office2007UI)
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Licensing.LicenseOptions">
            <summary>
            Contains bitflags which describe any additional options
            for which the associated product is licensed; e.g., Office2007UI
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Licensing.LicenseOptions.None">
            <summary>
            No additional license options.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Licensing.LicenseOptions.Office2007UI">
            <summary>
            Licensed to use the Office2007 user interface features.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Licensing.LicenseOptions.All">
            <summary>
            Licensed to use all optional features.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Licensing.UltraLicenseProvider">
            <summary>
            Base class for licensing
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Licensing.UltraLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
            <summary>
            Overriden to return a beta license object
            </summary>
            <param name="allowExceptions">Whether to throw exceptions when an invalid key is found.</param>
            <param name="context">A System.ComponentModel.LicenseContext that specifies where you can use the licensed object.</param>
            <param name="instance">An object that is requesting the license.</param>
            <param name="type">A type that represents the component requesting the license.</param>
            <returns>The BetaLicense object</returns>
        </member>
        <member name="T:Infragistics.Windows.Licensing.LicenseStatus">
            <summary>
            An enumerator that describes the status of the license
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Licensing.LicenseStatus.Unchecked">
            <summary>
            The license verification logic hasn't run yet
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Licensing.LicenseStatus.UnableToLocateLicenseAssembly">
            <summary>
            The license file could not be located.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Licensing.LicenseStatus.InsufficientSecurityPermissions">
            <summary>
            Unable to determine license status due to security permission restrictions.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Licensing.LicenseStatus.RegKeyNotFound">
            <summary>
            Couldn't find the necessary registry keys
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Licensing.LicenseStatus.CDKeyInvalid">
            <summary>
            Foound an invalid CDkey
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Licensing.LicenseStatus.BetaExpired">
            <summary>
            The beta period has expired
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Licensing.LicenseStatus.BetaValid">
            <summary>
            The beta period has not expired
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Licensing.LicenseStatus.TrialExpired">
            <summary>
            The trial period has expired
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Licensing.LicenseStatus.ActivationGracePeriodExpired">
            <summary>
            The activation grace period has expired.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Licensing.LicenseStatus.CDKeyValid">
            <summary>
            A valid CDKey was found
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Licensing.LicenseStatus.TrialValid">
            <summary>
            The trial period has not expired
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Licensing.LicenseStatus.ActivationGracePeriodValid">
            <summary>
            The activation grace period has not expired.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Licensing.LicenseStatus.Licensed">
            <summary>
            The component is fully licensed
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Licensing.ProductType">
            <summary>
            An enumerator that describes the product type.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Licensing.ProductType.WinFormsComponent">
            <summary>
            The product is a winforms component.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Licensing.ProductType.WebFormsComponent">
            <summary>
            The product is a webforms component.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Licensing.ProductType.WpfComponent">
            <summary>
            The product is a WPF component.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Licensing.UltraProductInfoBase">
            <summary>
            Abstract base class that holds product info.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Licensing.UltraProductInfoBase.IsKeyValid(System.String)">
            <summary>
            Checks the validaity of the key
            </summary>
            <param name="key">The key to check.</param>
            <returns>True if the key is valid</returns>
        </member>
        <member name="M:Infragistics.Windows.Licensing.UltraProductInfoBase.GetStatusText">
            <summary>
            Returns a string to be displayed in the about box for the status.
            </summary>
            <returns>The string to display in the about box for the status.</returns>        
        </member>
        <member name="M:Infragistics.Windows.Licensing.UltraProductInfoBase.GetKeyText">
            <summary>
            Returns the string used to represent the product key in a UI, taking into account localized values.
            </summary>
            <returns>A string used to represent the product key.</returns>
        </member>
        <member name="P:Infragistics.Windows.Licensing.UltraProductInfoBase.Expiration">
            <summary>
            Returns the expiration description.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Licensing.UltraProductInfoBase.RequiresActivation">
            <summary>
            Returns the expiration date.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Licensing.UltraProductInfoBase.ProductName">
            <summary>
            Returns the product name
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Licensing.UltraProductInfoBase.Expired">
            <summary>
            Returns true if the license has expired (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Licensing.UltraProductInfoBase.Status">
            <summary>
            Returns the statuc of the license
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Licensing.UltraProductInfoBase.Key">
            <summary>
            Returns the Key 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Licensing.UltraProductInfoBase.CompanyName">
            <summary>
            Returns the company name
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Licensing.UltraProductInfoBase.UserName">
            <summary>
            Returns the user name
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Licensing.UltraProductInfoBase.Type">
            <summary>
            Returns the product type
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Licensing.BetaProductInfo">
            <summary>
            ProductInfo used when a product is in beta.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Licensing.BetaProductInfo.#ctor(System.String,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Windows.Licensing.BetaProductInfo"/> class
            </summary>
            <param name="productName">The product name to display in the about dialog</param>
            <param name="expirationDate">The expiration date of the beta.</param>
        </member>
        <member name="M:Infragistics.Windows.Licensing.BetaProductInfo.#ctor(System.String,System.DateTime,Infragistics.Windows.Licensing.ProductType)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Windows.Licensing.BetaProductInfo"/> class
            </summary>
            <param name="productName">The product name to display in the about dialog</param>
            <param name="expirationDate">The expiration date of the beta.</param>
            <param name="productType">The type of product represented by the product info - e.g. WinForms, ASP.Net, WPF</param>
        </member>
        <member name="M:Infragistics.Windows.Licensing.BetaProductInfo.IsKeyValid(System.String)">
            <summary>
            Checks the validity of the key
            </summary>
            <returns>True if the key is valid</returns>
        </member>
        <member name="P:Infragistics.Windows.Licensing.BetaProductInfo.Expiration">
            <summary>
            Returns the expiration description.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Licensing.BetaProductInfo.RequiresActivation">
            <summary>
            Returns the expiration date.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Licensing.BetaProductInfo.Status">
            <summary>
            Returns the statuc of the license
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Licensing.BetaProductInfo.Key">
            <summary>
            Returns the Key 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Licensing.BetaProductInfo.CompanyName">
            <summary>
            Returns the company name
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Licensing.BetaProductInfo.UserName">
            <summary>
            Returns the user name
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Licensing.BetaProductInfo.Expired">
            <summary>
            Returns true if the license has expired (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Licensing.UltraProductInfo">
            <summary>
            ProductInfo used when after a product has been released.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Licensing.UltraProductInfo.#ctor(System.String,System.String,System.String,System.Guid,System.Boolean,System.Byte,System.Byte)">
            <summary>
            Contructor
            </summary>
            <param name="productName">The product name for the about dialog</param>
            <param name="regKeyProductName">The reg key root product name</param>
            <param name="codePrefix">must be 4 characters long</param>
            <param name="id">the id</param>
            <param name="requiresActivation">True if activation is required.</param>
            <param name="majorVersion">Major version of the product.</param>
            <param name="minorVersion">Minor version of the product.</param>
        </member>
        <member name="M:Infragistics.Windows.Licensing.UltraProductInfo.#ctor(System.String,System.String,System.String,System.Guid,System.Boolean,Infragistics.Windows.Licensing.ProductType,System.Byte,System.Byte)">
            <summary>
            Contructor
            </summary>
            <param name="productName">The product name for the about dialog</param>
            <param name="regKeyProductName">The reg key root product name</param>
            <param name="codePrefix">must be 4 characters long</param>
            <param name="id">the id</param>
            <param name="requiresActivation">True if activation is required.</param>
            <param name="productType">The type of product</param>
            <param name="majorVersion">Major version of the product.</param>
            <param name="minorVersion">Minor version of the product.</param>
        </member>
        <member name="M:Infragistics.Windows.Licensing.UltraProductInfo.IsKeyValid(System.String)">
            <summary>
            Checks the validity of the key
            </summary>
            <returns>True if the key is valid</returns>
        </member>
        <member name="M:Infragistics.Windows.Licensing.UltraProductInfo.GetExpirationDate(System.Int32)">
            <summary>
            Returns the expiration date based on the number of usage days remaining.
            </summary>
            <param name="usageDaysRemaining">Number of usage days remaining.</param>
            <returns>Expiration date for the product.</returns>
        </member>
        <member name="M:Infragistics.Windows.Licensing.UltraProductInfo.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Licensing.UltraProductInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current Object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current Object.</param>
            <returns>true if the specified see cref="System.Object"/&gt; is equal to the current Object; otherwise, false.</returns>
        </member>
        <member name="P:Infragistics.Windows.Licensing.UltraProductInfo.Expiration">
            <summary>
            Returns the expiration description.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Licensing.UltraProductInfo.RequiresActivation">
            <summary>
            Returns the expiration date.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Licensing.UltraProductInfo.Status">
            <summary>
            Returns the statuc of the license
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Licensing.UltraProductInfo.Key">
            <summary>
            Returns the Key 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Licensing.UltraProductInfo.CompanyName">
            <summary>
            Returns the company name
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Licensing.UltraProductInfo.UserName">
            <summary>
            Returns the user name
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Licensing.UltraProductInfo.RegKeyProductName">
            <summary>
            Returns the product name.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Licensing.UltraProductInfo.Expired">
            <summary>
            Returns true if the license has expired (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Licensing.UnlicensedProductInfo">
            <summary>
            ProductInfo used for product that does not require licensing.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Licensing.UnlicensedProductInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Windows.Licensing.UnlicensedProductInfo"/> class
            </summary>
            <param name="productName">The product name to display in the about dialog</param>
        </member>
        <member name="M:Infragistics.Windows.Licensing.UnlicensedProductInfo.#ctor(System.String,Infragistics.Windows.Licensing.ProductType)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Windows.Licensing.UnlicensedProductInfo"/> class
            </summary>
            <param name="productName">The product name to display in the about dialog</param>
            <param name="productType">The type of product.</param>
        </member>
        <member name="M:Infragistics.Windows.Licensing.UnlicensedProductInfo.IsKeyValid(System.String)">
            <summary>
            Checks the validity of the key
            </summary>
            <returns>True if the key is valid</returns>
        </member>
        <member name="P:Infragistics.Windows.Licensing.UnlicensedProductInfo.Expiration">
            <summary>
            Returns the expiration.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Licensing.UnlicensedProductInfo.RequiresActivation">
            <summary>
            Returns the expiration date.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Licensing.UnlicensedProductInfo.Status">
            <summary>
            Returns the statuc of the license
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Licensing.UnlicensedProductInfo.Key">
            <summary>
            Returns the Key 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Licensing.UnlicensedProductInfo.CompanyName">
            <summary>
            Returns the company name
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Licensing.UnlicensedProductInfo.UserName">
            <summary>
            Returns the user name
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Licensing.UnlicensedProductInfo.Expired">
            <summary>
            Returns true if the license has expired (read-only)
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.MousePanningAdorner.GetDesiredTransform(System.Windows.Media.GeneralTransform)">
            <summary>
            Returns a <see cref="T:System.Windows.Media.GeneralTransform"/> for the adorner.
            </summary>
            <param name="transform">The transform that is currently applied to the element.</param>
            <returns>The transform to apply to the adorner</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.MousePanningAdorner.MeasureOverride(System.Windows.Size)">
            <summary>
            Invoked to measure the element and its children.
            </summary>
            <param name="availableSize">The size that reflects the available size that this element can give to its children.</param>
            <returns>The <see cref="T:System.Windows.Size"/> that represents the desired size of the element.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.MousePanningAdorner.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when the element receives mouse capture. This is used to initialize the panning operation.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.MousePanningAdorner.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when the element has lost mouse capture. The panning operation will cease when capture is lost.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.MousePanningAdorner.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when the mouse moves over the element.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.MousePanningAdorner.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when the mouse is pressed down on the element. The panning operation is cancelled when the next mouse down occurs.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.MousePanningAdorner.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when a mouse button has been released. If a scroll operation has initiated, the panning operation will end. Otherwise, it will continue until the next mouse button is pressed.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.MousePanningAdorner.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Renders the panning image for the adorner.
            </summary>
            <param name="drawingContext">The drawing instructions for the element.</param>
        </member>
        <member name="T:Infragistics.Windows.Controls.MousePanningDecorator">
            <summary>
            Provides the ability to perform a scroll operation for a <see cref="T:System.Windows.Controls.ScrollViewer"/> using the middle mouse button.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.MousePanningDecorator.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Controls.MousePanningDecorator"/>
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.MousePanningDecorator.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Overriden. Invoked when the mouse button is pressed down on the element. This method is used to initiate the mouse panning operation when the middle mouse button has been pressed down over a <see cref="T:System.Windows.Controls.ScrollViewer"/>.
            </summary>
            <param name="e">Mouse event arguments</param>
        </member>
        <member name="F:Infragistics.Windows.Controls.MousePanningDecorator.ScrollAllImageKey">
            <summary>
            The key used to identify the image used by the decorator when the <see cref="T:System.Windows.Controls.ScrollViewer"/> being panned can scroll in all directions (i.e. both vertically and horizontally).
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.MousePanningDecorator.ScrollNSImageKey">
            <summary>
            The key used to identify the image used by the decorator when the <see cref="T:System.Windows.Controls.ScrollViewer"/> being panned can scroll vertically.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.MousePanningDecorator.ScrollEWImageKey">
            <summary>
            The key used to identify the image used by the decorator when the <see cref="T:System.Windows.Controls.ScrollViewer"/> being panned can scroll horizontally.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.PagerContentPresenter">
            <summary>
            Displays the contents of a <see cref="T:Infragistics.Windows.Controls.XamPager"/>
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.PagerContentPresenter.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Controls.PagerContentPresenter"/>
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PagerContentPresenter.CanContentScrollProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.PagerContentPresenter.CanContentScroll"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PagerContentPresenter.ClipContentHorizontallyProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.PagerContentPresenter.ClipContentHorizontally"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PagerContentPresenter.ClipContentVerticallyProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.PagerContentPresenter.ClipContentVertically"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.PagerContentPresenter.ReserveSpaceForScrollButtonsProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.PagerContentPresenter.ReserveSpaceForScrollButtons"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.PagerContentPresenter.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positions child elements and determines a size for this element.
            </summary>
            <param name="finalSize">The size available to this element for arranging its children.</param>
            <returns>The <see cref="T:System.Windows.Size"/> used by this element to arrange its children.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.PagerContentPresenter.GetLayoutClip(System.Windows.Size)">
            <summary>
            Returns a geometry for the clipping mask for the element.
            </summary>
            <param name="layoutSlotSize">The size of the element</param>
            <returns>A geometry to clip in the scrolling direction(s)</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.PagerContentPresenter.MeasureOverride(System.Windows.Size)">
            <summary>
            Invoked to measure the element and its children.
            </summary>
            <param name="availableSize">The size that reflects the available size that this element can give to its children.</param>
            <returns>The <see cref="T:System.Windows.Size"/> that represents the desired size of the element.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.PagerContentPresenter.OnApplyTemplate">
            <summary>
            Invoked when the template has been applied to the element.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.PagerContentPresenter.LineDown">
            <summary>
            Increases the <see cref="P:Infragistics.Windows.Controls.PagerContentPresenter.VerticalOffset"/> by a small amount.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.PagerContentPresenter.LineLeft">
            <summary>
            Decreases the <see cref="P:Infragistics.Windows.Controls.PagerContentPresenter.HorizontalOffset"/> by a small amount.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.PagerContentPresenter.LineRight">
            <summary>
            Increases the <see cref="P:Infragistics.Windows.Controls.PagerContentPresenter.HorizontalOffset"/> by a small amount.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.PagerContentPresenter.LineUp">
            <summary>
            Decreases the <see cref="P:Infragistics.Windows.Controls.PagerContentPresenter.VerticalOffset"/> by a small amount.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.PagerContentPresenter.MakeVisible(System.Windows.Media.Visual,System.Windows.Rect)">
            <summary>
            Scrolls the content such that the specified parent is in view.
            </summary>
            <param name="visual">The element to bring into view.</param>
            <param name="rectangle">The portion of the parent to bring into view.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.PagerContentPresenter.MouseWheelDown">
            <summary>
            Increases the <see cref="P:Infragistics.Windows.Controls.PagerContentPresenter.VerticalOffset"/> when the end user scrolls with the mouse wheel
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.PagerContentPresenter.MouseWheelLeft">
            <summary>
            Decreases the <see cref="P:Infragistics.Windows.Controls.PagerContentPresenter.HorizontalOffset"/> when the end user scrolls with the mouse wheel
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.PagerContentPresenter.MouseWheelRight">
            <summary>
            Increases the <see cref="P:Infragistics.Windows.Controls.PagerContentPresenter.HorizontalOffset"/> when the end user scrolls with the mouse wheel
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.PagerContentPresenter.MouseWheelUp">
            <summary>
            Decreases the <see cref="P:Infragistics.Windows.Controls.PagerContentPresenter.VerticalOffset"/> when the end user scrolls with the mouse wheel
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.PagerContentPresenter.PageDown">
            <summary>
            Increases the <see cref="P:Infragistics.Windows.Controls.PagerContentPresenter.VerticalOffset"/> based on the current <see cref="P:Infragistics.Windows.Controls.PagerContentPresenter.ViewportHeight"/>
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.PagerContentPresenter.PageLeft">
            <summary>
            Decreases the <see cref="P:Infragistics.Windows.Controls.PagerContentPresenter.HorizontalOffset"/> based on the current <see cref="P:Infragistics.Windows.Controls.PagerContentPresenter.ViewportWidth"/>
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.PagerContentPresenter.PageRight">
            <summary>
            Increases the <see cref="P:Infragistics.Windows.Controls.PagerContentPresenter.HorizontalOffset"/> based on the current <see cref="P:Infragistics.Windows.Controls.PagerContentPresenter.ViewportWidth"/>
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.PagerContentPresenter.PageUp">
            <summary>
            Decreases the <see cref="P:Infragistics.Windows.Controls.PagerContentPresenter.VerticalOffset"/> based on the current <see cref="P:Infragistics.Windows.Controls.PagerContentPresenter.ViewportHeight"/>
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.PagerContentPresenter.SetHorizontalOffset(System.Double)">
            <summary>
            Changes the <see cref="P:Infragistics.Windows.Controls.PagerContentPresenter.HorizontalOffset"/>
            </summary>
            <param name="offset">The new horizontal scroll offset</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.PagerContentPresenter.SetVerticalOffset(System.Double)">
            <summary>
            Changes the <see cref="P:Infragistics.Windows.Controls.PagerContentPresenter.VerticalOffset"/>
            </summary>
            <param name="offset">The new vertical scroll offset</param>
        </member>
        <member name="P:Infragistics.Windows.Controls.PagerContentPresenter.CanContentScroll">
            <summary>
            Indicates if content that implements <see cref="T:System.Windows.Controls.Primitives.IScrollInfo"/> should be allowed to control scrolling.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.PagerContentPresenter.CanContentScrollProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.PagerContentPresenter.ClipContentHorizontally">
            <summary>
            Determines if this preenter should clip its content so that it doesn't extend to the left or right of the presenter.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> if not set will determine how to clip based on whether it is scrolling horzontally or vertically.</para>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.PagerContentPresenter.ClipContentHorizontallyProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.PagerContentPresenter.ClipContentVertically">
            <summary>
            Determines if this preenter should clip its content so that it doesn't extend to the left or right of the presenter.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> if not set will determine how to clip based on whether it is scrolling horzontally or vertically.</para>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.PagerContentPresenter.ClipContentVerticallyProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.PagerContentPresenter.ReserveSpaceForScrollButtons">
            <summary>
            Detrmines whether the scroll button elements are overlapping the PagerContentPresenter and therefore need to be clipped.
            </summary>
            <remarks>
            <para class="body">If this property is true , which is it's default value, then overlapping scroll buttons will be used to 
            restrict the clipping area for the content.</para></remarks>
            <seealso cref="F:Infragistics.Windows.Controls.PagerContentPresenter.ReserveSpaceForScrollButtonsProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.PagerContentPresenter.CanHorizontallyScroll">
            <summary>
            Returns or sets a boolean indicating scrolling along the horizontal axis is possible.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.PagerContentPresenter.CanVerticallyScroll">
            <summary>
            Returns or sets a boolean indicating scrolling along the vertical axis is possible.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.PagerContentPresenter.ExtentHeight">
            <summary>
            Returns the height of the area to be scrolled.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.PagerContentPresenter.ExtentWidth">
            <summary>
            Returns the width of the area to be scrolled.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.PagerContentPresenter.HorizontalOffset">
            <summary>
            Returns the current offset of the scrolled content along the horizontal axis.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.PagerContentPresenter.ScrollOwner">
            <summary>
            Returns or sets the <see cref="T:System.Windows.Controls.ScrollViewer"/> that is controlling the scrolling behavior.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.PagerContentPresenter.VerticalOffset">
            <summary>
            Returns the current offset of the scrolled content along the vertical axis.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.PagerContentPresenter.ViewportHeight">
            <summary>
            Returns the width of the available area for the scrolled content.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.PagerContentPresenter.ViewportWidth">
            <summary>
            Returns the width of the available area for the scrolled content.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Scrolling.DeferredScrollService">
            <summary>
            Provides a mechanism to receive notifications when the thumb of a ScrollViewer scrollbar is being dragged.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Scrolling.DeferredScrollService.RegisterDeferredScrollHost(System.Type)">
            <summary>
            Method used to register a class type that supports deferred scrolling.
            </summary>
            <param name="classType">The UIElement or ContentElement type that implements the <see cref="T:Infragistics.Windows.Scrolling.IDeferredScrollHost"/> interface.</param>
            <exception cref="T:System.ArgumentException"><paramref name="classType"/> does not derive from <see cref="T:System.Windows.UIElement"/> or <see cref="T:System.Windows.ContentElement"/> or does not implement <see cref="T:Infragistics.Windows.Scrolling.IDeferredScrollHost"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="classType"/> is a null reference (<b>Nothing</b> in Visual Basic)</exception>
        </member>
        <member name="T:Infragistics.Windows.Scrolling.IDeferredScrollHost">
            <summary>
            Interface implemented by a <see cref="T:System.Windows.UIElement"/> or <see cref="T:System.Windows.ContentElement"/> which contains 
            a <see cref="T:System.Windows.Controls.ScrollViewer"/> whose scrolling is to be deferred.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Scrolling.IDeferredScrollHost.ScrollPanel">
            <summary>
            Returns the panel whose scroll thumb dragging may be deferred.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.ResourceSetLoader">
            <summary>
            Custom resource dictionary that loads based on a specified <see cref="T:Infragistics.Windows.Themes.ResourceSetLocator"/>
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Themes.ResourceSetLoader.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Themes.ResourceSetLoader"/>
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Themes.ResourceSetLoader.BeginInit">
            <summary>
            Starts the initialization of the dictionary.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Themes.ResourceSetLoader.EndInit">
            <summary>
            Ends the initialization of the dictionary.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.ResourceSetLoader.Locator">
            <summary>
            Gets/sets adictionary that contains the resources to clone. 
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.WashMode">
            <summary>
            Determines the method used to wash colors. 
            </summary>
            <seealso cref="T:Infragistics.Windows.Themes.ResourceWasher"/>
            <seealso cref="P:Infragistics.Windows.Themes.ResourceWasher.WashMode"/>
        </member>
        <member name="F:Infragistics.Windows.Themes.WashMode.SoftLightBlend">
            <summary>
            Blends each of the RGB color values with the corresponding wash color values. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Themes.WashMode.HueSaturationReplacement">
            <summary>
            Replaces the hue and saturation values with the corresponding values from the wash color but retains the brightness value.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.ResourceWasher">
            <summary>
            The ResourceWasher is a WPF resource dictionary that is used to clone brushes, pens and color resources defined in another ‘source resource dictionary’ and optional wash their colors.  It exposes properties to specify the ‘source resource dictionary’, the default wash color along with a collection of wash groups. It also registers 2 attached properties that can be set on a Brush to specify its group name and whether its colors should be washed at all.
            </summary>
            <seealso cref="P:Infragistics.Windows.Themes.ResourceWasher.AutoWash"/>
            <seealso cref="F:Infragistics.Windows.Themes.ResourceWasher.IsExcludedFromWashProperty"/>
            <seealso cref="P:Infragistics.Windows.Themes.ResourceWasher.SourceDictionary"/>
            <seealso cref="P:Infragistics.Windows.Themes.ResourceWasher.WashColor"/>
            <seealso cref="F:Infragistics.Windows.Themes.ResourceWasher.WashGroupProperty"/>
            <seealso cref="P:Infragistics.Windows.Themes.ResourceWasher.WashGroups"/>
        </member>
        <member name="M:Infragistics.Windows.Themes.ResourceWasher.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Themes.ResourceWasher.IsExcludedFromWashProperty">
            <summary>
            Identifies the IsExcludedFromWash attached dependency property
            </summary>
            <remarks>
            <para class="body">Attached property for Brushes and Pens. When set to true will prevent the brushes' colors from being washed.</para>
            </remarks>
            <seealso cref="M:Infragistics.Windows.Themes.ResourceWasher.GetIsExcludedFromWash(System.Windows.DependencyObject)"/>
            <seealso cref="M:Infragistics.Windows.Themes.ResourceWasher.SetIsExcludedFromWash(System.Windows.DependencyObject,System.Boolean)"/>
        </member>
        <member name="M:Infragistics.Windows.Themes.ResourceWasher.GetIsExcludedFromWash(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the 'IsExcludedFromWash' attached property
            </summary>
            <remarks>
            <para class="body">Attached property for Brushes and Pens. When set to true will prevent the brushes' colors from being washed.</para>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Themes.ResourceWasher.IsExcludedFromWashProperty"/>
            <seealso cref="M:Infragistics.Windows.Themes.ResourceWasher.SetIsExcludedFromWash(System.Windows.DependencyObject,System.Boolean)"/>
        </member>
        <member name="M:Infragistics.Windows.Themes.ResourceWasher.SetIsExcludedFromWash(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the 'IsExcludedFromWash' attached property
            </summary>
            <remarks>
            <para class="body">Attached property for Brushes and Pens. When set to true will prevent the brushes' colors from being washed.</para>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Themes.ResourceWasher.IsExcludedFromWashProperty"/>
            <seealso cref="M:Infragistics.Windows.Themes.ResourceWasher.GetIsExcludedFromWash(System.Windows.DependencyObject)"/>
        </member>
        <member name="F:Infragistics.Windows.Themes.ResourceWasher.WashGroupProperty">
            <summary>
            Identifies the WashGroup attached dependency property
            </summary>
            <remarks>
            <para class="body">Attached property for Brushes and Pens to identify which group the brush or pen belongs to.</para>
            </remarks>
            <seealso cref="M:Infragistics.Windows.Themes.ResourceWasher.GetWashGroup(System.Windows.DependencyObject)"/>
            <seealso cref="M:Infragistics.Windows.Themes.ResourceWasher.SetWashGroup(System.Windows.DependencyObject,System.String)"/>
            <seealso cref="F:Infragistics.Windows.Themes.ResourceWasher.IsExcludedFromWashProperty"/>
            <seealso cref="P:Infragistics.Windows.Themes.ResourceWasher.WashGroups"/>
            <seealso cref="T:Infragistics.Windows.Themes.WashGroup"/>
        </member>
        <member name="M:Infragistics.Windows.Themes.ResourceWasher.GetWashGroup(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the 'WashGroup' attached property
            </summary>
            <remarks>
            <para class="body">Attached property for Brushes and Pens to identify which group the brush or pen belongs to.</para>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Themes.ResourceWasher.WashGroupProperty"/>
            <seealso cref="M:Infragistics.Windows.Themes.ResourceWasher.SetWashGroup(System.Windows.DependencyObject,System.String)"/>
            <seealso cref="F:Infragistics.Windows.Themes.ResourceWasher.IsExcludedFromWashProperty"/>
            <seealso cref="P:Infragistics.Windows.Themes.ResourceWasher.WashGroups"/>
            <seealso cref="T:Infragistics.Windows.Themes.WashGroup"/>
        </member>
        <member name="M:Infragistics.Windows.Themes.ResourceWasher.SetWashGroup(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the value of the 'WashGroup' attached property
            </summary>
            <remarks>
            <para class="body">Attached property for Brushes and Pens to identify which group the brush or pen belongs to.</para>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Themes.ResourceWasher.WashGroupProperty"/>
            <seealso cref="M:Infragistics.Windows.Themes.ResourceWasher.GetWashGroup(System.Windows.DependencyObject)"/>
            <seealso cref="F:Infragistics.Windows.Themes.ResourceWasher.IsExcludedFromWashProperty"/>
            <seealso cref="P:Infragistics.Windows.Themes.ResourceWasher.WashGroups"/>
            <seealso cref="T:Infragistics.Windows.Themes.WashGroup"/>
        </member>
        <member name="M:Infragistics.Windows.Themes.ResourceWasher.ShouldSerializeWashColor">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Themes.ResourceWasher.WashColor"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Themes.ResourceWasher.ResetWashColor">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Themes.ResourceWasher.WashColor"/> property to its default state
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Themes.ResourceWasher.ShouldSerializeWashGroups">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Themes.ResourceWasher.WashGroups"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Themes.ResourceWasher.ResetWashGroups">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Themes.ResourceWasher.WashGroups"/> property to its default state
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Themes.ResourceWasher.BeginInit">
            <summary>
            Begins the initialization process.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Themes.ResourceWasher.EndInit">
            <summary>
            Ends the initialization process.
            </summary>
            <remarks>
            <para class="note"><b>Note: </b> If the <see cref="P:Infragistics.Windows.Themes.ResourceWasher.AutoWash"/> property is true then the <see cref="M:Infragistics.Windows.Themes.ResourceWasher.WashResources"/> method will be called automatically by this method.</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Themes.ResourceWasher.WashResources">
            <summary>
            Clones and washes the resources from the <see cref="P:Infragistics.Windows.Themes.ResourceWasher.SourceDictionary"/>
            </summary>
            <remarks>
            <para class="body">
            Loops thru the source collection (and recursively thru its merged dictionaries) and clones any brushes that are not excluded from the wash via the attached <see cref="F:Infragistics.Windows.Themes.ResourceWasher.IsExcludedFromWashProperty"/>. It washes the cloned resources colors with the appropriate wash color. All other resources are just placed in the collection without cloning them.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Themes.ResourceWasher.PerformColorWash(System.Windows.Media.Color,System.Windows.Media.Color,Infragistics.Windows.Themes.WashGroup)">
            <summary>
            Washes a color. 
            </summary>
            <param name="startColor">The starting color.</param>
            <param name="washColor">The color to wash the starting color with.</param>
            <param name="group">The associated wash group which may be null.</param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Windows.Themes.ResourceWasher.AutoWash">
            <summary>
            Gets/sets whether the wash will be triggered automatically.
            </summary>
            <remarks>
            <para class="body">
            If true will call the <see cref="M:Infragistics.Windows.Themes.ResourceWasher.WashResources"/> method automatically on ISupportInitialize.EndInit or afterward when any of the <see cref="P:Infragistics.Windows.Themes.ResourceWasher.SourceDictionary"/>, <see cref="P:Infragistics.Windows.Themes.ResourceWasher.WashColor"/> or <see cref="T:Infragistics.Windows.Themes.WashGroup"/> property values has changed.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Themes.ResourceWasher.SourceDictionary">
            <summary>
            Gets/sets adictionary that contains the resources to clone. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.ResourceWasher.WashColor">
            <summary>
            Gets/sets the default color to use to wash the resources in the SourceDictionary 
            </summary>
            <remarks>
            <para class="body">The color to use to wash any resources not identified to a group in the <see cref="P:Infragistics.Windows.Themes.ResourceWasher.WashGroups"/> collection</para>
            <para class="note"><b>Note:</b> if this property is left to its default value of <b>Colors.Transparent</b> then any affected resources will not be cloned and washed. Instead they will be copied over without cloning or modification.</para>
            </remarks>
            <seealso cref="P:Infragistics.Windows.Themes.ResourceWasher.WashGroups"/>
            <seealso cref="T:Infragistics.Windows.Themes.WashGroup"/>
        </member>
        <member name="P:Infragistics.Windows.Themes.ResourceWasher.WashMode">
            <summary>
            Gets/sets the method used to wash colors in the resources in the SourceDictionary.
            </summary>
            <seealso cref="P:Infragistics.Windows.Themes.ResourceWasher.WashGroups"/>
            <seealso cref="T:Infragistics.Windows.Themes.WashGroup"/>
            <seealso cref="P:Infragistics.Windows.Themes.ResourceWasher.WashColor"/>
        </member>
        <member name="P:Infragistics.Windows.Themes.ResourceWasher.WashGroups">
            <summary>
            Returns a collection of WashGroup objects.
            </summary>
            <seealso cref="T:Infragistics.Windows.Themes.WashGroup"/>
        </member>
        <member name="T:Infragistics.Windows.Themes.StaticPropertyResourceKey">
            <summary>
            A resource key that is intended to be exposed as a static readonly property or field.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Themes.StaticPropertyResourceKey.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the StaticPropertyResourceKey class.
            </summary>
            <param name="type">The type of the class that exposes a static read-only property or field of type ResourceKey.</param>
            <param name="propertyName">The name of the static read-only property or field (of type ResourceKey) exposed by type.</param>
            <exception cref="T:System.ArgumentNullException">Type is null</exception>
            <exception cref="T:System.ArgumentNullException">propertyName is null</exception>
        </member>
        <member name="M:Infragistics.Windows.Themes.StaticPropertyResourceKey.ToString">
            <summary>
            Returns a string that represents this object.
            </summary>
            <returns>A string that represents this object.</returns>
        </member>
        <member name="P:Infragistics.Windows.Themes.StaticPropertyResourceKey.Assembly">
            <summary>
            Gets an assembly object that indicates which assembly's dictionary to look in for the value associated with this key. 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.StaticPropertyResourceKey.Type">
            <summary>
            Returns the type of the class that exposes a static read-only property or field of type ResourceKey (read-only).
            </summary>
            <seealso cref="P:Infragistics.Windows.Themes.StaticPropertyResourceKey.PropertyName"/>
        </member>
        <member name="P:Infragistics.Windows.Themes.StaticPropertyResourceKey.PropertyName">
            <summary>
            Returns the name of the static read-only property or field (of type ResourceKey) exposed by type (read-only).
            </summary>
            <seealso cref="P:Infragistics.Windows.Themes.StaticPropertyResourceKey.Type"/>
        </member>
        <member name="T:Infragistics.Windows.Themes.WashGroup">
            <summary>
            Defines the color to use to wash a group of resources
            </summary>
            <seealso cref="T:Infragistics.Windows.Themes.WashGroupCollection"/>
            <seealso cref="T:Infragistics.Windows.Themes.ResourceWasher"/>
            <seealso cref="F:Infragistics.Windows.Themes.ResourceWasher.WashGroupProperty"/>
            <seealso cref="P:Infragistics.Windows.Themes.ResourceWasher.WashGroups"/>
        </member>
        <member name="M:Infragistics.Windows.Themes.WashGroup.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Themes.WashGroup.ShouldSerializeWashColor">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Themes.WashGroup.WashColor"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Themes.WashGroup.ResetWashColor">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Themes.WashGroup.WashColor"/> property to its default state
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Themes.WashGroup.ShouldSerializeWashMode">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Themes.WashGroup.WashMode"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Themes.WashGroup.ResetWashMode">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Themes.WashGroup.WashMode"/> property to its default state
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.WashGroup.Name">
            <summary>
            Gets/sets the name of the group.
            </summary>
            <remarks>
            <para class="note">
            <b>Note:</b> Any brushes found in the source dictionary whose <see cref="F:Infragistics.Windows.Themes.ResourceWasher.WashGroupProperty"/> attached property mathes this name will be washed with the specified WashColor.
            </para>
            </remarks>
            <seealso cref="M:Infragistics.Windows.Themes.ResourceWasher.SetWashGroup(System.Windows.DependencyObject,System.String)"/>
            <seealso cref="P:Infragistics.Windows.Themes.ResourceWasher.WashGroups"/>
        </member>
        <member name="P:Infragistics.Windows.Themes.WashGroup.WashColor">
            <summary>
            Gets/sets the color to use to wash the resources in this group.
            </summary>
            <remarks>
            <para class="body">The color to use to wash any resources whose <see cref="T:Infragistics.Windows.Themes.ResourceWasher"/>.<see cref="F:Infragistics.Windows.Themes.ResourceWasher.WashGroupProperty"/> matches this group's <see cref="P:Infragistics.Windows.Themes.WashGroup.Name"/>.</para>
            <para class="note"><b>Note:</b> if this property is left to its default value of <b>Colors.Transparent</b> then the resources in this group will not be cloned and washed. Instead they will be copied over without cloning or modification.</para>
            </remarks>
            <seealso cref="M:Infragistics.Windows.Themes.ResourceWasher.SetWashGroup(System.Windows.DependencyObject,System.String)"/>
            <seealso cref="P:Infragistics.Windows.Themes.ResourceWasher.WashGroups"/>
        </member>
        <member name="P:Infragistics.Windows.Themes.WashGroup.WashMode">
            <summary>
            Gets/sets the method used to wash colors in the resources in the SourceDictionary in this group.
            </summary>
            <seealso cref="P:Infragistics.Windows.Themes.ResourceWasher.WashMode"/>
        </member>
        <member name="T:Infragistics.Windows.Themes.WashGroupCollection">
            <summary>
            A collection of groups used by the ResourceWasher for washing colors 
            </summary>
            <seealso cref="T:Infragistics.Windows.Themes.WashGroup"/>
            <seealso cref="T:Infragistics.Windows.Themes.ResourceWasher"/>
            <seealso cref="F:Infragistics.Windows.Themes.ResourceWasher.WashGroupProperty"/>
            <seealso cref="P:Infragistics.Windows.Themes.ResourceWasher.WashGroups"/>
        </member>
        <member name="T:Infragistics.Windows.Controls.ToolWindow">
            <summary>
            A stylable control used display elements as if hosted within a window.
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> This class is for Infragistics internal use only.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindow.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Controls.ToolWindow"/>
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> This class is for Infragistics internal use only.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindow.OnApplyTemplate">
            <summary>
            Invoked when the template for the control has been changed.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindow.OnContentChanged(System.Object,System.Object)">
            <summary>
            Invoked when the content of the element has been changed.
            </summary>
            <param name="oldContent">The object that represents the old content</param>
            <param name="newContent">The object that represents the new content</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindow.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)">
            <summary>
            Invoked when the element should display its context menu.
            </summary>
            <param name="e">Provides data for the event</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindow.OnCreateAutomationPeer">
            <summary>
            Returns <see cref="T:Infragistics.Windows.Controls.ToolWindow"/> Automation Peer Class <see cref="T:Infragistics.Windows.Automation.Peers.ToolWindowAutomationPeer"/>
            </summary> 
            <returns>AutomationPeer</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindow.OnInitialized(System.EventArgs)">
            <summary>
            Invoked when the element has been initialized.
            </summary>
            <param name="e">Provides data for the event</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindow.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when any mouse button is pressed down on the element.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindow.ToString">
            <summary>
            Returns a string representation of the window.
            </summary>
            <returns>The type of the class and the string representation of the content</returns>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindow.AllowCloseProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ToolWindow.AllowClose"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindow.HorizontalAlignmentModeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ToolWindow.HorizontalAlignmentMode"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindow.HorizontalAlignmentOffsetProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ToolWindow.HorizontalAlignmentOffset"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindow.IsActiveProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ToolWindow.IsActive"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindow.IsUsingOSNonClientAreaProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ToolWindow.IsUsingOSNonClientArea"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindow.LeftProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ToolWindow.Left"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindow.OwnerProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ToolWindow.Owner"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindow.ResizeModeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ToolWindow.ResizeMode"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindow.PreferredBorderThicknessProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ToolWindow.PreferredBorderThickness"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindow.ThemeProperty">
            <summary>
            Identifies the 'Theme' dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindow.ThemeChangedEvent">
            <summary>
            Event ID for the 'ThemeChanged' routed event
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindow.OnThemeChanged(System.String,System.String)">
            <summary>
            Called when property 'Theme' changes
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindow.TitleProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ToolWindow.Title"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindow.TopProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ToolWindow.Top"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindow.TopmostProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ToolWindow.Topmost"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindow.UseOSNonClientAreaProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ToolWindow.UseOSNonClientArea"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindow.VerticalAlignmentModeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ToolWindow.VerticalAlignmentMode"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindow.VerticalAlignmentOffsetProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ToolWindow.VerticalAlignmentOffset"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindow.HitTestCodeProperty">
            <summary>
            Identifies the HitTestCode" attached readonly dependency property
            </summary>
            <seealso cref="M:Infragistics.Windows.Controls.ToolWindow.GetHitTestCode(System.Windows.DependencyObject)"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindow.GetHitTestCode(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the 'HitTestCode' attached readonly property
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.ToolWindow.HitTestCodeProperty"/>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindow.HostProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ToolWindow.Host"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindow.ToolWindowProperty">
            <summary>
            Identifies the ToolWindow attached readonly dependency property
            </summary>
            <seealso cref="M:Infragistics.Windows.Controls.ToolWindow.GetToolWindow(System.Windows.DependencyObject)"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindow.GetToolWindow(System.Windows.DependencyObject)">
            <summary>
            Returns the owning <see cref="T:Infragistics.Windows.Controls.ToolWindow"/> for the specified object
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.ToolWindow.ToolWindowProperty"/>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindow.PreferredBorderWidthProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ToolWindow.PreferredBorderWidth"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindow.PreferredBorderHeightProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ToolWindow.PreferredBorderHeight"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindow.ToolWindowPartProperty">
            <summary>
            Identifies the <see cref="T:Infragistics.Windows.Controls.ToolWindowPart"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindow.GetToolWindowPart(System.Windows.DependencyObject)">
            <summary>
            Returns the part that the element represents
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindow.OnDoubleClickCaption(System.Windows.Point,System.Windows.Input.MouseDevice)">
            <summary>
            Invoked when the user double clicks on the caption element.
            </summary>
            <param name="pt">The point relative to the upper left of the window.</param>
            <param name="mouse">Mouse device used to trigger the action</param>
            <returns>True if the action was handled; otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindow.OnDragCaption(System.Windows.Point,System.Windows.Input.MouseDevice)">
            <summary>
            Invoked when a drag operation by clicking on the caption is about to start.
            </summary>
            <param name="pt">The point relative to the upper left of the window.</param>
            <param name="mouse">Mouse device used to trigger the action</param>
            <returns>True if the drag action was handled and therefore the window should not start a drag operation; false to allow the drag operation to occur.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindow.ShowContextMenu(System.Object,System.Windows.Point,System.Boolean)">
            <summary>
            Helper method to show the context menu 
            </summary>
            <param name="originalSource"></param>
            <param name="location"></param>
            <param name="showDefaultOnly"></param>
            <returns>Returns a boolean indicating whether the action was handled.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindow.CalculateNonClientSize(System.Windows.Size)">
            <summary>
            Adds the non-client size to the specified client size.
            </summary>
            <param name="clientSize">The client size to adjust.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindow.CreateDefaultContextMenu(System.Object)">
            <summary>
            Invoked when the context menu for the class is about to be shown and one has not been specified.
            </summary>
            <param name="originalSource">The original source for the context menu request</param>
            <returns>Returns null by default</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindow.OnSupportsAllowsTransparencyChanged">
            <summary>
            Invoked when the derived class has a different value for the SupportsAllowsTransparency property.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindow.SetVisualState(System.Boolean)">
            <summary>
            Called to set the VisualStates of the control
            </summary>
            <param name="useTransitions">Determines whether transitions should be used.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindow.Activate">
            <summary>
            Activates the containing window.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindow.BringToFront">
            <summary>
            Brings the window to the front of the z-order.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindow.Close">
            <summary>
            Closed the window.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindow.GetScreenPoint(System.Windows.FrameworkElement,System.Windows.Input.MouseEventArgs)">
            <summary>
            Helper method for returning a point relative to the screen for the specified owner.
            </summary>
            <param name="owner">The element that would be the owner of the <see cref="T:Infragistics.Windows.Controls.ToolWindow"/></param>
            <param name="e">The mouse event args</param>
            <returns>A point relative to the logical screen for the specified owner. This value can be used to initialize the Top and Left properties of the tool window.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindow.GetScreenPoint(System.Windows.FrameworkElement,System.Windows.Point,System.Windows.FrameworkElement)">
            <summary>
            Helper method for returning a point relative to the screen for the specified owner.
            </summary>
            <param name="owner">The element that would be the owner of the <see cref="T:Infragistics.Windows.Controls.ToolWindow"/></param>
            <param name="relativePoint">A point relative to the <paramref name="relativeElement"/></param>
            <param name="relativeElement">The element to which the <paramref name="relativePoint"/> is relative or null if the relativePoint is in screen coordinates.</param>
            <returns>A point relative to the logical screen for the specified owner. This value can be used to initialize the Top and Left properties of the tool window.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindow.GetToolWindows(System.Windows.FrameworkElement)">
            <summary>
            Returns an array of the <see cref="T:Infragistics.Windows.Controls.ToolWindow"/> instances displayed for the specified owner.
            </summary>
            <param name="owner">The owning element for which one or more <see cref="T:Infragistics.Windows.Controls.ToolWindow"/> instances have been shown.</param>
            <returns>An array of the ToolWindows. The list is sorted based on the zorder where the first item is topmost and the last item is bottommost.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindow.Show(System.Windows.FrameworkElement)">
            <summary>
            Displays a <see cref="T:Infragistics.Windows.Controls.ToolWindow"/>
            </summary>
            <param name="owner">The owning element. This element will be used to determine the owner of the window or adorner layer depending upon how the content will be shown.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindow.Show(System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            Displays a <see cref="T:Infragistics.Windows.Controls.ToolWindow"/>
            </summary>
            <param name="owner">The owning element. This element will be used to determine the owner of the window or adorner layer depending upon how the content will be shown.</param>
            <param name="activate">True if the window should be activated during the show; false to prevent activation of the new window.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindow.Show(System.Windows.FrameworkElement,System.Boolean,System.Boolean)">
            <summary>
            Displays a <see cref="T:Infragistics.Windows.Controls.ToolWindow"/>
            </summary>
            <param name="owner">The owning element. This element will be used to determine the owner of the window or adorner layer depending upon how the content will be shown.</param>
            <param name="activate">True if the window should be activated during the show; false to prevent activation of the new window.</param>
            <param name="preferPopup">True to use a Popup to host the ToolWindow if possible.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindow.ShowDialog(System.Windows.FrameworkElement,Infragistics.Windows.Controls.ToolWindow.ShowDialogCallback)">
            <summary>
            Displays a <see cref="T:Infragistics.Windows.Controls.ToolWindow"/> modally
            </summary>
            <param name="owner">The owning element. This element will be used to determine the owner of the window or adorner layer depending upon how the content will be shown.</param>
            <param name="callback">The callback used to indicate when the dialog has been closed and provide the dialog result. This is needed because the call may not be blocking. For example, when used in an xbap environment, the method will return 
            before the dialog has been closed. In this case, the callback will be called when the dialog is closed.</param>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindow.CloseCommand">
            <summary>
            Closes the containing window.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindow.OnActivated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Infragistics.Windows.Controls.ToolWindow.Activated"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that provides data for the event.</param>
            <remarks>
            <p class="body">Raising an event invokes the event handler through a delegate.</p>
            <p class="body">The <b>OnActivated</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p class="note">Notes to Inheritors:  When overriding <b>OnActivated</b> in a derived class, be sure to call the base class's <b>OnActivated</b> method so that registered delegates receive the event.</p>
            </remarks>
            <seealso cref="E:Infragistics.Windows.Controls.ToolWindow.Activated"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindow.OnClosed(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Infragistics.Windows.Controls.ToolWindow.Closed"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that provides data for the event.</param>
            <remarks>
            <p class="body">Raising an event invokes the event handler through a delegate.</p>
            <p class="body">The <b>OnClosed</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p class="note">Notes to Inheritors:  When overriding <b>OnClosed</b> in a derived class, be sure to call the base class's <b>OnClosed</b> method so that registered delegates receive the event.</p>
            </remarks>
            <seealso cref="E:Infragistics.Windows.Controls.ToolWindow.Closed"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindow.OnClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="E:Infragistics.Windows.Controls.ToolWindow.Closing"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that provides data for the event.</param>
            <remarks>
            <p class="body">Raising an event invokes the event handler through a delegate.</p>
            <p class="body">The <b>OnClosing</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p class="note">Notes to Inheritors:  When overriding <b>OnClosing</b> in a derived class, be sure to call the base class's <b>OnClosing</b> method so that registered delegates receive the event.</p>
            </remarks>
            <seealso cref="E:Infragistics.Windows.Controls.ToolWindow.Closing"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindow.OnDeactivated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Infragistics.Windows.Controls.ToolWindow.Deactivated"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that provides data for the event.</param>
            <remarks>
            <p class="body">Raising an event invokes the event handler through a delegate.</p>
            <p class="body">The <b>OnDeactivated</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>
            <p class="note">Notes to Inheritors:  When overriding <b>OnDeactivated</b> in a derived class, be sure to call the base class's <b>OnDeactivated</b> method so that registered delegates receive the event.</p>
            </remarks>
            <seealso cref="E:Infragistics.Windows.Controls.ToolWindow.Deactivated"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ToolWindow.AllowClose">
            <summary>
            Returns/sets a boolean indicating if the window may be closed.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.ToolWindow.AllowCloseProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ToolWindow.DialogResult">
            <summary>
            Returns or sets the dialog result to return to the caller when displayed using the <see cref="M:Infragistics.Windows.Controls.ToolWindow.ShowDialog(System.Windows.FrameworkElement,Infragistics.Windows.Controls.ToolWindow.ShowDialogCallback)"/> method.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.ToolWindow.HorizontalAlignmentMode">
            <summary>
            Returns or sets a value indicating whether the <see cref="P:Infragistics.Windows.Controls.ToolWindow.Left"/> or <see cref="T:System.Windows.HorizontalAlignment"/> property should be honored when determining the horizontal position of the element.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.ToolWindow.HorizontalAlignmentModeProperty"/>
            <seealso cref="P:System.Windows.FrameworkElement.HorizontalAlignment"/>
            <seealso cref="P:Infragistics.Windows.Controls.ToolWindow.HorizontalAlignmentOffset"/>
            <seealso cref="P:Infragistics.Windows.Controls.ToolWindow.Left"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ToolWindow.HorizontalAlignmentOffset">
            <summary>
            Returns or sets the amount that the element should be adjusted horizontally when the <see cref="P:Infragistics.Windows.Controls.ToolWindow.HorizontalAlignmentMode"/> is set to 'UseAlignment'.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.ToolWindow.HorizontalAlignmentOffsetProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.ToolWindow.HorizontalAlignmentMode"/>
            <seealso cref="P:System.Windows.FrameworkElement.HorizontalAlignment"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ToolWindow.IsActive">
            <summary>
            Returns a boolean indicating if the window is active.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.ToolWindow.IsActiveProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ToolWindow.IsUsingOSNonClientArea">
            <summary>
            Returns a boolean indicating if the content is currently using the operating system to provide the operating system non-client area.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.ToolWindow.IsUsingOSNonClientAreaProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ToolWindow.Left">
            <summary>
            Returns the horizontal coordinate for the left edge of the window.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.ToolWindow.LeftProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ToolWindow.Owner">
            <summary>
            Returns the owning element for which the ToolWindow was displayed.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.ToolWindow.OwnerProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ToolWindow.ResizeMode">
            <summary>
            Returns/sets how/whether the window may be resized.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.ToolWindow.ResizeModeProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ToolWindow.PreferredBorderThickness">
            <summary>
            Returns the preferred border thickness based on the ResizeMode and whether the window is using the os to render the non-client area.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.ToolWindow.PreferredBorderThicknessProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ToolWindow.Theme">
            <summary>
            Gets/sets the default look for the control.
            </summary>
            <remarks>
            <para class="body">If left set to null then the default 'Generic' theme will be used. 
            This property can be set to the name of any registered theme (see <see cref="M:Infragistics.Windows.Themes.ThemeManager.Register(System.String,System.String,System.Windows.ResourceDictionary)"/> and <see cref="M:Infragistics.Windows.Themes.ThemeManager.GetThemes"/> methods).</para>
            <para></para>
            <para class="note"><b>Note: </b> The following themes are pre-registered by this assembly but additional themes can be registered as well.
            <ul>
            <li>"Aero" - a theme that is compatible with Vista's 'Aero' theme.</li>
            <li>"Generic" - the default theme.</li>
            <li>"LunaNormal" - a theme that is compatible with XP's 'blue' theme.</li>
            <li>"LunaOlive" - a theme that is compatible with XP's 'olive' theme.</li>
            <li>"LunaSilver" - a theme that is compatible with XP's 'silver' theme.</li>
            <li>"Office2k7Black" - a theme that is compatible with MS Office 2007's 'Black' theme.</li>
            <li>"Office2k7Blue" - a theme that is compatible with MS Office 2007's 'Blue' theme.</li>
            <li>"Office2k7Silver" - a theme that is compatible with MS Office 2007's 'Silver' theme.</li>
            <li>"Onyx" - a theme that features black and orange highlights.</li>
            <li>"Royale" - a theme that features subtle blue highlights.</li>
            <li>"RoyaleStrong" - a theme that features strong blue highlights.</li>
            </ul>
            </para>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Themes.ThemeManager"/>
            <seealso cref="F:Infragistics.Windows.Controls.ToolWindow.ThemeProperty"/>
        </member>
        <member name="E:Infragistics.Windows.Controls.ToolWindow.ThemeChanged">
            <summary>
            Occurs when the 'Theme' property changes
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.ToolWindow.Title">
            <summary>
            Returns/sets the title for the window.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.ToolWindow.TitleProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ToolWindow.Top">
            <summary>
            Returns the vertical coordinate for the top edge of the window.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.ToolWindow.TopProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ToolWindow.Topmost">
            <summary>
            Returns or sets a boolean whether the window should remain above other floating windows.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.ToolWindow.TopmostProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ToolWindow.UseOSNonClientArea">
            <summary>
            Returns or sets a boolean indicating whether the content should use the operating system nonclient area when possible - i.e. when hosted within a Window.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.ToolWindow.UseOSNonClientAreaProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ToolWindow.VerticalAlignmentMode">
            <summary>
            Returns or sets a value indicating whether the <see cref="P:Infragistics.Windows.Controls.ToolWindow.Top"/> or <see cref="T:System.Windows.VerticalAlignment"/> property should be honored when determining the vertical position of the element.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.ToolWindow.VerticalAlignmentModeProperty"/>
            <seealso cref="P:System.Windows.FrameworkElement.VerticalAlignment"/>
            <seealso cref="P:Infragistics.Windows.Controls.ToolWindow.VerticalAlignmentOffset"/>
            <seealso cref="P:Infragistics.Windows.Controls.ToolWindow.Top"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ToolWindow.VerticalAlignmentOffset">
            <summary>
            Returns or sets the amount that the element should be adjusted vertically when the <see cref="P:Infragistics.Windows.Controls.ToolWindow.VerticalAlignmentMode"/> is set to 'UseAlignment'.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.ToolWindow.VerticalAlignmentOffsetProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.ToolWindow.VerticalAlignmentMode"/>
            <seealso cref="P:System.Windows.FrameworkElement.VerticalAlignment"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ToolWindow.Host">
            <summary>
            Returns/sets the object hosting the tool window content.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.ToolWindow.HostProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ToolWindow.IsModal">
            <summary>
            Indicates if the window is being displayed modally.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.ToolWindow.Events">
            <summary>
            Returns the list of event handlers that are attached to this component.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.ToolWindow.PreferredBorderWidth">
            <summary>
            Returns the preferred border width based on the resize mode.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.ToolWindow.PreferredBorderWidthProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ToolWindow.PreferredBorderHeight">
            <summary>
            Returns the preferred border height based on the resize mode.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.ToolWindow.PreferredBorderHeightProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ToolWindow.SupportsAllowsTransparency">
            <summary>
            Returns a boolean indicating whether the class supports being shown in a host where AllowsTransparency is true.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.ToolWindow.SupportsShowDialog">
            <summary>
            Returns a boolean indicating whether the class supports being shown modally.
            </summary>
        </member>
        <member name="E:Infragistics.Windows.Controls.ToolWindow.Activated">
            <summary>
            Event that occurs when the window becomes the active window.
            </summary>
        </member>
        <member name="E:Infragistics.Windows.Controls.ToolWindow.Deactivated">
            <summary>
            Event that occurs when the window is no longer the active window.
            </summary>
        </member>
        <member name="E:Infragistics.Windows.Controls.ToolWindow.Closing">
            <summary>
            Event that occurs when the window is about to be closed.
            </summary>
        </member>
        <member name="E:Infragistics.Windows.Controls.ToolWindow.Closed">
            <summary>
            Event that occurs when the window has been closed.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.ToolWindow.ShowDialogCallback">
            <summary>
            Delegate used for the <see cref="M:Infragistics.Windows.Controls.ToolWindow.ShowDialog(System.Windows.FrameworkElement,Infragistics.Windows.Controls.ToolWindow.ShowDialogCallback)"/> method
            </summary>
            <param name="window">The window that was shown using the <see cref="M:Infragistics.Windows.Controls.ToolWindow.ShowDialog(System.Windows.FrameworkElement,Infragistics.Windows.Controls.ToolWindow.ShowDialogCallback)"/> method.</param>
            <param name="dialogResult">The result when the dialog was closed.</param>
        </member>
        <member name="T:Infragistics.Windows.Controls.ToolWindowAdorner">
            <summary>
            Custom adorner for managing the positioning of <see cref="T:Infragistics.Windows.Controls.ToolWindow"/> elements within an adorner layer.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindowAdorner.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positions child elements and determines a size for this element.
            </summary>
            <param name="finalSize">The size available to this element for arranging its children.</param>
            <returns>The <see cref="T:System.Windows.Size"/> used by this element to arrange its children.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindowAdorner.AddWindow(Infragistics.Windows.Controls.ToolWindow,System.Windows.FrameworkElement)">
            <summary>
            Helper method for adding a <see cref="T:Infragistics.Windows.Controls.ToolWindow"/> to the adorner layer
            </summary>
            <param name="window">The ToolWindow to display within the adorner layer</param>
            <param name="owner">The owning element for the content</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindowAdorner.RemoveWindow(Infragistics.Windows.Controls.ToolWindow)">
            <summary>
            Removes a content window.
            </summary>
            <param name="window">The window to be removed.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindowAdorner.ToolWindowAdornerPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positions child elements and determines a size for this element.
            </summary>
            <param name="finalSize">The size available to this element for arranging its children.</param>
            <returns>The <see cref="T:System.Windows.Size"/> used by this element to arrange its children.</returns>
        </member>
        <member name="T:Infragistics.Windows.Controls.ToolWindowContainer">
            <summary>
            Base class for a ToolWindow host that will be hosted in another element container.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindowContainer.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when the mouse has been moved.
            </summary>
            <param name="e">Provides data for the event.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindowContainer.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when the left mouse button is released.
            </summary>
            <param name="e">Provides data for the event.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindowContainer.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when the element loses mouse capture.
            </summary>
            <param name="e">Provides data for the event.</param>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindowContainer.LeftProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ToolWindowContainer.Left"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindowContainer.TopProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ToolWindowContainer.Top"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindowContainer.TopmostProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ToolWindowContainer.Topmost"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.PopupController.Create(System.Windows.Controls.Primitives.Popup,System.Windows.FrameworkElement)">
            <summary>
            Creates a new PopupController for the specified popup.
            </summary>
            <param name="popup">The Popup which the returned controller will be manipulating.</param>
            <param name="owner">The element for which the popup will be associated.</param>
            <returns>A new popup controller or null if one could not be created.</returns>
        </member>
        <member name="T:Infragistics.Windows.Controls.ToolWindowHostWindow">
            <summary>
            Custom window used to host a <see cref="T:Infragistics.Windows.Controls.ToolWindow"/> control.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindowHostWindow.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Controls.ToolWindow"/>
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindowHostWindow.ArrangeOverride(System.Windows.Size)">
            <summary>
            Overridden.  Positions child elements and determines the size of this element based on the subclassed window.
            </summary>
            <param name="arrangeBounds">The area within the parent that the element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindowHostWindow.MeasureOverride(System.Windows.Size)">
            <summary>
            Invoked to measure the element and its children.
            </summary>
            <param name="availableSize">The size that reflects the available size that this element can give to its children.</param>
            <returns>The <see cref="T:System.Windows.Size"/> that represents the desired size of the element.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindowHostWindow.OnActivated(System.EventArgs)">
            <summary>
            Invoked when the window has been activated
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindowHostWindow.OnClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Used to raise the Closing event.
            </summary>
            <param name="e">Provides data for the event</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindowHostWindow.OnClosed(System.EventArgs)">
            <summary>
            Used to raise the Closed event.
            </summary>
            <param name="e">Provides data for the event</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindowHostWindow.OnContentChanged(System.Object,System.Object)">
            <summary>
            Invoked when the <see cref="P:System.Windows.Controls.ContentControl.Content"/> property has been changed.
            </summary>
            <param name="oldContent">The previous value of the Content property</param>
            <param name="newContent">The new value of the Content property</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindowHostWindow.OnDeactivated(System.EventArgs)">
            <summary>
            Invoked when the window has been deactivated
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindowHostWindow.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Invoked when a key is pressed down while the window has focus.
            </summary>
            <param name="e">Provides data for the event</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindowHostWindow.OnLocationChanged(System.EventArgs)">
            <summary>
            Invoked when the location of the window has changed.
            </summary>
            <param name="e">Provides data for the event</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindowHostWindow.OnSourceInitialized(System.EventArgs)">
            <summary>
            Invoked when the window is initialized.
            </summary>
            <param name="e">Provides data for the event</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindowHostWindow.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
            <summary>
            Invoked when the render size of the element has changed.
            </summary>
            <param name="sizeInfo">Provides information about the size change</param>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindowHostWindow.ClientHeightProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ToolWindowHostWindow.ClientHeight"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindowHostWindow.ClientWidthProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ToolWindowHostWindow.ClientWidth"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindowHostWindow.InternalLeftProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ToolWindowHostWindow.InternalLeft"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindowHostWindow.InternalTopProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ToolWindowHostWindow.InternalTop"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindowHostWindow.OwnerRectProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ToolWindowHostWindow.OwnerRect"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindowHostWindow.UseSystemNonClientAreaProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ToolWindowHostWindow.UseSystemNonClientArea"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.ToolWindowHostWindow.ClientHeight">
            <summary>
            Returns the current height of the client area of the form.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.ToolWindowHostWindow.ClientHeightProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ToolWindowHostWindow.ClientWidth">
            <summary>
            Returns the current width of the client area of the form.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.ToolWindowHostWindow.InternalLeft">
            <summary>
            Description
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.ToolWindowHostWindow.InternalLeftProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ToolWindowHostWindow.InternalTop">
            <summary>
            Description
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.ToolWindowHostWindow.InternalTopProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.ToolWindowHostWindow.OwnerRect">
            <summary>
            Returns the rect of the owner window.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.ToolWindowHostWindow.OwnerRectProperty"/>
        </member>
        <member name="T:Infragistics.Windows.Controls.ToolWindowResizeElement">
            <summary>
            Custom element for defining a resize element for the <see cref="T:Infragistics.Windows.Controls.ToolWindow"/>
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindowResizeElement.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Controls.ToolWindowResizeElement"/>
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindowResizeElement.OnInitialized(System.EventArgs)">
            <summary>
            Invoked when the control is initialized.
            </summary>
            <param name="e">Provides data for the event</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.ToolWindowResizeElement.MeasureOverride(System.Windows.Size)">
            <summary>
            Invoked to measure the element and its children.
            </summary>
            <param name="availableSize">The size that reflects the available size that this element can give to its children.</param>
            <returns>The <see cref="T:System.Windows.Size"/> that represents the desired size of the element.</returns>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindowResizeElement.BorderLocationProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ToolWindowResizeElement.BorderLocation"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindowResizeElement.WindowBorderThicknessProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ToolWindowResizeElement.WindowBorderThickness"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.ToolWindowResizeElement.WindowCornerRadiusProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.ToolWindowResizeElement.WindowCornerRadius"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.ToolWindowResizeElement.BorderLocation">
            <summary>
            Returns or sets the location for the resize border.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.ToolWindowResizeElement.BorderLocationProperty"/>
        </member>
        <member name="T:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator">
            <summary>
            An alternative generator used by Panels interested in recycling elements. 
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> Using this generator instead of ItemControl's ItemContainerGenerator will require that the 
            <see cref="T:Infragistics.Windows.Virtualization.RecyclingItemsControl"/> derived class implement its own navigation logic. This generator will also not support grouping thru the Items collection.</para>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Virtualization.RecyclingItemsControl"/>
            <seealso cref="P:Infragistics.Windows.Virtualization.RecyclingItemsControl.RecyclingItemContainerGenerator"/>
            <seealso cref="P:Infragistics.Windows.Virtualization.RecyclingItemsControl.ItemContainerGenerationMode"/>
            <seealso cref="T:Infragistics.Windows.Virtualization.RecyclingItemsPanel"/>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.BeginGeneration(Infragistics.Windows.Selection.ScrollDirection)">
            <summary>
            Called at the beginning of the generation process.
            </summary>
            <remarks>
            <para class="body">This method is usually called at the beginnning of a <see cref="T:Infragistics.Windows.Virtualization.RecyclingItemsPanel"/> derived class's <b>MeasureOverride</b> logic. 
            This is normally followed by one or more <see cref="M:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.StartAt(System.Windows.Controls.Primitives.GeneratorPosition,System.Windows.Controls.Primitives.GeneratorDirection,System.Boolean)"/>/<see cref="M:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.GenerateNext(System.Boolean@)"/> loops to generate all 'active' containers. Finally, the <see cref="M:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.EndGeneration"/> method is called at the end of the measure logic.</para>
            </remarks>
            <param name="scrollDirection">Relative to the last generation to let the generator optimize the recycling logic.</param>
            <seealso cref="M:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.EndGeneration"/>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.BeginGeneration(Infragistics.Windows.Selection.ScrollDirection,System.Collections.IEnumerable)">
            <summary>
            Called at the beginning of the generation process.
            </summary>
            <remarks>
            <para class="body">This method is usually called at the beginnning of a <see cref="T:Infragistics.Windows.Virtualization.RecyclingItemsPanel"/> derived class's <b>MeasureOverride</b> logic. 
            This is normally followed by one or more <see cref="M:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.StartAt(System.Windows.Controls.Primitives.GeneratorPosition,System.Windows.Controls.Primitives.GeneratorDirection,System.Boolean)"/>/<see cref="M:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.GenerateNext(System.Boolean@)"/> loops to generate all 'active' containers. Finally, the <see cref="M:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.EndGeneration"/> method is called at the end of the measure logic.</para>
            </remarks>
            <param name="scrollDirection">Relative to the last generation to let the generator optimize the recycling logic.</param>
            <param name="itemsExpectedToBeGenerated">An optional list of items are are expected to be generated. This is used to optimize eleme nt recycling.</param>
            <seealso cref="M:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.EndGeneration"/>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.ContainerFromIndex(System.Int32)">
            <summary>
            Returns the element corresponding to the item at the given index within the ItemCollection.
            </summary>
            <param name="index">The index of the desired item.</param>
            <returns>Returns the element corresponding to the item at the given index within the ItemCollection or returns null if the item is not realized.</returns>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.ContainerFromItem(System.Object)">
            <summary>
            Returns the UIElement container corresponding to the given item.
            </summary>
            <param name="item">The Object item to find the UIElement container for.</param>
            <returns>A UIElement that corresponds to the given item. Returns null if the item does not belong to the item collection, or if an UIElement has not been generated for it.</returns>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.DeactivateAllContainers">
            <summary>
            Deactivates all containers.
            </summary>
            <remarks>
            <para class="body"> This will result in the <see cref="T:Infragistics.Windows.Virtualization.RecyclingItemsControl"/>'s <see cref="M:Infragistics.Windows.Virtualization.RecyclingItemsControl.DeactivateContainer(System.Windows.DependencyObject,System.Object)"/>virtual method being called for each active container.
            </para>
            </remarks>
            <seealso cref="M:Infragistics.Windows.Virtualization.RecyclingItemsControl.DeactivateContainer(System.Windows.DependencyObject,System.Object)"/>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.DeactivateContainer(System.Windows.DependencyObject)">
            <summary>
            Deactivates a specific container
            </summary>
            <param name="container">The container to be deactivated</param>
            <remarks>
            <para class="body"> This will result in the <see cref="T:Infragistics.Windows.Virtualization.RecyclingItemsControl"/>'s <see cref="M:Infragistics.Windows.Virtualization.RecyclingItemsControl.DeactivateContainer(System.Windows.DependencyObject,System.Object)"/> virtual method being called.
            </para>
            </remarks>
            <seealso cref="M:Infragistics.Windows.Virtualization.RecyclingItemsControl.DeactivateContainer(System.Windows.DependencyObject,System.Object)"/>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.EndGeneration">
            <summary>
            Called at the end of the generation process.
            </summary>
            <seealso cref="M:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.BeginGeneration(Infragistics.Windows.Selection.ScrollDirection,System.Collections.IEnumerable)"/>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.IndexFromContainer(System.Windows.DependencyObject)">
            <summary>
            Returns the index to an item that corresponds to the specified, generated UIElement. 
            </summary>
            <param name="container">The DependencyObject that corresponds to the item to the index to be returned.</param>
            <returns>An Int32 index to an item that corresponds to the specified, generated UIElement.</returns>
            <exception cref="T:System.ArgumentNullException">container is null</exception>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.ItemFromContainer(System.Windows.DependencyObject)">
            <summary>
            Returns the item that corresponds to the specified, generated UIElement. 
            </summary>
            <param name="container">The DependencyObject that corresponds to the item to be returned.</param>
            <returns>A DependencyObject that is the item which corresponds to the specified, generated UIElement. If the UIElement has not been generated, UnsetValue is returned.</returns>
            <exception cref="T:System.ArgumentNullException">container is null</exception>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.RemoveAllDeactivatedContainers">
            <summary>
            Removes all generated containers that have previously been deactivated.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.GenerateNext">
            <summary>
            Returns the container element used to display the next item.
            </summary>
            <returns>The container element or null if the container has already been generated for that item.</returns>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.GenerateNext(System.Boolean@)">
            <summary>
            Returns the container element used to display the next item, and whether the container element has been newly generated (realized).
            </summary>
            <param name="isNewlyRealized">Is true is the returned container element is newly generated (realized); otherwise, false.</param>
            <returns>The container element. If the container was newly realized in the menthod then the isNewlyRealized out paramater will be set to true.</returns>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.GeneratorPositionFromIndex(System.Int32)">
            <summary>
            Returns the GeneratorPosition object that maps to the item at the specified index.
            </summary>
            <param name="itemIndex">The index of the desired item.</param>
            <returns>The GeneratorPosition object that maps to the item.</returns>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.System#Windows#Controls#Primitives#IItemContainerGenerator#GetItemContainerGeneratorForPanel(System.Windows.Controls.Panel)">
            <summary>
            Not supported
            </summary>
            <param name="panel"></param>
            <exception cref="T:System.NotSupportedException">Always throws this exception.</exception>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.IndexFromGeneratorPosition(System.Windows.Controls.Primitives.GeneratorPosition)">
            <summary>
            Returns the index that maps to the specified GeneratorPosition.
            </summary>
            <param name="position">The GeneratorPosition for the desired index</param>
            <returns>The index that maps to the GeneratorPosition.</returns>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.PrepareItemContainer(System.Windows.DependencyObject)">
            <summary>
            Prepares the specified element as the container for the corresponding item.
            </summary>
            <param name="container">The container to prepare. Normally, container is the result of the previous call to <see cref="M:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.GenerateNext(System.Boolean@)"/>.</param>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.Remove(System.Windows.Controls.Primitives.GeneratorPosition,System.Int32)">
            <summary>
            Removes one or more generated (realized) items.
            </summary>
            <param name="position">The index of the element to remove. position must refer to a previously generated (realized) item, which means its offset must be zero.</param>
            <param name="count">The number of elements to remove, starting at position.</param>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.RemoveAll">
            <summary>
            Removes all generated (realized) items.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.StartAt(System.Windows.Controls.Primitives.GeneratorPosition,System.Windows.Controls.Primitives.GeneratorDirection,System.Boolean)">
            <summary>
            Prepares the generator to generate items, starting at the specified GeneratorPosition, and in the specified GeneratorDirection.
            </summary>
            <param name="position">A <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition"/>, that specifies the position of the item to start generating items at.</param>
            <param name="direction">A <see cref="T:System.Windows.Controls.Primitives.GeneratorDirection"/> that specifies the direction which to generate items.</param>
            <param name="allowStartAtRealizedItem">Specifies whether to start at a generated (realized) item.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.StartAt(System.Windows.Controls.Primitives.GeneratorPosition,System.Windows.Controls.Primitives.GeneratorDirection)">
            <summary>
            Prepares the generator to generate items, starting at the specified GeneratorPosition, and in the specified GeneratorDirection.
            </summary>
            <param name="position">A <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition"/>, that specifies the position of the item to start generating items at.</param>
            <param name="direction">A <see cref="T:System.Windows.Controls.Primitives.GeneratorDirection"/> that specifies the direction which to generate items.</param>
        </member>
        <member name="E:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.ContainerDiscarded">
            <summary>
            Occurs when a container has been discarded.
            </summary>
        </member>
        <member name="E:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.StatusChanged">
            <summary>
            Occurs when the Status has changed.
            </summary>
            <seealso cref="P:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.Status"/>
        </member>
        <member name="P:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.CountOfAllContainers">
            <summary>
            Returns the total number of containers, both active and deactived (read-only).
            </summary>
            <seealso cref="P:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.CountOfActiveContainers"/>
            <seealso cref="M:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.GetContainer(System.Int32,System.Boolean)"/>
        </member>
        <member name="P:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.CountOfActiveContainers">
            <summary>
            Returns the number of active containers (read-only)..
            </summary>
            <seealso cref="P:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.CountOfAllContainers"/>
            <seealso cref="M:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.GetContainer(System.Int32,System.Boolean)"/>
        </member>
        <member name="P:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.Status">
            <summary>
            Returns the current status of the generator (read-only).
            </summary>
            <seealso cref="E:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.StatusChanged"/>
        </member>
        <member name="T:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.ContainerDiscardedEventArgs">
            <summary>
            Arguments passed into the RecyclingItemContainerGenerator's ContainerDiscarded event.
            </summary>
            <seealso cref="T:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator"/>
            <seealso cref="E:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.ContainerDiscarded"/>
        </member>
        <member name="P:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator.ContainerDiscardedEventArgs.Container">
            <summary>
            Returns the container that is being discared (read-only).
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Virtualization.RecyclingItemsControl">
            <summary>
            An abstract base class for ItemsControls that are interested in recycling elements. 
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> Using the <see cref="P:Infragistics.Windows.Virtualization.RecyclingItemsControl.RecyclingItemContainerGenerator"/> instead of ItemControl's ItemContainerGenerator will require that the 
            derived class implement its own navigation logic. The <see cref="P:Infragistics.Windows.Virtualization.RecyclingItemsControl.RecyclingItemContainerGenerator"/> will also not support grouping thru the Items collection.</para>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Virtualization.RecyclingItemContainerGenerator"/>
            <seealso cref="P:Infragistics.Windows.Virtualization.RecyclingItemsControl.RecyclingItemContainerGenerator"/>
            <seealso cref="T:Infragistics.Windows.Virtualization.RecyclingItemsPanel"/>
            <seealso cref="P:Infragistics.Windows.Virtualization.RecyclingItemsControl.ItemContainerGenerationMode"/>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemsControl.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemsControl.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Overridden. Invoked when the contents of the items collection has changed.
            </summary>
            <param name="e">Event arguments indicating the change that occurred.</param>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemsControl.OnItemsPanelChanged(System.Windows.Controls.ItemsPanelTemplate,System.Windows.Controls.ItemsPanelTemplate)">
            <summary>
            Overriden. Invoked when the <see cref="P:System.Windows.Controls.ItemsControl.ItemsPanel"/> property changes.
            </summary>
            <param name="oldItemsPanel">The old panel template</param>
            <param name="newItemsPanel">The new panel template</param>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemsControl.OnItemsSourceChanged(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Overridden. Invoked when the ItemsSource property changes.
            </summary>
            <param name="oldValue">Old value of the ItemsSource property</param>
            <param name="newValue">New value of the ItemsSource property</param>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemsControl.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when a property changes.
            </summary>
            <param name="e">A DependencyPropertyChangedEventArgs instance that contains information about the property that changed.</param>
        </member>
        <member name="F:Infragistics.Windows.Virtualization.RecyclingItemsControl.ItemContainerGenerationModeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Virtualization.RecyclingItemsControl.ItemContainerGenerationMode"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemsControl.DeactivateContainer(System.Windows.DependencyObject,System.Object)">
            <summary>
            Called when a container is being deactivated.
            </summary>
            <param name="container">The container being deactivated.</param>
            <param name="item">Its associated item.</param>
            <remarks>
            <para class="note"><b>Note:</b> the Visibility property of the container will be set to 'Collapsed' before this method is called. 
            The original setting for the Visibility property will be restored before a subsequent call to <see cref="M:Infragistics.Windows.Virtualization.RecyclingItemsControl.ReactivateContainer(System.Windows.DependencyObject,System.Object)"/> or <see cref="M:Infragistics.Windows.Virtualization.RecyclingItemsControl.ReuseContainerForNewItem(System.Windows.DependencyObject,System.Object)"/>.</para>
            </remarks>
            <seealso cref="M:Infragistics.Windows.Virtualization.RecyclingItemsControl.ReactivateContainer(System.Windows.DependencyObject,System.Object)"/>
            <seealso cref="M:Infragistics.Windows.Virtualization.RecyclingItemsControl.ReuseContainerForNewItem(System.Windows.DependencyObject,System.Object)"/>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemsControl.GetContainerForItemOverride(System.Object)">
            <summary>
            Creates the container to wrap an item.
            </summary>
            <param name="item">Item for which to create the container.</param>
            <returns>The newly created container</returns>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemsControl.IsContainerCompatibleWithItem(System.Windows.DependencyObject,System.Object)">
            <summary>
            Determines if a container can be reused for a specific item.
            </summary>
            <param name="container">The container to be reused.</param>
            <param name="item">The potential new item.</param>
            <returns>True if the container can be reused for the item</returns>
            <remarks>
            <para class="body">When looking for a suitable container for an item the generator will search its cache and call this method to see 
            if one of its cached containers is compatible with the item. If this method returns true then the container is assigned to the item and 
            the <see cref="M:Infragistics.Windows.Virtualization.RecyclingItemsControl.ReuseContainerForNewItem(System.Windows.DependencyObject,System.Object)"/> method is called.
            </para>
            <para class="note"><b>Note:</b> the default implementation always returns true.</para>
            </remarks>
            <seealso cref="M:Infragistics.Windows.Virtualization.RecyclingItemsControl.ReuseContainerForNewItem(System.Windows.DependencyObject,System.Object)"/>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemsControl.IsStillValid(System.Windows.DependencyObject,System.Object)">
            <summary>
            Deterimines whether the container and item are still valid
            </summary>
            <param name="container">The container associated with the item.</param>
            <param name="item">Its associated item.</param>
            <returns>True if still valid. The default is null.</returns>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemsControl.OnNavigationServiceInitialized">
            <summary>
            Called when the NavigationService has been set to a non-null value
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemsControl.ReactivateContainer(System.Windows.DependencyObject,System.Object)">
            <summary>
            Called when a container is being reactivated for the same item.
            </summary>
            <param name="container">The container being reactivated.</param>
            <param name="item">Its associated item.</param>
            <remarks>
            <para class="note"><b>Note:</b> the original setting for the Visibility property, prior to its deactivation (refer to <see cref="M:Infragistics.Windows.Virtualization.RecyclingItemsControl.DeactivateContainer(System.Windows.DependencyObject,System.Object)"/>), will be restored before a this method is called.</para>
            </remarks>
            <seealso cref="M:Infragistics.Windows.Virtualization.RecyclingItemsControl.DeactivateContainer(System.Windows.DependencyObject,System.Object)"/>
            <seealso cref="M:Infragistics.Windows.Virtualization.RecyclingItemsControl.ReuseContainerForNewItem(System.Windows.DependencyObject,System.Object)"/>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemsControl.ReuseContainerForNewItem(System.Windows.DependencyObject,System.Object)">
            <summary>
            Called when a container is being reused, i.e. recycled, or a different item.
            </summary>
            <param name="container">The container being reused/recycled.</param>
            <param name="item">The new item.</param>
            <remarks>
            <para class="note"><b>Note:</b> if the container had previously been deactivated then the original setting for the Visibility property, prior to its deactivation (refer to <see cref="M:Infragistics.Windows.Virtualization.RecyclingItemsControl.DeactivateContainer(System.Windows.DependencyObject,System.Object)"/>), will be restored before a this method is called.</para>
            </remarks>
            <seealso cref="M:Infragistics.Windows.Virtualization.RecyclingItemsControl.DeactivateContainer(System.Windows.DependencyObject,System.Object)"/>
            <seealso cref="M:Infragistics.Windows.Virtualization.RecyclingItemsControl.ReactivateContainer(System.Windows.DependencyObject,System.Object)"/>
        </member>
        <member name="M:Infragistics.Windows.Virtualization.RecyclingItemsControl.ShouldDeactivateContainer(System.Windows.DependencyObject,System.Object)">
            <summary>
            Called after a Reset notification to determine if the Container should be de-activated instead of cleared.
            </summary>
            <param name="container">The container to be deactivated or cleared.</param>
            <param name="item">Its associated item.</param>
            <returns>True to de-activate the cointainer after a reset or false to clear it. The default is false.</returns>
        </member>
        <member name="P:Infragistics.Windows.Virtualization.RecyclingItemsControl.ItemContainerGenerationMode">
            <summary>
            Gets/sets how item containers are generated and cached.
            </summary>
            <seealso cref="F:Infragistics.Windows.Virtualization.RecyclingItemsControl.ItemContainerGenerationModeProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Virtualization.RecyclingItemsControl.RecyclingItemContainerGenerator">
            <summary>
            An alternative generator used by Panels interested in recycling elements. 
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> Using this generator instead of ItemControl's ItemContainerGenerator will require that the 
            derived class implement its own navigation logic and create its own automation peer. This generator will also not support grouping thru the Items collection.</para>
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Virtualization.RecyclingItemsControl.UnderlyingItemsCount">
            <summary>
            Returns the number of items in the underlying source. 
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> derived classes that append additional items (e.g. header records) can override this property to return the number of items not counting the appended ones.</para>
            </remarks>
            <value>The default implementation returns the count of the Items collection.</value>
        </member>
        <member name="T:Infragistics.Windows.Controls.XamCarouselListBox">
            <summary>
            A <see cref="T:System.Windows.Controls.Primitives.Selector"/> derived control that uses the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> as its ItemsPanel to arrange items along a user-defined path.
            </summary>
            <remarks>
            <p class="body">The XamCarouselListBox takes the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> to the next level.  By using the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> as its ItemsPanel the XamCarouselListBox is able to combine the power and layout flexibility 
            of the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> with the list management, selection and data binding capabilities of the WPF Selector control.  Use this control the same way you would use a <see cref="T:System.Windows.Controls.ListBox"/> with the added benefit of built-in support for
            the arrangement of list items along a user-defined path.</p>
            <p class="body">Refer to the <a href="xamCarousel_Terms_Architecture.html">Carousel Architecture Overview</a> topic in the Developer's Guide for an explanation of how Carousel presentation works.</p>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
            <seealso cref="T:System.Windows.Controls.Primitives.Selector"/>
            <seealso cref="T:System.Windows.Controls.ListBox"/>
        </member>
        <member name="T:Infragistics.Windows.Controls.ICarouselPanelSelectionHost">
            <summary>
            An interface Implemented by controls that host the XamCarouselPanel and support selection.
            </summary>
            <remarks>
            <p class="note"><b>Note: </b>This interface is for Infragistics internal use only.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Controls.ICarouselPanelSelectionHost.SelectedItemIndex">
            <summary>
            Returns/sets the index of the currently selected item.  If more than 1 item is selected this property returns/sets the first selected item.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselListBox.#ctor">
            <summary>
            Creates an instance of a XamCarouselListBox control.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselListBox.ClearContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Called to clear the effects of the PrepareContainerForItemOverride method. 
            </summary>
            <param name="element">The container being cleared.</param>
            <param name="item">The item contained by the container being cleared.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselListBox.DeactivateContainer(System.Windows.DependencyObject,System.Object)">
            <summary>
            Called when a container is being deactivated.
            </summary>
            <param name="container">The container being deactivated.</param>
            <param name="item">Its associated item.</param>
            <remarks>
            <para class="note"><b>Note:</b> the Visibility property of the container will be set to 'Collapsed' before this method is called. 
            The original setting for the Visibility property will be restored before a subsequent call to <see cref="M:Infragistics.Windows.Controls.XamCarouselListBox.ReactivateContainer(System.Windows.DependencyObject,System.Object)"/> or <see cref="M:Infragistics.Windows.Controls.XamCarouselListBox.ReuseContainerForNewItem(System.Windows.DependencyObject,System.Object)"/>.</para>
            </remarks>
            <seealso cref="M:Infragistics.Windows.Controls.XamCarouselListBox.ReactivateContainer(System.Windows.DependencyObject,System.Object)"/>
            <seealso cref="M:Infragistics.Windows.Controls.XamCarouselListBox.ReuseContainerForNewItem(System.Windows.DependencyObject,System.Object)"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselListBox.GetContainerForItemOverride">
            <summary>
            Provides a container object for a items in the list.
            </summary>
            <returns>An object that that can be used as a container for items in the list.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselListBox.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own container. 
            </summary>
            <param name="item">The item to evaluate</param>
            <returns>True if the specified item is its own container.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselListBox.MeasureOverride(System.Windows.Size)">
            <summary>
            Invoked to measure the element and its children.
            </summary>
            <param name="availableSize">The size that reflects the available size that this element can give to its children.</param>
            <returns>The <see cref="T:System.Windows.Size"/> that represents the desired size of the element.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselListBox.OnCreateAutomationPeer">
            <summary>
            Returns an automation peer that exposes the <see cref="T:Infragistics.Windows.Controls.XamCarouselListBox"/> to UI Automation.
            </summary>
            <returns>A <see cref="T:Infragistics.Windows.Automation.Peers.XamCarouselListBoxAutomationPeer"/></returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselListBox.OnInitialized(System.EventArgs)">
            <summary>
            Raises the System.Windows.FrameworkElement.Initialized event.
            </summary>
            <param name="e">An instance of EventArgs that contains information about the event.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselListBox.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked just before the System.Windows.UIElement.IsKeyboardFocusWithinChanged event is raised by this element. 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselListBox.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Overridden. Invoked when the contents of the items collection has changed.
            </summary>
            <param name="e">Event arguments indicating the change that occurred.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselListBox.OnItemsPanelChanged(System.Windows.Controls.ItemsPanelTemplate,System.Windows.Controls.ItemsPanelTemplate)">
            <summary>
            Called when the ItemsPanel has changed.
            </summary>
            <param name="oldItemsPanel">The old value</param>
            <param name="newItemsPanel">The new value</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselListBox.OnItemsSourceChanged(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Called when the ItemsSource property changes.
            </summary>
            <param name="oldValue">Old value of the ItemsSource property.</param>
            <param name="newValue">New value of the ItemsSource property.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselListBox.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when a property changes on this object.
            </summary>
            <param name="e">An instance of DependencyPropertyChangedEventArgs that contains information about the property that changed.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselListBox.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Prepares the specified container element to display the specified item. 
            </summary>
            <param name="element">The container element to prepare.</param>
            <param name="item">The item contained by the specified container element.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselListBox.ReactivateContainer(System.Windows.DependencyObject,System.Object)">
            <summary>
            Called when a container is being reactivated for the same item.
            </summary>
            <param name="container">The container being reactivated.</param>
            <param name="item">Its associated item.</param>
            <remarks>
            <para class="note"><b>Note:</b> the original setting for the Visibility property, prior to its deactivation (refer to <see cref="M:Infragistics.Windows.Controls.XamCarouselListBox.DeactivateContainer(System.Windows.DependencyObject,System.Object)"/>), will be restored before a this method is called.</para>
            </remarks>
            <seealso cref="M:Infragistics.Windows.Controls.XamCarouselListBox.DeactivateContainer(System.Windows.DependencyObject,System.Object)"/>
            <seealso cref="M:Infragistics.Windows.Controls.XamCarouselListBox.ReuseContainerForNewItem(System.Windows.DependencyObject,System.Object)"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselListBox.ReuseContainerForNewItem(System.Windows.DependencyObject,System.Object)">
            <summary>
            Called when a container is being reused, i.e. recycled, or a different item.
            </summary>
            <param name="container">The container being reused/recycled.</param>
            <param name="item">The new item.</param>
            <remarks>
            <para class="note"><b>Note:</b> if the container had previously been deactivated then the original setting for the Visibility property, prior to its deactivation (refer to <see cref="M:Infragistics.Windows.Controls.XamCarouselListBox.DeactivateContainer(System.Windows.DependencyObject,System.Object)"/>), will be restored before a this method is called.</para>
            </remarks>
            <seealso cref="M:Infragistics.Windows.Controls.XamCarouselListBox.DeactivateContainer(System.Windows.DependencyObject,System.Object)"/>
            <seealso cref="M:Infragistics.Windows.Controls.XamCarouselListBox.ReactivateContainer(System.Windows.DependencyObject,System.Object)"/>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamCarouselListBox.IsSelectedProperty">
            <summary>
            Identifies the <see cref="F:Infragistics.Windows.Controls.XamCarouselListBox.IsSelectedProperty"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselListBox.GetIsSelected(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="F:Infragistics.Windows.Controls.XamCarouselListBox.IsSelectedProperty"/> property on the specifed element.
            </summary>
            <param name="element">The element to check for the property value.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselListBox.SetIsSelected(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the <see cref="F:Infragistics.Windows.Controls.XamCarouselListBox.IsSelectedProperty"/> property on the specifed element to the specified value.
            </summary>
            <param name="element">The element on which to set the property.</param>
            <param name="isSelected">The value to set.</param>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamCarouselListBox.IsSelectionActiveProperty">
            <summary>
            Identifies the IsSelectionActive" attached readonly dependency property
            </summary>
            <seealso cref="M:Infragistics.Windows.Controls.XamCarouselListBox.GetIsSelectionActive(System.Windows.DependencyObject)"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselListBox.GetIsSelectionActive(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the 'IsSelectionActive' attached readonly property
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamCarouselListBox.IsSelectionActiveProperty"/>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamCarouselListBox.IsSynchronizedWithCurrentItemProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamCarouselListBox.IsSynchronizedWithCurrentItem"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamCarouselListBox.SelectedIndexProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamCarouselListBox.SelectedIndex"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamCarouselListBox.SelectedItemProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamCarouselListBox.SelectedItem"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamCarouselListBox.SelectedValueProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamCarouselListBox.SelectedValue"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamCarouselListBox.SelectedValuePathProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamCarouselListBox.SelectedValuePath"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamCarouselListBox.ViewSettingsProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamCarouselListBox.ViewSettings"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselListBox.ShouldSerializeViewSettings">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Controls.XamCarouselListBox.ViewSettings"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselListBox.ResetViewSettings">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Controls.XamCarouselListBox.ViewSettings"/> property to its default value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamCarouselListBox.SelectionChangedEvent">
            <summary>
            Event ID for the <see cref="E:Infragistics.Windows.Controls.XamCarouselListBox.SelectionChanged"/> routed event
            </summary>
            <seealso cref="P:Infragistics.Windows.Controls.XamCarouselListBox.SelectedIndex"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamCarouselListBox.SelectedItem"/>
            <seealso cref="M:Infragistics.Windows.Controls.XamCarouselListBox.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)"/>
            <seealso cref="F:Infragistics.Windows.Controls.XamCarouselListBox.SelectionChangedEvent"/>
            <seealso cref="T:System.Windows.Controls.SelectionChangedEventArgs"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselListBox.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Occurs when the <see cref="P:Infragistics.Windows.Controls.XamCarouselListBox.SelectedItem"/> has changed
            </summary>
            <remarks>
            <para class="note"><b>Note: </b> Items can be selected via the <see cref="P:Infragistics.Windows.Controls.XamCarouselListBox.SelectedIndex"/> and <see cref="P:Infragistics.Windows.Controls.XamCarouselListBox.SelectedItem"/> properties.</para>
            </remarks>
            <seealso cref="P:Infragistics.Windows.Controls.XamCarouselListBox.SelectedIndex"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamCarouselListBox.SelectedItem"/>
            <seealso cref="M:Infragistics.Windows.Controls.XamCarouselListBox.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)"/>
            <seealso cref="F:Infragistics.Windows.Controls.XamCarouselListBox.SelectionChangedEvent"/>
            <seealso cref="T:System.Windows.Controls.SelectionChangedEventArgs"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselListBox.HandlesScrolling">
            <summary>
            Returns a value that indicates whether the control handles scrolling.
            </summary>
            <returns>True if the control has support for scrolling, otherwise false.</returns>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselListBox.IsSynchronizedWithCurrentItem">
            <summary>
            Returns/sets a value that indicates whether the <see cref="T:Infragistics.Windows.Controls.XamCarouselListBox"/> should keep the <see cref="P:Infragistics.Windows.Controls.XamCarouselListBox.SelectedItem"/> synchronized with the current item in the Items property. 
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamCarouselListBox.IsSynchronizedWithCurrentItemProperty"/>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselListBox"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselListBox.ScrollInfo">
            <summary>
            Returns a reference to an IScrollInfo interface that can be used to scroll the list and query scrolling information.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselListBox.SelectedIndex">
            <summary>
            Returns/sets the index of the currently selected item in the list.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamCarouselListBox.SelectedIndexProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselListBox.SelectedItem">
            <summary>
            Returns/sets the currently selected item in the list.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamCarouselListBox.SelectedItemProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselListBox.SelectedValue">
            <summary>
            Returns the object that us at the specified <see cref="P:Infragistics.Windows.Controls.XamCarouselListBox.SelectedValuePath"/> of the <see cref="P:Infragistics.Windows.Controls.XamCarouselListBox.SelectedItem"/>, or null if no item is selected.  If <see cref="P:Infragistics.Windows.Controls.XamCarouselListBox.SelectedValuePath"/> has not been set, then the <see cref="P:Infragistics.Windows.Controls.XamCarouselListBox.SelectedItem"/> is returned (read-only).  The default value is null.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamCarouselListBox.SelectedValueProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamCarouselListBox.SelectedValuePath"/>
            <seealso cref="F:Infragistics.Windows.Controls.XamCarouselListBox.SelectedValuePathProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselListBox.SelectedValuePath">
            <summary>
            Returns/sets a string that contains the path that is used to get the <see cref="P:Infragistics.Windows.Controls.XamCarouselListBox.SelectedValue"/>.  The default value is String.Empty.
            </summary>
            <seealso cref="P:Infragistics.Windows.Controls.XamCarouselListBox.SelectedValue"/>
            <seealso cref="F:Infragistics.Windows.Controls.XamCarouselListBox.SelectedValueProperty"/>
            <seealso cref="F:Infragistics.Windows.Controls.XamCarouselListBox.SelectedValuePathProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselListBox.ViewSettings">
            <summary>
            Returns/set the <see cref="T:Infragistics.Windows.Controls.CarouselViewSettings"/> object for this <see cref="T:Infragistics.Windows.Controls.XamCarouselListBox"/>.
            </summary>
            <remarks>
            <p class="body">The <see cref="T:Infragistics.Windows.Controls.CarouselViewSettings"/> object exposes properties for controlling all aspects of the Carousel view, including
            the number of items to display per page (<see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemsPerPage"/>), the path geometry used to create the path along which items in the list are arranged
            (<see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/>) and the various parent effects that can be applied to items as they are displayed at different points along the path
            (<see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.OpacityEffectStops"/>, <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ScalingEffectStops"/>, <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleXEffectStops"/>,
            <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleYEffectStops"/>, <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ZOrderEffectStops"/>).</p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.XamCarouselListBox.ViewSettingsProperty"/>
            <seealso cref="T:Infragistics.Windows.Controls.CarouselViewSettings"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselListBox.ActiveItemContainerGenerator">
            <summary>
            Returns the active item generator.
            </summary>
            <value>If the </value>
        </member>
        <member name="E:Infragistics.Windows.Controls.XamCarouselListBox.SelectionChanged">
            <summary>
            Occurs when the <see cref="P:Infragistics.Windows.Controls.XamCarouselListBox.SelectedItem"/> has changed
            </summary>
            <remarks>
            <para class="note"><b>Note: </b> Items can be selected via the <see cref="P:Infragistics.Windows.Controls.XamCarouselListBox.SelectedIndex"/> and <see cref="P:Infragistics.Windows.Controls.XamCarouselListBox.SelectedItem"/> properties.</para>
            </remarks>
            <seealso cref="P:Infragistics.Windows.Controls.XamCarouselListBox.SelectedIndex"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamCarouselListBox.SelectedItem"/>
            <seealso cref="M:Infragistics.Windows.Controls.XamCarouselListBox.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)"/>
            <seealso cref="F:Infragistics.Windows.Controls.XamCarouselListBox.SelectionChangedEvent"/>
            <seealso cref="T:System.Windows.Controls.SelectionChangedEventArgs"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselListBox.Infragistics#Windows#Controls#ICarouselPanelSelectionHost#SelectedItemIndex">
            <summary>
            Returns/sets the index of the currently selected item.
            </summary>
            <returns>The index of the currently selected item or if more than 1 item is selected this property returns/sets the first selected item.
            If no item is currently selected, -1 is returned.</returns>
        </member>
        <member name="T:Infragistics.Windows.Controls.XamCarouselPanel">
            <summary>
            A <see cref="T:System.Windows.Controls.Panel"/> derived element that arranges and displays its child elements along a user-defined path, with native support for scrolling and virtualizing those items.
            </summary>
            <remarks>
            <p class="body">The XamCarouselPanel provides advanced layout capabilties that let you arrange elements along a path of your choosing and apply various
            parent effects to the items based on their position in the XamCarouselPanel's display area.</p>
            <p class="note"><b>Note: </b>Since the XamCarouselPanel is also used by the <see cref="T:Infragistics.Windows.Controls.XamCarouselListBox"/> as its ItemsPanel, all the functionality described here for the XamCarouselPanel also
            applies to the <see cref="T:Infragistics.Windows.Controls.XamCarouselListBox"/>.  While the XamCarouselPanel used by <see cref="T:Infragistics.Windows.Controls.XamCarouselListBox"/> is not directly exposed via a property, the <see cref="T:Infragistics.Windows.Controls.XamCarouselListBox"/>
            exposes a <see cref="P:Infragistics.Windows.Controls.XamCarouselListBox.ViewSettings"/> property of type <see cref="T:Infragistics.Windows.Controls.CarouselViewSettings"/> that lets you control the corresponding settings on the embedded XamCarouselPanel.</p>
            <p class="body">The XamCarouselPanel.ViewSettings property exposes a <see cref="T:Infragistics.Windows.Controls.CarouselViewSettings"/> object that lets you tweak numerous settings that control all aspects of 
            layout and presentation, including:
            	<ul>
            		<li>the number of items to display per page (<see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemsPerPage"/>)</li>
            		<li>the path geometry used to create the path along which items in the list are arranged (<see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/>)</li>
            		<li>the various parent effects that can be applied to items as they are displayed at different points along the path (<see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.OpacityEffectStops"/>),
            <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ScalingEffectStops"/>, <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleXEffectStops"/>,
            <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleYEffectStops"/>, <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ZOrderEffectStops"/>)</li>
            	</ul>
            </p>
            <p class="body">Refer to the <a href="xamCarousel_Terms_Architecture.html">Carousel Architecture Overview</a> topic in the Developer's Guide for an explanation of how Carousel presentation works.</p>
            </remarks>
            <seealso cref="P:Infragistics.Windows.Controls.XamCarouselPanel.ViewSettings"/>
            <seealso cref="T:Infragistics.Windows.Controls.CarouselViewSettings"/>
            <seealso cref="T:System.Windows.Controls.Panel"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselPanel.#ctor">
            <summary>
            Creates an instance of a XamCarouselPanel.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positions child elements and determines a size for this element.
            </summary>
            <param name="finalSize">The size available to this element for arranging its children.</param>
            <returns>The <see cref="T:System.Windows.Size"/> used by this element to arrange its children.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselPanel.CreateUIElementCollection(System.Windows.FrameworkElement)">
            <summary>
            Returns a UIElementCollection instance for storing child elements.
            </summary>
            <param name="logicalParent">The logical parent element of the collection to be created.</param>
            <returns>An ordered collection of elements that have the specified logical parent.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselPanel.GetCanCleanupItem(System.Int32)">
            <summary>
            Derived classes must return whether the item at the specified index can be cleaned up.
            </summary>
            <param name="itemIndex">The index of the item to be cleaned up.</param>
            <returns>True if the item at the specified index can be cleaned up, false if it cannot.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Invoked to measure the element and its children.
            </summary>
            <param name="availableSize">The size that reflects the available size that this element can give to its children.</param>
            <returns>The <see cref="T:System.Windows.Size"/> that represents the desired size of the element.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselPanel.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Called when the MouseWheel is moved.
            </summary>
            <param name="e">An instance of MouseWheelEventArgs that provides information about the MouseWheel.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselPanel.OnInitialized(System.EventArgs)">
            <summary>
            Raises the System.Windows.FrameworkElement.Initialized event.
            </summary>
            <param name="e">An instance of EventArgs that provides information about the event.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselPanel.OnItemsChanged(System.Object,System.Windows.Controls.Primitives.ItemsChangedEventArgs)">
            <summary>
            Called when the contents of the associated list changes.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="args">An instance of ItemsChangedEventArgs that contains information about the items that were changed.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselPanel.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Called when the element has input focus and a key is pressed.
            </summary>
            <param name="e">An instance of KeyEventArgs that contains information about the Key that was pressed.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselPanel.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when the mouse is pressed within the element.
            </summary>
            <param name="e">An instance of MouseButtonEventArgs that contains information about the Mouse.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselPanel.OnNewElementRealized(System.Windows.UIElement,System.Int32)">
            <summary>
            Called after a newly realized element is generated, added to the children collection and 'prepared'.
            </summary>
            <param name="element">The newly realized element</param>
            <param name="index">The position at which the element was added to the children collection</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselPanel.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when a property changes.
            </summary>
            <param name="e">An instance of DependencyPropertyChangedEventArgs that contains information about the property that changed.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselPanel.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Called when the element should render its contents.
            </summary>
            <param name="drawingContext">An initialized DrawingContext that should be used for all drawing within this method.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselPanel.SetHorizontalOffset(System.Double)">
            <summary>
            Sets the horizontal scroll offset.
            </summary>
            <param name="offset">The new horizontal scroll offset.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselPanel.SetVerticalOffset(System.Double)">
            <summary>
            Sets the vertical scroll offset.
            </summary>
            <param name="offset">The new vertical scroll offset.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselPanel.LineDown">
            <summary>
            Scrolls down 1 line.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselPanel.LineLeft">
            <summary>
            Scrolls left 1 line.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselPanel.LineRight">
            <summary>
            Scrolls right 1 line.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselPanel.LineUp">
            <summary>
            Scrolls up 1 line.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselPanel.MouseWheelDown">
            <summary>
            Performs scrolling action in response to a MouseWheelDown.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselPanel.MouseWheelLeft">
            <summary>
            Performs scrolling action in response to a MouseWheelLeft.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselPanel.MouseWheelRight">
            <summary>
            Performs scrolling action in response to a MouseWheelRight.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselPanel.MouseWheelUp">
            <summary>
            Performs scrolling action in response to a MouseWheelUp.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselPanel.PageDown">
            <summary>
            Scrolls down 1 page.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselPanel.PageLeft">
            <summary>
            Scrolls left 1 page.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselPanel.PageRight">
            <summary>
            Scrolls right 1 page.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselPanel.PageUp">
            <summary>
            Scrolls up 1 page.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselPanel.MakeVisible(System.Windows.Media.Visual,System.Windows.Rect)">
            <summary>
            Ensures that the supplied parent is visible.
            </summary>
            <param name="visual">The element to make visible.</param>
            <param name="rectangle">The rectangle within the parent to make visible.</param>
            <returns>The rectangle that was actually made visible.</returns>
            <remarks>
            <p class="note"><b>Note: </b>When this method is called the specified parent is assumed to be a CarouselPanelItem.
            If it is, the entire item is scrolled into view if necessary and the rectangle paramater is ignored.</p>
            </remarks>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamCarouselPanel.CanNavigateToPreviousItemProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamCarouselPanel.CanNavigateToPreviousItem"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamCarouselPanel.CanNavigateToPreviousPageProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamCarouselPanel.CanNavigateToPreviousPage"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamCarouselPanel.CanNavigateToNextItemProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamCarouselPanel.CanNavigateToNextItem"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamCarouselPanel.CanNavigateToNextPageProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamCarouselPanel.CanNavigateToNextPage"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamCarouselPanel.FirstVisibleItemIndexProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamCarouselPanel.FirstVisibleItemIndex"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamCarouselPanel.ReflectionVisibilityProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamCarouselPanel.ReflectionVisibility"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamCarouselPanel.ViewSettingsProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamCarouselPanel.ViewSettings"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselPanel.ShouldSerializeViewSettings">
            <summary>
            Determines if the <see cref="P:Infragistics.Windows.Controls.XamCarouselPanel.ViewSettings"/> property needs to be serialized.
            </summary>
            <returns>True if the property should be serialized</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselPanel.ResetViewSettings">
            <summary>
            Resets the <see cref="P:Infragistics.Windows.Controls.XamCarouselPanel.ViewSettings"/> property to its default value.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamCarouselPanel.IsInCarouselListBoxProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamCarouselPanel.IsInCarouselListBox"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselPanel.EnsureItemIsVisible(System.Int32)">
            <summary>
            Ensures that the item represented by the specified index is visible.  If it is the item is
            scrolled into view.
            </summary>
            <param name="itemIndex"></param>
            <returns>True if a scroll was required false if a scroll was not required.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselPanel.ExecuteCommand(Infragistics.Windows.Commands.CommandWrapper)">
            <summary>
            Executes the RoutedCommand represented by the specified CommandWrapper.
            </summary>
            <param name="commandWrapper">The CommandWrapper that contains the RoutedCommand to execute</param>
            <returns>True if command was executed, false if canceled.</returns>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanelCommands"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselPanel.ExecuteCommand(System.Windows.Input.RoutedCommand)">
            <summary>
            Executes the specified RoutedCommand.
            </summary>
            <param name="command">The RoutedCommand to execute.</param>
            <returns>True if command was executed, false if canceled.</returns>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanelCommands"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselPanel.AddAdornerChildElement(System.Windows.UIElement)">
            <summary>
            Adds the specified child element to the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>'s <see cref="P:Infragistics.Windows.Controls.XamCarouselPanel.CarouselPanelAdorner"/>
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamCarouselPanel.CarouselPanelAdorner"/>
            <param name="childElement"></param>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselPanel.GetIsItemIndexVisible(System.Int32,System.Int32)">
            <summary>
            Returns true if the item represented by the specified item index is visible given the specified scroll offset.
            </summary>
            <param name="itemIndex"></param>
            <param name="scrollOffset"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselPanel.CanExecuteCommand(Infragistics.Windows.Commands.ExecuteCommandInfo)">
            <summary>
            Returns whether the specified command is allowed by the panel.
            </summary>
            <param name="commandInfo">Provides information about the command whose CanExecute state is being queried</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselPanel.OnAnimatedScrollComplete(System.Int32)">
            <summary>
            Called when the CarouselPanel completes an animated scroll operation.
            </summary>
            <param name="newScrollPosition">The new scroll position within the list of items being displayed by the CarouselPanel</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselPanel.ExecuteCommand(Infragistics.Windows.Commands.ExecuteCommandInfo)">
            <summary>
            Invoked when the panel should process a routed command.
            </summary>
            <param name="commandInfo">Contains information about the command being executed and the command parameter.</param>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamCarouselPanel.ExecutingCommandEvent">
            <summary>
            Event ID for the <see cref="E:Infragistics.Windows.Controls.XamCarouselPanel.ExecutingCommand"/> routed event
            </summary>
            <seealso cref="E:Infragistics.Windows.Controls.XamCarouselPanel.ExecutingCommand"/>
            <seealso cref="M:Infragistics.Windows.Controls.XamCarouselPanel.OnExecutingCommand(Infragistics.Windows.Controls.Events.ExecutingCommandEventArgs)"/>
            <seealso cref="T:Infragistics.Windows.Controls.Events.ExecutingCommandEventArgs"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselPanel.OnExecutingCommand(Infragistics.Windows.Controls.Events.ExecutingCommandEventArgs)">
            <summary>
            Occurs before a command is performed
            </summary>
            <seealso cref="E:Infragistics.Windows.Controls.XamCarouselPanel.ExecutingCommand"/>
            <seealso cref="F:Infragistics.Windows.Controls.XamCarouselPanel.ExecutingCommandEvent"/>
            <seealso cref="T:Infragistics.Windows.Controls.Events.ExecutingCommandEventArgs"/>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamCarouselPanel.ExecutedCommandEvent">
            <summary>
            Event ID for the <see cref="E:Infragistics.Windows.Controls.XamCarouselPanel.ExecutedCommand"/> routed event
            </summary>
            <seealso cref="E:Infragistics.Windows.Controls.XamCarouselPanel.ExecutedCommand"/>
            <seealso cref="M:Infragistics.Windows.Controls.XamCarouselPanel.OnExecutedCommand(Infragistics.Windows.Controls.Events.ExecutedCommandEventArgs)"/>
            <seealso cref="T:Infragistics.Windows.Controls.Events.ExecutedCommandEventArgs"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselPanel.OnExecutedCommand(Infragistics.Windows.Controls.Events.ExecutedCommandEventArgs)">
            <summary>
            Occurs after a command is performed
            </summary>
            <seealso cref="E:Infragistics.Windows.Controls.XamCarouselPanel.ExecutedCommand"/>
            <seealso cref="F:Infragistics.Windows.Controls.XamCarouselPanel.ExecutedCommandEvent"/>
            <seealso cref="T:Infragistics.Windows.Controls.Events.ExecutedCommandEventArgs"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselPanel.IsOkToCleanupUnusedGeneratedElements">
            <summary>
            Called when elements are about to be cleaned up.  Return true to allow cleanup, false to prevent cleanup.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselPanel.LogicalChildren">
            <summary>
            Gets an enumerator that can iterate the logical child elements of this element.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselPanel.MaximumUnusedGeneratedItemsToKeep">
            <summary>
            Returns the maximum number of unused generated items that should be kept around at any given time.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselPanel.TotalVisibleGeneratedItems">
            <summary>
            Derived classes must return the number of visible generated items.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselPanel.ExtentHeight">
            <summary>
            Returns the overall logical height of the scrollable area. (read only)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselPanel.ExtentWidth">
            <summary>
            Returns the overall logical width of the scrollable area. (read only)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselPanel.HorizontalOffset">
            <summary>
            Returns the logical horizontal offset of the scrollable area. (read only)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselPanel.VerticalOffset">
            <summary>
            Returns the logical vertical offset of the scrollable area. (read only)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselPanel.ScrollOwner">
            <summary>
            Returns/sets the scroll owner.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselPanel.ViewportHeight">
            <summary>
            Returns the height of the Viewport. (read only)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselPanel.ViewportWidth">
            <summary>
            Returns the width of the Viewport. (read only)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselPanel.System#Windows#Controls#Primitives#IScrollInfo#CanVerticallyScroll">
            <summary>
            Returns/sets whether vertical scrolling can be performed.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselPanel.System#Windows#Controls#Primitives#IScrollInfo#CanHorizontallyScroll">
            <summary>
            Returns/sets whether horizontal scrolling can be performed.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselPanel.CanNavigateToPreviousItem">
            <summary>
            Returns true if navigation to a previous item is possible. (read only)
            </summary>
            <remarks>
            <p class="body">To perform navigation in the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> use one of the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanelCommands"/></p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.XamCarouselPanel.CanNavigateToPreviousItemProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamCarouselPanel.CanNavigateToPreviousPage"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamCarouselPanel.CanNavigateToNextItem"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamCarouselPanel.CanNavigateToNextPage"/>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanelCommands"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselPanel.CanNavigateToPreviousPage">
            <summary>
            Returns true if navigation to a previous page of items is possible. (read only)
            </summary>
            <remarks>
            <p class="body">To perform navigation in the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> use one of the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanelCommands"/></p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.XamCarouselPanel.CanNavigateToPreviousPageProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamCarouselPanel.CanNavigateToPreviousItem"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamCarouselPanel.CanNavigateToNextItem"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamCarouselPanel.CanNavigateToNextPage"/>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanelCommands"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselPanel.CanNavigateToNextItem">
            <summary>
            Returns true if navigation to a following item is possible. (read only)
            </summary>
            <remarks>
            <p class="body">To perform navigation in the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> use one of the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanelCommands"/></p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.XamCarouselPanel.CanNavigateToNextItemProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamCarouselPanel.CanNavigateToNextPage"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamCarouselPanel.CanNavigateToPreviousItem"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamCarouselPanel.CanNavigateToPreviousPage"/>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanelCommands"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselPanel.CanNavigateToNextPage">
            <summary>
            Returns true if navigation to a following page of items is possible. (read only)
            </summary>
            <remarks>
            <p class="body">To perform navigation in the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> use one of the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanelCommands"/></p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.XamCarouselPanel.CanNavigateToNextPageProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamCarouselPanel.CanNavigateToNextItem"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamCarouselPanel.CanNavigateToPreviousItem"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamCarouselPanel.CanNavigateToPreviousPage"/>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanelCommands"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselPanel.FirstVisibleItemIndex">
            <summary>
            Returns a number that represents the visible item with the lowest index. (read only)
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamCarouselPanel.FirstVisibleItemIndexProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselPanel.ItemsPerPageResolved">
            <summary>
            Returns the lesser of the total number of items in the list and the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemsPerPage"/>.  This is the number
            used by the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> to determine the actual number of items per page. (read only)
            </summary>
            <remarks>
            <p class="body">If the total number of items in the list is less than <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemsPerPage"/>, the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> will spread out those
            items evenly along the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/> so they take up all the space between the prefix and suffix areas.  For example, if the number of items per page is set to 10 and the total
            number of items in the list is 20, this property will return 10 and the 10 displayed items will be arranged along the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/> between the prefix and suffix areas using even spacing.
            If the number of items in the list is 5, this property will return 5 and those 5 items will be evenly arranged along the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/> between the prefix and
            suffix areas, but with increased spacing so the entire areas is used.  This prevents items from being 'bunched up' at the beginning of the path.</p>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemsPerPage"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselPanel.OpacityEffectStopsResolved">
            <summary>
            Return the OpacityEffectStops collection (if one has been defined and populated), otherwise returns an internally generated default collection.  
            The default collection contains 2 stops with offset,value of 0,1 and 1,1
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.OpacityEffectStop"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.OpacityEffectStops"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselPanel.OpacityEffectStopDirectionResolved">
            <summary>
            Returns the value of the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.OpacityEffectStopDirection"/> property if set to something other than 'Default' otherwise returns a default value of <see cref="T:Infragistics.Windows.Controls.EffectStopDirection"/>.UseItemPath.
            </summary>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.OpacityEffectStopDirection"/>
            <seealso cref="T:Infragistics.Windows.Controls.EffectStopDirection"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselPanel.ReflectionVisibility">
            <summary>
            Returns the Visibility of the reflection displayed for each item in the list.
            </summary>
            <remarks>
            This is a read-only property that can be used to determine the visibility of elements used to render a reflection in an item's style.
            This property returns Visibility.Visible if the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ReserveSpaceForReflections"/> property is set to true, other wise it returns Visibility.Hidden.
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.XamCarouselPanel.ReflectionVisibilityProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ReserveSpaceForReflections"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselPanel.ScalingEffectStopsResolved">
            <summary>
            Return the ScalingEffectStops collection (if one has been defined and populated), otherwise returns an internally generated default collection.  
            The default collection contains 2 stops with offset,value of 0,1 and 1,1
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.ScalingEffectStop"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ScalingEffectStops"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselPanel.ScalingEffectStopDirectionResolved">
            <summary>
            Returns the value of the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ScalingEffectStopDirection"/> property if set to something other than 'Default' otherwise returns a default value of <see cref="T:Infragistics.Windows.Controls.EffectStopDirection"/>.UseItemPath.
            </summary>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ScalingEffectStopDirection"/>
            <seealso cref="T:Infragistics.Windows.Controls.EffectStopDirection"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselPanel.SelectionHost">
            <summary>
            Returns/sets a reference to an <see cref="T:Infragistics.Windows.Controls.ICarouselPanelSelectionHost"/> interface implemented by the control that is hosting this <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>.
            </summary>
            <remarks>
            Note: This property should be set by a control that hosts the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> if it supports selection.
            </remarks>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselPanel.SkewAngleXEffectStopsResolved">
            <summary>
            Return the SkewAngleXEffectStops collection (if one has been defined and populated), otherwise returns an internally generated default collection.  
            The default collection contains 2 stops with offset,value of 0,0 and 1,0
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.SkewAngleXEffectStop"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleXEffectStops"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselPanel.SkewAngleXEffectStopDirectionResolved">
            <summary>
            Returns the value of the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleXEffectStopDirection"/> property if set to something other than 'Default' otherwise returns a default value of <see cref="T:Infragistics.Windows.Controls.EffectStopDirection"/>.UseItemPath.
            </summary>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleXEffectStopDirection"/>
            <seealso cref="T:Infragistics.Windows.Controls.EffectStopDirection"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselPanel.SkewAngleYEffectStopsResolved">
            <summary>
            Return the SkewAngleYEffectStops collection (if one has been defined and populated), otherwise returns an internally generated default collection.  
            The default collection contains 2 stops with offset,value of 0,0 and 1,0
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.SkewAngleYEffectStop"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleYEffectStops"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselPanel.SkewAngleYEffectStopDirectionResolved">
            <summary>
            Returns the value of the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleYEffectStopDirection"/> property if set to something other than 'Default' otherwise returns a default value of <see cref="T:Infragistics.Windows.Controls.EffectStopDirection"/>.UseItemPath.
            </summary>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleYEffectStopDirection"/>
            <seealso cref="T:Infragistics.Windows.Controls.EffectStopDirection"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselPanel.ViewSettings">
            <summary>
            Returns/set the <see cref="T:Infragistics.Windows.Controls.CarouselViewSettings"/> object for this <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamCarouselPanel.ViewSettingsProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselPanel.ZOrderEffectStopsResolved">
            <summary>
            Return the ZOrderEffectStops collection (if one has been defined and populated), otherwise returns an internally generated default collection.  
            The default collection contains 2 stops with offset,value of 0,0 and 1,1
            </summary>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ZOrderEffectStops"/>
            <seealso cref="T:Infragistics.Windows.Controls.ZOrderEffectStop"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.UseZOrder"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselPanel.ZOrderEffectStopDirectionResolved">
            <summary>
            Returns the value of the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ZOrderEffectStopDirection"/> property if set to something other than 'Default' otherwise returns a default value of <see cref="T:Infragistics.Windows.Controls.EffectStopDirection"/>.UseItemPath.
            </summary>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ZOrderEffectStopDirection"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselPanel.ItemsHostSupportsSelection">
            <summary>
            Returns true if the ItemsHost supports selection.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselPanel.CarouselPanelAdorner">
            <summary>
            Returns a reference to the <see cref="P:Infragistics.Windows.Controls.XamCarouselPanel.CarouselPanelAdorner"/> used by the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamCarouselPanel.CarouselPanelAdorner"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselPanel.CurrentState">
            <summary>
            Returns a set of flags (<see cref="T:Infragistics.Windows.Controls.XamCarouselPanelStates"/>) that indicate the current state of the panel.
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanelStates"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselPanel.ScrollOffsetForInitialArrangeAnimation">
            <summary>
            Final scroll offset to animate towards when doing an initial arrange animation.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselPanel.ScrollInProgress">
            <summary>
            Returns true if a scroll is in progress.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselPanel.ShouldGenerateElements">
            <summary>
            Returns/sets a value that determines whether elements should be generated for the currently visible items.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamCarouselPanel.TotalItemCount">
            <summary>
            Returns the total number of items in the associated list if the panel is an Items Host, otherwise returns the total number of children.
            </summary>
        </member>
        <member name="E:Infragistics.Windows.Controls.XamCarouselPanel.ExecutingCommand">
            <summary>
            Occurs before a command is performed
            </summary>
            <seealso cref="M:Infragistics.Windows.Controls.XamCarouselPanel.OnExecutingCommand(Infragistics.Windows.Controls.Events.ExecutingCommandEventArgs)"/>
            <seealso cref="F:Infragistics.Windows.Controls.XamCarouselPanel.ExecutingCommandEvent"/>
            <seealso cref="T:Infragistics.Windows.Controls.Events.ExecutingCommandEventArgs"/>
        </member>
        <member name="E:Infragistics.Windows.Controls.XamCarouselPanel.ExecutedCommand">
            <summary>
            Occurs after a command is performed
            </summary>
            <seealso cref="M:Infragistics.Windows.Controls.XamCarouselPanel.OnExecutedCommand(Infragistics.Windows.Controls.Events.ExecutedCommandEventArgs)"/>
            <seealso cref="F:Infragistics.Windows.Controls.XamCarouselPanel.ExecutedCommandEvent"/>
            <seealso cref="T:Infragistics.Windows.Controls.Events.ExecutedCommandEventArgs"/>
        </member>
        <member name="T:Infragistics.Windows.Controls.XamCarouselPanelCommands">
            <summary>
            Provides a list of RoutedCommands supported by the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
            </summary>
            <remarks>
            <p class="body">The commands supported by the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> are:
            	<ul>
            		<li><see cref="F:Infragistics.Windows.Controls.XamCarouselPanelCommands.NavigateToNextItem"/> - Navigates to the next item in the panel.</li>
            		<li><see cref="F:Infragistics.Windows.Controls.XamCarouselPanelCommands.NavigateToNextPage"/> - Navigates to the next page of items in the panel.</li>
            		<li><see cref="F:Infragistics.Windows.Controls.XamCarouselPanelCommands.NavigateToPreviousItem"/> - Navigates to the previous item in the panel.</li>
            		<li><see cref="F:Infragistics.Windows.Controls.XamCarouselPanelCommands.NavigateToPreviousPage"/> - Navigates to the previous page of items in the panel.</li>
            	</ul>
            </p>
            </remarks>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamCarouselPanelCommands.NavigateToNextItem">
            <summary>
            Navigates to the next item in the panel.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamCarouselPanelCommands.NavigateToPreviousItem">
            <summary>
            Navigates to the previous item in the panel.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamCarouselPanelCommands.NavigateToNextPage">
            <summary>
            Navigates to the next page of items in the panel.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamCarouselPanelCommands.NavigateToPreviousPage">
            <summary>
            Navigates to the previous page of items in the panel.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamCarouselPanelCommands.LoadCommands">
            <summary>
            This method is provided as a convenience for initializing the statics in this class which kicks off
            the process of setting up and registering the commands.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.CarouselListBoxItem">
            <summary>
            <see cref="T:Infragistics.Windows.Controls.CarouselPanelItem"/> derived class used as a container for items in a <see cref="T:Infragistics.Windows.Controls.XamCarouselListBox"/>.
            </summary>
            <remarks>
            <p class="body">When a <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> is used within a <see cref="T:Infragistics.Windows.Controls.XamCarouselListBox"/> to arrange items in the list, the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> wraps each of its child items in a CarouselListBoxItem element.  The wrapper serves as a convenient
            place to store state (required by the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>) for each of its child items.  You will not normally need to interact with this element but you should
            be aware of its existence in case you have code that needs to traverse the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>'s parent tree.</p>
            <p class="body">Refer to the <a href="xamCarousel_Terms_Architecture.html">Carousel Architecture Overview</a> topic in the Developer's Guide for an explanation of how Carousel presentation works.</p>
            <p class="note"><b>Note: </b>An instance of this class is automatically created by the <see cref="T:Infragistics.Windows.Controls.XamCarouselListBox"/> when needed.  You do not ordinarily need to create an instance of this class directly.</p>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselListBox"/>
        </member>
        <member name="T:Infragistics.Windows.Controls.CarouselPanelItem">
            <summary>
            ListBoxItem derived class used as a container for items in a <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>.
            </summary>
            <remarks>
            <p class="body">When used as a standalone panel, the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> wraps each of its child items in a CarouselPanelItem element.  The wrapper serves as a convenient
            place to store state (required by the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>) for each of its child items.  You will not normally need to interact with this element but you should
            be aware of its existence in case you have code that needs to traverse the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>'s parent tree.</p>
            <p class="body">Refer to the <a href="xamCarousel_Terms_Architecture.html">Carousel Architecture Overview</a> topic in the Developer's Guide for an explanation of how Carousel presentation works.</p>
            <p class="note"><b>Note: </b>An instance of this class is automatically created by the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> when needed.  You do not ordinarily need to create an instance of this class directly.</p>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselPanelItem.#ctor">
            <summary>
            Constructor provided to allow creation in design tools for template and style editing.
            </summary>
            <remarks>
            <p class="note"><b>Note: </b>An instance of this class is automatically created by the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> when needed.  You do not ordinarily need to create an instance of this class directly.</p>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselPanelItem.#ctor(Infragistics.Windows.Controls.XamCarouselPanel)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Windows.Controls.CarouselPanelItem"/> class
            </summary>
            <remarks>
            <p class="note"><b>Note: </b>An instance of this class is automatically created by the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> when needed.  You do not ordinarily need to create an instance of this class directly.</p>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselPanelItem.AutoScaleItemContentsToFitPropertyKey">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselPanelItem.AutoScaleItemContentsToFit"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselPanelItem.AutoScaleItemContentsToFitProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselPanelItem.AutoScaleItemContentsToFit"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselPanelItem.IsListContinuousProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselPanelItem.IsListContinuous"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselPanelItem.IsFirstItemProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselPanelItem.IsFirstItem"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselPanelItem.IsLastItemProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselPanelItem.IsLastItem"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselPanelItem.ItemHorizontalScrollBarVisibilityPropertyKey">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselPanelItem.ItemHorizontalScrollBarVisibility"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselPanelItem.ItemHorizontalScrollBarVisibilityProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselPanelItem.ItemHorizontalScrollBarVisibility"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselPanelItem.ItemVerticalScrollBarVisibilityPropertyKey">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselPanelItem.ItemVerticalScrollBarVisibility"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.CarouselPanelItem.ItemVerticalScrollBarVisibilityProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.CarouselPanelItem.ItemVerticalScrollBarVisibility"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselPanelItem.ClearContainerForItem(System.Object)">
            <summary>
            Undoes any preparation done by the container to 'host' the item.
            </summary>
            <remarks>
            <p class="body">This method is called automatically by the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>.  You do not ordinarily need to call this method.</p>
            </remarks>
            <param name="item">The item being hosted by the container.</param>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselPanelItem.PrepareContainerForItem(System.Object)">
            <summary>
            Prepares the container to 'host' the item.
            </summary>
            <remarks>
            <p class="body">This method is called automatically by the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>.  You do not ordinarily need to call this method.</p>
            </remarks>
            <param name="item">The item being hosted by the container.</param>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselPanelItem.LogicalChildren">
            <summary>
            Gets an enumerator that can iterate the logical child elements of this element.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselPanelItem.AutoScaleItemContentsToFit">
            <summary>
            Returns true if the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> that contains this item is requesting that items autoscale their content to fit within their bounds.  (read only)
            </summary>
            <remarks>
            <p class="body">This read only property is useful if you need to create a Style that replaces the default Template for <see cref="T:Infragistics.Windows.Controls.CarouselPanelItem"/>.  You can 
            query this property from within the Template to determine whether to scale the item contents.</p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.CarouselPanelItem.AutoScaleItemContentsToFitProperty"/>
            <seealso cref="T:Infragistics.Windows.Controls.CarouselPanelItem"/>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
            <seealso cref="T:Infragistics.Windows.Controls.CarouselViewSettings"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselPanelItem.IsListContinuous">
            <summary>
            Returns true if the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> that contains this item is treating the item list as a continuous list.  (read only)
            </summary>
            <remarks>
            <p class="body">This read only property is useful if you need to create a Style that replaces the default Template for <see cref="T:Infragistics.Windows.Controls.CarouselPanelItem"/>.  You can 
            query this property from within the Template to determine whether to highlight the first and last items in the list by querying the <see cref="P:Infragistics.Windows.Controls.CarouselPanelItem.IsFirstItem"/> and <see cref="P:Infragistics.Windows.Controls.CarouselPanelItem.IsLastItem"/> properties.</p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.CarouselPanelItem.IsListContinuousProperty"/>
            <seealso cref="T:Infragistics.Windows.Controls.CarouselPanelItem"/>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
            <seealso cref="T:Infragistics.Windows.Controls.CarouselViewSettings"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselPanelItem.IsFirstItem">
            <summary>
            Returns true if the item is the first item in the list.  (read only)
            </summary>
            <remarks>
            <p class="body">This read only property is useful if you need to create a Style that replaces the default Template for <see cref="T:Infragistics.Windows.Controls.CarouselPanelItem"/>.  You can 
            query the IsListContinuous property from within the Template, and then look at this 
            property and the <see cref="P:Infragistics.Windows.Controls.CarouselPanelItem.IsLastItem"/> property to determine if the item needs to be highlighted.</p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.CarouselPanelItem.IsFirstItemProperty"/>
            <seealso cref="T:Infragistics.Windows.Controls.CarouselPanelItem"/>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
            <seealso cref="T:Infragistics.Windows.Controls.CarouselViewSettings"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselPanelItem.IsLastItem">
            <summary>
            Returns true if the item is the last item in the list.  (read only)
            </summary>
            <remarks>
            <p class="body">This read only property is useful if you need to create a Style that replaces the default Template for <see cref="T:Infragistics.Windows.Controls.CarouselPanelItem"/>.  You can 
            query the IsListContinuous property from within the Template, and then look at this 
            property and the <see cref="P:Infragistics.Windows.Controls.CarouselPanelItem.IsFirstItem"/> property to determine if the item needs to be highlighted.</p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.CarouselPanelItem.IsLastItemProperty"/>
            <seealso cref="T:Infragistics.Windows.Controls.CarouselPanelItem"/>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
            <seealso cref="T:Infragistics.Windows.Controls.CarouselViewSettings"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselPanelItem.ItemHorizontalScrollBarVisibility">
            <summary>
            Returns the visibility of the item's horizontal scrollbar as determined by the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> that contains this item.  (read only)
            </summary>
            <remarks>
            <p class="body">This read only property is useful if you need to create a Style that replaces the default Template for <see cref="T:Infragistics.Windows.Controls.CarouselPanelItem"/>.  You can 
            query this property from within the Template to determine whether to display a horizontal scrollbar.</p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.CarouselPanelItem.ItemHorizontalScrollBarVisibilityProperty"/>
            <seealso cref="T:Infragistics.Windows.Controls.CarouselPanelItem"/>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
            <seealso cref="T:Infragistics.Windows.Controls.CarouselViewSettings"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselPanelItem.ItemVerticalScrollBarVisibility">
            <summary>
            Returns the visibility of the item's vertical scrollbar as determined by the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> that contains this item.
            </summary>
            <remarks>
            <p class="body">This read only property is useful if you need to create a Style that replaces the default Template for <see cref="T:Infragistics.Windows.Controls.CarouselPanelItem"/>.  You can 
            query this property from within the Template to determine whether to display a vertical scrollbar.</p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.CarouselPanelItem.ItemVerticalScrollBarVisibilityProperty"/>
            <seealso cref="T:Infragistics.Windows.Controls.CarouselPanelItem"/>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
            <seealso cref="T:Infragistics.Windows.Controls.CarouselViewSettings"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselListBoxItem.#ctor">
            <summary>
            Constructor provided to allow creation in design tools for template and style editing.
            </summary>
            <remarks>
            <p class="note"><b>Note: </b>An instance of this class is automatically created by the <see cref="T:Infragistics.Windows.Controls.XamCarouselListBox"/> when needed.  You do not ordinarily need to create an instance of this class directly.</p>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselListBox"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselListBoxItem.#ctor(Infragistics.Windows.Controls.XamCarouselPanel)">
            <summary>
            Creates an instance of a CarouselListBoxItem.
            </summary>
            <remarks>
            <p class="note"><b>Note: </b>This constructor is for Infragistics internal use only.</p>
            <p class="note"><b>Note: </b>An instance of this class is automatically created by the <see cref="T:Infragistics.Windows.Controls.XamCarouselListBox"/> when needed.  You do not ordinarily need to create an instance of this class directly.</p>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselListBox"/>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
            <param name="carouselPanel">The <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> that will contain the CarouselListBoxItem.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselListBoxItem.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Fired when the left mouse button is pressed.
            </summary>
            <param name="e">An instance of MouseButtonEventArgs that contains information about the mouse state.</param>
        </member>
        <member name="T:Infragistics.Windows.Controls.CarouselPanelAdorner">
            <summary>
            The Adorner created by the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> and used to hold various elements such as the <see cref="T:Infragistics.Windows.Controls.CarouselPanelNavigator"/>
            </summary>
            <remarks>
            <p class="body">The adorner is automatically created by the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> and allows the <see cref="T:Infragistics.Windows.Controls.CarouselPanelNavigator"/> to float on top of all the items in the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/></p>
            <p class="note"><b>Note: </b>An instance of this class is automatically created by the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> when needed.  You do not ordinarily need to create an instance of this class directly.</p>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
            <seealso cref="T:Infragistics.Windows.Controls.CarouselPanelNavigator"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselPanelAdorner.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positions child elements and determines a size for this element.
            </summary>
            <param name="finalSize">The size available to this element for arranging its children.</param>
            <returns>The <see cref="T:System.Windows.Size"/> used by this element to arrange its children.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselPanelAdorner.GetVisualChild(System.Int32)">
            <summary>
            Gets the parent child at a specified index.
            </summary>
            <param name="index">The zero-based index of the specific child parent.</param>
            <returns>The parent child at the specified index.</returns>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselPanelAdorner.VisualChildrenCount">
            <summary>
            Returns the number of Visual Children contained within the element.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.EffectStopCollection`1">
            <summary>
            Abstract base class for all <see cref="T:Infragistics.Windows.Controls.EffectStop"/> collections.
            </summary>
            <remarks>
            <p class="body">All EffectStopCollections are derived from this abstract generic base class which provides implementations for functionality required by all derived effect-specific classes.
            Refer to the documentation for <see cref="T:Infragistics.Windows.Controls.EffectStop"/> for a full discussion of how to use EffectStops to apply parent effects to items in a <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/></p>
            <p class="body">There are 5 supported effect stop types for this abstract base generic collection:
            	<ul>
            		<li><see cref="T:Infragistics.Windows.Controls.OpacityEffectStop"/> - Defines an EffectStop used to apply Opacity effects to items.</li>
            		<li><see cref="T:Infragistics.Windows.Controls.ScalingEffectStop"/> - Defines an EffectStop used to apply Scaling effects to items.</li>
            		<li><see cref="T:Infragistics.Windows.Controls.SkewAngleXEffectStop"/> - Defines an EffectStop used to apply Skewing effects about the X-axis to items.</li>
            		<li><see cref="T:Infragistics.Windows.Controls.SkewAngleYEffectStop"/> - Defines an EffectStop used to apply Skewing effects about the Y-axis to items.</li>
            		<li><see cref="T:Infragistics.Windows.Controls.ZOrderEffectStop"/> - Defines an EffectStop used to apply ZOrder effects to items to control their positions in the Z-space.</li>
            	</ul>
            </p>
            <p class="body">Refer to the <a href="xamCarousel_Terms_Architecture.html">Carousel Architecture Overview</a> topic in the Developer's Guide for an explanation of how Carousel presentation works.</p>
            </remarks>
            <typeparam name="T">The type for which the EffectStopCollection is being created.</typeparam>
            <seealso cref="T:Infragistics.Windows.Controls.OpacityEffectStopCollection"/>
            <seealso cref="T:Infragistics.Windows.Controls.OpacityEffectStop"/>
            <seealso cref="T:Infragistics.Windows.Controls.SkewAngleXEffectStopCollection"/>
            <seealso cref="T:Infragistics.Windows.Controls.SkewAngleXEffectStop"/>
            <seealso cref="T:Infragistics.Windows.Controls.SkewAngleYEffectStopCollection"/>
            <seealso cref="T:Infragistics.Windows.Controls.SkewAngleYEffectStop"/>
            <seealso cref="T:Infragistics.Windows.Controls.ScalingEffectStopCollection"/>
            <seealso cref="T:Infragistics.Windows.Controls.ScalingEffectStop"/>
            <seealso cref="T:Infragistics.Windows.Controls.ZOrderEffectStopCollection"/>
            <seealso cref="T:Infragistics.Windows.Controls.ZOrderEffectStop"/>
            <seealso cref="T:Infragistics.Windows.Controls.EffectStopDirection"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.EffectStopCollection`1.#ctor">
            <summary>
            Creates an instance of the EffectStopCollection.  
            </summary>
            <remarks>
            <p class="body">The <see cref="T:Infragistics.Windows.Controls.CarouselViewSettings"/> object automatically creates an instance of this class when necessary.  You do not ordinarily need to create an instance of this class directly.</p>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Controls.CarouselViewSettings"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.EffectStopCollection`1.ReplaceAll(Infragistics.Windows.Controls.EffectStopCollection{`0})">
            <summary>
            Clears then replaces all the elements in the collection with the elements from the specified collection.
            </summary>
            <remarks>
            <p class="body">This method provides a mechanism for replacing the entire contents of the collection.  To generate a single property changed notification as a result of this action, bracket the call to this method with calls to <see cref="M:Infragistics.Windows.Controls.EffectStopCollection`1.SuspendChangeNotifications"/> and <see cref="M:Infragistics.Windows.Controls.EffectStopCollection`1.ResumeChangeNotifications(System.Boolean)"/>.</p>
            </remarks>
            <param name="newEffectStopCollection">The collection that contains the elements to be inserted into the current collection after it is cleared.</param>
            <seealso cref="M:Infragistics.Windows.Controls.EffectStopCollection`1.SuspendChangeNotifications"/>
            <seealso cref="M:Infragistics.Windows.Controls.EffectStopCollection`1.ResumeChangeNotifications(System.Boolean)"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.EffectStopCollection`1.ResumeChangeNotifications(System.Boolean)">
            <summary>
            Resumes change notifications that were suspended by a call to <see cref="M:Infragistics.Windows.Controls.EffectStopCollection`1.SuspendChangeNotifications"/>.  
            </summary>
            <param name="fullReset">True to also fire a Reset notification on the collection.</param>
            <seealso cref="M:Infragistics.Windows.Controls.EffectStopCollection`1.SuspendChangeNotifications"/>
            <seealso cref="M:Infragistics.Windows.Controls.EffectStopCollection`1.ReplaceAll(Infragistics.Windows.Controls.EffectStopCollection{`0})"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.EffectStopCollection`1.ShouldSerialize">
            <summary>
            Returns a boolean that indicates whether the collection has changed and should be serialized.
            </summary>
            <returns>Returns true if the collection contains at least 1 entry.  Otherwise returns false.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.EffectStopCollection`1.SuspendChangeNotifications">
            <summary>
            Suspends all change notifications for the collection until <see cref="M:Infragistics.Windows.Controls.EffectStopCollection`1.ResumeChangeNotifications(System.Boolean)"/> is called.
            </summary>
            <seealso cref="M:Infragistics.Windows.Controls.EffectStopCollection`1.ResumeChangeNotifications(System.Boolean)"/>
            <seealso cref="M:Infragistics.Windows.Controls.EffectStopCollection`1.ReplaceAll(Infragistics.Windows.Controls.EffectStopCollection{`0})"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.EffectStopCollection`1.IndexOf(`0)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="item"></param>
            <returns>The index of the specified item.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.EffectStopCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the specified item at them specified index.
            </summary>
            <param name="index">The index at which to insert the item.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.EffectStopCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The index of the item to remove</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.EffectStopCollection`1.Add(`0)">
            <summary>
            Add the specified item to the collection.
            </summary>
            <param name="item">The item to be added.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.EffectStopCollection`1.Clear">
            <summary>
            Clear the collection and removes all items.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.EffectStopCollection`1.Contains(`0)">
            <summary>
            Returns whether the list contains the specified item.
            </summary>
            <param name="item">The item to check for the existence of.</param>
            <returns>True if the list contains the specified, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.EffectStopCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the contents of the list to a compatible 1 dimensional array.
            </summary>
            <param name="array">The target array to which the contents of the list will be copied.</param>
            <param name="arrayIndex">The zero-based index in the target array at which the copying begins.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.EffectStopCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specified object from the list.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>True if the item was found and removed, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.EffectStopCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator for the list.
            </summary>
            <returns>An IEnumerator interface that can be used to enumerate through the list.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.EffectStopCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator for the list.
            </summary>
            <returns>An IEnumerator interface that can be used to enumerate through the list.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.EffectStopCollection`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds the specified object to the list.
            </summary>
            <param name="value">The object to add to the list.</param>
            <returns>The index at which the object was added or -1 if the object could not be added.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.EffectStopCollection`1.System#Collections#IList#Clear">
            <summary>
            Clears all items from the list.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.EffectStopCollection`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            Returns whether the list contains the specified object.
            </summary>
            <param name="value">The object to check for the existence of.</param>
            <returns>True if the list contains the specified object, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.EffectStopCollection`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Returns the index of the specified object.
            </summary>
            <param name="value">The object to locate in the list.</param>
            <returns>The index of the specified object or -1 if the object was not found in the list.</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.EffectStopCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts the specified item at the specified index.
            </summary>
            <param name="index">The index at which to insert the specified item.</param>
            <param name="value">The object to insert into the list.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.EffectStopCollection`1.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>
            Removes the object at the specified index.
            </summary>
            <param name="index">The index of the object to remove.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.EffectStopCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the contents of the list to a compatible 1 dimensional array.
            </summary>
            <param name="array">The target array to which the contents of the list will be copied.</param>
            <param name="index">The zero-based index in the target array at which the copying begins.</param>
        </member>
        <member name="E:Infragistics.Windows.Controls.EffectStopCollection`1.CollectionChanged">
            <summary>
            Notifies listeners when a change is made to the colleciton
            </summary>
        </member>
        <member name="E:Infragistics.Windows.Controls.EffectStopCollection`1.PropertyChanged">
            <summary>
            Raised when a property has changed.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.EffectStopCollection`1.Item(System.Int32)">
            <summary>
            Returns the item at the specified index.
            </summary>
            <param name="index">The index of the item ro return.</param>
            <returns>The item at the specified index.</returns>
        </member>
        <member name="P:Infragistics.Windows.Controls.EffectStopCollection`1.Count">
            <summary>
            Returns the number of items in the list.
            </summary>
            <returns>The number of items in the list.</returns>
        </member>
        <member name="P:Infragistics.Windows.Controls.EffectStopCollection`1.IsReadOnly">
            <summary>
            Returns whether the list is read only.
            </summary>
            <returns>True if the list is read-only, otherwise false.</returns>
        </member>
        <member name="P:Infragistics.Windows.Controls.EffectStopCollection`1.System#Collections#IList#IsFixedSize">
            <summary>
            Returns whether the list is a fixed size.
            </summary>
            <returns>True if the list size is fixed, otherwise false.</returns>
        </member>
        <member name="P:Infragistics.Windows.Controls.EffectStopCollection`1.System#Collections#IList#IsReadOnly">
            <summary>
            Returns whether the list is read only.
            </summary>
            <returns>True if the list is read only, otherwise false.</returns>
        </member>
        <member name="P:Infragistics.Windows.Controls.EffectStopCollection`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Returns the object at the specified index.
            </summary>
            <param name="index">The index of the object to return.</param>
            <returns>The object at the specified index or null if no object exists at the specified index or of the index is out of bounds.</returns>
        </member>
        <member name="P:Infragistics.Windows.Controls.EffectStopCollection`1.System#Collections#ICollection#Count">
            <summary>
            Returns the number of items in the list.
            </summary>
            <returns>The number of items in the list.</returns>
        </member>
        <member name="P:Infragistics.Windows.Controls.EffectStopCollection`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Returns whether access to the System.Collections.ICollection is synchronized (thread safe).
            </summary>
            <returns>True if the collection is synchronized and thread safe, otherwise false.</returns>
        </member>
        <member name="P:Infragistics.Windows.Controls.EffectStopCollection`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Returns an object that can be used to synchronize access to the System.Collections.ICollection.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.OpacityEffectStopCollection">
            <summary>
            A collection of <see cref="T:Infragistics.Windows.Controls.OpacityEffectStop"/> objects.  Refer to the documentation for <see cref="T:Infragistics.Windows.Controls.EffectStop"/> for a full discussion
            of how to use EffectStops to apply parent effects to items in a <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
            </summary>
            <remarks>
            <p class="body">Refer to the <a href="xamCarousel_Terms_Architecture.html">Carousel Architecture Overview</a> topic in the Developer's Guide for an explanation of how Carousel presentation works.</p>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Controls.OpacityEffectStop"/>
            <seealso cref="T:Infragistics.Windows.Controls.EffectStopDirection"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.OpacityEffectStopCollection.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Infragistics.Windows.Controls.OpacityEffectStopCollection"/>.
            </summary>
            <remarks>
            <p class="body">When the collection is created it will contain zero items.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.Windows.Controls.ScalingEffectStopCollection">
            <summary>
            A collection of <see cref="T:Infragistics.Windows.Controls.ScalingEffectStop"/> objects.  Refer to the documentation for <see cref="T:Infragistics.Windows.Controls.EffectStop"/> for a full discussion
            of how to use EffectStops to apply parent effects to items in a <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
            </summary>
            <remarks>
            <p class="body">Refer to the <a href="xamCarousel_Terms_Architecture.html">Carousel Architecture Overview</a> topic in the Developer's Guide for an explanation of how Carousel presentation works.</p>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Controls.ScalingEffectStop"/>
            <seealso cref="T:Infragistics.Windows.Controls.EffectStopDirection"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.ScalingEffectStopCollection.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Infragistics.Windows.Controls.ScalingEffectStopCollection"/>.
            </summary>
            <remarks>
            <p class="body">When the collection is created it will contain zero items.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.Windows.Controls.ZOrderEffectStopCollection">
            <summary>
            A collection of <see cref="T:Infragistics.Windows.Controls.ZOrderEffectStop"/> objects.  Refer to the documentation for <see cref="T:Infragistics.Windows.Controls.EffectStop"/> for a full discussion
            of how to use EffectStops to apply parent effects to items in a <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
            </summary>
            <remarks>
            <p class="body">Refer to the <a href="xamCarousel_Terms_Architecture.html">Carousel Architecture Overview</a> topic in the Developer's Guide for an explanation of how Carousel presentation works.</p>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Controls.ZOrderEffectStop"/>
            <seealso cref="T:Infragistics.Windows.Controls.EffectStopDirection"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.ZOrderEffectStopCollection.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Infragistics.Windows.Controls.ZOrderEffectStopCollection"/>.
            </summary>
            <remarks>
            <p class="body">When the collection is created it will contain zero items.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.Windows.Controls.SkewAngleXEffectStopCollection">
            <summary>
            A collection of <see cref="T:Infragistics.Windows.Controls.SkewAngleXEffectStop"/> objects.  Refer to the documentation for <see cref="T:Infragistics.Windows.Controls.EffectStop"/> for a full discussion
            of how to use EffectStops to apply parent effects to items in a <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
            </summary>
            <remarks>
            <p class="body">Refer to the <a href="xamCarousel_Terms_Architecture.html">Carousel Architecture Overview</a> topic in the Developer's Guide for an explanation of how Carousel presentation works.</p>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Controls.SkewAngleXEffectStop"/>
            <seealso cref="T:Infragistics.Windows.Controls.EffectStopDirection"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.SkewAngleXEffectStopCollection.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Infragistics.Windows.Controls.SkewAngleXEffectStopCollection"/>.
            </summary>
            <remarks>
            <p class="body">When the collection is created it will contain zero items.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.Windows.Controls.SkewAngleYEffectStopCollection">
            <summary>
            A collection of <see cref="T:Infragistics.Windows.Controls.SkewAngleYEffectStop"/> objects.  Refer to the documentation for <see cref="T:Infragistics.Windows.Controls.EffectStop"/> for a full discussion
            of how to use EffectStops to apply parent effects to items in a <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
            </summary>
            <remarks>
            <p class="body">Refer to the <a href="xamCarousel_Terms_Architecture.html">Carousel Architecture Overview</a> topic in the Developer's Guide for an explanation of how Carousel presentation works.</p>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Controls.SkewAngleYEffectStop"/>
            <seealso cref="T:Infragistics.Windows.Controls.EffectStopDirection"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.SkewAngleYEffectStopCollection.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Infragistics.Windows.Controls.SkewAngleYEffectStopCollection"/>.
            </summary>
            <remarks>
            <p class="body">When the collection is created it will contain zero items.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.Windows.Controls.EffectStop">
            <summary>
            Abstract base class that represents an <see cref="T:Infragistics.Windows.Controls.EffectStop"/> and contains an Offset and a Value.
            </summary>
            <remarks>
            <p class="body">There are 5 specific effect stop types derived from this base class:
            	<ul>
            		<li><see cref="T:Infragistics.Windows.Controls.OpacityEffectStop"/> - Defines an EffectStop used to apply Opacity effects to items.</li>
            		<li><see cref="T:Infragistics.Windows.Controls.ScalingEffectStop"/> - Defines an EffectStop used to apply Scaling effects to items.</li>
            		<li><see cref="T:Infragistics.Windows.Controls.SkewAngleXEffectStop"/> - Defines an EffectStop used to apply Skewing effects along the X-axis to items.</li>
            		<li><see cref="T:Infragistics.Windows.Controls.SkewAngleYEffectStop"/> - Defines an EffectStop used to apply Skewing effects along the Y-axis to items.</li>
            		<li><see cref="T:Infragistics.Windows.Controls.ZOrderEffectStop"/> - Defines an EffectStop used to apply ZOrder effects to items to control their positions in the Z-space.</li>
            	</ul>
            </p>
            <p class="body">An EffectStop contains an Offset and a Value which define how a particular parent effect is applied to items in the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
            The <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> supports 5 parent effects the: Opacity, Scaling, Skewing along the X-axis, Skewing along the Y-Axis and ZOrder.  Each of the 5 effects has a 
            corresponding EffectStop-derived class that defines an offset and value for applying that effect.</p>
            <p class="body">You can define 1 or more EffectStops for each parent effect by
            creating the appropriate derived EffectStop (e.g., <see cref="T:Infragistics.Windows.Controls.OpacityEffectStop"/>) and adding it to the appropriate derived EffectStopCollection (e.g., <see cref="T:Infragistics.Windows.Controls.OpacityEffectStopCollection"/>).</p>
            <p class="body">The 5 effect stop collections are exposed as properties on the <see cref="T:Infragistics.Windows.Controls.CarouselViewSettings"/> object (<see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.OpacityEffectStops"/>, <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ScalingEffectStops"/>,
            <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleXEffectStops"/>, <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.SkewAngleYEffectStops"/>, <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ZOrderEffectStops"/>).  The <see cref="T:Infragistics.Windows.Controls.CarouselViewSettings"/> object is exposed via 
            the ViewSettings properties on both the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>.<see cref="P:Infragistics.Windows.Controls.XamCarouselPanel.ViewSettings"/> and <see cref="T:Infragistics.Windows.Controls.XamCarouselListBox"/>.<see cref="P:Infragistics.Windows.Controls.XamCarouselListBox.ViewSettings"/>.  
            </p>
            <p class="body">When applying a parent effect to an item in the list, the XamCarouselPanel considers 4 pieces of information.  For example, when the XamCarouselPanel is
            deciding how to apply an Opacity effect to an item it considers the following 4 pieces of information:
            	<ul>
            		<li>The setting of the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.UseOpacity"/> property to determine if opacity effects are being used.  You can use this property to turn Opacity effects on or off.  If this
            property is set to false, the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> stops its evaluation and does not apply an opacity effect to the item.</li>
            		<li>The list of <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.OpacityEffectStops"/> that have been defined.  The <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> uses linear interpolation to establish Values for Offsets that fall between defined stops.</li>
            		<li>The value of the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.OpacityEffectStopDirection"/> property which determines how the '<see cref="P:Infragistics.Windows.Controls.EffectStop.Offset"/>' of each <see cref="T:Infragistics.Windows.Controls.OpacityEffectStop"/> is evaluated. For example, if the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.OpacityEffectStopDirection"/>
            is set to <see cref="T:Infragistics.Windows.Controls.EffectStopDirection"/>.UseItemPath, and the item's position is 50 percent along the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.ItemPath"/>, the <see cref="P:Infragistics.Windows.Controls.EffectStop.Value"/> applied to the item's Opacity would be based on an offset of .5.  If however, the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.OpacityEffectStopDirection"/>
            is set to <see cref="T:Infragistics.Windows.Controls.EffectStopDirection"/>.Vertical, and the item's Y-position in the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>'s display area is one third of the way down from the top of the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>'s display area, the value applied to the item's Opacity would be based on an offset of .3.</li>
            		<li>The position of the item in the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>'s display area (used as described in the previous bullet).</li>
            	</ul>
            The other types of parent effects are evaluated in exactly the same way using correspondingly named properties on the <see cref="T:Infragistics.Windows.Controls.CarouselViewSettings"/> object.
            </p>
            <p class="body">By applying different combinations of <see cref="T:Infragistics.Windows.Controls.EffectStop"/>s you can achieve some interesting layout effects in the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>.  </p>
            <p class="body">Refer to the <a href="xamCarousel_Terms_Architecture.html">Carousel Architecture Overview</a> topic in the Developer's Guide for an explanation of how Carousel presentation works.</p>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Controls.OpacityEffectStopCollection"/>
            <seealso cref="T:Infragistics.Windows.Controls.OpacityEffectStop"/>
            <seealso cref="T:Infragistics.Windows.Controls.SkewAngleXEffectStopCollection"/>
            <seealso cref="T:Infragistics.Windows.Controls.SkewAngleXEffectStop"/>
            <seealso cref="T:Infragistics.Windows.Controls.SkewAngleYEffectStopCollection"/>
            <seealso cref="T:Infragistics.Windows.Controls.SkewAngleYEffectStop"/>
            <seealso cref="T:Infragistics.Windows.Controls.ScalingEffectStopCollection"/>
            <seealso cref="T:Infragistics.Windows.Controls.ScalingEffectStop"/>
            <seealso cref="T:Infragistics.Windows.Controls.ZOrderEffectStopCollection"/>
            <seealso cref="T:Infragistics.Windows.Controls.ZOrderEffectStop"/>
            <seealso cref="T:Infragistics.Windows.Controls.EffectStopDirection"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.EffectStop.#ctor">
            <summary>
            Creates an instance of an EffectStop with a default Offset and a default Value (0, 0).
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.EffectStop.#ctor(System.Double,System.Double)">
            <summary>
            Creates an instance of an EffectStop with the specified Offset and Value.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.EffectStop.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when a property changes.
            </summary>
            <param name="e">A DependencyPropertyChangedEventArgs instance that contains information about the property that changed.</param>
        </member>
        <member name="F:Infragistics.Windows.Controls.EffectStop.OffsetProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.EffectStop.Offset"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.EffectStop.ValueProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.EffectStop.Value"/> dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.EffectStop.System#IComparable#CompareTo(System.Object)">
            <summary>
            Compares the specified object to this instance.
            </summary>
            <param name="obj">The object to compare to this instance</param>
            <returns>A signed number that indicates the relative values of the instance and the specified object. If this instance is less than the specified object a number less than zero is returned. If this instance is the same as the specified object then zero is returned. If this instance is greater than the specified object -or- the specified object is a null reference a number greater than zero is returned.</returns>
        </member>
        <member name="P:Infragistics.Windows.Controls.EffectStop.Offset">
            <summary>
            A value between 0 and 1 that represents the percentage offset into the overall range for the effect.
            </summary>
            <remarks>
            <p class="body">The overall range for the effect is determined by the setting of the related <see cref="T:Infragistics.Windows.Controls.EffectStopDirection"/> property and the extent of the corresponding control dimension.  
            For example, the overall range for an <see cref="T:Infragistics.Windows.Controls.OpacityEffectStop"/> is determined by the setting of the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.OpacityEffectStopDirection"/> property and the
            corresponding extent of the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>'s display area.  So if the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.OpacityEffectStopDirection"/> is set to <see cref="T:Infragistics.Windows.Controls.EffectStopDirection"/>.Vertical
            the overall range for the effect would be the height of the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>'s display area.  If the Offset of the EffectStop is set to .75 then the EffectStop's
            Value would apply to items whose vertical position in the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>'s display area is three quarters of the way down from the top (<see cref="T:Infragistics.Windows.Controls.EffectStopDirection"/>.Vertical 
            is always evaluated from the top down)</p>
            <p class="body">A similar evaluation is done with respect to the control's horizontal extent if the <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.OpacityEffectStopDirection"/> is set to <see cref="T:Infragistics.Windows.Controls.EffectStopDirection"/>.Horizontal, with evaluation
            of the Offset done from left to right.  </p>
            <p class="body">The example provided above for an <see cref="T:Infragistics.Windows.Controls.OpacityEffectStop"/> applies to the EffectStop types as well.</p>
            <remarks>
            <p class="body">Refer to the <a href="xamCarousel_Terms_Architecture.html">Carousel Architecture Overview</a> topic in the Developer's Guide for an explanation of how Carousel presentation works.</p>
            </remarks>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.EffectStop.OffsetProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.EffectStop.Value"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.EffectStop.Value">
            <summary>
            The value that should be applied at the <see cref="P:Infragistics.Windows.Controls.EffectStop.Offset"/> associated with this <see cref="T:Infragistics.Windows.Controls.EffectStop"/>.
            </summary>
            <remarks>
            <p class="body">Refer to the <a href="xamCarousel_Terms_Architecture.html">Carousel Architecture Overview</a> topic in the Developer's Guide for an explanation of how Carousel presentation works.</p>
            <p class="note"><b>Note:</b> The range of valid values for this property depends on the derived EffectStop type.</p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.EffectStop.ValueProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.EffectStop.Offset"/>
        </member>
        <member name="T:Infragistics.Windows.Controls.OpacityEffectStop">
            <summary>
            A strongly typed <see cref="T:Infragistics.Windows.Controls.EffectStop"/> used for Opacity effects.  Refer to the documentation for <see cref="T:Infragistics.Windows.Controls.EffectStop"/> for a full discussion
            of how to use EffectStops to apply parent effects to items in a <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>.
            </summary>
            <remarks>
            <p class="body">Opacity effects give you control over the opacity of items within the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> based on their position in the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>'s display
            area.  For example, you can use an Opacity effect in conjunction with a Scaling effect to simulate perspective and make items appear to be fading into the distance.</p>
            <p class="body">Refer to the <a href="xamCarousel_Terms_Architecture.html">Carousel Architecture Overview</a> topic in the Developer's Guide for an explanation of how Carousel presentation works.</p>
            <p class="note"><b>Note: </b>This derived <see cref="T:Infragistics.Windows.Controls.EffectStop"/> class provides range validation for the <see cref="P:Infragistics.Windows.Controls.EffectStop.Value"/> property.  
            The valid range for an OpacityEffectStop Value is from 0 to 1.</p>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Controls.EffectStop"/>
            <seealso cref="T:Infragistics.Windows.Controls.OpacityEffectStopCollection"/>
            <seealso cref="T:Infragistics.Windows.Controls.EffectStopDirection"/>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.OpacityEffectStop.#ctor">
            <summary>
            Creates an instance of an OpacityEffectStop with default values for the <see cref="P:Infragistics.Windows.Controls.EffectStop.Offset"/> and <see cref="P:Infragistics.Windows.Controls.EffectStop.Value"/> properties.
            </summary>
            <remarks>
            <p class="note"><b>Note: </b>The default value for the <see cref="P:Infragistics.Windows.Controls.EffectStop.Offset"/> and <see cref="P:Infragistics.Windows.Controls.EffectStop.Value"/> properties is zero.</p>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Controls.EffectStop"/>
            <seealso cref="P:Infragistics.Windows.Controls.EffectStop.Offset"/>
            <seealso cref="P:Infragistics.Windows.Controls.EffectStop.Value"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.OpacityEffectStop.#ctor(System.Double,System.Double)">
            <summary>
            Creates an instance of an <see cref="T:Infragistics.Windows.Controls.OpacityEffectStop"/> using the specified <see cref="P:Infragistics.Windows.Controls.EffectStop.Offset"/> and <see cref="P:Infragistics.Windows.Controls.EffectStop.Value"/>.
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.EffectStop"/>
            <seealso cref="P:Infragistics.Windows.Controls.EffectStop.Offset"/>
            <seealso cref="P:Infragistics.Windows.Controls.EffectStop.Value"/>
        </member>
        <member name="T:Infragistics.Windows.Controls.ScalingEffectStop">
            <summary>
            A strongly typed <see cref="T:Infragistics.Windows.Controls.EffectStop"/> used for Scaling effects.  Refer to the documentation for <see cref="T:Infragistics.Windows.Controls.EffectStop"/> for a full discussion
            of how to use EffectStops to apply parent effects to items in a <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>.
            </summary>
            <remarks>
            <p class="body">Scaling effects give you control over the size of items within the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> based on their position in the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>'s display
            area.  For example, you can use a Scaling effect in conjunction with an Opacity effect to simulate perspective and make items appear to be fading into the distance.</p>
            <p class="body">Refer to the <a href="xamCarousel_Terms_Architecture.html">Carousel Architecture Overview</a> topic in the Developer's Guide for an explanation of how Carousel presentation works.</p>
            <p class="note"><b>Note: </b>This derived <see cref="T:Infragistics.Windows.Controls.EffectStop"/> class provides range validation for the <see cref="P:Infragistics.Windows.Controls.EffectStop.Value"/> property.  
            The valid range for a ScalingEffectStop Value is from 0 and 10.</p>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Controls.EffectStop"/>
            <seealso cref="T:Infragistics.Windows.Controls.ScalingEffectStopCollection"/>
            <seealso cref="T:Infragistics.Windows.Controls.EffectStopDirection"/>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.ScalingEffectStop.#ctor">
            <summary>
            Creates an instance of a ScalingEffectStop with default values for the <see cref="P:Infragistics.Windows.Controls.EffectStop.Offset"/> and <see cref="P:Infragistics.Windows.Controls.EffectStop.Value"/> properties.
            </summary>
            <remarks>
            <p class="note"><b>Note: </b>The default value for the <see cref="P:Infragistics.Windows.Controls.EffectStop.Offset"/> and <see cref="P:Infragistics.Windows.Controls.EffectStop.Value"/> properties is zero.</p>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Controls.EffectStop"/>
            <seealso cref="P:Infragistics.Windows.Controls.EffectStop.Offset"/>
            <seealso cref="P:Infragistics.Windows.Controls.EffectStop.Value"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.ScalingEffectStop.#ctor(System.Double,System.Double)">
            <summary>
            Creates an instance of a <see cref="T:Infragistics.Windows.Controls.ScalingEffectStop"/> using the specified <see cref="P:Infragistics.Windows.Controls.EffectStop.Offset"/> and <see cref="P:Infragistics.Windows.Controls.EffectStop.Value"/>.
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.EffectStop"/>
            <seealso cref="P:Infragistics.Windows.Controls.EffectStop.Offset"/>
            <seealso cref="P:Infragistics.Windows.Controls.EffectStop.Value"/>
        </member>
        <member name="T:Infragistics.Windows.Controls.ZOrderEffectStop">
            <summary>
            A strongly typed <see cref="T:Infragistics.Windows.Controls.EffectStop"/> used for ZOrder effects.  Refer to the documentation for <see cref="T:Infragistics.Windows.Controls.EffectStop"/> for a full discussion
            of how to use EffectStops to apply parent effects to items in a <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>.
            </summary>
            <remarks>
            <p class="body">ZOrder effects give you control over the z-index of items based on their position in the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>'s display
            area.  For example, you can use a ZOrder effect for items on a circular path to ensure that items at the bottom of the circle (i.e., logically closer to the viewer's
            eye) are topmost, with items to the right and left further down in the zorder.</p>
            <p class="body">Refer to the <a href="xamCarousel_Terms_Architecture.html">Carousel Architecture Overview</a> topic in the Developer's Guide for an explanation of how Carousel presentation works.</p>
            <p class="note"><b>Note: </b>This derived <see cref="T:Infragistics.Windows.Controls.EffectStop"/> class provides range validation for the <see cref="P:Infragistics.Windows.Controls.EffectStop.Value"/> property.  
            The valid range for a ZOrderEffectStop Value is from 0 to 1 (with 0 representing 'bottommost' and 1 representing 'topmost')</p>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Controls.EffectStop"/>
            <seealso cref="T:Infragistics.Windows.Controls.ZOrderEffectStopCollection"/>
            <seealso cref="T:Infragistics.Windows.Controls.EffectStopDirection"/>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.ZOrderEffectStop.#ctor">
            <summary>
            Creates an instance of a ZOrderEffectStop with default values for the <see cref="P:Infragistics.Windows.Controls.EffectStop.Offset"/> and <see cref="P:Infragistics.Windows.Controls.EffectStop.Value"/> properties.
            </summary>
            <remarks>
            <p class="note"><b>Note: </b>The default value for the <see cref="P:Infragistics.Windows.Controls.EffectStop.Offset"/> and <see cref="P:Infragistics.Windows.Controls.EffectStop.Value"/> properties is zero.</p>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Controls.EffectStop"/>
            <seealso cref="P:Infragistics.Windows.Controls.EffectStop.Offset"/>
            <seealso cref="P:Infragistics.Windows.Controls.EffectStop.Value"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.ZOrderEffectStop.#ctor(System.Double,System.Double)">
            <summary>
            Creates an instance of a <see cref="T:Infragistics.Windows.Controls.ZOrderEffectStop"/> using the specified <see cref="P:Infragistics.Windows.Controls.EffectStop.Offset"/> and <see cref="P:Infragistics.Windows.Controls.EffectStop.Value"/>.
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.EffectStop"/>
            <seealso cref="P:Infragistics.Windows.Controls.EffectStop.Offset"/>
            <seealso cref="P:Infragistics.Windows.Controls.EffectStop.Value"/>
        </member>
        <member name="T:Infragistics.Windows.Controls.SkewAngleXEffectStop">
            <summary>
            A strongly typed <see cref="T:Infragistics.Windows.Controls.EffectStop"/> used for effects that Skew items about the X-axis.  Refer to the documentation for <see cref="T:Infragistics.Windows.Controls.EffectStop"/> for a full discussion
            of how to use EffectStops to apply parent effects to items in a <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>.
            </summary>
            <remarks>
            <p class="body">Skewing effects give you control over the rotation of items about their X or Y axis, based on their position in the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>'s display
            area.  For example, you can use a Skewing effects with a curved path to make items appear to be wrapping around the curve.</p>
            <p class="body">Refer to the <a href="xamCarousel_Terms_Architecture.html">Carousel Architecture Overview</a> topic in the Developer's Guide for an explanation of how Carousel presentation works.</p>
            <p class="note"><b>Note: </b>This derived <see cref="T:Infragistics.Windows.Controls.EffectStop"/> class provides range validation for the <see cref="P:Infragistics.Windows.Controls.EffectStop.Value"/> property.  
            The valid range for a SkewAngleXEffectStop Value is from -360 to +360.</p>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Controls.EffectStop"/>
            <seealso cref="T:Infragistics.Windows.Controls.SkewAngleXEffectStopCollection"/>
            <seealso cref="T:Infragistics.Windows.Controls.EffectStopDirection"/>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.SkewAngleXEffectStop.#ctor">
            <summary>
            Creates an instance of a SkewAngleXEffectStop with default values for the <see cref="P:Infragistics.Windows.Controls.EffectStop.Offset"/> and <see cref="P:Infragistics.Windows.Controls.EffectStop.Value"/> properties.
            </summary>
            <remarks>
            <p class="note"><b>Note: </b>The default value for the <see cref="P:Infragistics.Windows.Controls.EffectStop.Offset"/> and <see cref="P:Infragistics.Windows.Controls.EffectStop.Value"/> properties is zero.</p>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Controls.EffectStop"/>
            <seealso cref="P:Infragistics.Windows.Controls.EffectStop.Offset"/>
            <seealso cref="P:Infragistics.Windows.Controls.EffectStop.Value"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.SkewAngleXEffectStop.#ctor(System.Double,System.Double)">
            <summary>
            Creates an instance of a <see cref="T:Infragistics.Windows.Controls.SkewAngleXEffectStop"/> using the specified <see cref="P:Infragistics.Windows.Controls.EffectStop.Offset"/> and <see cref="P:Infragistics.Windows.Controls.EffectStop.Value"/>.
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.EffectStop"/>
            <seealso cref="P:Infragistics.Windows.Controls.EffectStop.Offset"/>
            <seealso cref="P:Infragistics.Windows.Controls.EffectStop.Value"/>
        </member>
        <member name="T:Infragistics.Windows.Controls.SkewAngleYEffectStop">
            <summary>
            A strongly typed <see cref="T:Infragistics.Windows.Controls.EffectStop"/> used for effects that Skew items about the Y-axis.  Refer to the documentation for <see cref="T:Infragistics.Windows.Controls.EffectStop"/> for a full discussion
            of how to use EffectStops to apply parent effects to items in a <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>.
            </summary>
            <remarks>
            <p class="body">Skewing effects give you control over the rotation of items about their X or Y axis, based on their position in the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>'s display
            area.  For example, you can use a Skewing effects with a curved path to make items appear to be wrapping around the curve.</p>
            <p class="body">Refer to the <a href="xamCarousel_Terms_Architecture.html">Carousel Architecture Overview</a> topic in the Developer's Guide for an explanation of how Carousel presentation works.</p>
            <p class="note"><b>Note: </b>This derived <see cref="T:Infragistics.Windows.Controls.EffectStop"/> class provides range validation for the <see cref="P:Infragistics.Windows.Controls.EffectStop.Value"/> property.  
            The valid range for a SkewAngleYEffectStop Value is from -360 to +360.</p>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Controls.EffectStop"/>
            <seealso cref="T:Infragistics.Windows.Controls.SkewAngleYEffectStopCollection"/>
            <seealso cref="T:Infragistics.Windows.Controls.EffectStopDirection"/>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.SkewAngleYEffectStop.#ctor">
            <summary>
            Creates an instance of a SkewAngleYEffectStop with default values for the <see cref="P:Infragistics.Windows.Controls.EffectStop.Offset"/> and <see cref="P:Infragistics.Windows.Controls.EffectStop.Value"/> properties.
            </summary>
            <remarks>
            <p class="note"><b>Note: </b>The default value for the <see cref="P:Infragistics.Windows.Controls.EffectStop.Offset"/> and <see cref="P:Infragistics.Windows.Controls.EffectStop.Value"/> properties is zero.</p>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Controls.EffectStop"/>
            <seealso cref="P:Infragistics.Windows.Controls.EffectStop.Offset"/>
            <seealso cref="P:Infragistics.Windows.Controls.EffectStop.Value"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.SkewAngleYEffectStop.#ctor(System.Double,System.Double)">
            <summary>
            Creates an instance of a <see cref="T:Infragistics.Windows.Controls.SkewAngleYEffectStop"/> using the specified <see cref="P:Infragistics.Windows.Controls.EffectStop.Offset"/> and <see cref="P:Infragistics.Windows.Controls.EffectStop.Value"/>.
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.EffectStop"/>
            <seealso cref="P:Infragistics.Windows.Controls.EffectStop.Offset"/>
            <seealso cref="P:Infragistics.Windows.Controls.EffectStop.Value"/>
        </member>
        <member name="T:Infragistics.Windows.Controls.CarouselPanelNavigator">
            <summary>
            Control that provides a UI for scrolling items in a <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>.
            </summary>
            <remarks>
            <p class="body">The CarouselPanelNavigator displays buttons that execute <see cref="T:Infragistics.Windows.Controls.XamCarouselPanelCommands"/> when clicked, in order to scroll items.  
            If you want to provide your own UI for scrollig items, you can hide the CarouselPanelNavigator by setting the CarouselViewSettings' <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.IsNavigatorVisible"/> 
            property to hidden and then creating a UI that executes the same scrolling commands used by the navigator.</p>
            <p class="body">The <see cref="T:Infragistics.Windows.Controls.CarouselViewSettings"/> object exposes a <see cref="P:Infragistics.Windows.Controls.CarouselViewSettings.CarouselPanelNavigatorStyle"/> property that can be used to style the control.  
            Alternatively, you can create a style that targets the CarouselPanelNavigator and place it in a resource dictionary somewhere in the ancestor chain of the control.</p>
            <p class="body">Refer to the <a href="xamCarousel_Terms_Architecture.html">Carousel Architecture Overview</a> topic in the Developer's Guide for an explanation of how Carousel presentation works.</p>
            <p class="note"><b>Note: </b>The <see cref="T:Infragistics.Windows.Controls.CarouselViewSettings"/> object is available via the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>'s <see cref="P:Infragistics.Windows.Controls.XamCarouselPanel.ViewSettings"/> and <see cref="T:Infragistics.Windows.Controls.XamCarouselListBox"/>'s <see cref="P:Infragistics.Windows.Controls.XamCarouselListBox.ViewSettings"/> properties.</p>
            <p class="note"><b>Note: </b>An instance of this class is automatically created by the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> when needed.  You do not ordinarily need to create an instance of this class directly.</p>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanelCommands"/>
            <seealso cref="F:Infragistics.Windows.Controls.XamCarouselPanelCommands.NavigateToPreviousPage"/>
            <seealso cref="F:Infragistics.Windows.Controls.XamCarouselPanelCommands.NavigateToNextPage"/>
            <seealso cref="F:Infragistics.Windows.Controls.XamCarouselPanelCommands.NavigateToPreviousItem"/>
            <seealso cref="F:Infragistics.Windows.Controls.XamCarouselPanelCommands.NavigateToNextItem"/>
            <seealso cref="T:Infragistics.Windows.Controls.CarouselViewSettings"/>
            <seealso cref="P:Infragistics.Windows.Controls.CarouselViewSettings.CarouselPanelNavigatorStyle"/>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselPanelNavigator.#ctor">
            <summary>
            Constructor provided to allow creation in design tools for template and style editing.
            </summary>
            <remarks>
            <p class="note"><b>Note: </b>An instance of this class is automatically created by the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> when needed.  You do not ordinarily need to create an instance of this class directly.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselPanelNavigator.#ctor(Infragistics.Windows.Controls.XamCarouselPanel)">
            <summary>
            Constructor used by the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> to create an instance of the CarouselPanelNavigator that works with the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>.
            </summary>
            <remarks>
            <p class="note"><b>Note: </b>Instances of this class are automatically created by the <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>.  You do not ordinarily need to create and instance of this class directly.</p>
            </remarks>
            <param name="carouselPanel">The associated <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/></param>
        </member>
        <member name="P:Infragistics.Windows.Controls.CarouselPanelNavigator.CarouselPanel">
            <summary>
            Returns/sets the associated <see cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/> that will be affected by the navigator.
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.XamCarouselPanel"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselPanelUIElementCollection.#ctor(Infragistics.Windows.Controls.XamCarouselPanel,System.Windows.UIElement,System.Windows.FrameworkElement)">
            <summary>
            Creates an instance of the CarouselPanelUIElementCollection class.
            </summary>
            <remarks>
            <p class="note"><b>Note: </b>This class is for internal use only.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselPanelUIElementCollection.Add(System.Windows.UIElement)">
            <summary>
            Adds an element to the collection.
            </summary>
            <param name="element">The element to add</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.CarouselPanelUIElementCollection.GetEnumerator">
            <summary>
            Returns an IEnumerator that can be used to iterate through the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Shared.ResourceCustomizer">
            <summary>
            Class used to provide the ability to customize resource strings.
            </summary>
            <remarks>
            <p>There is an instance of this class exposed by the <see cref="T:Infragistics.Shared.ResourceCustomizer"/> property of the Resources object exposed by each Infragistics.Win assembly.</p>
            <p>It allows for customization/substitution of strings that would normally be loaded from resources.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Shared.ResourceCustomizer.GetCustomizedString(System.String)">
            <summary>
            Gets the customized string identified by the specified string resource name.
            </summary>
            <param name="name">Name of the string resource that was customized.</param>
            <returns>The customized string or nulll if the resoource wasn't customized.</returns>
            <seealso cref="M:Infragistics.Shared.ResourceCustomizer.ResetAllCustomizedStrings"/>
            <seealso cref="M:Infragistics.Shared.ResourceCustomizer.ResetCustomizedString(System.String)"/>
            <seealso cref="M:Infragistics.Shared.ResourceCustomizer.SetCustomizedString(System.String,System.String)"/>
        </member>
        <member name="M:Infragistics.Shared.ResourceCustomizer.ResetAllCustomizedStrings">
            <summary>
            Clears all strings customized by calls to <see cref="M:Infragistics.Shared.ResourceCustomizer.SetCustomizedString(System.String,System.String)"/> method.
            </summary>
            <seealso cref="M:Infragistics.Shared.ResourceCustomizer.SetCustomizedString(System.String,System.String)"/>
            <seealso cref="M:Infragistics.Shared.ResourceCustomizer.ResetCustomizedString(System.String)"/>
        </member>
        <member name="M:Infragistics.Shared.ResourceCustomizer.ResetCustomizedString(System.String)">
            <summary>
            Resets a customized string identified by the specified string resource name so that it will load from the resource file.
            </summary>
            <param name="name">Name of the string resource to customize.</param>
            <seealso cref="M:Infragistics.Shared.ResourceCustomizer.SetCustomizedString(System.String,System.String)"/>
        </member>
        <member name="M:Infragistics.Shared.ResourceCustomizer.SetCustomizedString(System.String,System.String)">
            <summary>
            Sets a customized string identified by the specified string resource name.
            </summary>
            <param name="name">Name of the string resource to customize.</param>
            <param name="customizedText">The customized string. If null this has the same effect as calling <see cref="M:Infragistics.Shared.ResourceCustomizer.ResetCustomizedString(System.String)"/></param>
            <seealso cref="M:Infragistics.Shared.ResourceCustomizer.ResetAllCustomizedStrings"/>
            <seealso cref="M:Infragistics.Shared.ResourceCustomizer.ResetCustomizedString(System.String)"/>
        </member>
        <member name="P:Infragistics.Shared.ResourceCustomizer.CustomizedStringsVersion">
            <summary>
            For internal infrastructure use. This number is incremented every time a 
            customized string is modified.
            </summary>
        </member>
        <member name="E:Infragistics.Shared.ResourceCustomizer.ResourceCustomizationChanged">
            <summary>
            This event is raised when a string is customized. The property name in the event arguments refers to the resource name. 
            </summary>
            <remarks>If PropertyName is null then all customizations have been reset.</remarks>
        </member>
        <member name="T:Infragistics.Windows.Themes.PrimitivesResourceSet`1">
            <summary>
            Abstract base class used to supply style resources for a specific look for primitive elements that are shared.
            </summary>
            <typeparam name="T">A <see cref="T:Infragistics.Windows.Themes.ResourceSetLocator"/> derived class that must have a public parameterless constructor.</typeparam>
        </member>
        <member name="T:Infragistics.Windows.Themes.ResourceSet">
            <summary>
            Abstract base class for resource sets
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Themes.ResourceSet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Windows.Themes.ResourceSet"/> class
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Themes.ResourceSet.ToString">
            <summary>
            Returns a string reperentation of the object.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Themes.ResourceSet.GetSealedResource(System.Windows.ResourceDictionary,System.Object)">
            <summary>
            Obtains the resource stored within the ResourceDictionary with the specified key and if the resource is sealable will ensure that the object is sealed.
            </summary>
            <param name="dictionary">The dictionary whose sealed resource is to be returned.</param>
            <param name="key">Key of the resource within the dictionary to obtain</param>
            <returns>The object stored with the specified key</returns>
        </member>
        <member name="M:Infragistics.Windows.Themes.ResourceSet.VerifyResources">
            <summary>
            Called when the resources are being asked for.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.ResourceSet.Theme">
            <summary>
            Returns the name of the theme (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.ResourceSet.Grouping">
            <summary>
            Returns the category that the resources are applied to (read-only)
            </summary>
            <remarks>
            Examples: DataPresenter, Editors, Primitives, WPF etc.
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Themes.ResourceSet.Resources">
            <summary>
            Returns the ResourceDictionary containing the associated styles (read-only)
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> This member is queried within the constructor of the ResourceSet and therefore the derived class' implementation of this member should not rely upon any information provided in the constructor.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesResourceSet`1.Grouping">
            <summary>
            Returns the grouping that the resources are applied to (read-only)
            </summary>
            <remarks>
            Examples: DataPresenter, Editors, Primitives, WPF etc.
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesResourceSet`1.Theme">
            <summary>
            Returns the name of the look (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesResourceSet`1.Resources">
            <summary>
            Returns the ResourceDictionary containing the associated styles (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesResourceSet`1.Location">
            <summary>
            Returns the <see cref="T:Infragistics.Windows.Themes.ResourceSetLocator"/> that describes the theme information for the resource set.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesResourceSet`1.ComparisonOperatorSelector">
            <summary>
            The style for a <see cref="P:Infragistics.Windows.Themes.PrimitivesResourceSet`1.ComparisonOperatorSelector"/>.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesResourceSet`1.DropIndicator">
            <summary>
            The style for the <see cref="P:Infragistics.Windows.Themes.PrimitivesResourceSet`1.DropIndicator"/> control.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesResourceSet`1.ExpanderBar">
            <summary>
            The style for an expansion indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesResourceSet`1.ExpansionIndicator">
            <summary>
            The style for an expansion indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesResourceSet`1.XamCarouselListBox">
            <summary>
            The style for a XamCarouselListBox.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesResourceSet`1.CarouselPanelItem">
            <summary>
            The style for a CarouselPanelItem.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesResourceSet`1.CarouselListBoxItem">
            <summary>
            The style for a CarouselListBoxItem.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesResourceSet`1.CarouselPanelNavigator">
            <summary>
            The style for a CarouselPanelNavigator.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesResourceSet`1.PopupResizerBar">
            <summary>
            The style for the <see cref="P:Infragistics.Windows.Themes.PrimitivesResourceSet`1.PopupResizerBar"/> control.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesResourceSet`1.SortIndicator">
            <summary>
            The style for sort indictators.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesResourceSet`1.XamPager">
            <summary>
            The style for the <see cref="P:Infragistics.Windows.Themes.PrimitivesResourceSet`1.XamPager"/> control.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesResourceSet`1.ToolWindow">
            <summary>
            The style for the <see cref="P:Infragistics.Windows.Themes.PrimitivesResourceSet`1.ToolWindow"/> control.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesResourceSet`1.XamTabControl">
            <summary>
            The style for the <see cref="P:Infragistics.Windows.Themes.PrimitivesResourceSet`1.XamTabControl"/> control.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesResourceSet`1.TabItemEx">
            <summary>
            The style for the <see cref="P:Infragistics.Windows.Themes.PrimitivesResourceSet`1.TabItemEx"/> control.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesResourceSet`1.XamScreenTip">
            <summary>
            The style for the <see cref="P:Infragistics.Windows.Themes.PrimitivesResourceSet`1.XamScreenTip"/> control.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesResourceSet`1.TileDragIndicator">
            <summary>
            The style for the <see cref="P:Infragistics.Windows.Themes.PrimitivesResourceSet`1.TileDragIndicator"/> control.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.PrimitivesGeneric">
            <summary>
            Class used to supply style resources for the Generic look for a primitive elements that are shared
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesGeneric.Instance">
            <summary>
            Returns a static instance of this type (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.PrimitivesGeneric.Locator">
            <summary>
            Identifies the location of a specific theme grouping
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.ResourceSetLocator">
            <summary>
            Base class used to locate the resource set for a specific theme and grouping
            </summary>
            <seealso cref="T:Infragistics.Windows.Themes.PrimitivesResourceSet`1"/>
        </member>
        <member name="P:Infragistics.Windows.Themes.ResourceSetLocator.Theme">
            <summary>
            The name of the theme
            </summary>
            <seealso cref="P:Infragistics.Windows.Themes.PrimitivesResourceSet`1.Theme"/>
        </member>
        <member name="P:Infragistics.Windows.Themes.ResourceSetLocator.Grouping">
            <summary>
            Returns the name of the grouping that the resources are applied to (read-only)
            </summary>
            <remarks>
            Examples: DataPresenter, Editors, Primitives, WPF etc.
            </remarks>
            <seealso cref="P:Infragistics.Windows.Themes.PrimitivesResourceSet`1.Grouping"/>
        </member>
        <member name="P:Infragistics.Windows.Themes.ResourceSetLocator.Assembly">
            <summary>
            Returns the assembly containg the resource set
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.ResourceSetLocator.ResourcePath">
            <summary>
            The path to the embedded resources within the assembly
            </summary>
            <remarks>
            <p class="body">The path can contain multiple resources within the <see cref="P:Infragistics.Windows.Themes.ResourceSetLocator.Assembly"/> separated by a semi-colon.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesGeneric.Locator.Assembly">
            <summary>The assembly containg the resource set</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesGeneric.Locator.Theme">
            <summary>The name of the theme</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesGeneric.Locator.Grouping">
            <summary>The name of the grouping</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesGeneric.Locator.ResourcePath">
            <summary>The path to the embedded resources within the assembly</summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.PrimitivesOnyx">
            <summary>
            Class used to supply style resources for the Onyx look for a primitive elements that are shared
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesOnyx.Instance">
            <summary>
            Returns a static instance of this type (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.PrimitivesOnyx.Locator">
            <summary>
            Identifies the location of a specific theme grouping
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesOnyx.Locator.Assembly">
            <summary>The assembly containg the resource set</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesOnyx.Locator.Theme">
            <summary>The name of the theme</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesOnyx.Locator.Grouping">
            <summary>The name of the grouping</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesOnyx.Locator.ResourcePath">
            <summary>The path to the embedded resources within the assembly</summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.PrimitivesAero">
            <summary>
            Class used to supply style resources for the Aero look for a primitive elements that are shared
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesAero.Instance">
            <summary>
            Returns a static instance of this type (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.PrimitivesAero.Locator">
            <summary>
            Identifies the location of a specific theme grouping
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesAero.Locator.Assembly">
            <summary>The assembly containg the resource set</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesAero.Locator.Theme">
            <summary>The name of the theme</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesAero.Locator.Grouping">
            <summary>The name of the grouping</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesAero.Locator.ResourcePath">
            <summary>The path to the embedded resources within the assembly</summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.PrimitivesRoyale">
            <summary>
            Class used to supply style resources for the Royale look for a primitive elements that are shared
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesRoyale.Instance">
            <summary>
            Returns a static instance of this type (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.PrimitivesRoyale.Locator">
            <summary>
            Identifies the location of a specific theme grouping
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesRoyale.Locator.Assembly">
            <summary>The assembly containg the resource set</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesRoyale.Locator.Theme">
            <summary>The name of the theme</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesRoyale.Locator.Grouping">
            <summary>The name of the grouping</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesRoyale.Locator.ResourcePath">
            <summary>The path to the embedded resources within the assembly</summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.PrimitivesRoyaleStrong">
            <summary>
            Class used to supply style resources for the RoyaleStrong look for a primitive elements that are shared
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesRoyaleStrong.Instance">
            <summary>
            Returns a static instance of this type (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.PrimitivesRoyaleStrong.Locator">
            <summary>
            Identifies the location of a specific theme grouping
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesRoyaleStrong.Locator.Assembly">
            <summary>The assembly containg the resource set</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesRoyaleStrong.Locator.Theme">
            <summary>The name of the theme</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesRoyaleStrong.Locator.Grouping">
            <summary>The name of the grouping</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesRoyaleStrong.Locator.ResourcePath">
            <summary>The path to the embedded resources within the assembly</summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.PrimitivesLunaNormal">
            <summary>
            Class used to supply style resources for the LunaNormal look for a primitive elements that are shared
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesLunaNormal.Instance">
            <summary>
            Returns a static instance of this type (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.PrimitivesLunaNormal.Locator">
            <summary>
            Identifies the location of a specific theme grouping
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesLunaNormal.Locator.Assembly">
            <summary>The assembly containg the resource set</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesLunaNormal.Locator.Theme">
            <summary>The name of the theme</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesLunaNormal.Locator.Grouping">
            <summary>The name of the grouping</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesLunaNormal.Locator.ResourcePath">
            <summary>The path to the embedded resources within the assembly</summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.PrimitivesLunaOlive">
            <summary>
            Class used to supply style resources for the LunaOlive look for a primitive elements that are shared
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesLunaOlive.Instance">
            <summary>
            Returns a static instance of this type (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.PrimitivesLunaOlive.Locator">
            <summary>
            Identifies the location of a specific theme grouping
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesLunaOlive.Locator.Assembly">
            <summary>The assembly containg the resource set</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesLunaOlive.Locator.Theme">
            <summary>The name of the theme</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesLunaOlive.Locator.Grouping">
            <summary>The name of the grouping</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesLunaOlive.Locator.ResourcePath">
            <summary>The path to the embedded resources within the assembly</summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.PrimitivesLunaSilver">
            <summary>
            Class used to supply style resources for the LunaSilver look for a primitive elements that are shared
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesLunaSilver.Instance">
            <summary>
            Returns a static instance of this type (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.PrimitivesLunaSilver.Locator">
            <summary>
            Identifies the location of a specific theme grouping
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesLunaSilver.Locator.Assembly">
            <summary>The assembly containg the resource set</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesLunaSilver.Locator.Theme">
            <summary>The name of the theme</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesLunaSilver.Locator.Grouping">
            <summary>The name of the grouping</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesLunaSilver.Locator.ResourcePath">
            <summary>The path to the embedded resources within the assembly</summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.PrimitivesOffice2k7Black">
            <summary>
            Class used to supply style resources for the Lite look for a primitive elements that are shared
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesOffice2k7Black.Instance">
            <summary>
            Returns a static instance of this type (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.PrimitivesOffice2k7Black.Locator">
            <summary>
            Identifies the location of a specific theme grouping
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesOffice2k7Black.Locator.Assembly">
            <summary>The assembly containg the resource set</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesOffice2k7Black.Locator.Theme">
            <summary>The name of the theme</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesOffice2k7Black.Locator.Grouping">
            <summary>The name of the grouping</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesOffice2k7Black.Locator.ResourcePath">
            <summary>The path to the embedded resources within the assembly</summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.PrimitivesOffice2k7Blue">
            <summary>
            Class used to supply style resources for the Lite look for a primitive elements that are shared
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesOffice2k7Blue.Instance">
            <summary>
            Returns a static instance of this type (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.PrimitivesOffice2k7Blue.Locator">
            <summary>
            Identifies the location of a specific theme grouping
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesOffice2k7Blue.Locator.Assembly">
            <summary>The assembly containg the resource set</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesOffice2k7Blue.Locator.Theme">
            <summary>The name of the theme</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesOffice2k7Blue.Locator.Grouping">
            <summary>The name of the grouping</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesOffice2k7Blue.Locator.ResourcePath">
            <summary>The path to the embedded resources within the assembly</summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.PrimitivesOffice2k7Silver">
            <summary>
            Class used to supply style resources for the Lite look for a primitive elements that are shared
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesOffice2k7Silver.Instance">
            <summary>
            Returns a static instance of this type (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.PrimitivesOffice2k7Silver.Locator">
            <summary>
            Identifies the location of a specific theme grouping
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesOffice2k7Silver.Locator.Assembly">
            <summary>The assembly containg the resource set</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesOffice2k7Silver.Locator.Theme">
            <summary>The name of the theme</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesOffice2k7Silver.Locator.Grouping">
            <summary>The name of the grouping</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesOffice2k7Silver.Locator.ResourcePath">
            <summary>The path to the embedded resources within the assembly</summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.PrimitivesOffice2010Blue">
            <summary>
            Class used to supply style resources for the Lite look for a primitive elements that are shared
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesOffice2010Blue.Instance">
            <summary>
            Returns a static instance of this type (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.PrimitivesOffice2010Blue.Locator">
            <summary>
            Identifies the location of a specific theme grouping
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesOffice2010Blue.Locator.Assembly">
            <summary>The assembly containg the resource set</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesOffice2010Blue.Locator.Theme">
            <summary>The name of the theme</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesOffice2010Blue.Locator.Grouping">
            <summary>The name of the grouping</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesOffice2010Blue.Locator.ResourcePath">
            <summary>The path to the embedded resources within the assembly</summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.PrimitivesWashBaseDark">
            <summary>
            Class used to supply style resources for the Office2k7Silver look for a Primitivess
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesWashBaseDark.Instance">
            <summary>
            Returns a static instance of this type (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.PrimitivesWashBaseDark.Locator">
            <summary>
            Identifies the location of a specific theme grouping
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesWashBaseDark.Locator.Assembly">
            <summary>The assembly containg the resource set</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesWashBaseDark.Locator.Theme">
            <summary>The name of the theme</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesWashBaseDark.Locator.Grouping">
            <summary>The name of the grouping</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesWashBaseDark.Locator.ResourcePath">
            <summary>The path to the embedded resources within the assembly</summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.PrimitivesWashBaseLight">
            <summary>
            Class used to supply style resources for the Office2k7Silver look for a Primitivess
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesWashBaseLight.Instance">
            <summary>
            Returns a static instance of this type (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.PrimitivesWashBaseLight.Locator">
            <summary>
            Identifies the location of a specific theme grouping
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesWashBaseLight.Locator.Assembly">
            <summary>The assembly containg the resource set</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesWashBaseLight.Locator.Theme">
            <summary>The name of the theme</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesWashBaseLight.Locator.Grouping">
            <summary>The name of the grouping</summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.PrimitivesWashBaseLight.Locator.ResourcePath">
            <summary>The path to the embedded resources within the assembly</summary>
        </member>
        <member name="T:Infragistics.Windows.Selection.ISelectableItem">
            <summary>
            ISelectableItem is implemented by any sub object that can
            be selected and/or activated
            (e.g. a cell, row, header etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Selection.ISelectableItem.IsSelected">
            <summary>
            True if the item is currently selected (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Selection.ISelectableItem.IsSelectable">
            <summary>
            True if the item is selectable (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Selection.ISelectableItem.IsDraggable">
            <summary>
            True if the item is Draggable (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Selection.ISelectableItem.IsTabStop">
            <summary>
            True if this item is a tab stop
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.AssemblyResourceSetLoader">
            <summary>
            Used to load and register resouyrce sets.
            </summary>
            <remarks>There is only one of the classes in an assembly. It is used to trigger the loading of all resource sets included in the assembly.</remarks>
        </member>
        <member name="M:Infragistics.Windows.Themes.AssemblyResourceSetLoader.RegisterResourceSets">
            <summary>
            Ensures that all resource sets are loaded and registered
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Themes.AssemblyResourceSetLoader.OnRegisterResourceSets(System.String)">
            <summary>
            Invoked for each grouping that is registered to allow the derived class to selectively load specific resource dictionaries.
            </summary>
            <param name="groupingName">The name of the grouping whose resources should be loaded or null if all resource sets should be loaded.</param>
        </member>
        <member name="M:Infragistics.Windows.Themes.AssemblyResourceSetLoader.RegisterResourceSet(Infragistics.Windows.Themes.ResourceSet)">
            <summary>
            Helper method called by derived classes to register a specific resource set
            </summary>
            <param name="resourceSet">The resource set to register</param>
        </member>
        <member name="M:Infragistics.Windows.Themes.AssemblyResourceSetLoader.RegisterResourceSet(Infragistics.Windows.Themes.ResourceSetLocator)">
            <summary>
            Helper method called by derived classes to register a specific resource set
            </summary>
            <param name="locator">The <see cref="T:Infragistics.Windows.Themes.ResourceSetLocator"/> that can be used to lazily load the theme resources.</param>
        </member>
        <member name="T:Infragistics.Windows.Themes.AssemblyResourceSetLoaderAttribute">
            <summary>
            Attribute class used to identify the <see cref="T:Infragistics.Windows.Themes.AssemblyResourceSetLoader"/> derived class that loads and registers the resource sets for an assembly.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Themes.AssemblyResourceSetLoaderAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Themes.AssemblyResourceSetLoaderAttribute"/>
            </summary>
            <param name="assemblyResourceSetLoaderType">Type derived from <see cref="T:Infragistics.Windows.Themes.AssemblyResourceSetLoader"/> that is used to load and register themes for an assembly.</param>
        </member>
        <member name="M:Infragistics.Windows.Themes.AssemblyResourceSetLoaderAttribute.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Themes.AssemblyResourceSetLoaderAttribute.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current Object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current Object.</param>
            <returns>true if the specified see cref="System.Object"/&gt; is equal to the current Object; otherwise, false.</returns>
        </member>
        <member name="P:Infragistics.Windows.Themes.AssemblyResourceSetLoaderAttribute.AssemblyResourceSetLoaderType">
            <summary>
            Returns the type that loads the resource sets for the assembly.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.AssemblyThemeGroupingNameAttribute">
            <summary>
            Attribute used to identify the name of the assembly to be passed to the <see cref="M:Infragistics.Windows.Themes.AssemblyResourceSetLoader.RegisterResourceSets(System.Collections.Generic.List{System.String})"/> method to allow a 
            <see cref="T:Infragistics.Windows.Themes.AssemblyResourceSetLoader"/> to only register themes for the assemblies that have been loaded.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Themes.AssemblyThemeGroupingNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Themes.AssemblyThemeGroupingNameAttribute"/>
            </summary>
            <param name="name">The name used to identify the assembly. This name will be passed to <see cref="T:Infragistics.Windows.Themes.AssemblyResourceSetLoader"/> instances to allow them to 
            selectively load theme classes.</param>
        </member>
        <member name="M:Infragistics.Windows.Themes.AssemblyThemeGroupingNameAttribute.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Themes.AssemblyThemeGroupingNameAttribute.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current Object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current Object.</param>
            <returns>true if the specified see cref="System.Object"/&gt; is equal to the current Object; otherwise, false.</returns>
        </member>
        <member name="P:Infragistics.Windows.Themes.AssemblyThemeGroupingNameAttribute.Name">
            <summary>
            Returns the name used to identify the assembly.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.ThemeManager">
            <summary>
            Static class used for registering resources based on theme and grouping
            </summary>
            <remarks>
            <para>Themes are identified by name (e.g. Onyx, Aero, Royale etc.)</para>
            <para>Groupings are also identified by name (e.g. Editors, Primitives, DataPresenter etc.).</para>
            </remarks>
        </member>
        <member name="F:Infragistics.Windows.Themes.ThemeManager.AllGroupingsLiteral">
            <summary>
            The literal used to represent all resource sets for a theme (read-only)
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Themes.ThemeManager.ThemeDefaultLiteral">
            <summary>
            The literal used to represent a null theme value in a property grid (read-only)
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Themes.ThemeManager.ThemeCurrentLiteral">
            <summary>
            The literal used to represent the current theme (read-only)
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Themes.ThemeManager.ThemeNameGeneric">
            <summary>
            The name of the Generic theme (read-only)
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Themes.ThemeManager.ThemeNameAero">
            <summary>
            The name of the Aero theme (read-only)
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Themes.ThemeManager.ThemeNameOnyx">
            <summary>
            The name of the Onyx theme (read-only)
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Themes.ThemeManager.ThemeNameRoyale">
            <summary>
            The name of the Royale theme (read-only)
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Themes.ThemeManager.ThemeNameRoyaleStrong">
            <summary>
            The name of the Royale theme (read-only)
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Themes.ThemeManager.ThemeNameForestGreen">
            <summary>
            The name of the Hulk theme (read-only)
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Themes.ThemeManager.ThemeNameLeaf">
            <summary>
            The name of the Leaf theme (read-only)
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Themes.ThemeManager.ThemeNameLipstick">
            <summary>
            The name of the Lipstick theme (read-only)
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Themes.ThemeManager.ThemeNameLunaNormal">
            <summary>
            The name of the LunaNormal theme (read-only)
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Themes.ThemeManager.ThemeNameLunaOlive">
            <summary>
            The name of the LunaOlive theme (read-only)
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Themes.ThemeManager.ThemeNameLunaSilver">
            <summary>
            The name of the LunaSilver theme (read-only)
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Themes.ThemeManager.ThemeNameOffice2010Blue">
            <summary>
            The name of the Office 2010 blue theme (read-only)
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Themes.ThemeManager.ThemeNameOffice2k7Blue">
            <summary>
            The name of the Office 2007 blue theme (read-only)
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Themes.ThemeManager.ThemeNameOffice2k7Black">
            <summary>
            The name of the Office 2007 black theme (read-only)
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Themes.ThemeManager.ThemeNameOffice2k7Silver">
            <summary>
            The name of the Office 2007 silver theme (read-only)
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Themes.ThemeManager.ThemeNameHighContrast">
            <summary>
            The name of the HighContrastLight theme (read-only)
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Themes.ThemeManager.ThemeNameWashBaseLight">
            <summary>
            The name of the ThemeBrushesLight theme (read-only)
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Themes.ThemeManager.ThemeNameWashBaseDark">
            <summary>
            The name of the ThemeBrushesDark theme (read-only)
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Themes.ThemeManager.ThemeNamePrintBasic">
            <summary>
            The name of the Print theme (read-only)
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Themes.ThemeManager.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Themes.ThemeManager.ThemeChangedEvent">
            <summary>
            Routed event for raising a notification when the <see cref="F:Infragistics.Windows.Themes.ThemeManager.ThemeProperty"/> has been changed.
            </summary>
            <remarks>
            <p class="body">An element must raise this event when its Theme property has been changed. This is normally 
            done within the PropertyChangedCallback added by overriding the metadata for the ThemeProperty.</p>
            </remarks>
        </member>
        <member name="F:Infragistics.Windows.Themes.ThemeManager.ThemeProperty">
            <summary>
            Identifies the Theme attached dependency property
            </summary>
            <seealso cref="M:Infragistics.Windows.Themes.ThemeManager.GetTheme(System.Windows.DependencyObject)"/>
            <seealso cref="M:Infragistics.Windows.Themes.ThemeManager.SetTheme(System.Windows.DependencyObject,System.String)"/>
        </member>
        <member name="M:Infragistics.Windows.Themes.ThemeManager.GetTheme(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the 'Theme' attached property
            </summary>
            <remarks>
            <para class="body">If left set to null then the default 'Generic' theme will be used. 
            This property can be set to the name of any registered theme (see <see cref="M:Infragistics.Windows.Themes.ThemeManager.Register(System.String,System.String,System.Windows.ResourceDictionary)"/> and <see cref="M:Infragistics.Windows.Themes.ThemeManager.GetThemes"/> methods).</para>
            <para></para>
            <para class="note"><b>Note: </b> The following themes are pre-registered by this assembly but additional themes can be registered as well.
            <ul>
            <li>"Aero" - a theme that is compatible with Vista's 'Aero' theme.</li>
            <li>"Generic" - the default theme.</li>
            <li>"LunaNormal" - a theme that is compatible with XP's 'blue' theme.</li>
            <li>"LunaOlive" - a theme that is compatible with XP's 'olive' theme.</li>
            <li>"LunaSilver" - a theme that is compatible with XP's 'silver' theme.</li>
            <li>"Office2k7Black" - a theme that is compatible with MS Office 2007's 'Black' theme.</li>
            <li>"Office2k7Blue" - a theme that is compatible with MS Office 2007's 'Blue' theme.</li>
            <li>"Office2k7Silver" - a theme that is compatible with MS Office 2007's 'Silver' theme.</li>
            <li>"Onyx" - a theme that features black and orange highlights.</li>
            <li>"Royale" - a theme that features subtle blue highlights.</li>
            <li>"RoyaleStrong" - a theme that features strong blue highlights.</li>
            </ul>
            </para>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Themes.ThemeManager"/>
            <seealso cref="F:Infragistics.Windows.Themes.ThemeManager.ThemeProperty"/>
            <seealso cref="M:Infragistics.Windows.Themes.ThemeManager.SetTheme(System.Windows.DependencyObject,System.String)"/>
        </member>
        <member name="M:Infragistics.Windows.Themes.ThemeManager.SetTheme(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the value of the 'Theme' attached property
            </summary>
            <seealso cref="F:Infragistics.Windows.Themes.ThemeManager.ThemeProperty"/>
            <seealso cref="M:Infragistics.Windows.Themes.ThemeManager.GetTheme(System.Windows.DependencyObject)"/>
        </member>
        <member name="M:Infragistics.Windows.Themes.ThemeManager.GetGroupingsForType(System.Type)">
            <summary>
            Returns the registered groupings for the specified type
            </summary>
            <param name="type">The type whose groupings are to be returned.</param>
            <returns>An array of the registered groupings for the type or its base type if it has been registered; null if no groupings have been registered for the element.</returns>
        </member>
        <member name="M:Infragistics.Windows.Themes.ThemeManager.GetGroupingsForTypeImpl(System.Type)">
            <summary>
            Returns the registered groupings for the specified type
            </summary>
            <param name="type">The type whose groupings are to be returned.</param>
            <returns>An array of the registered groupings for the type or its base type if it has been registered; null if no groupings have been registered for the element.</returns>
        </member>
        <member name="M:Infragistics.Windows.Themes.ThemeManager.GetGroupingsForTheme(System.String)">
            <summary>
            Returns a list of all registered groupings for a specific theme
            </summary>
            <param name="theme">The specified theme.</param>
        </member>
        <member name="M:Infragistics.Windows.Themes.ThemeManager.GetResourceSet(System.String,System.String)">
            <summary>
            Registers a ResourceDictionary containing resources for a specific theme and grouping
            </summary>
            <param name="theme">The name of the theme (e.g. Onyx, Aero, Royale etc.)</param>
            <param name="grouping">The name of the grouping (e.g. Editors, Primitives, DataPresenter etc.)</param>
            <returns>The Resourcedictioanry containing the associated styles or null if not registered.</returns>
            <seealso cref="M:Infragistics.Windows.Themes.ThemeManager.Register(System.String,System.String,System.Windows.ResourceDictionary)"/>
        </member>
        <member name="M:Infragistics.Windows.Themes.ThemeManager.GetThemes">
            <summary>
            Returns a list of all registered themes
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Themes.ThemeManager.GetThemes(System.Boolean)">
            <summary>
            Returns a list of all registered themes
            </summary>
            <param name="includeDefault">A boolean indicating whether to include the default theme</param>
        </member>
        <member name="M:Infragistics.Windows.Themes.ThemeManager.GetThemes(System.Boolean,System.String)">
            <summary>
            Returns a list of all registered themes
            </summary>
            <param name="includeDefault">A boolean indicating whether to include the default theme</param>
            <param name="grouping">The name of the grouping which must be registered for a theme in order to be returned.</param>
        </member>
        <member name="M:Infragistics.Windows.Themes.ThemeManager.IsThemeValid(System.String)">
            <summary>
            Determines if a theme is valid.
            </summary>
            <param name="theme">The name of the theme (e.g. Onyx, Aero, Royale etc.)</param>
            <returns>True if the theme has been registered or is equal to '[default]' or '[current]'.</returns>
            <seealso cref="M:Infragistics.Windows.Themes.ThemeManager.Register(System.String,System.String,System.Windows.ResourceDictionary)"/>
        </member>
        <member name="M:Infragistics.Windows.Themes.ThemeManager.OnThemeChanged(System.Windows.FrameworkElement,System.String,System.String[])">
            <summary>
            Helper method called by controls that expose a 'Theme' property to merge the appropriate resources for the specified theme.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> the registered theme resource sets ar injected into the MergedDictionaries collection of the control's Resources.
            </para></remarks>
            <param name="themedControl">The control that exposes the 'Theme' property.</param>
            <param name="theme">The new value of the 'Theme' property.</param>
            <param name="groupings">An array of the appropriate theme groupings to include.</param>
            <exception cref="T:System.ArgumentNullException">If themedControl or groupings is null.</exception>
        </member>
        <member name="M:Infragistics.Windows.Themes.ThemeManager.Register(System.String,System.String,System.Windows.ResourceDictionary)">
            <summary>
            Registers a ResourceDictionary containing resources for a specific theme and grouping
            </summary>
            <param name="theme">The name of the theme (e.g. Onyx, Aero, Royale etc.)</param>
            <param name="grouping">The name of the grouping (e.g. Editors, Primitives, DataPresenter etc.)</param>
            <param name="resources">The ResourceDictioanry containing the associated styles.</param>
            <seealso cref="M:Infragistics.Windows.Themes.ThemeManager.GetResourceSet(System.String,System.String)"/>
        </member>
        <member name="M:Infragistics.Windows.Themes.ThemeManager.Register(Infragistics.Windows.Themes.ResourceSetLocator)">
            <summary>
            Registers a <see cref="T:Infragistics.Windows.Themes.ResourceSetLocator"/> containing resources for a specific theme and grouping
            </summary>
            <param name="locator">The <see cref="T:Infragistics.Windows.Themes.ResourceSetLocator"/> containing the information about the theme, grouping and location of the resources.</param>
            <seealso cref="M:Infragistics.Windows.Themes.ThemeManager.GetResourceSet(System.String,System.String)"/>
        </member>
        <member name="M:Infragistics.Windows.Themes.ThemeManager.RegisterGroupings(System.Type,System.String[])">
            <summary>
            Registers the name of the Theme groupings that should be applied to a type when its Theme property is changed.
            </summary>
            <param name="type">The type for which to register the groupings</param>
            <param name="groupings">An array of 1 or more strings that represent the groupings which should be added to the element's resources when its Theme property is changed.</param>
        </member>
        <member name="M:Infragistics.Windows.Themes.ThemeManager.VerifyThemeInformationRegistered(System.Reflection.Assembly)">
            <summary>
            This member supports the Infragistics infrastructure and is not meant to be invoked externally.
            </summary>
            <param name="assembly">Type whose assembly style information should be evaluated.</param>
        </member>
        <member name="E:Infragistics.Windows.Themes.ThemeManager.CurrentThemeChanged">
            <summary>
            Occurs when the <see cref="P:Infragistics.Windows.Themes.ThemeManager.CurrentTheme"/> property has been changed.
            </summary>
        </member>
        <member name="E:Infragistics.Windows.Themes.ThemeManager.RegistrationInfoChanged">
            <summary>
            Occurs when the <see cref="E:Infragistics.Windows.Themes.ThemeManager.RegistrationInfoChanged"/> property has been changed.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Themes.ThemeManager.CurrentTheme">
            <summary>
            Gets/sets the current theme
            </summary>
            <seealso cref="E:Infragistics.Windows.Themes.ThemeManager.CurrentThemeChanged"/>
        </member>
        <member name="T:Infragistics.Windows.Resizing.IResizableElement">
            <summary>
            This interface must be implemented by a FrameworkElement that wants to be resized.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Resizing.IResizableElement.ResizeContext">
            <summary>
            Gets the context that is important to the object that implements IResizeHost
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Resizing.IResizeHost">
            <summary>
            Interface implemented by an element that contains resizable items.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Resizing.IResizeHost.AddResizerBar(System.Windows.FrameworkElement)">
            <summary>
            Called at the start of a resize operation to add the resizer bar to the parent tree
            </summary>
            <param name="resizerBar">The resizer bar to add</param>
        </member>
        <member name="M:Infragistics.Windows.Resizing.IResizeHost.CanResize(System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            Determines if the resizing is allowed.
            </summary>
            <param name="resizableItem">The item that contains the ResizeContext</param>
            <param name="resizeInXAxis">True to resize the width and false to resize the height.</param>
            <returns>True if resizing in this dimension is allowed.</returns>
        </member>
        <member name="M:Infragistics.Windows.Resizing.IResizeHost.GetResizeAreaForItem(System.Windows.FrameworkElement)">
            <summary>
            Gets an element that defines the resize area for an item.
            </summary>
            <param name="resizableItem">The item to be resized.</param>
            <returns>The resize are.</returns>
        </member>
        <member name="M:Infragistics.Windows.Resizing.IResizeHost.RemoveResizerBar(System.Windows.FrameworkElement)">
            <summary>
            Called at the end of a resize operation to remove the resizer bar from the parent tree
            </summary>
            <param name="resizerBar">The resizer bar to remove</param>
        </member>
        <member name="M:Infragistics.Windows.Resizing.IResizeHost.Resize(System.Windows.FrameworkElement,System.Boolean,System.Double)">
            <summary>
            Resizes the item.
            </summary>
            <param name="resizableItem">The item that contains the ResizeContext</param>
            <param name="resizeInXAxis">True to resize the width and false to resize the height.</param>
            <param name="delta">The resize delta in device-independent units (1/96th inch per unit).</param>
        </member>
        <member name="M:Infragistics.Windows.Resizing.IResizeHost.GetResizeCursor(System.Windows.FrameworkElement,System.Boolean,System.Windows.Input.Cursor)">
            <summary>
            Gets the cursor to use while the mouse is over a resizable border.
            </summary>
            <param name="resizableItem">The item that contains the ResizeContext</param>
            <param name="resizeInXAxis">True to resize the width and false to resize the height.</param>
            <param name="cursor">The normal default cursor for this type of a resize operation.</param>
            <returns>The cursor to display while the mouse is over the resize border.</returns>
        </member>
        <member name="M:Infragistics.Windows.Resizing.IResizeHost.InitializeResizeConstraints(System.Windows.FrameworkElement,System.Windows.FrameworkElement,Infragistics.Windows.Resizing.ResizeConstraints)">
            <summary>
            Called before a resize operation begins. 
            </summary>
            <param name="resizeArea">The element that defines the resize area.</param>
            <param name="resizableItem">The item to be resized</param>
            <param name="constraints">The constarints to apply to the resize operation.</param>
        </member>
        <member name="P:Infragistics.Windows.Resizing.IResizeHost.Controller">
            <summary>
            Returns the <see cref="T:Infragistics.Windows.Resizing.ResizeController"/> (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Resizing.IResizeHost.RootElement">
            <summary>
            Returns the root element which normally is the control itself (read-only).
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Resizing.IResizeHostMulti">
            <summary>
            Interface implemented by an element that contains resizable items that may support sizing of their contents in both dimensions at the same time.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Resizing.IResizeHostMulti.CanResizeInBothDimensions(System.Windows.FrameworkElement)">
            <summary>
            Determines if the resizing is allowed in both dimensions at the same time.
            </summary>
            <param name="resizableItem">The item that contains the ResizeContext</param>
            <returns>True if resizing in both dimensions is allowed.</returns>
        </member>
        <member name="M:Infragistics.Windows.Resizing.IResizeHostMulti.GetMultiResizeCursor(System.Windows.FrameworkElement,System.Windows.Input.Cursor)">
            <summary>
            Gets the cursor to use while the mouse is over the resize corner.
            </summary>
            <param name="resizableItem">The item that contains the ResizeContext</param>
            <param name="cursor">The normal default cursor for this type of a resize operation.</param>
            <returns>The cursor to display while the mouse is over the resize corner.</returns>
        </member>
        <member name="M:Infragistics.Windows.Resizing.IResizeHostMulti.ResizeBothDimensions(System.Windows.FrameworkElement,System.Double,System.Double)">
            <summary>
            Resizes the item in both dimensions.
            </summary>
            <param name="resizableItem">The item that contains the ResizeContext</param>
            <param name="deltaX">The resize delta in the x dimension in device-independent units (1/96th inch per unit).</param>
            <param name="deltaY">The resize delta in the x dimension in device-independent units (1/96th inch per unit).</param>
        </member>
        <member name="T:Infragistics.Windows.Resizing.IAutoResizeHost">
            <summary>
            Interface implemented by an element that contains resizable items that may support sizing to their contents.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Resizing.IAutoResizeHost.PerformAutoSize(System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            Invoked to resizes the specified item based on the size of its contents.
            </summary>
            <param name="resizableItem">The item that contains the ResizeContext</param>
            <param name="resizeInXAxis">True to resize the width and false to resize the height.</param>
            <returns>Returns true if the autosize was performed; otherwise false is returned.</returns>
        </member>
        <member name="T:Infragistics.Windows.Resizing.ResizeConstraints">
            <summary>
            An object that contains the contraints used during a resize operation.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Resizing.ResizeConstraints.#ctor(System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Windows.Resizing.ResizeConstraints"/> class
            </summary>
            <param name="resizerBar">The resizer bar</param>
            <param name="resizeArea">The resize area</param>
            <param name="resizeInXAxis">True if the element is being resized along the x-axis; otherwise false if the element is being resized along the y-axis.</param>
        </member>
        <member name="P:Infragistics.Windows.Resizing.ResizeConstraints.Cancel">
            <summary>
            If set to true will _cancel the operation
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Resizing.ResizeConstraints.MinExtent">
            <summary>
            The minimum extent allowed in device-independent units (1/96th inch per unit)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Resizing.ResizeConstraints.MaxExtent">
            <summary>
            The maximum extent allowed in device-independent units (1/96th inch per unit)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Resizing.ResizeConstraints.ResizeWhileDragging">
            <summary>
            If set to true will cause resizing while the mouse is being dragged
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Resizing.ResizeConstraints.ResizerBar">
            <summary>
            The resizer bar indicator (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Resizing.ResizeConstraints.ResizeArea">
            <summary>
            The resize area (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Resizing.ResizeConstraints.ResizeInXAxis">
            <summary>
            Indicates whether the element is being resized along the x or y axis (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Resizing.ResizeController">
            <summary>
            Controller object used for element resizing operations
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Resizing.ResizeController.#ctor(Infragistics.Windows.Resizing.IResizeHost)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Windows.Resizing.ResizeController"/> class
            </summary>
            <param name="host">The resize host</param>
            <seealso cref="T:Infragistics.Windows.Resizing.IResizeHost"/>
        </member>
        <member name="M:Infragistics.Windows.Resizing.ResizeController.CancelResize">
            <summary>
            Cancel any pending resize operations
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Resizing.ResizeController.PositionResizerBar">
            <summary>
            Called during arrange pass to position the resizer bar
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Resizing.ResizeController.Host">
            <summary>
            Returns the associated <see cref="T:Infragistics.Windows.Resizing.IResizeHost"/> (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Resizing.ResizeController.IsResizing">
            <summary>
            Returns true during a resize operation (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Resizing.ResizeController.ResizerBar">
            <summary>
            The resizer bar (read-only)
            </summary>
            <remarks>May return null is not resizing or if the resize constraints specify ResizeWhileDragging</remarks>
        </member>
        <member name="P:Infragistics.Windows.Resizing.ResizeController.ResizerBarWidth">
            <summary>
            Gets/sets the width of the resizer bar
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Resources">
            <summary>
            Exposes a <see cref="T:Infragistics.Shared.ResourceCustomizer"/> instance for this assembly. 
            </summary>
            <seealso cref="P:Infragistics.Windows.Resources.Customizer"/> 
            <seealso cref="T:Infragistics.Shared.ResourceCustomizer"/> 
        </member>
        <member name="M:Infragistics.Windows.Resources.GetString(System.String,System.Object[])">
            <summary>
            Returns the resource string using the specified name and default culture.
            </summary>
            <param name="name">Name of the string resource to return.</param>
            <param name="args">Arguments supplied to the string.Format method when formatting the string.</param>
        </member>
        <member name="M:Infragistics.Windows.Resources.GetString(System.String)">
            <summary>
            Returns the resource string using the specified resource name and default culture. The string is then formatted using the arguments specified.
            </summary>
            <param name="name">Name of the string resource to return.</param>
        </member>
        <member name="M:Infragistics.Windows.Resources.GetDynamicResourceString(System.String)">
            <summary>
            Returns a DynamicResourceString object that tracks customization changes to a resource and raises an event when the resource value is changed.
            </summary>
            <param name="name">Name of the string resource to return.</param>
            <returns>A <see cref="T:Infragistics.Shared.DynamicResourceString"/> object to track changes in the resource customizations.</returns>
            <seealso cref="T:Infragistics.Shared.ResourceCustomizer"/>
            <seealso cref="M:Infragistics.Shared.ResourceCustomizer.SetCustomizedString(System.String,System.String)"/>
            <seealso cref="M:Infragistics.Shared.ResourceCustomizer.ResetCustomizedString(System.String)"/>
            <seealso cref="M:Infragistics.Shared.ResourceCustomizer.ResetAllCustomizedStrings"/>
        </member>
        <member name="M:Infragistics.Windows.Resources.GetDynamicResourceString(System.String,System.Object[])">
            <summary>
            Returns a DynamicResourceString object that tracks customization changes to a resource and raises an event when the resource value is changed.
            </summary>
            <param name="name">Name of the string resource to return.</param>
            <param name="args">Arguments supplied to the string.Format method when formatting the string.</param>
            <returns>A <see cref="T:Infragistics.Shared.DynamicResourceString"/> object to track changes in the resource customizations.</returns>
            <seealso cref="T:Infragistics.Shared.ResourceCustomizer"/>
            <seealso cref="M:Infragistics.Shared.ResourceCustomizer.SetCustomizedString(System.String,System.String)"/>
            <seealso cref="M:Infragistics.Shared.ResourceCustomizer.ResetCustomizedString(System.String)"/>
            <seealso cref="M:Infragistics.Shared.ResourceCustomizer.ResetAllCustomizedStrings"/>
        </member>
        <member name="M:Infragistics.Windows.Resources.GetDynamicResourceString(System.String,System.Object[],System.Globalization.CultureInfo)">
            <summary>
            Returns a DynamicResourceString object that tracks customization changes to a resource and raises an event when the resource value is changed.
            </summary>
            <param name="name">Name of the string resource to return.</param>
            <param name="args">Arguments supplied to the string.Format method when formatting the string.</param>
            <param name="culture">Culture whose resource should loaded. The resource will go through a fallback process to locate the appropriate resources.</param>
            <returns>A <see cref="T:Infragistics.Shared.DynamicResourceString"/> object to track changes in the resource customizations.</returns>
            <seealso cref="T:Infragistics.Shared.ResourceCustomizer"/>
            <seealso cref="M:Infragistics.Shared.ResourceCustomizer.SetCustomizedString(System.String,System.String)"/>
            <seealso cref="M:Infragistics.Shared.ResourceCustomizer.ResetCustomizedString(System.String)"/>
            <seealso cref="M:Infragistics.Shared.ResourceCustomizer.ResetAllCustomizedStrings"/>
        </member>
        <member name="M:Infragistics.Windows.Resources.GetObject(System.String)">
            <summary>
            Returns the resource object using the specified name.
            </summary>
            <param name="name">Name of the resource item</param>
            <returns>An object containing the specified resource</returns>
        </member>
        <member name="P:Infragistics.Windows.Resources.Customizer">
            <summary>
            Returns the <see cref="T:Infragistics.Shared.ResourceCustomizer"/> for this assembly.
            </summary>
            <seealso cref="T:Infragistics.Shared.ResourceCustomizer"/> 
        </member>
        <member name="P:Infragistics.Windows.Resources.CloseButtonToolTip">
            <summary>
            Returns a <see cref="T:Infragistics.Shared.DynamicResourceString"/> instance that contains the localized resource for the tooltip of the close button in the <see cref="T:Infragistics.Windows.Controls.ToolWindow"/>
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Selection.SelectionController">
            <summary>
            Class used to route mouse messages to an appropriate <see cref="T:Infragistics.Windows.Selection.SelectionStrategyBase"/>
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionController.CancelPendingOperations">
            <summary>
            Called to cancel any pending mouse operations
            </summary>
            <returns>Returns true if successful.</returns>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionController.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when the left mouse button is pressed
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionController.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when the left mouse button is released
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionController.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when the mouse is moved
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="E:Infragistics.Windows.Selection.SelectionController.ActiveStrategyChanged">
            <summary>
            Raised when the <see cref="P:Infragistics.Windows.Selection.SelectionController.ActiveStrategy"/> has been changed.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Selection.ISelectionHost">
            <summary>
            This interface is implemented by controls that want to support selection. 
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Selection.ISelectionHost.ActivateItem(Infragistics.Windows.Selection.ISelectableItem,System.Boolean)">
            <summary>
            Activates the specified item.
            </summary>
            <param name="item">The selectable item</param>
            <param name="preventScrollItemIntoView">If true don't scroll the item into view.</param>
            <returns>Returns true if successful, otherwise false.</returns>
            <seealso cref="T:Infragistics.Windows.Selection.ISelectableItem"/>
        </member>
        <member name="M:Infragistics.Windows.Selection.ISelectionHost.ClearSnapshot">
            <summary>
            Clears the selection snapshot 
            </summary>
            <seealso cref="M:Infragistics.Windows.Selection.ISelectionHost.SnapshotSelection(Infragistics.Windows.Selection.ISelectableItem)"/>
        </member>
        <member name="M:Infragistics.Windows.Selection.ISelectionHost.DeselectItem(Infragistics.Windows.Selection.ISelectableItem)">
            <summary>
            De-select the specified item.
            </summary>
            <param name="item">The item to de-select.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Infragistics.Windows.Selection.ISelectionHost.DeselectRange(Infragistics.Windows.Selection.ISelectableItem)">
            <summary>
            De-select the range from the pivot item to the specified item.
            </summary>
            <param name="item">The item to de-select.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Infragistics.Windows.Selection.ISelectionHost.DoAutoScrollHorizontal(Infragistics.Windows.Selection.ISelectableItem,Infragistics.Windows.Selection.ScrollDirection,Infragistics.Windows.Selection.ScrollSpeed)">
            <summary>
            Perform a horizontal autoscroll operation
            </summary>
            <param name="item">The item that triggered the scroll operation</param>
            <param name="direction">The direction to scroll.</param>
            <param name="speed">The scroll speed.</param>
        </member>
        <member name="M:Infragistics.Windows.Selection.ISelectionHost.DoAutoScrollVertical(Infragistics.Windows.Selection.ISelectableItem,Infragistics.Windows.Selection.ScrollDirection,Infragistics.Windows.Selection.ScrollSpeed)">
            <summary>
            Perform a vertical autoscroll operation
            </summary>
            <param name="item">The item that triggered the scroll operation</param>
            <param name="direction">The direction to scroll.</param>
            <param name="speed">The scroll speed.</param>
        </member>
        <member name="M:Infragistics.Windows.Selection.ISelectionHost.EnterSnakingMode(Infragistics.Windows.Selection.ISelectableItem)">
            <summary>
            Used to tell the host to enter snaking mode if appropriate for the item type being selected. 
            </summary>
            <param name="item"></param>
            <remarks>Snaking refers to range selection where the items being selected 
            form a snaking pattern instead of a rectangular pattern. For eample, if in 
            a grid that contained 5 columns the user was selecting a range of cells
            from different rows, the selection could be either rectangular or snake 
            from row to row in which case all cells from intervening rows would get selected.
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Selection.ISelectionHost.GetAutoScrollInfo(Infragistics.Windows.Selection.ISelectableItem)">
            <summary>
            Gets the potential auto scroll information.
            </summary>
            <param name="item">The selectable item.</param>
            <returns>An <see cref="T:Infragistics.Windows.Selection.AutoScrollInfo"/> struct that contains information about the possible auto scroll possibilies.</returns>
        </member>
        <member name="M:Infragistics.Windows.Selection.ISelectionHost.GetNearestCompatibleItem(Infragistics.Windows.Selection.ISelectableItem,System.Windows.Input.MouseEventArgs)">
            <summary>
            Returns the <see cref="T:Infragistics.Windows.Selection.ISelectableItem"/> compatible with the specified item that
            is nearest to the point identied by the mouse event args.
            </summary>
            <param name="item">The selectable item.</param>
            <param name="e">The mouse event arguments</param>
        </member>
        <member name="M:Infragistics.Windows.Selection.ISelectionHost.GetPivotItem(Infragistics.Windows.Selection.ISelectableItem)">
            <summary>
            Returns the <see cref="T:Infragistics.Windows.Selection.ISelectableItem"/> that is the pivot item based on the type
            of item passed-in.
            </summary>
            <param name="item"></param>
            <returns>The current pivot item or null.</returns>
        </member>
        <member name="M:Infragistics.Windows.Selection.ISelectionHost.GetSelectionStrategyForItem(Infragistics.Windows.Selection.ISelectableItem)">
            <summary>
            Returns the selection strateg for a specific item.
            </summary>
            <param name="item">The selectable item.</param>
            <returns>The <see cref="T:Infragistics.Windows.Selection.SelectionStrategyBase"/> for this item type or null.</returns>
        </member>
        <member name="M:Infragistics.Windows.Selection.ISelectionHost.IsItemSelectableWithCurrentSelection(Infragistics.Windows.Selection.ISelectableItem)">
            <summary>
            Returns true if the item can be selected without first clearing the current selection.
            </summary>
            <param name="item">The item to select.</param>
            <returns><b>True</b> if the item is selectable with current selection, <b>false</b> otherwise.</returns>
            <seealso cref="T:Infragistics.Windows.Selection.ISelectableItem"/>
        </member>
        <member name="M:Infragistics.Windows.Selection.ISelectionHost.IsMaxSelectedItemsReached(Infragistics.Windows.Selection.ISelectableItem)">
            <summary>
            Returns true if selecting this item will exceed the maximum allowed.
            </summary>
            <param name="item"><see cref="T:Infragistics.Windows.Selection.ISelectableItem"/>The selectable item</param>
            <returns>True if the maximum number of items has already been selected.</returns>
        </member>
        <member name="M:Infragistics.Windows.Selection.ISelectionHost.OnDragStart(Infragistics.Windows.Selection.ISelectableItem,System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when a dragging operation is about to begin.
            </summary>
            <param name="item">The selectable item</param>
            <param name="e">The mouse event arguments</param>
            <returns>Returning true means that the drag operation started successfully.</returns>
        </member>
        <member name="M:Infragistics.Windows.Selection.ISelectionHost.OnDragMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Called on a mouse move during a dragging operation
            </summary>
            <param name="e">The mouse event arguments</param>
        </member>
        <member name="M:Infragistics.Windows.Selection.ISelectionHost.OnDragEnd(System.Boolean)">
            <summary>
            Called at the end of a dragging operation
            </summary>
            <param name="canceled"><b>True</b> if the drag was cancelled, <b>false</b> otherwise.</param>
        </member>
        <member name="M:Infragistics.Windows.Selection.ISelectionHost.OnMouseUp(System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when the mouse is released.
            </summary>
            <param name="e">The mouse event arguments</param>
        </member>
        <member name="M:Infragistics.Windows.Selection.ISelectionHost.SelectItem(Infragistics.Windows.Selection.ISelectableItem,System.Boolean)">
            <summary>
            Select the specified item.
            </summary>
            <param name="item">The item to select.</param>
            <param name="clearExistingSelection">True to clear the current selection.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Infragistics.Windows.Selection.ISelectionHost.SelectRange(Infragistics.Windows.Selection.ISelectableItem,System.Boolean)">
            <summary>
            Select the range from the pivot item to the specified item.
            </summary>
            <param name="item">The item to select.</param>
            <param name="clearExistingSelection">True to clear the current selection.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Infragistics.Windows.Selection.ISelectionHost.SetPivotItem(Infragistics.Windows.Selection.ISelectableItem,System.Boolean)">
            <summary>
            Set the specified item as the pivot item. 
            </summary>
            <param name="item"></param>
            <param name="isRangeSelect">True if this is part of a range selection.</param>
        </member>
        <member name="M:Infragistics.Windows.Selection.ISelectionHost.SnapshotSelection(Infragistics.Windows.Selection.ISelectableItem)">
            <summary>
            Snapshots the current selection 
            </summary>
            <param name="item">The item to use to determine the which selection to snapshot.</param>
            <remarks>
            The 'item' parameter is necessary for controls that support selection of multiple item types.
            For example, the DataPresenter supports selection of Records, FieldLabels and Cells.
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Selection.ISelectionHost.TranslateItem(Infragistics.Windows.Selection.ISelectableItem)">
            <summary>
            Potentially translates the passed-in item to an <see cref="T:Infragistics.Windows.Selection.ISelectableItem"/> of a
            different type.  For instance, the DataPresenter translates a passed-in cell 
            into its parent DataRecord if record selection is specified.
            </summary>
            <param name="item">The item to translate</param>
            <returns>The translated item.</returns>
        </member>
        <member name="P:Infragistics.Windows.Selection.ISelectionHost.RootElement">
            <summary>
            Returns the root element which normally is the control itself (read-only).
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Selection.ISelectableElement">
            <summary>
            Interface implemented by elements that represent selectable items (e.g. rows, cells, headers, nodes etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Selection.ISelectableElement.SelectableItem">
            <summary>
            Returns the associated <see cref="T:Infragistics.Windows.Selection.ISelectableItem"/> (read-only).
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Selection.ISelectionStrategyFilter">
            <summary>
            Interface implemented by the user of a control to supply
            custom selection strategies.
            </summary>
            <seealso cref="T:Infragistics.Windows.Selection.SelectionStrategyBase"/>
        </member>
        <member name="M:Infragistics.Windows.Selection.ISelectionStrategyFilter.GetSelectionStrategyForItem(Infragistics.Windows.Selection.ISelectableItem)">
            <summary>
            Called to get the selection strategy for a specific
            item. Returning null means that the control will supply
            its own implementation.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Selection.ScrollSpeed">
            <summary>
            Determines how fast a slection scroll should be
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Selection.ScrollSpeed.Slowest">
            <summary>
            Scroll the slowest
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Selection.ScrollSpeed.Slower">
            <summary>
            Scroll slower
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Selection.ScrollSpeed.Slow">
            <summary>
            Scroll slowly
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Selection.ScrollSpeed.Medium">
            <summary>
            Scroll a moderate amount
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Selection.ScrollSpeed.Fast">
            <summary>
            Scroll fast
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Selection.ScrollSpeed.Faster">
            <summary>
            Scroll faster
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Selection.ScrollSpeed.Fastest">
            <summary>
            Scroll fastest
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Selection.ScrollDirection">
            <summary>
            Determines what direction to scroll
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Selection.ScrollDirection.Increment">
            <summary>
            Increment the scroll value
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Selection.ScrollDirection.Decrement">
            <summary>
            Decrement the scrcoll value
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Selection.ScrollOrientation">
            <summary>
            Enumeration used to identify the orientation in which the auto scroll logic should scroll if the 
            mouse is positioned outside the element such that the element can be scroll both horizontally 
            and vertically.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Selection.ScrollOrientation.Both">
            <summary>
            The auto scroll logic should scroll both horizontally and vertically.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Selection.ScrollOrientation.Horizontal">
            <summary>
            The auto scroll logic should prefer scrolling horizontally regardless of the distance between the mouse and the element bounds.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Selection.ScrollOrientation.Vertical">
            <summary>
            The auto scroll logic should prefer scrolling vertically regardless of the distance between the mouse and the element bounds.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Selection.ScrollOrientation.BasedOnDistance">
            <summary>
            The auto scroll logic should prefer scrolling in the direction in which the mouse is furthest from the element.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Selection.AutoScrollInfo">
            <summary>
            Struct that returns information used by the auto scroll logic to determine if auto scrolling is possible
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Selection.AutoScrollInfo.#ctor(System.Windows.FrameworkElement,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Windows.Selection.AutoScrollInfo"/> struct
            </summary>
            <param name="scrollArea">The element that defines the scroll bounds</param>
            <param name="canScrollDown">True if a scroll down is possible.</param>
            <param name="canScrollLeft">True if a scroll left is possible.</param>
            <param name="canScrollRight">True if a scroll right is possible.</param>
            <param name="canScrollUp">True if a scroll up is possible.</param>
        </member>
        <member name="P:Infragistics.Windows.Selection.AutoScrollInfo.CanScrollDown">
            <summary>
            Returns true if a scroll down is possible (read-only).  
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Selection.AutoScrollInfo.CanScrollLeft">
            <summary>
            Returns true if a scroll left is possible (read-only).  
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Selection.AutoScrollInfo.CanScrollRight">
            <summary>
            Returns true if a scroll right is possible (read-only).  
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Selection.AutoScrollInfo.CanScrollUp">
            <summary>
            Returns true if a scroll up is possible (read-only).  
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Selection.AutoScrollInfo.ScrollArea">
            <summary>
            Returns the element that defines the scroll bounds (read-only). 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Selection.AutoScrollInfo.ScrollOrientation">
            <summary>
            Returns or sets a value that indicates how the direction in which the auto scroll 
            logic should execute when it is possible to scroll both horizontally and vertically.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Selection.SelectionStrategyBase">
            <summary>
            Abstract base class for selection strategies
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategyBase.#ctor(Infragistics.Windows.Selection.ISelectionHost)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Windows.Selection.SelectionStrategyBase"/> class
            </summary>
            <param name="selectionHost">The selection host for which the selection strategy will interact</param>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategyBase.CancelPendingOperations">
            <summary>
            Called to cancel any pending mouse drag operation
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategyBase.CanItemBeNavigatedTo(Infragistics.Windows.Selection.ISelectableItem,System.Boolean,System.Boolean)">
            <summary>
            Determines if a <see cref="T:Infragistics.Windows.Selection.ISelectableItem"/> can be navigated to.
            </summary>
            <param name="item">The selectable item</param>
            <param name="shiftKeyDown"><b>true</b> if shift key is depressed.</param>
            <param name="controlKeyDown"><b>true</b> if Ctrl key is depressed.</param>
            <returns>True if the itme can be navigated to.</returns>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategyBase.GetSelectionStrategy(Infragistics.Windows.Controls.SelectionType,Infragistics.Windows.Selection.ISelectionHost,Infragistics.Windows.Selection.SelectionStrategyBase)">
            <summary>
            Returns one of the built in <see cref="T:Infragistics.Windows.Selection.SelectionStrategyBase"/> derived classes based on the specified <see cref="T:Infragistics.Windows.Controls.SelectionType"/>
            </summary>
            <param name="type">An enum indicating the type of selection strategy that should be returned.</param>
            <param name="host">The <see cref="T:Infragistics.Windows.Selection.ISelectionHost"/> for which the selection strategy is being created</param>
            <param name="oldStrategy">The previous strategy that was used by the host or null if the host was not associated with a selection strategy</param>
            <returns>If the <paramref name="oldStrategy"/> is of the appropriate type and its <see cref="P:Infragistics.Windows.Selection.SelectionStrategyBase.SelectionHost"/> is <paramref name="host"/>, that instance will be returned. Otherwise, a new <see cref="T:Infragistics.Windows.Selection.SelectionStrategyBase"/> derived class will be created based on the <paramref name="type"/> and using the specified <paramref name="host"/> as its <b>SelectionHost</b>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="host"/> is a null reference (<b>Nothing</b> in Visual Basic)</exception>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategyBase.IsMultiSelectStrategy(Infragistics.Windows.Controls.SelectionType)">
            <summary>
            Returns a boolean indicating if the default <see cref="T:Infragistics.Windows.Selection.SelectionStrategyBase"/> for a given <see cref="T:Infragistics.Windows.Controls.SelectionType"/> allows multiple selection.
            </summary>
            <param name="selectionType">The selection type to evaluate</param>
            <returns>True for selection types such as <b>Extended</b> and <b>Range</b>; false for types such as <b>Single</b> and <b>None</b>.</returns>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategyBase.IsSingleSelectStrategy(Infragistics.Windows.Controls.SelectionType)">
            <summary>
            Returns a boolean indicating if the default <see cref="T:Infragistics.Windows.Selection.SelectionStrategyBase"/> for a given <see cref="T:Infragistics.Windows.Controls.SelectionType"/> is used to perform single item selection.
            </summary>
            <param name="selectionType">The selection type to evaluate</param>
            <returns>True for selection types such as <b>Single</b>; false for types such as <b>Extended</b> and <b>None</b>.</returns>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategyBase.OnMouseLeftButtonDown(Infragistics.Windows.Selection.ISelectableItem,System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when a left mouse down is received. 
            </summary>
            <param name="item">The selectable item that the mouse is over (may be null)</param>
            <param name="e">The mouse event args</param>
            <returns>Returning true on a mouse down message will cause the mouse to be captured</returns>
            <remarks>
            Note: The <see cref="M:Infragistics.Windows.Selection.SelectionStrategyBase.OnMouseMove(Infragistics.Windows.Selection.ISelectableItem,System.Windows.Input.MouseEventArgs)"/> and <see cref="M:Infragistics.Windows.Selection.SelectionStrategyBase.OnMouseLeftButtonUp(Infragistics.Windows.Selection.ISelectableItem,System.Windows.Input.MouseEventArgs)"/> 
            methods are called only if this method returns true and thereby captured the mouse.
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategyBase.OnMouseMove(Infragistics.Windows.Selection.ISelectableItem,System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when mouse move message is received. 
            </summary>
            <param name="item">The selectable item that the mouse is over (may be null)</param>
            <param name="e">The mouse event args</param>
            <returns>Returning false on a mouse down message will cause the mouse to be released.</returns>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategyBase.OnMouseLeftButtonUp(Infragistics.Windows.Selection.ISelectableItem,System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when a left mouse up is received while the mouse is captured. 
            </summary>
            <param name="item">The selectable item that the mouse is over (may be null)</param>
            <param name="e">The mouse event args</param>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategyBase.SelectItemViaKeyboard(Infragistics.Windows.Selection.ISelectableItem,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Called to select an item as a result of a key press
            </summary>
            <param name="item">The item to select</param>
            <param name="shiftKeyDown">True if the shift key is pressed</param>
            <param name="controlKeyDown">True if the control key is pressed.</param>
            <param name="forceToggle">Toggle the existing selection.</param>
            <returns>True is successful.</returns>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategyBase.DragMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Used to verify the drag timers and call the <see cref="M:Infragistics.Windows.Selection.ISelectionHost.OnDragMove(System.Windows.Input.MouseEventArgs)"/> 
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategyBase.DragStart(System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when dragging is to be started.
            It calls OnDragStart off the SelectionManager.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategyBase.GetMousePointInRootElementCoordinates(System.Windows.Input.MouseEventArgs)">
            <summary>
            Returns a point in RootElement coordinates that corresponds to the mouse position contained in mouseEventArgs.
            </summary>
            <param name="mouseEventArgs"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategyBase.ManageTimers(System.Windows.Input.MouseEventArgs)">
            <summary>
            Determines during a drag operation whether timers
            are required to generate horizontal or vertical scrolling.
            </summary>
            <param name="mouseEventArgs">The mouse event args</param>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategyBase.OnDragStartCanceled">
            <summary>
            This method is called when the selection manager cancels OnDragStart. Default implementation releases the capture.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategyBase.ShouldStartDrag(System.Double,System.Double)">
            <summary>
            Returns true if dragging should start (when we're in preDrag mode).
            The default implementation checks to see if the x or y coords exceed
            the drag threshold.
            </summary>
            <param name="x">x position</param>
            <param name="y">y position</param>
            <returns><b>True</b> if should start drag, false otherwise.</returns>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategyBase.StopHorizontalAutoScrollTimer">
            <summary>
            Stops the timer used for horizontal auto scrolling.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategyBase.StopVerticalAutoScrollTimer">
            <summary>
            Stops the timer used for vertical auto scrolling.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Selection.SelectionStrategyBase.IsMultiSelect">
            <summary>
            True if this strategy supports selecting more than one 
            item at a time (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Selection.SelectionStrategyBase.IsSingleSelect">
            <summary>
            True if this strategy supports selecting only one 
            item at a time (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Selection.SelectionStrategyBase.IsReleasingMouseCapture">
            <summary>
            True while the mouse capture is being toggled off (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Selection.SelectionStrategyBase.AutoScrollHorizontalIntervalMax">
            <summary>
            Returns the number of milliseconds between consecutive horizontal auto scrolls when
            auto scrolling at the slowest rate.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Selection.SelectionStrategyBase.AutoScrollHorizontalIntervalMin">
            <summary>
            Returns the number of milliseconds between consecutive horizontal auto scrolls when
            auto scrolling at the fastest rate.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Selection.SelectionStrategyBase.AutoScrollVerticalIntervalMax">
            <summary>
            Returns the number of milliseconds between consecutive vertical auto scrolls when
            auto scrolling at the slowest rate.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Selection.SelectionStrategyBase.AutoScrollVerticalIntervalMin">
            <summary>
            Returns the number of milliseconds between consecutive vertical auto scrolls when
            auto scrolling at the fastest rate.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Selection.SelectionStrategyBase.AutoScrollTimerDispatcherPriority">
            <summary>
            Returns the dispatcher priority for the autoscroll timers
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Selection.SelectionStrategyBase.CurrentSelectableItem">
            <summary>
            Returns/sets the current selectable item for the strategy.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Selection.SelectionStrategyBase.CurrentSelectionState">
            <summary>
            Returns/sets the current state of the selection for the strategy.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Selection.SelectionStrategyBase.DragThreshold">
            <summary>
            Returns a value which represents the amount that the mouse must move from the inital MouseDown
            position before dragging will start.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Selection.SelectionStrategyBase.IgnoreNextMouseMove">
            <summary>
            Returns/sets whether the next mouse move should be ignored.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Selection.SelectionStrategyBase.InDragMode">
            <summary>
            Returns/sets whether the strategy is currently in drag mode.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Selection.SelectionStrategyBase.InitialXPos">
            <summary>
            Returns/sets the X coordinate of the mouse when the initial MouseDown was received.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Selection.SelectionStrategyBase.InitialYPos">
            <summary>
            Returns/sets the Y coordinate of the mouse when the initial MouseDown was received.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Selection.SelectionStrategyBase.IsAnyMouseButtonDown">
            <summary>
            Returns true if any mouse button is currently pressed.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Selection.SelectionStrategyBase.IsCtrlKeyPressed">
            <summary>
            Returns true if the CTRK key is currently pressed.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Selection.SelectionStrategyBase.IsLeftMouseButtonDown">
            <summary>
            Returns true if the left mouse button is currently pressed
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Selection.SelectionStrategyBase.IsShiftKeyPressed">
            <summary>
            Returns true if the shift key is currently pressed.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Selection.SelectionStrategyBase.PixelThresholdForHorizontalAutoScroll">
            <summary>
            Returns the number of pixels inside the left or right edge of the ScrollArea within which
            auto scrolling will take place
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Selection.SelectionStrategyBase.PixelThresholdForVerticalAutoScroll">
            <summary>
            Returns the number of pixels inside the top or bottom edge of the ScrollArea within which
            auto scrolling will take place
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Selection.SelectionStrategyBase.SelectionHost">
            <summary>
            Returns the SelectionHost (usually the control) for the strategy.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Selection.SelectionStrategyBase.SelectionState">
            <summary>
            The potential selection states of the strategy.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Selection.SelectionStrategyBase.SelectionState.SingleSelect">
            <summary>
            Currently in single selection state.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Selection.SelectionStrategyBase.SelectionState.PreDrag">
            <summary>
            Currently in pre-drag state.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Selection.SelectionStrategyBase.SelectionState.PreEdit">
            <summary>
            Currently in pre-edit state.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Selection.SelectionStrategyBase.SelectionState.PotentialPreDrag">
            <summary>
            Currently in potential pre-drag state.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Selection.SelectionStrategyBase.SelectionState.ExtSelect">
            <summary>
            Currently in extSelect state.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Selection.SelectionStrategyBase.SelectionState.ControlClick">
            <summary>
            Currently in ControlClick state.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Selection.SelectionStrategyBase.AutoScrollManager">
            <summary>
            Class that calcualtes and manages info about autoscrolling.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategyBase.AutoScrollManager.#ctor(Infragistics.Windows.Selection.SelectionStrategyBase,Infragistics.Windows.Selection.AutoScrollInfo,System.Windows.Input.MouseEventArgs,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Windows.Selection.SelectionStrategyBase.AutoScrollManager"/> class
            </summary>
            <param name="selectionStrategy">The associated selection strategy</param>
            <param name="autoScrollInfo">Provides information about what type of scrolling is possible</param>
            <param name="mouseEventArgs">The associated mouse event arguments from the mouse event for which the <b>AutoScrollManager</b> is being created</param>
            <param name="directionIsVertical">True if the manager will be dealing with vertical scrolling; otherwise false for horizontal scrolling.</param>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategyBase.AutoScrollManager.GetScrollSpeedFromTimerInterval(System.Double)">
            <summary>
            Returns a ScrollSpeed enum value based on the supplied timer interval and the min and max timer intervals.
            </summary>
            <param name="timerInterval"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Windows.Selection.SelectionStrategyBase.AutoScrollManager.IsScrollingRequired">
            <summary>
            Returns true if scrolling is required.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Selection.SelectionStrategyBase.AutoScrollManager.ScrollDirection">
            <summary>
            Returns the direction for the AutoScroll.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Selection.SelectionStrategyBase.AutoScrollManager.ScrollSpeed">
            <summary>
            Returns the speed of the AutoScroll
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Selection.SelectionStrategyBase.AutoScrollManager.TimerInterval">
            <summary>
            Returns the interval to use for the AutoScroll timer (in milliseconds).
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Selection.SelectionStrategySingle">
            <summary>
            Selection strategy for selecting one item at a time.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategySingle.#ctor(Infragistics.Windows.Selection.ISelectionHost)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Windows.Selection.SelectionStrategySingle"/> class
            </summary>
            <param name="selectionHost">The selection host for which the selection strategy will interact</param>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategySingle.OnMouseLeftButtonDown(Infragistics.Windows.Selection.ISelectableItem,System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when a left mouse down is received. 
            </summary>
            <param name="item">The selectable item that the mouse is over (may be null)</param>
            <param name="e">The mouse event args</param>
            <returns>Returning true on a mouse down message will cause the mouse to be captured</returns>
            <remarks>
            Note: The <see cref="M:Infragistics.Windows.Selection.SelectionStrategySingle.OnMouseMove(Infragistics.Windows.Selection.ISelectableItem,System.Windows.Input.MouseEventArgs)"/> and <see cref="M:Infragistics.Windows.Selection.SelectionStrategySingle.OnMouseLeftButtonUp(Infragistics.Windows.Selection.ISelectableItem,System.Windows.Input.MouseEventArgs)"/> 
            methods are called only if this method returns true and thereby captured the mouse.
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategySingle.OnMouseMove(Infragistics.Windows.Selection.ISelectableItem,System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when mouse move message is received. 
            </summary>
            <param name="item">The selectable item that the mouse is over (may be null)</param>
            <param name="e">The mouse event args</param>
            <returns>Returning false on a mouse down message will cause the mouse to be released.</returns>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategySingle.OnMouseLeftButtonUp(Infragistics.Windows.Selection.ISelectableItem,System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when a left mouse up is received while the mouse is captured. 
            </summary>
            <param name="item">The selectable item that the mouse is over (may be null)</param>
            <param name="e">The mouse event args</param>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategySingle.SelectItemViaKeyboard(Infragistics.Windows.Selection.ISelectableItem,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Called to select an item as a result of a key press
            </summary>
            <param name="item">The item to select</param>
            <param name="shiftKeyDown">True if the shift key is pressed</param>
            <param name="controlKeyDown">True if the control key is pressed.</param>
            <param name="forceToggle">Toggle the existing selection.</param>
            <returns>True is successful.</returns>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategySingle.ProcessMouseLeftButtonDown(Infragistics.Windows.Selection.ISelectableItem,System.Windows.Input.MouseEventArgs,System.Boolean)">
            <summary>
            OnMouseDown handler that takes a third parameter that specifies whether
            we are forcing a drag or not.  SelectionStrategySingleAutoDrag passes
            true to this.
            </summary>
            <param name="item">The selectable item that the mouse is over (may be null) <see cref="T:Infragistics.Windows.Selection.ISelectableItem"/></param>
            <param name="e">The mouse event args</param>
            <param name="forceDrag"><b>true</b> if a drag should be forced</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategySingle.SelectItemAtPoint(System.Windows.Input.MouseEventArgs)">
            <summary>
            Selects the item at or nearest the mouse location
            </summary>
            <param name="mouseEventArgs">The MouseEventArgs from the most recent mouse event</param>
        </member>
        <member name="P:Infragistics.Windows.Selection.SelectionStrategySingle.IsSingleSelect">
            <summary>
            True if this strategy supports selecting only one 
            item at a time (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Selection.SelectionStrategySingle.ShouldSelectOnDrag">
            <summary>
            Returns whether selection should be modified when the cursor passes over
            a different item than the selected one. The default implementation returns true.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Selection.SelectionStrategyNone">
            <summary>
            Selection strategy for preventing selection of items in the associated selection host.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategyNone.#ctor(Infragistics.Windows.Selection.ISelectionHost)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Windows.Selection.SelectionStrategyNone"/> class
            </summary>
            <param name="selectionHost">The selection host for which the selection strategy will interact</param>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategyNone.OnMouseLeftButtonDown(Infragistics.Windows.Selection.ISelectableItem,System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when a left mouse down is received. 
            </summary>
            <param name="item">The selectable item that the mouse is over (may be null)</param>
            <param name="e">The mouse event args</param>
            <returns>Returning true on a mouse down message will cause the mouse to be captured</returns>
            <remarks>
            Note: The <see cref="M:Infragistics.Windows.Selection.SelectionStrategyNone.OnMouseMove(Infragistics.Windows.Selection.ISelectableItem,System.Windows.Input.MouseEventArgs)"/> and <see cref="M:Infragistics.Windows.Selection.SelectionStrategyNone.OnMouseLeftButtonUp(Infragistics.Windows.Selection.ISelectableItem,System.Windows.Input.MouseEventArgs)"/> 
            methods are called only if this method returns true and thereby captured the mouse.
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategyNone.OnMouseMove(Infragistics.Windows.Selection.ISelectableItem,System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when mouse move message is received. 
            </summary>
            <param name="item">The selectable item that the mouse is over (may be null)</param>
            <param name="e">The mouse event args</param>
            <returns>Returning false on a mouse down message will cause the mouse to be released.</returns>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategyNone.OnMouseLeftButtonUp(Infragistics.Windows.Selection.ISelectableItem,System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when a left mouse up is received while the mouse is captured. 
            </summary>
            <param name="item">The selectable item that the mouse is over (may be null)</param>
            <param name="e">The mouse event args</param>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategyNone.SelectItemViaKeyboard(Infragistics.Windows.Selection.ISelectableItem,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Called to select an item as a result of a key press
            </summary>
            <param name="item">The item to select</param>
            <param name="shiftKeyDown">True if the shift key is pressed</param>
            <param name="controlKeyDown">True if the control key is pressed.</param>
            <param name="forceToggle">Toggle the existing selection.</param>
            <returns>True is successful.</returns>
        </member>
        <member name="T:Infragistics.Windows.Selection.SelectionStrategyExtended">
            <summary>
            Selection strategy used for selecting multiple items. The selection does not have to be contiguous.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategyExtended.#ctor(Infragistics.Windows.Selection.ISelectionHost)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Windows.Selection.SelectionStrategyExtended"/> class
            </summary>
            <param name="selectionHost">The selection host for which the selection strategy will interact</param>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategyExtended.CanItemBeNavigatedTo(Infragistics.Windows.Selection.ISelectableItem,System.Boolean,System.Boolean)">
            <summary>
            Returns true if item can be selected.
            </summary>
            <param name="item"><see cref="T:Infragistics.Windows.Selection.ISelectableItem"/>Selected item</param>
            <param name="shiftKeyDown"><b>true</b> if shift key is down</param>
            <param name="controlKeyDown"><b>true</b> if shift key is down</param>
            <returns><b>true</b> if item can be selected</returns>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategyExtended.OnDragStartCanceled">
            <summary>
            This method is called when the selection manager cancels OnDragStart. The default implementation
            releases the capture.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategyExtended.OnMouseLeftButtonDown(Infragistics.Windows.Selection.ISelectableItem,System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when a left mouse down is received. 
            </summary>
            <param name="item">The selectable item that the mouse is over (may be null)</param>
            <param name="e">The mouse event args</param>
            <returns>Returning true on a mouse down message will cause the mouse to be captured</returns>
            <remarks>
            Note: The <see cref="M:Infragistics.Windows.Selection.SelectionStrategyExtended.OnMouseMove(Infragistics.Windows.Selection.ISelectableItem,System.Windows.Input.MouseEventArgs)"/> and <see cref="M:Infragistics.Windows.Selection.SelectionStrategyExtended.OnMouseLeftButtonUp(Infragistics.Windows.Selection.ISelectableItem,System.Windows.Input.MouseEventArgs)"/> 
            methods are called only if this method returns true and thereby captured the mouse.
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategyExtended.OnMouseMove(Infragistics.Windows.Selection.ISelectableItem,System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when mouse move message is received. 
            </summary>
            <param name="item">The selectable item that the mouse is over (may be null)</param>
            <param name="e">The mouse event args</param>
            <returns>Returning false on a mouse down message will cause the mouse to be released.</returns>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategyExtended.OnMouseLeftButtonUp(Infragistics.Windows.Selection.ISelectableItem,System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when a left mouse up is received while the mouse is captured. 
            </summary>
            <param name="item">The selectable item that the mouse is over (may be null)</param>
            <param name="e">The mouse event args</param>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategyExtended.SelectItemViaKeyboard(Infragistics.Windows.Selection.ISelectableItem,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Called to select an item as a result of a key press
            </summary>
            <param name="item">The item to select</param>
            <param name="shiftKeyDown">True if the shift key is pressed</param>
            <param name="controlKeyDown">True if the control key is pressed.</param>
            <param name="forceToggle">Toggle the existing selection.</param>
            <returns>True is successful.</returns>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategyExtended.ProcessMouseLeftButtonDown(Infragistics.Windows.Selection.ISelectableItem,System.Windows.Input.MouseEventArgs,System.Boolean)">
            <summary>
            OnMouseDown handler that takes a third parameter that specifies whether
            we are forcing a drag or not.  SelectionStrategySingleAutoDrag passes
            true to this.
            </summary>
            <param name="item">The selectable item that the mouse is over (may be null) <see cref="T:Infragistics.Windows.Selection.ISelectableItem"/></param>
            <param name="e">The mouse event args</param>
            <param name="forceDrag"><b>true</b> if a drag should be forced</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategyExtended.StartDragDelayTimer">
            <summary>
            Starts the timer used to ensure a delay period before dragging starts.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategyExtended.StopDragDelayTimer">
            <summary>
            Stops the timer used to ensure a delay period before dragging starts.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Selection.SelectionStrategyExtended.IsMultiSelect">
            <summary>
            Returns true if only a single item can be selected 
            at any given time 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Selection.SelectionStrategyExtended.IsDiscontiguousAllowed">
            <summary>
            Returns true if discontinuous selection is allowed 
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Selection.SelectionStrategyExtended.DragDelayTimerDispatcherPriority">
            <summary>
            Returns the dispatcher priority for the drag delay timer
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Selection.SelectionStrategyExtended.DragDelayTimerInterval">
            <summary>
            Returns the interval for the drag delay timer in milliseconds.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Selection.SelectionStrategyExtended.ShouldSelect">
            <summary>
            Returns true if the strategy should select, or false if it should unselect.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Selection.SelectionStrategyContiguous">
            <summary>
            Selection strategy used for selecting multiple items where the selection should not be contiguous.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategyContiguous.#ctor(Infragistics.Windows.Selection.ISelectionHost)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Selection.SelectionStrategyContiguous"/>
            </summary>
            <param name="selectionHost">The selection host for which the selection strategy will interact</param>
        </member>
        <member name="P:Infragistics.Windows.Selection.SelectionStrategyContiguous.IsDiscontiguousAllowed">
            <summary>
            Returns true if discontinuous selection is allowed 
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Selection.SelectionStrategyExtendedAutoDrag">
            <summary>
            Selection strategy for selecting multiple items that can initiate a drag on the mouse down.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategyExtendedAutoDrag.#ctor(Infragistics.Windows.Selection.ISelectionHost)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Selection.SelectionStrategyExtendedAutoDrag"/>
            </summary>
            <param name="selectionHost">The selection host for which the selection strategy will interact</param>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategyExtendedAutoDrag.OnMouseLeftButtonDown(Infragistics.Windows.Selection.ISelectableItem,System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when a left mouse down is received. 
            </summary>
            <param name="item">The selectable item that the mouse is over (may be null)</param>
            <param name="e">The mouse event args</param>
            <returns>Returning true on a mouse down message will cause the mouse to be captured</returns>
        </member>
        <member name="T:Infragistics.Windows.Selection.SelectionStrategySingleAutoDrag">
            <summary>
            Selection strategy for selecting a single item that can initiate a drag on the mouse down.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategySingleAutoDrag.#ctor(Infragistics.Windows.Selection.ISelectionHost)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Selection.SelectionStrategySingleAutoDrag"/>
            </summary>
            <param name="selectionHost">The selection host for which the selection strategy will interact</param>
        </member>
        <member name="M:Infragistics.Windows.Selection.SelectionStrategySingleAutoDrag.OnMouseLeftButtonDown(Infragistics.Windows.Selection.ISelectableItem,System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when a left mouse down is received. 
            </summary>
            <param name="item">The selectable item that the mouse is over (may be null)</param>
            <param name="e">The mouse event args</param>
            <returns>Returning true on a mouse down message will cause the mouse to be captured</returns>
        </member>
        <member name="P:Infragistics.Windows.Selection.SelectionStrategySingleAutoDrag.ShouldSelectOnDrag">
            <summary>
            Returns whether selection should be modified when the cursor passes over
            a different item than the selected one.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.SortIndicator">
            <summary>
            A Button derived element used display and/or change SortStatus. 
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.SortIndicator.OnApplyTemplate">
            <summary>
            Invoked when the template for the control has been changed.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.SortIndicator.SortStatusProperty">
            <summary>
            Identifies the 'SortStatus' dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.SortIndicator.SortStatusChangedEvent">
            <summary>
            Event ID for the 'SortStatusChanged' routed event
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.SortIndicator.OnSortStatusChanged(Infragistics.Windows.Controls.SortStatus,Infragistics.Windows.Controls.SortStatus)">
            <summary>
            Called when property 'SortStatus' changes
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.SortIndicator.SetVisualState(System.Boolean)">
            <summary>
            Called to set the VisualStates of the control
            </summary>
            <param name="useTransitions">Determines whether transitions should be used.</param>
        </member>
        <member name="P:Infragistics.Windows.Controls.SortIndicator.SortStatus">
            <summary>
            Gets/sets whether the status is ascending, descending or not sorted
            </summary>
        </member>
        <member name="E:Infragistics.Windows.Controls.SortIndicator.SortStatusChanged">
            <summary>
            Occurs when property 'SortStatus' changes
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Themes.Internal.WindowsAssemblyResourceSetLoader">
            <summary>
            Loads the themes contained in this assembly.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Themes.Internal.WindowsAssemblyResourceSetLoader.OnRegisterResourceSets(System.String)">
            <summary>
            Loads and registers the resource sets for the specified <paramref name="groupingName"/>
            </summary>
            <param name="groupingName">The name of the grouping whose resources should be loaded or null if all resource sets should be loaded.</param>
        </member>
        <member name="T:Infragistics.Windows.Utilities">
            <summary>
            Exposes some statichelper methods
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Utilities.#ctor">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Utilities.AllowsAsyncOperations(System.Windows.DependencyObject)">
            <summary>
            Returns a boolean indicating if the object may perform asynchronous operations.
            </summary>
            <param name="d">The object to evaluate</param>
            <returns>Return true unless the object is within a report.</returns>
        </member>
        <member name="M:Infragistics.Windows.Utilities.AnimateTranslateTransform(System.Windows.Media.TranslateTransform,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Boolean,System.EventHandler)">
            <summary>
            Animates a translate transform
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Utilities.CanExecuteCommand(System.Windows.Input.ICommandSource)">
            <summary>
            Returns true if the command of the specified <see cref="T:System.Windows.Input.ICommandSource"/> can be executed.
            </summary>
            <param name="commandSource">The command source to evaluate.</param>
            <returns>Returns true if the command can be executed.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandSource"/> was null.</exception>
        </member>
        <member name="M:Infragistics.Windows.Utilities.CalculateTotalMarginAndPadding(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary>
            Calculates the total padding and margin values beetween a descendant element and its ancestor
            </summary>
            <param name="ancestor"></param>
            <param name="descendant"></param>
            <returns>Returns the aggregate of all margin and padding settings</returns>
        </member>
        <member name="M:Infragistics.Windows.Utilities.ConvertFromLogicalPixels(System.Double)">
            <summary>
            Converts the logical pixel representation into screen pixels.
            </summary>
            <param name="logicalPixelValue">The logical pixel value to convert.</param>
            <returns>The screen pixel representation of the specified logical pixels.</returns>
        </member>
        <member name="M:Infragistics.Windows.Utilities.ConvertFromLogicalPixels(System.Double,System.Windows.Media.Visual)">
            <summary>
            Converts the logical pixel representation into screen pixels.
            </summary>
            <param name="logicalPixelValue">The logical pixel value to convert.</param>
            <param name="relativeVisual">An element that is used to obtain the required DPI information or null to use the default dpi information.</param>
            <returns>The screen pixel representation of the specified logical pixels.</returns>
        </member>
        <member name="M:Infragistics.Windows.Utilities.ConvertToLogicalPixels(System.Int32)">
            <summary>
            Converts the specified pixel value into the logical pixel representation.
            </summary>
            <param name="pixelValue">The pixel value to convert.</param>
            <returns>The logical pixel representation of the specified screen pixels.</returns>
        </member>
        <member name="M:Infragistics.Windows.Utilities.ConvertToLogicalPixels(System.Int32,System.Windows.Media.Visual)">
            <summary>
            Converts the specified pixel value into the logical pixel representation.
            </summary>
            <param name="pixelValue">The pixel value to convert.</param>
            <param name="relativeVisual">An element that is used to obtain the required DPI information or null to use the default dpi information.</param>
            <returns>The logical pixel representation of the specified screen pixels.</returns>
        </member>
        <member name="M:Infragistics.Windows.Utilities.CopyPropertyValues(System.Windows.FrameworkElementFactory,System.Windows.DependencyObject)">
            <summary>
            Copies all of the property settings from one object to another
            </summary>
            <param name="target">The FrameworkElementFactory to receive the values.</param>
            <param name="source">The source of the property values.</param>
        </member>
        <member name="M:Infragistics.Windows.Utilities.CopyPropertyValues(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary>
            Copies all of the property settings from one object to another
            </summary>
            <param name="target">The DependencyObject to receive the values.</param>
            <param name="source">The source of the property values.</param>
        </member>
        <member name="M:Infragistics.Windows.Utilities.Create2by2Grid">
            <summary>
            Create grid with 2 columns and 2 rows
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Utilities.CreateRoundedRectGeometry(System.Windows.Rect,Infragistics.Windows.Controls.RoundedRectCorners,System.Double,System.Double,System.Double)">
            <summary>
            Helper routine to create a geometry that describes a rounded rectangle.
            </summary>
            <param name="rect">The rectangle that defines the size and position of the rounded rectangle</param>
            <param name="roundedCorners">An enumeration indicating which corners will be rounded</param>
            <param name="radiusX">A double that indicates the horizontal radius of the corners</param>
            <param name="radiusY">A double that indicates the vertical radius of the corners</param>
            <param name="edgeThickness">The thickness of the edge for the rectangle. If the rectangle will have a border drawn, this would typically be the thickness of the pen.</param>
            <returns>A geometry that represents a rectangle with the specified rounded corners</returns>
        </member>
        <member name="M:Infragistics.Windows.Utilities.CreateRoundedRectGeometry(System.Windows.Rect,Infragistics.Windows.Controls.RoundedRectCorners,System.Double,System.Double,System.Double,Infragistics.Windows.Controls.RoundedRectSide,Infragistics.Windows.Controls.RoundedRectSide)">
            <summary>
            Helper routine to create a geometry that describes a rounded rectangle. This overloads is used to return an open geometry where one or more sides are not included.
            </summary>
            <param name="rect">The rectangle that defines the size and position of the rounded rectangle</param>
            <param name="roundedCorners">An enumeration indicating which corners will be rounded</param>
            <param name="radiusX">A double that indicates the horizontal radius of the corners</param>
            <param name="radiusY">A double that indicates the vertical radius of the corners</param>
            <param name="edgeThickness">The thickness of the edge for the rectangle. If the rectangle will have a border drawn, this would typically be the thickness of the pen.</param>
            <param name="startSide">The first side of the rectangle to include</param>
            <param name="endSide">The last side of the rectangle to include. To close the rect, this value must be the same as the <paramref name="startSide"/>.</param>
            <returns>A geometry that represents a rectangle with the specified rounded corners</returns>
        </member>
        <member name="M:Infragistics.Windows.Utilities.StringFromNonDefaultProperties(System.Windows.DependencyObject)">
            <summary>
            Creates and returns a string with any non-default <see cref="T:System.Windows.DependencyProperty"/> values. 
            </summary>
            <param name="obj">The DependencyObject in question.</param>
            <returns>A string concatenated with any DependencyProperty values that are not set to their defaults</returns>
        </member>
        <member name="M:Infragistics.Windows.Utilities.DoubleIsZero(System.Double)">
            <summary>
            Returns true if the specified double value is zero or close to zero.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Utilities.CreateBindingObjectLikeAlias(System.Windows.DependencyProperty)">
            <summary>
            Create a Binding object
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Utilities.CreateBindingObject(System.Windows.DependencyProperty,System.Windows.Data.BindingMode,System.Windows.Data.RelativeSource)">
            <summary>
            Create a Binding object
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Utilities.CreateBindingObject(System.Windows.DependencyProperty,System.Windows.Data.BindingMode,System.Object)">
            <summary>
            Create a Binding object
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Utilities.CreateBindingObject(System.Windows.DependencyProperty,System.Windows.Data.BindingMode,System.Object,System.Windows.Data.IValueConverter)">
            <summary>
            Create a Binding object
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Utilities.CreateBindingObject(System.String,System.Windows.Data.BindingMode,System.Object)">
            <summary>
            Create a Binding object
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Utilities.CreateBindingObject(System.String,System.Windows.Data.BindingMode,System.Object,System.Windows.Data.IValueConverter)">
            <summary>
            Create a Binding object
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Utilities.ExecuteCommand(System.Windows.Input.ICommandSource)">
            <summary>
            Invokes the command of the specified <see cref="T:System.Windows.Input.ICommandSource"/>.
            </summary>
            <param name="commandSource">The command source whose command is to be invoked.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandSource"/> was null.</exception>
        </member>
        <member name="M:Infragistics.Windows.Utilities.GetAncestorFromName(System.Windows.DependencyObject,System.String)">
            <summary>
            Get an ancestor parent based on its type.
            </summary>
            <returns>An ancestor parent of the specified type or null if not found.</returns>
        </member>
        <member name="M:Infragistics.Windows.Utilities.GetAncestorFromType(System.Windows.DependencyObject,System.Type,System.Boolean)">
            <summary>
            Get an ancestor parent based on its type.
            </summary>
            <returns>An ancestor parent of the specified type or null if not found.</returns>
        </member>
        <member name="M:Infragistics.Windows.Utilities.GetAncestorFromType(System.Windows.DependencyObject,System.Type,System.Boolean,System.Windows.DependencyObject)">
            <summary>
            Get an ancestor parent based on its type.
            </summary>
            <returns>An ancestor parent of the specified type or null if not found.</returns>
        </member>
        <member name="M:Infragistics.Windows.Utilities.GetAncestorFromType(System.Windows.DependencyObject,System.Type,System.Boolean,System.Windows.DependencyObject,System.Type)">
            <summary>
            Get an ancestor parent based on its type.
            </summary>
            <returns>An ancestor parent of the specified type or null if not found.</returns>
        </member>
        <member name="M:Infragistics.Windows.Utilities.GetAncestorPropertyValue(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Windows.DependencyObject)">
            <summary>
            Returns the value of a property that has a non-null setting
            </summary>
            <returns>A non-null value setting from an ancestor or null if not found.</returns>
        </member>
        <member name="M:Infragistics.Windows.Utilities.GetNonNeutralCulture(System.Windows.IFrameworkInputElement)">
            <summary>
            Returns a specific, i.e. non-neutral, culture that can be used to format strings.
            </summary>
            <param name="element">Either a FrameworkElement or a FrameworkContentElement</param>
            <returns>A specific culture that can be used to format strings, dates, etc.</returns>
            <exception cref="T:System.ArgumentException">If element is not a FrameworkElement or FrameworkContentElement.</exception>
        </member>
        <member name="M:Infragistics.Windows.Utilities.GetNonNeutralCulture(System.Globalization.CultureInfo)">
            <summary>
            Returns a specific, i.e. non-neutral, culture that can be used to format strings.
            </summary>
            <param name="culture">A CultureInfo object.</param>
            <returns>The passed in culture if it is non-neutral. Otherwise, a specific culture that is appropriate for the neutral culture. If a specific culture can not be found then the current Thread's CurrentUICulture will be returned.</returns>
            <exception cref="T:System.ArgumentNullException">If culture is null.</exception>
        </member>
        <member name="M:Infragistics.Windows.Utilities.GetDescendantFromName(System.Windows.DependencyObject,System.String)">
            <summary>
            Gets a descendant FrameworkElement based on its name.
            </summary>
            <returns>A descendant FrameworkElement with the specified name or null if not found.</returns>
        </member>
        <member name="M:Infragistics.Windows.Utilities.GetDescendantFromType(System.Windows.DependencyObject,System.Type,System.Boolean)">
            <summary>
            Get a descendant parent based on its type.
            </summary>
            <param name="parent">DependencyObject whose descendants are to be searched.</param>
            <param name="type">Type of the descendant being sought</param>
            <param name="allowSubclassOfType">True if subclasses of <paramref name="type"/> may be considered.</param>
            <returns>A descendant parent of the specified type or null if not found.</returns>
        </member>
        <member name="M:Infragistics.Windows.Utilities.GetDescendantFromType``1(System.Windows.DependencyObject,System.Boolean,Infragistics.Windows.Utilities.DependencyObjectSearchCallback{``0})">
            <summary>
            Get a descendant parent based on its type.
            </summary>
            <param name="parent">DependencyObject whose descendants are to be searched.</param>
            <param name="allowSubclassOfType">True if subclasses of type may be considered.</param>
            <param name="callback">Delegate that should be invoked when a potential match is located. Return false from the callback to indicate that the object is not a match and that the search should be continued. Otherwise return true to indicate that the specified object should be returned from the method.</param>
            <returns>A descendant parent of the specified type or null if not found.</returns>
        </member>
        <member name="M:Infragistics.Windows.Utilities.GetDescendantFromType``1(System.Windows.DependencyObject,System.Boolean,Infragistics.Windows.Utilities.DependencyObjectSearchCallback{``0},System.Type[])">
            <summary>
            Get a descendant parent based on its type.
            </summary>
            <param name="parent">DependencyObject whose descendants are to be searched.</param>
            <param name="allowSubclassOfType">True if subclasses of type may be considered.</param>
            <param name="callback">Delegate that should be invoked when a potential match is located. Return false from the callback to indicate that the object is not a match and that the search should be continued. Otherwise return true to indicate that the specified object should be returned from the method.</param>
            <param name="typesToIgnore">Array of types identifying descendants that should not be searched.</param>
            <returns>A descendant parent of the specified type or null if not found.</returns>
        </member>
        <member name="M:Infragistics.Windows.Utilities.GetFirstMnemonicChar(System.String)">
            <summary>
            Returns the first mnemonic character found in a string.
            </summary>
            <param name="text">A string that may contain one or more mnemonic characters.</param>
            <returns>The first mnemonic character found, converted to uppercase based on the current UI culture.</returns>
            <remarks>A mnemonic, or accelerator, character is defined as a character that has a single ampersand preceding it.</remarks>
        </member>
        <member name="M:Infragistics.Windows.Utilities.GetFirstMnemonicChar(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns the first mnemonic character found in a string.
            </summary>
            <param name="text">A string that may contain one or more mnemonic characters.</param>
            <param name="culture">The culture to use to convert the character to uppercase, null will return the character as is.</param>
            <returns>The first mnemonic character found, converted to uppercase based on the passed in culture.</returns>
            <remarks>A mnemonic, or accelerator, character is defined as a character that has a single ampersand preceding it.</remarks>
        </member>
        <member name="M:Infragistics.Windows.Utilities.GetItemsHostFromItem(System.Windows.DependencyObject)">
            <summary>
            Returns the items host that contains the item inside an ItemsControl
            </summary>
            <param name="item"></param>
            <returns>The Items host or null.</returns>
        </member>
        <member name="M:Infragistics.Windows.Utilities.GetParent(System.Windows.DependencyObject)">
            <summary>
            Returns the parent of a child element.
            </summary>
            <param name="child">The child element.</param>
            <returns>The parent element.</returns>
            <remarks>
            <para class="note"><b>Note:</b> if the child is derived from <see cref="T:System.Windows.Media.Visual"/> or <see cref="T:System.Windows.Media.Media3D.Visual3D"/> this method returns its parent parent. However, if the child is derived from <see cref="T:System.Windows.FrameworkContentElement"/> this method returns its logical parent.</para></remarks>
        </member>
        <member name="M:Infragistics.Windows.Utilities.GetParent(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Returns the parent of a child element.
            </summary>
            <param name="child">The child element.</param>
            <param name="includeLogicalParent">Whether to consider logical parent as well. 
            If the visual parent is null and this parameter is true then the logical parent 
            of the child will be returned.</param>
            <returns>The parent element.</returns>
            <remarks>
            <para class="note"><b>Note:</b> if the child derives from <see cref="T:System.Windows.Media.Visual"/> or 
            <see cref="T:System.Windows.Media.Media3D.Visual3D"/> this method returns its visual parent. If the visual parent is null
            and includeLogicalParent parameter is true then it returns the logical parent of the child
            if any. If the child is derived from <see cref="T:System.Windows.FrameworkContentElement"/> this method returns 
            its logical parent unless includeLogicalParent parameter is false.</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Utilities.GetPropertyValueFromStyle(System.Windows.Style,System.Windows.DependencyProperty,System.Boolean,System.Boolean)">
            <summary>
            Returns a property value from a style
            </summary>
            <param name="style">The source style</param>
            <param name="property">The property to look for.</param>
            <param name="walkUpBasedOnChain">True to search BasedOn styles.</param>
            <param name="returnBindingAsBinding">True to possibly return a binding object.</param>
            <returns>The value that was set or null.</returns>
        </member>
        <member name="M:Infragistics.Windows.Utilities.GetPublicKeyToken(System.Type)">
            <summary>
            Returns the public key token of a type's assembly.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> whose assembly is checked.</param>
            <returns>The public key token value. Either "null" or a 16 byte string.</returns>
        </member>
        <member name="M:Infragistics.Windows.Utilities.GetPublicKeyToken(System.Reflection.Assembly)">
            <summary>
            Returns the public key token of an assembly.
            </summary>
            <param name="assemblyToCheck">The assembly to check.</param>
            <returns>The public key token value. Either "null" or a 16 byte string.</returns>
        </member>
        <member name="M:Infragistics.Windows.Utilities.GetRootAdornerLayer(System.Windows.UIElement,System.Windows.UIElement@)">
            <summary>
            Helper method for getting the root adorner layer.
            </summary>
            <param name="adornedElement"></param>
            <param name="elementToAdorn">An out parameter that is set to the element that the layer being returned adorns</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Utilities.GetTemplateChild``1(System.Windows.FrameworkElement)">
            <summary>
            Searches an element for an templated child of the specified type.
            </summary>
            <typeparam name="T">The type of child to return.</typeparam>
            <param name="templatedParent">The element whose template children are to be searched.</param>
            <returns>An element of the specified type or null.</returns>
        </member>
        <member name="M:Infragistics.Windows.Utilities.GetTemplateChild``1(System.Windows.FrameworkElement,Infragistics.Windows.Utilities.DependencyObjectSearchCallback{``0})">
            <summary>
            Searches an element for an templated child of the specified type.
            </summary>
            <param name="templatedParent">The element whose template children are to be searched.</param>
            <typeparam name="T">The type of child to return.</typeparam>
            <param name="callback">A delegate that is called when an element of the appropriate type is encountered to determine if that is the element that should be returned or if the search should continue.</param>
            <returns>An element of the specified type or null.</returns>
        </member>
        <member name="M:Infragistics.Windows.Utilities.HasLoadedAncestor(System.Windows.DependencyObject)">
            <summary>
            Determines if any ancestor element is loaded.
            </summary>
            <param name="d">The starting element</param>
            <returns>True if an ancestor FrameworkElement is loaded, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Windows.Utilities.HasSamePublicKey(System.Type)">
            <summary>
            Checks if the test object is from an assembly that is
            signed with the same public key as this assembly
            </summary>
            <returns>True if same</returns>
        </member>
        <member name="M:Infragistics.Windows.Utilities.IsDescendantOf(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary>
            Indicates if the specified <paramref name="ancestor"/> is the visual parent of <paramref name="descendant"/> even if the descendant is within a popup.
            </summary>
            <param name="ancestor">The element to consider as the potential ancestor of <paramref name="descendant"/></param>
            <param name="descendant">The element being evaluated to determine if it is a child of <paramref name="ancestor"/></param>
            <returns>True if the <paramref name="descendant"/> is in the tree of the <paramref name="ancestor"/>.</returns>
        </member>
        <member name="M:Infragistics.Windows.Utilities.IsDescendantOf(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Indicates if the specified <paramref name="ancestor"/> is an ancestor of <paramref name="descendant"/> even if the descendant is within a popup.
            </summary>
            <param name="ancestor">The element to consider as the potential ancestor of <paramref name="descendant"/></param>
            <param name="descendant">The element being evaluated to determine if it is a child of <paramref name="ancestor"/></param>
            <param name="preferLogicalTree">A boolean indicating whether to prefer the logical tree when walking up the ancestor chain.</param>
            <returns>True if the <paramref name="descendant"/> is in the tree of the <paramref name="ancestor"/>.</returns>
        </member>
        <member name="M:Infragistics.Windows.Utilities.LoadCursor(System.Type,System.String)">
            <summary>
            Loads a cursor from the specified resource
            </summary>
            <param name="typeInAssembly">The type whose assembly contains the resource</param>
            <param name="cursorPath">The path to the cursor in the assembly</param>
            <returns>A cursor for the specified resource</returns>
        </member>
        <member name="M:Infragistics.Windows.Utilities.RemoveAll(System.Collections.ArrayList,System.Object)">
            <summary>
            Removes all occurrences of itemToRemove from list.
            </summary>
            <param name="list"></param>
            <param name="itemToRemove"></param>
        </member>
        <member name="M:Infragistics.Windows.Utilities.SetPropertyFromStyle(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Windows.Style,System.Windows.DependencyProperty,System.Boolean)">
            <summary>
            Extracts a property value from a Style and sets it on a DependencyObject
            </summary>
            <param name="target">The target to receive the property setting</param>
            <param name="targetProperty">The property to set</param>
            <param name="source">The style that contains the setting</param>
            <param name="sourceProperty">The property to extract</param>
            <param name="walkUpBasedOnChain">True to search up the 'BasedOn' style chain.</param>
            <returns>True if a value was found and set.</returns>
        </member>
        <member name="M:Infragistics.Windows.Utilities.SortMerge(System.Collections.ArrayList,System.Collections.IComparer)">
            <summary>
            Sorts the passed in array list based on the passed in comparer using a modified merge-sort
            algorithm. 
            </summary>
            <param name="arrayList">The list to be sorted.</param>
            <param name="comparer">The comparer (must not be null).</param>
        </member>
        <member name="M:Infragistics.Windows.Utilities.StripMnemonics(System.String,System.Boolean)">
            <summary>
            Strips mnemonics from a string.
            </summary>
            <param name="text">A string that may contain one or more mnemonic characters.</param>
            <param name="escapeRemainingMnemonics">True if any subsequent mnemonics should be escaped (if not already escaped by a preceeding '_'). This should be true if this will be assigned to an AccessText element (or a ContentPresenter whose RecognizesAccessKey is true) so that no character will be rendered as a mnemonic. This should be false to provide the behavior where the text appears as it would in an AccessText when the underline under the leading mnemonic is not rendered.</param>
            <returns>A new string with those mnemonics stripped out or the passed in string if it didn't contain any.</returns>
            <remarks>A mnemonic, or accelerator, character is defined as a character that has a single underscore ('_') preceding it.</remarks>
        </member>
        <member name="M:Infragistics.Windows.Utilities.TransformPointToAncestorCoordinates(System.Windows.Point,System.Windows.Media.Visual,System.Windows.Media.Visual)">
            <summary>
            Transforms a point to its ancestor's coordinates
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Utilities.TransformPointToDescendantCoordinates(System.Windows.Point,System.Windows.Media.Visual,System.Windows.Media.Visual)">
            <summary>
            Transforms a point to its descendant's coordinates
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Utilities.GetDefaultValue(System.Windows.DependencyProperty,System.Windows.DependencyObject)">
            <summary>
            Gets the default value for the specified property for the specified object.
            </summary>
            <param name="dependencyProperty"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Utilities.ShouldSerialize(System.Windows.DependencyProperty,System.Windows.DependencyObject)">
            <summary>
            A helper method for figuring out whether a property needs to be serialized.
            </summary>
            <param name="dependencyProperty"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Utilities.CreateResourceSetDictionary(System.Reflection.Assembly,System.String)">
            <summary>
            Helper method for creating a resource dictionary containing the specified sources.
            </summary>
            <param name="assembly">Assembly that contains the embedded resource.</param>
            <param name="resourcePath">Path to the embedded resource dictionary within the specified <paramref name="assembly"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Utilities.PointFromScreenSafe(System.Windows.Media.Visual,System.Windows.Point)">
            <summary>
            Translates a point in screen coordinates into coordinates relative to an element
            </summary>
            <param name="element">The specified element</param>
            <param name="point">The point in screen coordinates.</param>
            <returns>The point translated into coordinates relative to the element.</returns>
            <exception cref="T:System.ArgumentNullException">If element is null</exception>
            <remarks>
            <para class="note"><b>Note:</b> In an XBAP application we don't have access rights to call PointFromScreen. In this situation we walk up the visual tree to the top level element and map the point from it.</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Utilities.PointFromScreenSafe(System.Windows.Media.Visual,System.Windows.Point,System.Windows.Media.Visual)">
            <summary>
            Translates a point in screen coordinates into coordinates relative to an element
            </summary>
            <param name="element">The specified element</param>
            <param name="point">The point in screen coordinates.</param>
            <param name="refElement">An optional second element to reference.</param>
            <returns>The point translated into coordinates relative to the element.</returns>
            <exception cref="T:System.ArgumentNullException">If element is null</exception>
            <remarks>
            <para class="note"><b>Note:</b> In an XBAP application we don't have access rights to call PointFromScreen. In this situation we look at the refElement, if not null we get the common ancestor element and map the point from it. If refElement is null then we walk up the visual tree to the top level element and map the point from it.</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Utilities.PointToScreenSafe(System.Windows.Media.Visual,System.Windows.Point)">
            <summary>
            Translates a point relative to an element into screen coordinates
            </summary>
            <param name="element">The specified element</param>
            <param name="point">The point in element coordinates.</param>
            <returns>The point translated into screen coordinates.</returns>
            <exception cref="T:System.ArgumentNullException">If element is null</exception>
            <remarks>
            <para class="note"><b>Note:</b> In an XBAP application we don't have access rights to call PointToScreen. In this situation we walk up the visual tree to the top level element and map the point to it.</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Utilities.PointToScreenSafe(System.Windows.Media.Visual,System.Windows.Point,System.Windows.Media.Visual)">
            <summary>
            Translates a point relative to an element into screen coordinates
            </summary>
            <param name="element">The specified element</param>
            <param name="point">The point in element coordinates.</param>
            <param name="refElement">An optional second element to reference.</param>
            <returns>The point translated into screen coordinates.</returns>
            <exception cref="T:System.ArgumentNullException">If element is null</exception>
            <remarks>
            <para class="note"><b>Note:</b> In an XBAP application we don't have access rights to call PointToScreen. In this situation we look at the refElement, if not null we get the common ancestor element and map the point to it. If refElement is null then we walk up the visual tree to the top level element and map the point to it.</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Utilities.GetWorkArea(System.Windows.Media.Visual)">
            <summary>
            Returns the work area of the monitor relative to the top/left of the passed in element
            </summary>
            <param name="element">The specified element</param>
            <returns>The rect of the monitor or top level elment.</returns>
            <exception cref="T:System.ArgumentNullException">If element is null</exception>
            <remarks>
            <para class="note"><b>Note:</b> In an XBAP application we don't have access rights to get monitor information. In this situation we walk up the visual tree to the top level element and use its size.</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Utilities.GetWorkArea(System.Windows.Media.Visual,System.Windows.Media.Visual)">
            <summary>
            Returns the work area of the monitor relative to the top/left of the passed in element
            </summary>
            <param name="element">The specified element</param>
            <param name="refElement">An optional second element to reference.</param>
            <returns>The rect of the monitor or top level elment.</returns>
            <exception cref="T:System.ArgumentNullException">If element is null</exception>
            <remarks>
            <para class="note"><b>Note:</b> In an XBAP application we don't have access rights to get monitor information. In this situation we look at the refElement, if not null we get the common ancestor element and use its size to construct the rect. If refElement is null then we walk up the visual tree to the top level element and use its size.</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Utilities.GetWorkArea(System.Windows.Media.Visual,System.Windows.Point,System.Windows.Media.Visual)">
            <summary>
            Returns the work area of the monitor relative to the top/left of the passed in element
            </summary>
            <param name="element">The specified element</param>
            <param name="point">The point in element coordinates.</param>
            <param name="refElement">An optional second element to reference.</param>
            <returns>The rect of the monitor or top level elment.</returns>
            <exception cref="T:System.ArgumentNullException">If element is null</exception>
            <remarks>
            <para class="note"><b>Note:</b> In an XBAP application we don't have access rights to get monitor information. In this situation we look at the refElement, if not null we get the common ancestor element and use its size to construct the rect. If refElement is null then we walk up the visual tree to the top level element and use its size.</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Utilities.RectFromPoints(System.Windows.Point,System.Windows.Point)">
            <summary>
            Helper method for returning a normalized <see cref="T:System.Windows.Rect"/> based on two points.
            </summary>
            <param name="point1">A point that represents a corner of the rect</param>
            <param name="point2">A point that represents the corner of the rect opposite that of <paramref name="point1"/></param>
            <returns>
            A normalized rect based on the specified points. For example, the <see cref="P:System.Windows.Rect.X"/> will be 
            smaller of the <see cref="P:System.Windows.Point.X"/> of the <paramref name="point1"/> and <paramref name="point2"/>.
            </returns>
        </member>
        <member name="M:Infragistics.Windows.Utilities.ThrowIfInvalidEnum(System.Enum,System.String)">
            <summary>
            Helper method to throw an exception if the specified enum is not valid for the enum type.
            </summary>
            <param name="parameter">The enum to evaluate. Note, this should not be a flagged enum.</param>
            <param name="parameterName">The name of the parameter. This is used in the exception if the parameter is not a valid enum member.</param>
        </member>
        <member name="M:Infragistics.Windows.Utilities.ThrowIfNull(System.Object,System.String)">
            <summary>
            Helper method to throw an exception if the specified parameter is null.
            </summary>
            <param name="parameter">The parameter to evaluate</param>
            <param name="parameterName">The name of the parameter. This is used in the exception if the parameter is null</param>
        </member>
        <member name="M:Infragistics.Windows.Utilities.ThrowIfNullOrEmpty(System.String,System.String)">
            <summary>
            Helper method to throw an exception if the specified parameter is null.
            </summary>
            <param name="parameter">The parameter to evaluate</param>
            <param name="parameterName">The name of the parameter. This is used in the exception if the parameter is null</param>
        </member>
        <member name="M:Infragistics.Windows.Utilities.IsNumericType(System.Type)">
            <summary>
            Determines if a given System.Type is a numeric type.
            </summary>
            <param name="type">The System.Type to test.</param>
            <returns>True if the type is a numeric type.</returns>
        </member>
        <member name="F:Infragistics.Windows.Utilities.SnapElementToDevicePixelsProperty">
            <summary>
            SnapElementToDevicePixels Attached Dependency Property
            </summary>
            <remarks>
            <p class="body">The SnapsElementToDevicePixels is meant to be used on elements such as an Image that 
            does not currently support SnapsToDevicePixels.</p>
            <p class="note"><b>Note:</b> The RenderTransform of the element is used so you should not set the RenderTransform 
            on the same element on which you are setting SnapElementToDevicePixels to true. You may set the RenderTransform on 
            an ancestor element. Also, you should not set this property on an element that is an ancestor of one or more 
            elements that have this property set to true. In such a case the results are undefined since the child element's 
            RenderTransform could be calculated before that of the ancestor element. Since this property should be set on 
            discrete elements such as an Image, this scenario should not be required.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Windows.Utilities.GetSnapElementToDevicePixels(System.Windows.DependencyObject)">
            <summary>
            Gets the SnapElementToDevicePixels property.  This dependency property 
            indicates how the element should be adjusted so that it renders along a device pixel boundary.
            </summary>
            <seealso cref="F:Infragistics.Windows.Utilities.SnapElementToDevicePixelsProperty"/>
        </member>
        <member name="M:Infragistics.Windows.Utilities.SetSnapElementToDevicePixels(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the SnapElementToDevicePixels property.  This dependency property 
            indicates how the element should be adjusted so that it renders along a device pixel boundary.
            </summary>
            <seealso cref="F:Infragistics.Windows.Utilities.SnapElementToDevicePixelsProperty"/>
        </member>
        <member name="M:Infragistics.Windows.Utilities.OnSnapElementToDevicePixelsChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the SnapElementToDevicePixels property.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Utilities.ShowMessageBox(System.Windows.DependencyObject,System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage)">
            <summary>
            Helper method to display a messagebox using the Window of the specified element if available.
            </summary>
            <param name="element">The element whose Window should be used to show the MessageBox</param>
            <param name="messageBoxText">The text to display</param>
            <param name="caption">The title bar caption</param>
            <param name="button">Indicates which button(s) to display</param>
            <param name="icon">The icon to display</param>
            <returns>A MessageBoxResult that indicates which button was clicked to close the messagebox.</returns>
        </member>
        <member name="M:Infragistics.Windows.Utilities.GetLineCount(System.String)">
            <summary>
            Returns the number of lines in the specified string.
            </summary>
            <param name="text">String whose line count is to be calculated</param>
            <returns>The number of lines based on the presence of "\r\n", "\r" and "\n" sequences within the specified text</returns>
        </member>
        <member name="M:Infragistics.Windows.Utilities.ValidateTargetTypeOfStyle(System.Windows.Style,System.Type,System.String)">
            <summary>
            Verifies that the TargetType of the style is either null or is set to the targetType, an ancestor type or a descendant type.
            </summary>
            <param name="style">The style in question (must not be null)</param>
            <param name="targetType">The expected target type (must not be null)</param>
            <param name="propertyName">The name of the property that is being set (must not be null). This is used for formatting an exception</param>
            <exception cref="T:System.ArgumentNullException">If either style, targtType or propertyName arguments are null.</exception>
            <exception cref="T:System.ArgumentException">If the TargetType of the style is incompatible with the passed in targetType.</exception>
        </member>
        <member name="M:Infragistics.Windows.Utilities.GetLanguageCultureInfo(System.Windows.FrameworkElement)">
            <summary>
            Gets the CultureInfo associated with the Language of the specified element.
            </summary>
            <param name="element">The element of which to get the associated CultureInfo.</param>
            <returns>The CultureInfo associated with the specified element.</returns>
        </member>
        <member name="P:Infragistics.Windows.Utilities.CaretBlinkTime">
            <summary>
            Returns the caret blink time in milliseconds.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Utilities.SystemDoubleClickTime">
            <summary>
            Returns the maximum number of milliseconds allowed between mouse button downs to generate a double click message.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Utilities.SystemDoubleClickSize">
            <summary>
            Returns the maximum distance the cursor is allowed to travel between mouse button downs to generate a double click message.
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Utilities.SystemDragSize">
            <summary>
            Returns the maximum distance the cursor is allowed to traval while the mouse button is down before initiating a drag operation.
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Utilities.DependencyObjectSearchCallback`1">
            <summary>
            Delegate used to search for a specific <see cref="T:System.Windows.DependencyObject"/> when using the <see cref="M:Infragistics.Windows.Utilities.GetDescendantFromType``1(System.Windows.DependencyObject,System.Boolean,Infragistics.Windows.Utilities.DependencyObjectSearchCallback{``0})"/>
            </summary>
            <param name="dependencyObject">The dependency object being evaluated</param>
            <returns>Return true if the search should be stopped and object should be returned; otherwise return false to continue the search</returns>
        </member>
        <member name="F:Infragistics.Windows.Utilities.SnapInfo.InfoPropertyKey">
            <summary>
            Info Read-Only Dependency Property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Utilities.SnapInfo.OwnerPropertyKey">
            <summary>
            Owner Read-Only Dependency Property
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.XamPager">
            <summary>
            Custom <see cref="T:System.Windows.Controls.ScrollViewer"/> for scrolling with vertical or horizontal pager buttons.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamPager.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Controls.XamPager"/>
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamPager.OnApplyTemplate">
            <summary>
            Invoked when the template is applied to the element.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamPager.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Invoked when a key has been pressed while keyboard focus exists within the element.
            </summary>
            <param name="e">Provides information about the key event.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamPager.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked when a property of the element has been changed.
            </summary>
            <param name="e">Provides information about the property change</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamPager.OnScrollChanged(System.Windows.Controls.ScrollChangedEventArgs)">
            <summary>
            Invoked when the scrolling state has changed.
            </summary>
            <param name="e">Provides information about the scroll state change</param>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamPager.ScrollLeftVisibilityProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamPager.ScrollLeftVisibility"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamPager.ScrollRightVisibilityProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamPager.ScrollRightVisibility"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamPager.ScrollUpVisibilityProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamPager.ScrollUpVisibility"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamPager.ScrollDownVisibilityProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamPager.ScrollDownVisibility"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamPager.ScrollLeftButtonStyleProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamPager.ScrollLeftButtonStyle"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamPager.ScrollRightButtonStyleProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamPager.ScrollRightButtonStyle"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamPager.ScrollUpButtonStyleProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamPager.ScrollUpButtonStyle"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamPager.ScrollDownButtonStyleProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamPager.ScrollDownButtonStyle"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamPager.ScrollLeftVisibility">
            <summary>
            Indicates the computed scroll left pager button visibility.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamPager.ScrollLeftVisibilityProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamPager.ScrollRightVisibility">
            <summary>
            Indicates the computed scroll right pager button visibility.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamPager.ScrollRightVisibilityProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamPager.ScrollUpVisibility">
            <summary>
            Indicates the computed scroll up pager button visibility.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamPager.ScrollUpVisibilityProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamPager.ScrollDownVisibility">
            <summary>
            Indicates the computed scroll down pager button visibility.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamPager.ScrollDownVisibilityProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamPager.ScrollLeftButtonStyle">
            <summary>
            Returns or sets the style used for the left scroll button
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamPager.ScrollLeftButtonStyleProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamPager.ScrollDownButtonStyle"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamPager.ScrollUpButtonStyle"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamPager.ScrollRightButtonStyle"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamPager.ScrollRightButtonStyle">
            <summary>
            Returns or sets the style used for the right scroll button
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamPager.ScrollRightButtonStyleProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamPager.ScrollDownButtonStyle"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamPager.ScrollUpButtonStyle"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamPager.ScrollLeftButtonStyle"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamPager.ScrollUpButtonStyle">
            <summary>
            Returns or sets the style used for the up scroll button
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamPager.ScrollUpButtonStyleProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamPager.ScrollDownButtonStyle"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamPager.ScrollLeftButtonStyle"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamPager.ScrollRightButtonStyle"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamPager.ScrollDownButtonStyle">
            <summary>
            Returns or sets the style used for the down scroll button
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamPager.ScrollDownButtonStyleProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamPager.ScrollUpButtonStyle"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamPager.ScrollLeftButtonStyle"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamPager.ScrollRightButtonStyle"/>
        </member>
        <member name="T:Infragistics.Windows.Controls.XamScreenTip">
            <summary>
            The XamScreenTip is derived from the WPF ToolTip class and adds the notion of <see cref="P:Infragistics.Windows.Controls.XamScreenTip.Header"/> and <see cref="P:Infragistics.Windows.Controls.XamScreenTip.Footer"/> to the standard ToolTip.
            </summary>
            <remarks>
            <p class="body">The header area appears at the top of the tooltip (its content provided by the <see cref="P:Infragistics.Windows.Controls.XamScreenTip.Header"/> property) and the footer area appears at 
            the bottom of the tooltip (its content provided by the <see cref="P:Infragistics.Windows.Controls.XamScreenTip.Footer"/> property).  In between the <see cref="P:Infragistics.Windows.Controls.XamScreenTip.Header"/> and <see cref="P:Infragistics.Windows.Controls.XamScreenTip.Footer"/> areas is 
            the main tooltip area, with its content provided by the base ToolTip class’s Content property.</p>
            </remarks>
            <seealso cref="P:Infragistics.Windows.Controls.XamScreenTip.Header"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamScreenTip.Footer"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamScreenTip.#ctor">
            <summary>
            Initializes an instance of the <see cref="T:Infragistics.Windows.Controls.XamScreenTip"/> class.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamScreenTip.FooterProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamScreenTip.Footer"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamScreenTip.FooterSeparatorVisibilityProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamScreenTip.FooterSeparatorVisibility"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamScreenTip.FooterTemplateProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamScreenTip.FooterTemplate"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamScreenTip.FooterTemplateSelectorProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamScreenTip.FooterTemplateSelector"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamScreenTip.HeaderProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamScreenTip.Header"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamScreenTip.HeaderSeparatorVisibilityProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamScreenTip.HeaderSeparatorVisibility"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamScreenTip.HeaderTemplateProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamScreenTip.HeaderTemplate"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamScreenTip.HeaderTemplateSelectorProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamScreenTip.HeaderTemplateSelector"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamScreenTip.ThemeProperty">
            <summary>
            Identifies the 'Theme' dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamScreenTip.ThemeChangedEvent">
            <summary>
            Event ID for the 'ThemeChanged' routed event
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamScreenTip.OnThemeChanged(System.String,System.String)">
            <summary>
            Called when property 'Theme' changes
            </summary>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamScreenTip.Footer">
            <summary>
            Returns/sets the content for the footer area of the XamScreenTip.  The default is null.
            </summary>
            <remarks>
            <p class="body">The footer area appears at the bottom of the tooltip below the main tooltip content.  If set to null, no footer is displayed.</p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.XamScreenTip.FooterProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamScreenTip.FooterTemplate"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamScreenTip.FooterSeparatorVisibility"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamScreenTip.FooterTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamScreenTip.Header"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamScreenTip.FooterSeparatorVisibility">
            <summary>
            Returns/sets the Visibility of the <see cref="P:Infragistics.Windows.Controls.XamScreenTip.Footer"/> separator which divides the footer area from the main content.  The default is Visibility.Visible.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamScreenTip.FooterSeparatorVisibilityProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamScreenTip.Footer"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamScreenTip.FooterTemplate"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamScreenTip.FooterTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamScreenTip.Header"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamScreenTip.FooterTemplate">
            <summary>
            Returns/sets the data template used to display the <see cref="P:Infragistics.Windows.Controls.XamScreenTip.Footer"/> content.  The default value is null.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamScreenTip.FooterTemplateProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamScreenTip.FooterSeparatorVisibility"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamScreenTip.Footer"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamScreenTip.FooterTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamScreenTip.Header"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamScreenTip.FooterTemplateSelector">
            <summary>
            Returns/sets the data template selector to provide customer template selection logic for the <see cref="P:Infragistics.Windows.Controls.XamScreenTip.FooterTemplate"/>.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamScreenTip.FooterTemplateSelectorProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamScreenTip.FooterTemplate"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamScreenTip.FooterSeparatorVisibility"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamScreenTip.Footer"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamScreenTip.Header"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamScreenTip.Header">
            <summary>
            Returns/sets the content for the header area of the XamScreenTip.  The default is null.
            </summary>
            <remarks>
            <p class="body">The header area appears at the bottom of the tooltip below the main tooltip content.  If set to null, no header is displayed.</p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.XamScreenTip.HeaderProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamScreenTip.HeaderTemplate"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamScreenTip.HeaderSeparatorVisibility"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamScreenTip.HeaderTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamScreenTip.Footer"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamScreenTip.HeaderSeparatorVisibility">
            <summary>
            Returns/sets the Visibility of the <see cref="P:Infragistics.Windows.Controls.XamScreenTip.Header"/> separator which divides the header area from the main content.  The default is Visibility.Collapsed.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamScreenTip.HeaderSeparatorVisibilityProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamScreenTip.Header"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamScreenTip.HeaderTemplate"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamScreenTip.HeaderTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamScreenTip.Footer"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamScreenTip.HeaderTemplate">
            <summary>
            Returns/sets the data template used to display the <see cref="P:Infragistics.Windows.Controls.XamScreenTip.Header"/> content.  The default value is null.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamScreenTip.HeaderTemplateProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamScreenTip.HeaderSeparatorVisibility"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamScreenTip.Header"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamScreenTip.HeaderTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamScreenTip.Footer"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamScreenTip.HeaderTemplateSelector">
            <summary>
            Returns/sets the data template selector to provide customer template selection logic for the <see cref="P:Infragistics.Windows.Controls.XamScreenTip.HeaderTemplate"/>.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamScreenTip.HeaderTemplateSelectorProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamScreenTip.HeaderTemplate"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamScreenTip.HeaderSeparatorVisibility"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamScreenTip.Header"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamScreenTip.Footer"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamScreenTip.Theme">
            <summary>
            Gets/sets the default look for the control.
            </summary>
            <remarks>
            <para class="body">If left set to null then the default 'Generic' theme will be used. 
            This property can be set to the name of any registered theme (see <see cref="M:Infragistics.Windows.Themes.ThemeManager.Register(System.String,System.String,System.Windows.ResourceDictionary)"/> and <see cref="M:Infragistics.Windows.Themes.ThemeManager.GetThemes"/> methods).</para>
            <para></para>
            <para class="note"><b>Note: </b> The following themes are pre-registered by this assembly but additional themes can be registered as well.
            <ul>
            <li>"Aero" - a theme that is compatible with Vista's 'Aero' theme.</li>
            <li>"Generic" - the default theme.</li>
            <li>"LunaNormal" - a theme that is compatible with XP's 'blue' theme.</li>
            <li>"LunaOlive" - a theme that is compatible with XP's 'olive' theme.</li>
            <li>"LunaSilver" - a theme that is compatible with XP's 'silver' theme.</li>
            <li>"Office2k7Black" - a theme that is compatible with MS Office 2007's 'Black' theme.</li>
            <li>"Office2k7Blue" - a theme that is compatible with MS Office 2007's 'Blue' theme.</li>
            <li>"Office2k7Silver" - a theme that is compatible with MS Office 2007's 'Silver' theme.</li>
            <li>"Onyx" - a theme that features black and orange highlights.</li>
            <li>"Royale" - a theme that features subtle blue highlights.</li>
            <li>"RoyaleStrong" - a theme that features strong blue highlights.</li>
            </ul>
            </para>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Themes.ThemeManager"/>
            <seealso cref="F:Infragistics.Windows.Controls.XamScreenTip.ThemeProperty"/>
        </member>
        <member name="E:Infragistics.Windows.Controls.XamScreenTip.ThemeChanged">
            <summary>
            Occurs when the 'Theme' property changes
            </summary>
        </member>
        <member name="T:Infragistics.Windows.Controls.XamTabControl">
            <summary>
            A custom tab control with multiple layout styles and tab item scrolling functionality.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamTabControl.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Windows.Controls.XamTabControl"/>
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamTabControl.OnApplyTemplate">
            <summary>
            Invoked when the template is applied to the control.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamTabControl.OnCreateAutomationPeer">
            <summary>
            Called to create an automation peer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamTabControl.OnInitialized(System.EventArgs)">
            <summary>
            Invoked after the element has been initialized.
            </summary>
            <param name="e">Provides information for the event.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamTabControl.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Helper method for processing a keydown.
            </summary>
            <param name="e">Provides information about the keyboard event</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamTabControl.OnMouseDoubleClick(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when the mouse has been double clicked within the tab control.
            </summary>
            <param name="e">Provides information about the event arguments</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamTabControl.GetContainerForItemOverride">
            <summary>
            Returns an instance of element used to display an item within the tab control.
            </summary>
            <returns>An instance of the <see cref="T:Infragistics.Windows.Controls.TabItemEx"/> class</returns>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamTabControl.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when the mouse is being pressed down on an element within the control.
            </summary>
            <param name="e">Provides information about the mouse event.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamTabControl.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when the mouse is release on an element within the control.
            </summary>
            <param name="e">Provides information about the mouse event.</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamTabControl.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked when a property for the element has been changed.
            </summary>
            <param name="e">Provides information about the property change</param>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamTabControl.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Invoked when the selected tab has been changed.
            </summary>
            <param name="e">Provides information about the selection change.</param>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamTabControl.IsMultiRowProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamTabControl.IsMultiRow"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamTabControl.AllowMinimizeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamTabControl.AllowMinimize"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamTabControl.AllowTabClosingProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamTabControl.AllowTabClosing"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamTabControl.DropDownAnimationProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamTabControl.DropDownAnimation"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamTabControl.InterRowSpacingProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamTabControl.InterRowSpacing"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamTabControl.InterTabSpacingProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamTabControl.InterTabSpacing"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamTabControl.IsDropDownOpenProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamTabControl.IsDropDownOpen"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamTabControl.IsMinimizedProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamTabControl.IsMinimized"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamTabControl.IsTabItemPanelScrollingProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamTabControl.IsTabItemPanelScrolling"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamTabControl.MaximumSizeToFitAdjustmentProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamTabControl.MaximumSizeToFitAdjustment"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamTabControl.MaximumTabRowsProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamTabControl.MaximumTabRows"/> dependency property
            </summary>
            <seealso cref="P:Infragistics.Windows.Controls.XamTabControl.MaximumTabRows"/>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamTabControl.MinimumTabExtentProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamTabControl.MinimumTabExtent"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamTabControl.PostTabItemContentProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamTabControl.PostTabItemContent"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamTabControl.PostTabItemContentTemplateProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamTabControl.PostTabItemContentTemplate"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamTabControl.PostTabItemContentTemplateSelectorProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamTabControl.PostTabItemContentTemplateSelector"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamTabControl.PreferredDropDownExtentProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamTabControl.PreferredDropDownExtent"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamTabControl.PreferredDropDownPlacementCallbackProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamTabControl.PreferredDropDownPlacementCallback"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamTabControl.PreTabItemContentProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamTabControl.PreTabItemContent"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamTabControl.PreTabItemContentTemplateProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamTabControl.PreTabItemContentTemplate"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamTabControl.PreTabItemContentTemplateSelectorProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamTabControl.PreTabItemContentTemplateSelector"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamTabControl.ShowTabHeaderCloseButtonProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamTabControl.ShowTabHeaderCloseButton"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamTabControl.TabItemCloseButtonVisibilityProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamTabControl.TabItemCloseButtonVisibility"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamTabControl.TabItemContentHeightProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamTabControl.TabItemContentHeight"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamTabControl.TabItemHorizontalScrollBarVisibilityProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamTabControl.TabItemHorizontalScrollBarVisibility"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamTabControl.TabItemVerticalScrollBarVisibilityProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamTabControl.TabItemVerticalScrollBarVisibility"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamTabControl.TabLayoutStyleProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Windows.Controls.XamTabControl.TabLayoutStyle"/> dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamTabControl.TabPriorityProperty">
            <summary>
            Identifies the TabPriority attached dependency property
            </summary>
            <seealso cref="M:Infragistics.Windows.Controls.XamTabControl.GetTabPriority(System.Windows.DependencyObject)"/>
            <seealso cref="M:Infragistics.Windows.Controls.XamTabControl.SetTabPriority(System.Windows.DependencyObject,System.Int32)"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamTabControl.GetTabPriority(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the 'TabPriority' attached property
            </summary>
            <remarks>
            <p class="body">The priority is used to determine the order in which tabs are resized. For example, then when 
            the <see cref="P:Infragistics.Windows.Controls.XamTabControl.TabLayoutStyle"/> is set to <b>SingleRowSizeToFit</b>, tabs with a higher priority will be 
            increased up to the <see cref="P:Infragistics.Windows.Controls.XamTabControl.MaximumSizeToFitAdjustment"/> before other tabs with a lower priority</p>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.XamTabControl.TabPriorityProperty"/>
            <seealso cref="M:Infragistics.Windows.Controls.XamTabControl.SetTabPriority(System.Windows.DependencyObject,System.Int32)"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamTabControl.SetTabPriority(System.Windows.DependencyObject,System.Int32)">
            <summary>
            Sets the value of the 'TabPriority' attached property
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamTabControl.TabPriorityProperty"/>
            <seealso cref="M:Infragistics.Windows.Controls.XamTabControl.GetTabPriority(System.Windows.DependencyObject)"/>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamTabControl.ThemeProperty">
            <summary>
            Identifies the 'Theme' dependency property
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamTabControl.ThemeChangedEvent">
            <summary>
            Event ID for the 'ThemeChanged' routed event
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamTabControl.OnThemeChanged(System.String,System.String)">
            <summary>
            Called when property 'Theme' changes
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamTabControl.ExecuteCommand(System.Windows.Input.RoutedCommand)">
            <summary>
            Executes the specified RoutedCommand.
            </summary>
            <param name="command">The RoutedCommand to execute.</param>
            <returns>True if command was executed, false if canceled.</returns>
            <seealso cref="E:Infragistics.Windows.Controls.XamTabControl.ExecutingCommand"/>
            <seealso cref="E:Infragistics.Windows.Controls.XamTabControl.ExecutedCommand"/>
            <seealso cref="T:Infragistics.Windows.Controls.TabControlCommands"/>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamTabControl.DropDownClosedEvent">
            <summary>
            Event ID for the <see cref="E:Infragistics.Windows.Controls.XamTabControl.DropDownClosed"/> routed event
            </summary>
            <seealso cref="E:Infragistics.Windows.Controls.XamTabControl.DropDownClosed"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamTabControl.IsDropDownOpen"/>
            <seealso cref="M:Infragistics.Windows.Controls.XamTabControl.OnDropDownClosed(System.Windows.RoutedEventArgs)"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamTabControl.OnDropDownClosed(System.Windows.RoutedEventArgs)">
            <summary>
            Occurs after the dropdown of the minimized <see cref="T:Infragistics.Windows.Controls.XamTabControl"/> has been closed
            </summary>
            <seealso cref="E:Infragistics.Windows.Controls.XamTabControl.DropDownClosed"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamTabControl.IsDropDownOpen"/>
            <seealso cref="F:Infragistics.Windows.Controls.XamTabControl.DropDownClosedEvent"/>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamTabControl.DropDownOpenedEvent">
            <summary>
            Event ID for the <see cref="E:Infragistics.Windows.Controls.XamTabControl.DropDownOpened"/> routed event
            </summary>
            <seealso cref="E:Infragistics.Windows.Controls.XamTabControl.DropDownOpened"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamTabControl.IsDropDownOpen"/>
            <seealso cref="M:Infragistics.Windows.Controls.XamTabControl.OnDropDownOpened(System.Windows.RoutedEventArgs)"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamTabControl.OnDropDownOpened(System.Windows.RoutedEventArgs)">
            <summary>
            Occurs after the tool has been opened
            </summary>
            <seealso cref="E:Infragistics.Windows.Controls.XamTabControl.DropDownOpened"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamTabControl.IsDropDownOpen"/>
            <seealso cref="F:Infragistics.Windows.Controls.XamTabControl.DropDownOpenedEvent"/>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamTabControl.DropDownOpeningEvent">
            <summary>
            Event ID for the <see cref="E:Infragistics.Windows.Controls.XamTabControl.DropDownOpening"/> routed event
            </summary>
            <seealso cref="E:Infragistics.Windows.Controls.XamTabControl.DropDownOpening"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamTabControl.IsDropDownOpen"/>
            <seealso cref="M:Infragistics.Windows.Controls.XamTabControl.OnDropDownOpening(Infragistics.Windows.Controls.Events.TabControlDropDownOpeningEventArgs)"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamTabControl.OnDropDownOpening(Infragistics.Windows.Controls.Events.TabControlDropDownOpeningEventArgs)">
            <summary>
            Occurs before the tool has been opened
            </summary>
            <seealso cref="E:Infragistics.Windows.Controls.XamTabControl.DropDownOpening"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamTabControl.IsDropDownOpen"/>
            <seealso cref="F:Infragistics.Windows.Controls.XamTabControl.DropDownOpeningEvent"/>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamTabControl.ExecutingCommandEvent">
            <summary>
            Event ID for the <see cref="E:Infragistics.Windows.Controls.XamTabControl.ExecutingCommand"/> routed event
            </summary>
            <seealso cref="E:Infragistics.Windows.Controls.XamTabControl.ExecutingCommand"/>
            <seealso cref="M:Infragistics.Windows.Controls.XamTabControl.OnExecutingCommand(Infragistics.Windows.Controls.Events.ExecutingCommandEventArgs)"/>
            <seealso cref="T:Infragistics.Windows.Controls.Events.ExecutingCommandEventArgs"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamTabControl.OnExecutingCommand(Infragistics.Windows.Controls.Events.ExecutingCommandEventArgs)">
            <summary>
            Occurs before a command is executed.
            </summary>
            <remarks><para class="body">This event is cancellable.</para></remarks>
            <seealso cref="M:Infragistics.Windows.Controls.XamTabControl.ExecuteCommand(System.Windows.Input.RoutedCommand)"/>
            <seealso cref="E:Infragistics.Windows.Controls.XamTabControl.ExecutedCommand"/>
            <seealso cref="E:Infragistics.Windows.Controls.XamTabControl.ExecutingCommand"/>
            <seealso cref="F:Infragistics.Windows.Controls.XamTabControl.ExecutingCommandEvent"/>
            <seealso cref="T:Infragistics.Windows.Controls.Events.ExecutingCommandEventArgs"/>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamTabControl.ExecutedCommandEvent">
            <summary>
            Event ID for the <see cref="E:Infragistics.Windows.Controls.XamTabControl.ExecutedCommand"/> routed event
            </summary>
            <seealso cref="M:Infragistics.Windows.Controls.XamTabControl.ExecuteCommand(System.Windows.Input.RoutedCommand)"/>
            <seealso cref="E:Infragistics.Windows.Controls.XamTabControl.ExecutedCommand"/>
            <seealso cref="M:Infragistics.Windows.Controls.XamTabControl.OnExecutedCommand(Infragistics.Windows.Controls.Events.ExecutedCommandEventArgs)"/>
            <seealso cref="T:Infragistics.Windows.Controls.Events.ExecutedCommandEventArgs"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.XamTabControl.OnExecutedCommand(Infragistics.Windows.Controls.Events.ExecutedCommandEventArgs)">
            <summary>
            Occurs after a command is executed
            </summary>
            <seealso cref="M:Infragistics.Windows.Controls.XamTabControl.ExecuteCommand(System.Windows.Input.RoutedCommand)"/>
            <seealso cref="E:Infragistics.Windows.Controls.XamTabControl.ExecutingCommand"/>
            <seealso cref="E:Infragistics.Windows.Controls.XamTabControl.ExecutedCommand"/>
            <seealso cref="F:Infragistics.Windows.Controls.XamTabControl.ExecutedCommandEvent"/>
            <seealso cref="T:Infragistics.Windows.Controls.Events.ExecutedCommandEventArgs"/>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamTabControl.CloseButtonStyleKey">
            <summary>
            The key used to identify the style used for the close button.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamTabControl.MultiRowTabItemPagerStyleKey">
            <summary>
            The key used to identify the style used for the XamPager that contains the tab items when the TabLayoutStyle is set to one of the 'MultiRow...' settings.
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.XamPager"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamTabControl.TabLayoutStyle"/>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamTabControl.ScrollDownButtonStyleKey">
            <summary>
            The key used to identify the style used for the for the XamPager's scroll down button.
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.XamPager"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamPager.ScrollDownButtonStyle"/>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamTabControl.ScrollLeftButtonStyleKey">
            <summary>
            The key used to identify the style used for the for the XamPager's scroll left button.
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.XamPager"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamPager.ScrollLeftButtonStyle"/>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamTabControl.ScrollRightButtonStyleKey">
            <summary>
            The key used to identify the style used for the for the XamPager's scroll right button.
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.XamPager"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamPager.ScrollRightButtonStyle"/>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamTabControl.ScrollUpButtonStyleKey">
            <summary>
            The key used to identify the style used for the for the XamPager's scroll up button.
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.XamPager"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamPager.ScrollUpButtonStyle"/>
        </member>
        <member name="F:Infragistics.Windows.Controls.XamTabControl.SingleRowTabItemPagerStyleKey">
            <summary>
            The key used to identify the style used for the XamPager that contains the tab items when the TabLayoutStyle is set to one of the 'SingleRow...' settings.
            </summary>
            <seealso cref="T:Infragistics.Windows.Controls.XamPager"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamTabControl.TabLayoutStyle"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamTabControl.IsMultiRow">
            <summary>
            Indicates if the <see cref="P:Infragistics.Windows.Controls.XamTabControl.TabLayoutStyle"/> is one that would arrange the tab items in multiple rows.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamTabControl.IsMultiRowProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamTabControl.AllowMinimize">
            <summary>
            Determines if the control can be minimized via the user interface - e.g. by double clicking on a tab item.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamTabControl.AllowMinimizeProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamTabControl.AllowTabClosing">
            <summary>
            Returns or sets a nullable boolean indicating if the containing tab items may be closed by default.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamTabControl.AllowTabClosingProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.TabItemEx.AllowClosing"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamTabControl.DropDownAnimation">
            <summary>
            Returns or sets the animation used when IsMinimized is true and the control is showing/hiding the popup containing the selected content.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamTabControl.DropDownAnimationProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamTabControl.InterRowSpacing">
            <summary>
            The amount of space between rows of tab items.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamTabControl.InterRowSpacingProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamTabControl.InterTabSpacing">
            <summary>
            The amount of space between tab items.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamTabControl.InterTabSpacingProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamTabControl.IsDropDownOpen">
            <summary>
            Indicates if the minimized tab control is currently dropped down.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamTabControl.IsDropDownOpenProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamTabControl.IsMinimized">
            <summary>
            Determines if the contents of the selected tab are displayed in a popup instead of within the tab control itself.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamTabControl.IsMinimizedProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamTabControl.IsTabItemPanelScrolling">
            <summary>
            Returns a boolean indicating whether the scroll viewer containing the tab item panel is currently set up so that scrolling elements are visible.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamTabControl.IsTabItemPanelScrollingProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamTabControl.MaximumSizeToFitAdjustment">
            <summary>
            The maximum amount of additional size to add to an element when the TabLayoutStyle is 'SingleRowSizeToFit' or 'MultiRowSizeToFit'.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamTabControl.MaximumSizeToFitAdjustmentProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamTabControl.TabLayoutStyle"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamTabControl.MaximumTabRows">
            <summary>
            Determines the maximum number of tab rows that will be displayed before a vertical scrollbar will appear.
            </summary>
            <remarks>
            <para class="body">The property can only be set to a positive integer. It defaults to 3.</para>
            <para class="note"><b>Note:</b> This property is ignored if the <see cref="P:Infragistics.Windows.Controls.XamTabControl.TabLayoutStyle"/> property is not set to one of the 'Multi...' layouts.</para>
            </remarks>
            <seealso cref="F:Infragistics.Windows.Controls.XamTabControl.MaximumTabRowsProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamTabControl.TabLayoutStyle"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamTabControl.MinimumTabExtent">
            <summary>
            The minimum extent for a tab item. That is, the minimum physical width when the TabStripPlacement is Top or Bottom and the minimum physical height when the TabStripPlacement is Left or Right.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamTabControl.MinimumTabExtentProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamTabControl.PostTabItemContent">
            <summary>
            The content that should be displayed in the tab item header area to the right/bottom of the tab items.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamTabControl.PostTabItemContentProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamTabControl.PostTabItemContentTemplate">
            <summary>
            The template used to display the content of the <see cref="P:Infragistics.Windows.Controls.XamTabControl.PostTabItemContent"/>
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamTabControl.PostTabItemContentTemplateProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamTabControl.PostTabItemContentTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamTabControl.PostTabItemContent"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamTabControl.PostTabItemContentTemplateSelector">
            <summary>
            A DataTemplateSelector that can be used to provide custom logic for choosing the template for the <see cref="P:Infragistics.Windows.Controls.XamTabControl.PostTabItemContent"/>.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamTabControl.PostTabItemContentTemplateSelectorProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamTabControl.PostTabItemContentTemplate"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamTabControl.PostTabItemContent"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamTabControl.PreferredDropDownExtent">
            <summary>
            Returns the preferred extent (width when tabs are on top/bottom and height when tabs are on the left/right) for the dropdown of the tab control.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamTabControl.PreferredDropDownExtentProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamTabControl.PreferredDropDownPlacementCallback">
            <summary>
            Returns a delegate handler that positions the dropdown of the control.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamTabControl.PreferredDropDownPlacementCallbackProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamTabControl.PreTabItemContent">
            <summary>
            The content that should be displayed in the tab item header area to the left/top of the tab items.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamTabControl.PreTabItemContentProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamTabControl.PreTabItemContentTemplate">
            <summary>
            The template used to display the content of the <see cref="P:Infragistics.Windows.Controls.XamTabControl.PreTabItemContent"/>
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamTabControl.PreTabItemContentTemplateProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamTabControl.PreTabItemContentTemplateSelector"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamTabControl.PreTabItemContent"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamTabControl.PreTabItemContentTemplateSelector">
            <summary>
            A DataTemplateSelector that can be used to provide custom logic for choosing the template for the <see cref="P:Infragistics.Windows.Controls.XamTabControl.PreTabItemContent"/>.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamTabControl.PreTabItemContentTemplateSelectorProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamTabControl.PreTabItemContentTemplate"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamTabControl.PreTabItemContent"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamTabControl.ShowTabHeaderCloseButton">
            <summary>
            Returns or sets a boolean indicating whether a close button should be displayed within the tab item area of the control
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamTabControl.ShowTabHeaderCloseButtonProperty"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamTabControl.AllowTabClosing"/>
            <seealso cref="P:Infragistics.Windows.Controls.XamTabControl.TabItemCloseButtonVisibility"/>
            <seealso cref="P:Infragistics.Windows.Controls.TabItemEx.AllowClosing"/>
            <seealso cref="P:Infragistics.Windows.Controls.TabItemEx.CloseButtonVisibility"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamTabControl.TabItemCloseButtonVisibility">
            <summary>
            Returns or sets a the default value for the TabItemEx.CloseButtonVisibility determining when a tab item should display the close button.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamTabControl.TabItemCloseButtonVisibilityProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamTabControl.TabItemContentHeight">
            <summary>
            Returns or sets a value that controls the height of the content presenter used to display the 'Content' of the selected tab item.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamTabControl.TabItemContentHeightProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamTabControl.TabItemHorizontalScrollBarVisibility">
            <summary>
            Indicates the preferred visibility of the horizontal scroll elements for scrolling the tab items.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamTabControl.TabItemHorizontalScrollBarVisibilityProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamTabControl.TabItemVerticalScrollBarVisibility">
            <summary>
            Indicates the preferred visibility of the vertical scroll elements for scrolling the tab items.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamTabControl.TabItemVerticalScrollBarVisibilityProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamTabControl.TabLayoutStyle">
            <summary>
            Determines how the tab items will be arranged.
            </summary>
            <seealso cref="F:Infragistics.Windows.Controls.XamTabControl.TabLayoutStyleProperty"/>
        </member>
        <member name="P:Infragistics.Windows.Controls.XamTabControl.Theme">
            <summary>
            Gets/sets the default look for the control.
            </summary>
            <remarks>
            <para class="body">If left set to null then the default 'Generic' theme will be used. This property can 
            be set to the name of any registered theme (see <see cref="M:Infragistics.Windows.Themes.ThemeManager.Register(System.String,System.String,System.Windows.ResourceDictionary)"/> and <see cref="M:Infragistics.Windows.Themes.ThemeManager.GetThemes"/> methods).</para>
            <para></para>
            <para class="body">The following themes are pre-registered by this assembly but additional themes can be registered as well.
            <ul>
            <li>"Aero" - a theme that is compatible with Vista's 'Aero' theme.</li>
            <li>"Generic" - the default theme.</li>
            <li>"LunaNormal" - a theme that is compatible with XP's 'blue' theme.</li>
            <li>"LunaOlive" - a theme that is compatible with XP's 'olive' theme.</li>
            <li>"LunaSilver" - a theme that is compatible with XP's 'silver' theme.</li>
            <li>"Office2k7Black" - a theme that is compatible with MS Office 2007's 'Black' theme.</li>
            <li>"Office2k7Blue" - a theme that is compatible with MS Office 2007's 'Blue' theme.</li>
            <li>"Office2k7Silver" - a theme that is compatible with MS Office 2007's 'Silver' theme.</li>
            <li>"Onyx" - a theme that features black and orange highlights.</li>
            <li>"Royale" - a theme that features subtle blue highlights.</li>
            <li>"RoyaleStrong" - a theme that features strong blue highlights.</li>
            </ul>
            </para>
            </remarks>
            <seealso cref="T:Infragistics.Windows.Themes.ThemeManager"/>
            <seealso cref="F:Infragistics.Windows.Controls.XamTabControl.ThemeProperty"/>
        </member>
        <member name="E:Infragistics.Windows.Controls.XamTabControl.ThemeChanged">
            <summary>
            Invoked when the 'Theme' property has been changed.
            </summary>
        </member>
        <member name="E:Infragistics.Windows.Controls.XamTabControl.DropDownClosed">
            <summary>
            Occurs after the tool has been closed
            </summary>
            <seealso cref="M:Infragistics.Windows.Controls.XamTabControl.OnDropDownClosed(System.Windows.RoutedEventArgs)"/>
            <seealso cref="F:Infragistics.Windows.Controls.XamTabControl.DropDownClosedEvent"/>
        </member>
        <member name="E:Infragistics.Windows.Controls.XamTabControl.DropDownOpened">
            <summary>
            Occurs after the dropdown of the minimized <see cref="T:Infragistics.Windows.Controls.XamTabControl"/> has been opened
            </summary>
            <seealso cref="M:Infragistics.Windows.Controls.XamTabControl.OnDropDownOpened(System.Windows.RoutedEventArgs)"/>
            <seealso cref="F:Infragistics.Windows.Controls.XamTabControl.DropDownOpenedEvent"/>
        </member>
        <member name="E:Infragistics.Windows.Controls.XamTabControl.DropDownOpening">
            <summary>
            Occurs before the dropdown of the <see cref="T:Infragistics.Windows.Controls.XamTabControl"/> has been opened
            </summary>
            <seealso cref="M:Infragistics.Windows.Controls.XamTabControl.OnDropDownOpening(Infragistics.Windows.Controls.Events.TabControlDropDownOpeningEventArgs)"/>
            <seealso cref="F:Infragistics.Windows.Controls.XamTabControl.DropDownOpeningEvent"/>
        </member>
        <member name="E:Infragistics.Windows.Controls.XamTabControl.ExecutingCommand">
            <summary>
            Occurs before a command is executed
            </summary>
            <remarks><para class="body">This event is cancellable.</para></remarks>
            <seealso cref="M:Infragistics.Windows.Controls.XamTabControl.ExecuteCommand(System.Windows.Input.RoutedCommand)"/>
            <seealso cref="M:Infragistics.Windows.Controls.XamTabControl.OnExecutingCommand(Infragistics.Windows.Controls.Events.ExecutingCommandEventArgs)"/>
            <seealso cref="F:Infragistics.Windows.Controls.XamTabControl.ExecutingCommandEvent"/>
            <seealso cref="T:Infragistics.Windows.Controls.Events.ExecutingCommandEventArgs"/>
        </member>
        <member name="E:Infragistics.Windows.Controls.XamTabControl.ExecutedCommand">
            <summary>
            Occurs after a command is executed
            </summary>
            <seealso cref="M:Infragistics.Windows.Controls.XamTabControl.ExecuteCommand(System.Windows.Input.RoutedCommand)"/>
            <seealso cref="M:Infragistics.Windows.Controls.XamTabControl.OnExecutedCommand(Infragistics.Windows.Controls.Events.ExecutedCommandEventArgs)"/>
            <seealso cref="E:Infragistics.Windows.Controls.XamTabControl.ExecutingCommand"/>
            <seealso cref="F:Infragistics.Windows.Controls.XamTabControl.ExecutedCommandEvent"/>
            <seealso cref="T:Infragistics.Windows.Controls.Events.ExecutedCommandEventArgs"/>
        </member>
        <member name="T:Infragistics.Windows.Controls.TabControlCommands">
            <summary>
            Provides the list of RoutedCommands supported by the <see cref="T:Infragistics.Windows.Controls.XamTabControl"/>. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabControlCommands.CloseAll">
            <summary>
            Closes all tab items. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabControlCommands.CloseSelected">
            <summary>
            Close the selected tab. 
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabControlCommands.Expand">
            <summary>
            Expands the <see cref="T:Infragistics.Windows.Controls.XamTabControl"/> if it is minimized.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabControlCommands.Minimize">
            <summary>
            Minimizes the <see cref="T:Infragistics.Windows.Controls.XamTabControl"/>.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabControlCommands.SelectFirstTab">
            <summary>
            Selects the first tab in the <see cref="T:Infragistics.Windows.Controls.XamTabControl"/> that is not closed.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabControlCommands.SelectLastTab">
            <summary>
            Selects the last tab in the <see cref="T:Infragistics.Windows.Controls.XamTabControl"/> that is not closed.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabControlCommands.SelectNextTab">
            <summary>
            Selects the last tab in the <see cref="T:Infragistics.Windows.Controls.XamTabControl"/> that is not closed.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabControlCommands.SelectPreviousTab">
            <summary>
            Selects the last tab in the <see cref="T:Infragistics.Windows.Controls.XamTabControl"/> that is not closed.
            </summary>
        </member>
        <member name="F:Infragistics.Windows.Controls.TabControlCommands.ToggleMinimized">
            <summary>
            Toggles the <see cref="T:Infragistics.Windows.Controls.XamTabControl"/>'s minimized state.
            </summary>
        </member>
        <member name="M:Infragistics.Windows.Controls.TabControlCommands.GetCommandWrappers">
            <summary>
            The list of CommandWrappers for each supported command.
            </summary>
            <seealso cref="T:Infragistics.Windows.Commands.CommandWrapper"/>
        </member>
        <member name="M:Infragistics.Windows.Controls.TabControlCommands.LoadCommands">
            <summary>
            This method is provided as a convenience for initializing the statics in this class which kicks off
            the process of setting up and registering the commands.
            </summary>
        </member>
    </members>
</doc>
