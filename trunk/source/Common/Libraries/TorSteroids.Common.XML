<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TorSteroids.Common</name>
    </assembly>
    <members>
        <member name="T:TorSteroids.Common.Bit">
            <summary>
            Helper class for bit manipulation operations
            </summary>
        </member>
        <member name="M:TorSteroids.Common.Bit.UnSet(System.Enum,System.Enum[])">
            <summary>
            Unset one or more flags in [Flags]<paramref name="flaggedEnum"/>.
            </summary>
            <param name="flaggedEnum">The flagged <see cref="T:System.Enum"/>.</param>
            <param name="flags">The flags to clear (unset).</param>
            <returns>The new <see cref="T:System.Enum"/> with the flags cleared</returns>
            <remarks>If you need the more speedy version of this bit manipulations,
            please use the overload(s) with long or int parameters!</remarks>
        </member>
        <member name="M:TorSteroids.Common.Bit.UnSet(System.Int64,System.Int64[])">
            <summary>
            Unset one or more flags in <paramref name="flagVariable"/>.
            </summary>
            <param name="flagVariable">The flag variable.</param>
            <param name="flags">The flags to clear (unset).</param>
            <returns>The new long with the flags set</returns>
        </member>
        <member name="M:TorSteroids.Common.Bit.UnSet(System.Int32,System.Int32[])">
            <summary>
            Unset one or more flags in <paramref name="flagVariable"/>.
            </summary>
            <param name="flagVariable">The flag variable.</param>
            <param name="flags">The flags to clear (unset).</param>
            <returns>The new long with the flags set</returns>
        </member>
        <member name="M:TorSteroids.Common.Bit.UnSet(System.Byte,System.Int32[])">
            <summary>
            Unset one or more flags in <paramref name="flagVariable"/>.
            </summary>
            <param name="flagVariable">The flag variable.</param>
            <param name="flags">The flags to clear (unset).</param>
            <returns>The new long with the flags set</returns>
        </member>
        <member name="M:TorSteroids.Common.Bit.Set(System.Enum,System.Enum[])">
            <summary>
            Set one or more flags in [Flags]<paramref name="flaggedEnum"/>.
            </summary>
            <param name="flaggedEnum">The flagged <see cref="T:System.Enum"/>.</param>
            <param name="flags">The flags to set.</param>
            <returns>The new <see cref="T:System.Enum"/> with the flags set</returns>
            <remarks>If you need the more speedy version of this bit manipulations,
            please use the overload(s) with long or int parameters!</remarks>
        </member>
        <member name="M:TorSteroids.Common.Bit.Set(System.Int64,System.Int64[])">
            <summary>
            Set one or more flags in <paramref name="flagVariable"/>.
            </summary>
            <param name="flagVariable">The flag variable.</param>
            <param name="flags">The flags.</param>
            <returns></returns>
        </member>
        <member name="M:TorSteroids.Common.Bit.Set(System.Int32,System.Int32[])">
            <summary>
            Set one or more flags in <paramref name="flagVariable"/>.
            </summary>
            <param name="flagVariable">The flag variable.</param>
            <param name="flags">The flags.</param>
            <returns></returns>
        </member>
        <member name="M:TorSteroids.Common.Bit.Set(System.Byte,System.Int32[])">
            <summary>
            Set one or more flags in <paramref name="flagVariable"/>.
            </summary>
            <param name="flagVariable">The flag variable.</param>
            <param name="flags">The flags.</param>
            <returns></returns>
        </member>
        <member name="M:TorSteroids.Common.Bit.Toggle(System.Boolean,System.Enum,System.Enum[])">
            <summary>
            Set or unset one or more flags in [Flags]<paramref name="flaggedEnum"/>
            depending on the predicate value.
            </summary>
            <param name="predicate">if set to <c>true</c> [predicate].</param>
            <param name="flaggedEnum">The flagged <see cref="T:System.Enum"/>.</param>
            <param name="flags">The flags to set.</param>
            <returns>The new <see cref="T:System.Enum"/> with the flags set</returns>
            <remarks>If you need the more speedy version of this bit manipulations,
            please use the overload(s) with long or int parameters!</remarks>
        </member>
        <member name="M:TorSteroids.Common.Bit.Toggle(System.Boolean,System.Int64,System.Int64[])">
            <summary>
            Set or unset one or more flags in <paramref name="flagVariable"/>,
            depending on the predicate value.
            </summary>
            <param name="predicate">if set to <c>true</c> [predicate].</param>
            <param name="flagVariable">The flag variable.</param>
            <param name="flags">The flags.</param>
            <returns></returns>
        </member>
        <member name="M:TorSteroids.Common.Bit.Toggle(System.Boolean,System.Int32,System.Int32[])">
            <summary>
            Set or unset one or more flags in <paramref name="flagVariable"/>,
            depending on the predicate value.
            </summary>
            <param name="predicate">if set to <c>true</c> [predicate].</param>
            <param name="flagVariable">The flag variable.</param>
            <param name="flags">The flags.</param>
            <returns></returns>
        </member>
        <member name="M:TorSteroids.Common.Bit.Toggle(System.Boolean,System.Byte,System.Int32[])">
            <summary>
            Set or unset one or more flags in <paramref name="flagVariable"/>,
            depending on the predicate value.
            </summary>
            <param name="predicate">if set to <c>true</c> [predicate].</param>
            <param name="flagVariable">The flag variable.</param>
            <param name="flags">The flags.</param>
            <returns></returns>
        </member>
        <member name="M:TorSteroids.Common.Bit.IsSet(System.Enum,System.Enum)">
            <summary>
            Determines whether the specified <paramref name="flag"/> 
            in the [Flags]<paramref name="flaggedEnum"/> <see cref="T:System.Enum"/> is set.
            </summary>
            <param name="flaggedEnum">The flagged <see cref="T:System.Enum"/>.</param>
            <param name="flag">The flag.</param>
            <returns>
            	<c>true</c> if the specified flagged <see cref="T:System.Enum"/> is set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TorSteroids.Common.Bit.IsSet(System.Int64,System.Int64)">
            <summary>
            Determines whether the specified <paramref name="flag"/> 
            in the <paramref name="flagVariable"/> is set.
            </summary>
            <param name="flagVariable">The flag variable.</param>
            <param name="flag">The flag.</param>
            <returns>
            	<c>true</c> if the specified flag variable is set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TorSteroids.Common.Bit.IsSet(System.Int32,System.Int32)">
            <summary>
            Determines whether the specified <paramref name="flag"/> 
            in the <paramref name="flagVariable"/> is set.
            </summary>
            <param name="flagVariable">The flag variable.</param>
            <param name="flag">The flag.</param>
            <returns>
            	<c>true</c> if the specified flag variable is set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:TorSteroids.Common.DateTimeExt">
            <summary>
            Supports DateTime to be able to parse ISO 8601 / RFC2822/RFC822 formatted dates, and more
            </summary>
        </member>
        <member name="M:TorSteroids.Common.DateTimeExt.ParseIso8601DateTime(System.String)">
            <summary>
            Converts an ISO 8601 date to a DateTime object. Helper method needed to
            deal with timezone offset since they are unsupported by the (older or other targeted)
            .NET Framework(s).
            </summary>
            <param name="dateTime">DateTime string</param>
            <returns>
            DateTime instance with time converted to Universal Time (UTC)
            </returns>
            <exception cref="T:System.FormatException">On format errors parsing the <paramref name="dateTime"/></exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="dateTime"/> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="dateTime"/> is empty</exception>
            <remarks>
            See also W3C note at: http://www.w3.org/TR/NOTE-datetime
            </remarks>
        </member>
        <member name="M:TorSteroids.Common.DateTimeExt.ParseRfc2822DateTime(System.String)">
            <summary>
            Parse is able to parse RFC2822/RFC822 formatted dates.
            DateTime instance with date and time converted to Universal Time (UTC)
            is returned on success.
            </summary>
            <param name="dateTime">DateTime String to parse</param>
            <returns>
            DateTime instance with time converted to Universal Time (UTC)
            </returns>
            <exception cref="T:System.FormatException">On format errors parsing the <paramref name="dateTime"/> if it match RFC 2822 but another unexpected error occurs, or the <paramref name="dateTime"/> could not be parsed</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="dateTime"/> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="dateTime"/> is empty</exception>
        </member>
        <member name="F:TorSteroids.Common.DateTimeExt.ZoneBias">
            <summary>
            Time zone to bias hours map
            </summary>
        </member>
        <member name="F:TorSteroids.Common.DateTimeExt.ZoneAbbrBias">
            <summary>
            Time zone abbreviations to bias hours map
            </summary>
            <remarks>
            We do NOT consider non-uique time zone abbreviations, like "ADT", "AMST" or "AMT"...
            except "CST" / "EDT" - where we use North/Central American Time and Eastern Daylight Time 
            - that are mostly common;
            see http://www.timeanddate.com/library/abbreviations/timezones/ !!!
            </remarks>
        </member>
        <member name="M:System.DateTimeExtensions.DateToInteger(System.DateTime)">
            <summary>
            Returns the date part as integer in the format YYYYMMDD.
            </summary>
            <param name="dateTime">DateTime (only date part is relevant)</param>
            <returns>Int32</returns>
        </member>
        <member name="M:System.DateTimeExtensions.TimeToInteger(System.DateTime,System.Boolean)">
            <summary>
            Returns the time part as an integer in the format HHmmssfff.
            </summary>
            <param name="dateTime">DateTime (only time part is relevant)</param>
            <param name="convertToUniversalTime">Set this to true, if the provided time
            is not already a UTC time, else false.
            If it is true, a conversion to UniversalTime will happen! Default is: false</param>
            <returns>integer</returns>
        </member>
        <member name="T:System.ExceptionExtensions">
            <summary>
            Extensions for Exception class and parameter check throw helpers
            </summary>
        </member>
        <member name="F:System.ExceptionExtensions.PreserveException">
            <summary>
            Used to preserve stack traces on rethrow
            </summary>
        </member>
        <member name="M:System.ExceptionExtensions.PreserveExceptionStackTrace(System.Exception)">
            <summary>
            Calls the Exception's internal method to preserve its stack trace prior to rethrow
            </summary>
            <remarks>
            See http://weblogs.asp.net/fmarguerie/archive/2008/01/02/rethrowing-exceptions-and-preserving-the-full-call-stack-trace.aspx 
            for more info.
            </remarks>
            <param name="e"></param>
        </member>
        <member name="M:System.ExceptionExtensions.ToDescriptiveString(System.Exception)">
            <summary>
            Breaks and logs Exception and all its inner exceptions into one neatly formatted string.
            </summary>
        </member>
        <member name="M:System.ExceptionExtensions.ExceptionIfNull``1(``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the value is null.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The value to check for null.</param>
            <param name="argumentName">The name of the argument the value represents.</param>
            <exception cref="T:System.ArgumentNullException">The value is null.</exception>
        </member>
        <member name="M:System.ExceptionExtensions.ExceptionIfNull``1(``0,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the value is null.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The value to check for null.</param>
            <param name="argumentName">The name of the argument the value represents.</param>
            <param name="message">A message for the exception.</param>
            <exception cref="T:System.ArgumentNullException">The value is null.</exception>
        </member>
        <member name="M:System.ExceptionExtensions.ExceptionIfNullOrEmpty(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the specified value is null or
            throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified value is an
            empty string.
            </summary>
            <param name="value">The string to check for null or empty.</param>
            <param name="argumentName">The name of the argument the value represents.</param>
            <exception cref="T:System.ArgumentNullException">The value is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value is an empty string.</exception>
        </member>
        <member name="M:System.ExceptionExtensions.ExceptionIfNullOrTrimmedEmpty(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the specified value is null or
            throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified value is an
            empty string.
            </summary>
            <param name="value">The string to check for null or empty.</param>
            <param name="argumentName">The name of the argument the value represents.</param>
            <exception cref="T:System.ArgumentNullException">The value is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value is an empty string or only contains spaces.</exception>
        </member>
        <member name="M:System.ExceptionExtensions.ExceptionIfOutOfRange``1(``0,``0,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified value is not within the range
            specified by the <paramref name="lowerBound"/> and <paramref name="upperBound"/> parameters.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The value to check that it's not out of range.</param>
            <param name="lowerBound">The lowest value that's considered being within the range.</param>
            <param name="upperBound">The highest value that's considered being within the range.</param>
            <param name="argumentName">The name of the argument the value represents.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The value is not within the given range.</exception>
        </member>
        <member name="M:System.ExceptionExtensions.ExceptionIfOutOfRange``1(``0,``0,``0,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified value is not within the range
            specified by the <paramref name="lowerBound"/> and <paramref name="upperBound"/> parameters.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The value to check that it's not out of range.</param>
            <param name="lowerBound">The lowest value that's considered being within the range.</param>
            <param name="upperBound">The highest value that's considered being within the range.</param>
            <param name="argumentName">The name of the argument the value represents.</param>
            <param name="message">A message for the exception.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The value is not within the given range.</exception>
        </member>
        <member name="M:System.ExceptionExtensions.ExceptionIfIndexOutOfRange(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.IndexOutOfRangeException"/> if the specified index is not within the range
            specified by the <paramref name="lowerBound"/> and <paramref name="upperBound"/> parameters.
            </summary>
            <param name="index">The index to check that it's not out of range.</param>
            <param name="lowerBound">The lowest value considered being within the range.</param>
            <param name="upperBound">The highest value considered being within the range.</param>
            <param name="argumentName">The name of the argument the value represents.</param>
            <exception cref="T:System.IndexOutOfRangeException">The index is not within the given range.</exception>
        </member>
        <member name="M:System.ExceptionExtensions.ExceptionIfIndexOutOfRange(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            Throws an <see cref="T:System.IndexOutOfRangeException"/> if the specified index is not within the range
            specified by the <paramref name="lowerBound"/> and <paramref name="upperBound"/> parameters.
            </summary>
            <param name="index">The index to check that it's not out of range.</param>
            <param name="lowerBound">The lowest value considered being within the range.</param>
            <param name="upperBound">The highest value considered being within the range.</param>
            <param name="argumentName">The name of the argument the value represents.</param>
            <exception cref="T:System.IndexOutOfRangeException">The index is not within the given range.</exception>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
            <example>
            <code>
            [LocalizationRequiredAttribute(true)]
            public class Foo
            {
              private string str = "my string"; // Warning: Localizable string
            }
            </code>
            </example>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/> class with
            <see cref="P:JetBrains.Annotations.LocalizationRequiredAttribute.Required"/> set to <see langword="true"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/> class.
            </summary>
            <param name="required"><c>true</c> if a element should be localized; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.Equals(System.Object)">
            <summary>
            Returns whether the value of the given object is equal to the current <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/>.
            </summary>
            <param name="obj">The object to test the value equality of. </param>
            <returns>
            <c>true</c> if the value of the given object is equal to that of the current; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/>.</returns>
        </member>
        <member name="P:JetBrains.Annotations.LocalizationRequiredAttribute.Required">
            <summary>
            Gets a value indicating whether a element should be localized.
            <value><c>true</c> if a element should be localized; otherwise, <c>false</c>.</value>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments. 
            Parameter, which contains format string, should be given in constructor.
            The format string should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/> -like form
            </summary>
            <example>
            <code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args)
            {
              //Do something
            }
            public void Foo()
            {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code>
            </example>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes new instance of StringFormatMethodAttribute
            </summary>
            <param name="formatParameterName">Specifies which parameter of an annotated method should be treated as format-string</param>
        </member>
        <member name="P:JetBrains.Annotations.StringFormatMethodAttribute.FormatParameterName">
            <summary>
            Gets format parameter name
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one of the parameters
            of the caller function.
            For example, ReSharper annotates the parameter of <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <example>
            <code>
            public void Foo(string param)
            {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface
             and this method is used to notify that some property value changed.
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example>
             <code>
             public class Foo : INotifyPropertyChanged
             {
               public event PropertyChangedEventHandler PropertyChanged;
            
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName)
               {}
            
               private string _name;
               public string Name
               {
                 get { return _name; }
                 set
                 {
                   _name = value;
                   NotifyChanged("LastName"); // Warning
                 }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes, 
            so the check for <c>null</c> is necessary before its usage.
            </summary>
            <example>
            <code>
            [CanBeNull]
            public object Test()
            {
              return null;
            }
            
            public void UseTest()
            {
              var p = Test(); 
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException' 
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example>
            <code>
            [NotNull]
            public object Foo()
            {
              return null; // Warning: Possible 'null' assignment
            } 
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output.
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted. <br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same) for method output means that the methos doesn't return normally. <br/>
            <c>canbenull</c> annotation is only applicable for output parameters. <br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row, or use single attribute with rows separated by semicolon. <br/>
            </syntax>
            <examples>
            <list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // Regular Assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // String.IsNullOrEmpty
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null, and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list>
            </examples>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c> should be used instead.
            However, using '==' or '!=' for comparison with <c>null</c> is always permitted.
            </summary>
            <example>
            <code>
            [CannotApplyEqualityOperator]
            class NoEquality
            {
            }
            
            class UsesNoEquality
            {
              public void Test()
              {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
            
                if (ca1 != null) // OK
                {
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked with 
            the target attribute to implement or inherit specific type or types.
            </summary>
            <example>
            <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute 
            {}
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent
            {}
            </code>
            </example>
        </member>
        <member name="M:JetBrains.Annotations.BaseTypeRequiredAttribute.#ctor(System.Type)">
            <summary>
            Initializes new instance of BaseTypeRequiredAttribute
            </summary>
            <param name="baseType">Specifies which types are required</param>
        </member>
        <member name="P:JetBrains.Annotations.BaseTypeRequiredAttribute.BaseTypes">
            <summary>
            Gets enumerations of specified base types
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.UsedImplicitlyAttribute.TargetFlags">
            <summary>
            Gets value indicating what is meant to be used
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper
            to not mark symbols marked with such attributes as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.MeansImplicitUseAttribute.TargetFlags">
            <summary>
            Gets value indicating what is meant to be used
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>
            Only entity marked with attribute considered used
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>
            Indicates implicit assignment to a member
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>
            Members of entity marked with attribute are considered used
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>
            Entity marked with attribute and all its members considered used
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack. 
            If the parameter is a delegate, indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
             <summary>
             Indicates that a method does not make any observable state changes.
             The same as <see cref="!:System.Diagnostics.Contracts.PureAttribute"/>
             </summary>
             <example>
             <code>
             [Pure]
             private int Multiply(int x, int y)
             {
               return x*y;
             }
            
             public void Foo()
             {
               const int a=2, b=2;
               Multiply(a, b); // Waring: Return value of pure method is not used
             }
             </code>
             </example>
        </member>
        <member name="T:JetBrains.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder within a web project.
            Path can be relative or absolute, starting from web root (~).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC action.
            If applied to a method, the MVC action name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to 
            <see cref="!:System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)"/>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC araa.
            Use this attribute for custom wrappers similar to 
            <see cref="!:System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)"/>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC controller.
            If applied to a method, the MVC controller name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to 
            <see cref="!:System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)"/> 
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master.
            Use this attribute for custom wrappers similar to 
            <see cref="!:System.Web.Mvc.Controller.View(String, String)"/>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type.
            Use this attribute for custom wrappers similar to 
            <see cref="!:System.Web.Mvc.Controller.View(String, Object)"/>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC partial view.
            If applied to a method, the MVC partial view name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to 
            <see cref="!:System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)"/>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcSupressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling all inspections for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <see cref="!:System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)"/>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to 
            <see cref="!:System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)"/>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC view.
            If applied to a method, the MVC view name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to 
            <see cref="!:System.Web.Mvc.Controller.View(Object)"/>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name.
            </summary>
            <example>
            <code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl)
            {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <see cref="!:System.Web.WebPages.WebPageBase.RenderSection(String)"/>
            </summary>
        </member>
        <member name="M:System.FlaggedEnumExtensions.ClearFlag``1(System.Enum,``0[])">
            <summary>
            Clears the flag.
            </summary>
            <typeparam name="T">Value type: Enum</typeparam>
            <param name="extendee">The extendee.</param>
            <param name="flags">The flags.</param>
            <returns></returns>
        </member>
        <member name="M:System.FlaggedEnumExtensions.SetFlag``1(System.Enum,``0[])">
            <summary>
            Sets the flag.
            </summary>
            <typeparam name="T">Value type: Enum</typeparam>
            <param name="extendee">The extendee.</param>
            <param name="flags">The flags.</param>
            <returns></returns>
        </member>
        <member name="M:System.FlaggedEnumExtensions.ToggleFlag``1(System.Enum,System.Boolean,``0[])">
            <summary>
            Set or unset one or more flags in [Flags]<paramref name="extendee"/>
            depending on the predicate value.
            </summary>
            <typeparam name="T">Value type: Enum</typeparam>
            <param name="extendee">The extendee.</param>
            <param name="predicate">The condition how to set the flags.</param>
            <param name="flags">The flags to toggle.</param>
            <returns></returns>
        </member>
        <member name="T:TorSteroids.Common.Fluent.FluentContext`1">
            <summary>
            Supports you to write/provide more readable code.
            </summary>
            <remarks>
            For debugging hints, error reporting and logging through the call chain please 
            refer to http://en.wikipedia.org/wiki/Fluent_interface#Problems
            </remarks>
            <typeparam name="TC">The type to be chained by the fluent context.</typeparam>
            <see cref="!:http://en.wikipedia.org/wiki/Fluent_interface"/>
        </member>
        <member name="T:TorSteroids.Common.Fluent.IFluentInterface">
            <summary>
            Interface that is used to build fluent interfaces and hides methods declared by <see cref="T:System.Object"/> from IntelliSense.
            </summary>
            <remarks>Code that consumes implementations of this interface should expect one of two things:
             <list type="number">
               <item>When referencing the interface from within the same solution (project reference), you will still see the methods this interface is meant to hide.</item>
               <item>When referencing the interface through the compiled output assembly (external reference), the standard Object methods will be hidden as intended.</item>
             </list>
            See http://bit.ly/ifluentinterface for more information.
            <para>
            For Resharper users: you just need to configure resharper to respect the <see cref="T:System.ComponentModel.EditorBrowsableAttribute"/> attribute. 
            In Resharper Options, go to Environment | IntelliSense | Completion Appearance and check “Filter members by [EditorBrowsable] attribute.
            </para>
            </remarks>
        </member>
        <member name="M:TorSteroids.Common.Fluent.IFluentInterface.GetType">
            <summary>Redeclaration that hides the <see cref="M:System.Object.GetType"/> method from IntelliSense.</summary> 
        </member>
        <member name="M:TorSteroids.Common.Fluent.IFluentInterface.GetHashCode">
            <summary>Redeclaration that hides the <see cref="M:System.Object.GetHashCode"/> method from IntelliSense.</summary>
        </member>
        <member name="M:TorSteroids.Common.Fluent.IFluentInterface.ToString">
            <summary> Redeclaration that hides the <see cref="M:System.Object.ToString"/> method from IntelliSense.</summary>    
        </member>
        <member name="M:TorSteroids.Common.Fluent.IFluentInterface.Equals(System.Object)">
            <summary>Redeclaration that hides the <see cref="M:System.Object.Equals(System.Object)"/> method from IntelliSense. </summary>
        </member>
        <member name="T:TorSteroids.Common.Resources.SR">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:TorSteroids.Common.Resources.SR.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:TorSteroids.Common.Resources.SR.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:TorSteroids.Common.Resources.SR.ArgumentOutOfRangeExceptionMessage">
            <summary>
              Looks up a localized string similar to {0} value must be between {1} and {2}..
            </summary>
        </member>
        <member name="P:TorSteroids.Common.Resources.SR.ArgumentOutOfRangeStringLengthExceptionMessage">
            <summary>
              Looks up a localized string similar to The length of the string &apos;{0}&apos; may not be 0..
            </summary>
        </member>
        <member name="P:TorSteroids.Common.Resources.SR.ArgumentOutOfRangeStringSpacesExceptionMessage">
            <summary>
              Looks up a localized string similar to The string &apos;{0}&apos; may not contain spaces only..
            </summary>
        </member>
        <member name="P:TorSteroids.Common.Resources.SR.IndexOutOfRangeExceptionMessage">
            <summary>
              Looks up a localized string similar to {0} index value must be between {1} and {2}..
            </summary>
        </member>
        <member name="P:TorSteroids.Common.Resources.SR.RFC2822GeneralParseDateTimeExceptionMessage">
            <summary>
              Looks up a localized string similar to RFC2822 date parse failed for input &apos;{1}&apos;: {0}.
            </summary>
        </member>
        <member name="P:TorSteroids.Common.Resources.SR.RFC2822InvalidTimezoneFormatExceptionMessage">
            <summary>
              Looks up a localized string similar to Invalid Timezone Format: {0}..
            </summary>
        </member>
        <member name="P:TorSteroids.Common.Resources.SR.RFC2822ParseGroupsExceptionMessage">
            <summary>
              Looks up a localized string similar to RFC2822 date regex match succeeds, but parse the groups raised a &apos;{0}&apos; exception for input &apos;{1}&apos;..
            </summary>
        </member>
        <member name="M:System.StringExtensions.FormatWith(System.String,System.Object[])">
            <summary>
            Formats the string with the provided placeholder arguments.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
            <returns></returns>
        </member>
    </members>
</doc>
