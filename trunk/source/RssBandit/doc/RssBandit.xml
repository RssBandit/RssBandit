<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RSSBandit</name>
    </assembly>
    <members>
        <member name="T:RssBandit.WinGui.Utility.MultiIcon">
            <summary>
            Major part of that code is from Matthew Hazlett. Thanks!
            See also http://www.codeproject.com/dotnet/MultiIcon.asp
            </summary>
            <remarks>
            Changes:
             * impl. IDisposable
             * fileLoad now open filestream with using
             * findIcon search for high color versions (but &lt; 32 bits per pixel)
            </remarks>
        </member>
        <member name="T:System.Windows.Forms.ThListView.ThreadCancelEventArgs">
            <summary>
            Summary description for ThreadCancelEventArgs.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ThListView.ThreadEventArgs">
            <summary>
            Summary description for ThreadEventArgs.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ThListView.ListLayoutEventArgs">
            <summary>
            Summary description for ListLayoutEventArgs.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ThListView.ListLayoutCancelEventArgs">
            <summary>
            Summary description for ListLayoutCancelEventArgs.
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Controls.NavigatorHeaderHelper">
            <summary>
            NavigatorHeaderHelper interacts with the provided 
            UltraExplorerBar and draws the image provided in the top
            right corner of the Group Header Area.
            Further it catches the mouse over and click to that image
            and raises the ImageClick event.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Controls.NavigatorHeaderHelper.#ctor(Infragistics.Win.UltraWinExplorerBar.UltraExplorerBar,System.Drawing.Image)">
            <summary>
            Initializes a new instance of the <see cref="T:RssBandit.WinGui.Controls.NavigatorHeaderHelper"/> class.
            </summary>
            <param name="navigator">The UltraExplorerBar</param>
            <param name="image">The image to draw.</param>
        </member>
        <member name="M:RssBandit.WinGui.Controls.NavigatorHeaderHelper.OnImageClick">
            <summary>
            Called when the image was clicked and raises the ImageClick event (if set).
            </summary>
        </member>
        <member name="E:RssBandit.WinGui.Controls.NavigatorHeaderHelper.ImageClick">
            <summary>
            Raised, if an image is assigned and the mouse click happens over them.
            </summary>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services2.FeedWebService">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services2.FeedWebService.#ctor">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services2.FeedWebService.GetNews(System.Int32,System.String,System.String,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services2.FeedWebService.BeginGetNews(System.Int32,System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services2.FeedWebService.EndGetNews(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services2.FeedWebService.GetNewsAsync(System.Int32,System.String,System.String,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services2.FeedWebService.GetNewsAsync(System.Int32,System.String,System.String,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services2.FeedWebService.MarkRead(System.Int32,System.String,System.Boolean,System.String)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services2.FeedWebService.BeginMarkRead(System.Int32,System.String,System.Boolean,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services2.FeedWebService.EndMarkRead(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services2.FeedWebService.MarkReadAsync(System.Int32,System.String,System.Boolean,System.String)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services2.FeedWebService.MarkReadAsync(System.Int32,System.String,System.Boolean,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services2.FeedWebService.MarkFeedsRead(System.Int32[],System.String)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services2.FeedWebService.BeginMarkFeedsRead(System.Int32[],System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services2.FeedWebService.EndMarkFeedsRead(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services2.FeedWebService.MarkFeedsReadAsync(System.Int32[],System.String)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services2.FeedWebService.MarkFeedsReadAsync(System.Int32[],System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services2.FeedWebService.GetFeedInfoSummaryFromXmlUrl(System.String[])">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services2.FeedWebService.BeginGetFeedInfoSummaryFromXmlUrl(System.String[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services2.FeedWebService.EndGetFeedInfoSummaryFromXmlUrl(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services2.FeedWebService.GetFeedInfoSummaryFromXmlUrlAsync(System.String[])">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services2.FeedWebService.GetFeedInfoSummaryFromXmlUrlAsync(System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services2.FeedWebService.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:RssBandit.CLR20.com.newsgator.services2.FeedWebService.GetNewsCompleted">
            <remarks/>
        </member>
        <member name="E:RssBandit.CLR20.com.newsgator.services2.FeedWebService.MarkReadCompleted">
            <remarks/>
        </member>
        <member name="E:RssBandit.CLR20.com.newsgator.services2.FeedWebService.MarkFeedsReadCompleted">
            <remarks/>
        </member>
        <member name="E:RssBandit.CLR20.com.newsgator.services2.FeedWebService.GetFeedInfoSummaryFromXmlUrlCompleted">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services2.NGAPIToken">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services2.NGAPIToken.Token">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services2.FeedInfoSummary">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services2.FeedInfoSummary.FeedID">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services2.FeedInfoSummary.Title">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services2.FeedInfoSummary.Description">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services2.FeedInfoSummary.XmlUrl">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services2.FeedInfoSummary.HtmlLink">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services2.GetNewsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services2.GetNewsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services2.GetNewsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services2.MarkReadCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services2.MarkFeedsReadCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services2.GetFeedInfoSummaryFromXmlUrlCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services2.GetFeedInfoSummaryFromXmlUrlCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services2.GetFeedInfoSummaryFromXmlUrlCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:RssBandit.ThreadWorker">
            <summary>
            ThreadWorker can be used to start a task in the background and report
            progress to the UI.
            </summary>
        </member>
        <member name="T:RssBandit.ThreadWorkerBase">
            <summary>
            ThreadWorkerBase can be used to start a task in the 
            background and report progress to the UI.
            </summary>
            <remarks>You have to inherit that class and implement 
            DoTaskWork() method with your very own long running tasks.
            </remarks>
        </member>
        <member name="M:RssBandit.ThreadWorkerBase.LocalRunProcess">
            <summary>
            Local Method for the actual work.
            </summary>
            <returns>Exception object on any failure for a task, 
            or null if task was cancelled or succeeds.</returns>
        </member>
        <member name="M:RssBandit.ThreadWorkerBase.DoTaskWork(RssBandit.ThreadWorkerTaskBase)">
            <summary>
            Have to be overridden to impl. the real work a background task
            have to fulfill
            </summary>
            <param name="task"></param>
        </member>
        <member name="F:RssBandit.ThreadWorkerBase.task">
            <summary>
            Current task to work on
            </summary>
        </member>
        <member name="M:RssBandit.ThreadWorkerBase.#ctor">
            <summary>
            Constructor used by caller using ThreadPool
            </summary>
        </member>
        <member name="M:RssBandit.ThreadWorkerBase.#ctor(RssBandit.ThreadWorkerTaskBase)">
            <summary>
            Constructor called by callee using ThreadPool OR ThreadStart
            </summary>
            <param name="task">ThreadWorkerTaskBase</param>
        </member>
        <member name="M:RssBandit.ThreadWorkerBase.IsTaskQueued(System.Enum)">
            <summary>
            Returns true, if a task is yet queued to work on
            </summary>
            <param name="task">Task</param>
            <returns>bool</returns>
        </member>
        <member name="M:RssBandit.ThreadWorkerBase.IsTaskWaitingForGlobalThreadResource(System.Enum)">
            <summary>
            Returns true, if a task is waiting to get queued for run
            </summary>
            <param name="task">Task</param>
            <returns>bool</returns>
        </member>
        <member name="M:RssBandit.ThreadWorkerBase.GetTaskThread(System.Enum)">
            <summary>
            Returns the Thread of a queued/running task.
            </summary>
            <param name="task">Task</param>
            <returns>Thread. If the task is not queued/running, it returns null</returns>
        </member>
        <member name="M:RssBandit.ThreadWorkerBase.AbortTask(System.Enum)">
            <summary>
            Abort a running task, if queued.
            </summary>
            <param name="task">Task to abort</param>
        </member>
        <member name="M:RssBandit.ThreadWorkerBase.WaitForTask(System.Enum)">
            <summary>
            Waits until a queued/running task finishes execution
            </summary>
            <param name="task">Task to wait for</param>
            <returns>True, if the thread terminates, false if the wait gets a timeout</returns>
        </member>
        <member name="M:RssBandit.ThreadWorkerBase.AbortAllTasks">
            <summary>
            Abort all running/queued tasks 
            </summary>
        </member>
        <member name="M:RssBandit.ThreadWorkerBase.ClearTasksWaitingForGlobalThreadResource">
            <summary>
            Clears all tasks that are waiting for the global resource. 
            </summary>
        </member>
        <member name="M:RssBandit.ThreadWorkerBase.QueueTask(RssBandit.ThreadWorkerTaskBase)">
            <summary>
            Queue a task using ThreadPool. If the same task is yet running,
            the call will wait for the first one to finish work (DuplicateTaskQueued.Wait).
            </summary>
            <param name="task">Task to start (ThreadWorkerTaskBase)</param>
            <returns>True, if the task was successfully queued up
            to the ThreadPool, else false.</returns>
        </member>
        <member name="M:RssBandit.ThreadWorkerBase.QueueTask(RssBandit.ThreadWorkerTaskBase,RssBandit.ThreadWorkerBase.DuplicateTaskQueued)">
            <summary>
            Queue a task using ThreadPool.
            </summary>
            <param name="task">Task to start</param>
            <param name="action">Duplicate task action</param>
            <returns>True, if the task was successfully queued up
            to the ThreadPool, else false.</returns>
        </member>
        <member name="M:RssBandit.ThreadWorkerBase.StartTask(RssBandit.ThreadWorkerTaskBase)">
            <summary>
            Queue a task using a freshly created Thread. If the same task is yet running,
            the call will wait for the first one to finish work (DuplicateTaskQueued.Wait).
            </summary>
            <param name="task">Task to start</param>
            <returns>True, if the task was successfully started, else false.</returns>
        </member>
        <member name="M:RssBandit.ThreadWorkerBase.StartTask(RssBandit.ThreadWorkerTaskBase,RssBandit.ThreadWorkerBase.DuplicateTaskQueued)">
            <summary>
            Queue a task using a freshly created Thread.
            </summary>
            <param name="task">Task to start</param>
            <param name="action">DuplicateTaskQueued</param>
            <returns>True, if the task was successfully started, else false.</returns>
        </member>
        <member name="M:RssBandit.ThreadWorkerBase.RunTaskSynchronized(RssBandit.ThreadWorkerTaskBase)">
            <summary>
            Execute a task in synchronized manner.
            </summary>
            <param name="task">Task to start</param>
            <returns>An Exception object on any failure within the task, 
            or null if the task was successfully finished or cancelled.</returns>
        </member>
        <member name="M:RssBandit.ThreadWorkerBase.RunTaskSynchronized(RssBandit.ThreadWorkerTaskBase,RssBandit.ThreadWorkerBase.DuplicateTaskQueued)">
            <summary>
            Execute a task in synchronized manner.
            </summary>
            <param name="task">Task to start</param>
            <param name="action">DuplicateTaskQueued</param>
            <returns>An Exception object on any failure within the task, 
            or null if the task was successfully finished or cancelled.</returns>
        </member>
        <member name="M:RssBandit.ThreadWorkerBase.RunProcess(System.Object)">
            <summary>
            Method for ThreadPool QueueWorkerItem
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:RssBandit.ThreadWorkerBase.RunProcess">
            <summary>
            Method for ThreadStart delegate
            </summary>
        </member>
        <member name="M:RssBandit.ThreadWorkerBase.OnTaskTimerElapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Called when taskTimer elapsed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Timers.ElapsedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:RssBandit.ThreadWorkerBase.DispatchInvocationToGuiThread(System.Object)">
            <summary>
            Dispatches the invocation to the GUI thread.
            </summary>
            <param name="methodInvocationAsObject">The invocation.</param>
        </member>
        <member name="P:RssBandit.ThreadWorkerBase.WaitForGlobalThreadResource">
            <summary>
            Set this to true, if all calls to StartTask/QueueTask
            should enqueue the requests as long the global resource
            required by the threaded task is not available.
            If it gets set to false, all queued thread tasks will start
            as they get queued for wait.
            
            A global resource could be e.g. the Internet connection.
            </summary>
        </member>
        <member name="P:RssBandit.ThreadWorkerBase.SynchronizingObject">
            <summary>
            object implementing ISynchronizeInvoke to sync. result
            delivery. Usually a form or a control.
            </summary>
        </member>
        <member name="T:RssBandit.ThreadWorkerBase.DuplicateTaskQueued">
            <summary>
            Controls the action ThreadWorker should apply,
            if the same task was yet queued.
            </summary>
        </member>
        <member name="F:RssBandit.ThreadWorkerBase.DuplicateTaskQueued.Ignore">
            <summary>
            Let the yet running task as is and ignore the new task (not started again)
            </summary>
        </member>
        <member name="F:RssBandit.ThreadWorkerBase.DuplicateTaskQueued.Allowed">
            <summary>
            Let the yet running task as is and start it again
            </summary>
        </member>
        <member name="F:RssBandit.ThreadWorkerBase.DuplicateTaskQueued.Wait">
            <summary>
            Wait for the queued task to finish, then start the new one
            </summary>
        </member>
        <member name="F:RssBandit.ThreadWorkerBase.DuplicateTaskQueued.Abort">
            <summary>
            Abort the queued/running task, then start the new one
            </summary>
        </member>
        <member name="F:RssBandit.ThreadWorkerBase.TaskStartInfo.StartMethod.ThreadStart">
            <summary>
            Use the Thread.Start() method to start the task
            </summary>
        </member>
        <member name="F:RssBandit.ThreadWorkerBase.TaskStartInfo.StartMethod.ThreadPool">
            <summary>
            Use the ThreadPool to enqueue the new thread
            </summary>
        </member>
        <member name="T:RssBandit.ThreadWorkerBase.MethodInvocation">
            <summary>
            Represents an invocation of method.
            </summary>
        </member>
        <member name="M:RssBandit.ThreadWorkerBase.MethodInvocation.#ctor(System.Delegate,System.Object[])">
            <summary>
            Constructs an instance of the MethodInvocation class.
            </summary>
            <param name="d">The delegate pointing to the method being executed.</param>
            <param name="args">Parameters of the invocation.</param>
        </member>
        <member name="F:RssBandit.ThreadWorkerBase.MethodInvocation.Delegate">
            <summary>
            The delegate pointing to the method being executed.
            </summary>
        </member>
        <member name="F:RssBandit.ThreadWorkerBase.MethodInvocation.Args">
            <summary>
            Parameters of the invocation.
            </summary>
        </member>
        <member name="M:RssBandit.ThreadWorkerBase.MethodInvocation.Invoke">
            <summary>
            Invokes the target method.
            </summary>
        </member>
        <member name="M:RssBandit.ThreadWorker.DoTaskWork(RssBandit.ThreadWorkerTaskBase)">
            <summary>
            The worker method.
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:RssBandit.ThreadWorker.#ctor">
            <summary>
            Constructor used by caller using ThreadPool
            </summary>
        </member>
        <member name="M:RssBandit.ThreadWorker.#ctor(RssBandit.ThreadWorkerTask)">
            <summary>
            Constructor called by callee using ThreadPool OR ThreadStart
            </summary>
            <param name="task"></param>
        </member>
        <member name="T:RssBandit.ThreadWorker.Task">
            <summary>
            Our tasks to work on in background
            </summary>
        </member>
        <member name="T:RssBandit.ThreadWorkerTask">
            <summary>
            ThreadWorkerTask connects the application with the 
            concrete task worker instance.
            </summary>
        </member>
        <member name="T:RssBandit.ThreadWorkerTaskBase">
            <summary>
            Describes Tasks to work on in background
            </summary>
        </member>
        <member name="M:RssBandit.ThreadWorkerTaskBase.GetWorkerInstance">
            <summary>
            Override to return your own implementation worker.
            </summary>
            <returns>ThreadWorkerBase</returns>
        </member>
        <member name="F:RssBandit.ThreadWorkerTaskBase.Arguments">
            <summary>
            Task Arguments
            </summary>
        </member>
        <member name="F:RssBandit.ThreadWorkerTaskBase.TaskID">
            <summary>
            Task ID required to manage tasks
            </summary>
        </member>
        <member name="F:RssBandit.ThreadWorkerTaskBase.ProgressHandler">
            <summary>
            The delegate method (callback) on the sender to call
            </summary>
        </member>
        <member name="F:RssBandit.ThreadWorkerTaskBase.WorkerThread">
            <summary>
            The thread running the task
            </summary>
        </member>
        <member name="M:RssBandit.ThreadWorkerTask.#ctor(RssBandit.ThreadWorker.Task,RssBandit.ThreadWorkerProgressHandler,RssBandit.RssBanditApplication,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:RssBandit.ThreadWorkerTask"/> class.
            </summary>
            <param name="task">The task.</param>
            <param name="progressHandler">The progress handler.</param>
            <param name="application">The RssBanditApplication.</param>
            <param name="args">The ask args.</param>
        </member>
        <member name="M:RssBandit.ThreadWorkerTask.GetWorkerInstance">
            <summary>
            Override to return our own implementation worker.
            </summary>
            <returns>ThreadWorkerBase</returns>
        </member>
        <member name="P:RssBandit.ThreadWorkerTask.Application">
            <summary>
            Gets the application instance.
            </summary>
        </member>
        <member name="T:RssBandit.ThreadResultManager">
            <summary>
            Serialize the results we get from threads to the be
            processed one by one and sync. to the provided SynchronizingObject
            </summary>
        </member>
        <member name="T:RssBandit.ThreadResultManager.ThreadResultInfo">
            <summary>
            Result container store
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.ItemActivateCallback">
            <summary>
            Delegate called on a NewsItem link click.
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.DisplayFeedPropertiesCallback">
            <summary>
            Delegate called on a Feed Properties link click.
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.FeedActivateCallback">
            <summary>
            Delegate called on a Feed link click.
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.EnclosureActivateCallback">
            <summary>
            dDelegate called on downloaded enclosure link click
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.ToastNotifier">
            <summary>
            Manages Toast Notification Windows.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.ToastNotifier.Alert(System.String,System.Int32,System.Collections.Generic.IList{NewsComponents.NewsItem})">
            <summary>
            Called to show the small toast alert window on new items received.
            </summary>
            <param name="feedName">Feedname to be displayed</param>
            <param name="dispItemCount">unread items count to display</param>
            <param name="items">list of the newest NewsItem's received. We assume,
            they are sorted with the newest items first!</param>
            <remarks>
            The parameter <c>dispItemCount</c> controls, if and how many item links
            are displayed in the window. This means; if 0 (zero) or lower than zero, nothing
            happens (no window). If one or more is specified, it displayes up to three items
            in the window. This way you can control, if there was allready e.g. 3 new items on the
            feed, and just only one new was received, that the window display only a link
            to that one newest item by specify 1 (one) as the parameter.
            </remarks>
        </member>
        <member name="M:RssBandit.WinGui.ToastNotifier.Alert(System.String,System.Int32,System.Collections.Generic.IList{NewsComponents.Net.DownloadItem})">
            <summary>
            Called to show the small toast alert window on new items received.
            </summary>
            <param name="feedName">Feedname to be displayed</param>
            <param name="dispItemCount">unread items count to display</param>
            <param name="items">list of the newest DownloadItem's received. We assume,
            they are sorted with the newest items first!</param>
            <remarks>
            The parameter <c>dispItemCount</c> controls, if and how many item links
            are displayed in the window. This means; if 0 (zero) or lower than zero, nothing
            happens (no window). If one or more is specified, it displayes up to three items
            in the window. This way you can control, if there was allready e.g. 3 new items on the
            feed, and just only one new was received, that the window display only a link
            to that one newest item by specify 1 (one) as the parameter.
            </remarks>
        </member>
        <member name="M:RssBandit.WinGui.ToastNotifier.Alert(System.String,System.Int32,System.Collections.IList)">
            <summary>
            Called to show the small toast alert window on new items received.
            </summary>
            <param name="feedName">Feedname to be displayed</param>
            <param name="dispItemCount">unread items count to display</param>
            <param name="items">list of the newest NewsItem's received. We assume,
            they are sorted with the newest items first!</param>
            <remarks>
            The parameter <c>dispItemCount</c> controls, if and how many item links
            are displayed in the window. This means; if 0 (zero) or lower than zero, nothing
            happens (no window). If one or more is specified, it displayes up to three items
            in the window. This way you can control, if there was allready e.g. 3 new items on the
            feed, and just only one new was received, that the window display only a link
            to that one newest item by specify 1 (one) as the parameter.
            </remarks>
        </member>
        <member name="M:RssBandit.WinGui.ToastNotifier.GetFreeToastWindowOffset">
            <summary>
            Gets the free toast window offset and mark it as in-use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RssBandit.WinGui.ToastNotifier.MarkToastWindowOffsetFree(System.Int32)">
            <summary>
            Marks the toast window offset free (to be re-used by a new window).
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="T:RssBandit.WinGui.Interfaces.ICommand">
            <summary>
            Form elements that can send commands have to implement ICommand
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Interfaces.ICommandComponent">
            <summary>
            General GUI Command Abstraction (from Menubar, Toolbar, ...)
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Interfaces.ExecuteCommandHandler">
            <summary>
            Delegate used to callback to mediator
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Interfaces.ITabState">
            <summary>
            State of our tabbed views
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Interfaces.FeedNodeType">
            <summary>
            Defines the types of the nodes known within the treeview.
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Interfaces.FeedNodeType.Root">
            <summary>
            The MyFeeds root node, or Special Feeds.
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Interfaces.FeedNodeType.Category">
            <summary>
            A feed category node.
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Interfaces.FeedNodeType.Feed">
            <summary>
            A real feed node.
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Interfaces.FeedNodeType.SmartFolder">
            <summary>
            Smart container node, like Flagged Items, Errors or Sent Items.
            Contains copies of the originals.
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Interfaces.FeedNodeType.Finder">
            <summary>
            Like a normal feed node, but contains different rss items aggregated
            on a certain criteria. Mean: holds references to rss items, that are also
            contained in the "real" feed. Example: Unread Items
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Interfaces.FeedNodeType.FinderCategory">
            <summary>
            A search folder category node.
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Forms.ControlHelpers.ToolbarHelper">
            <summary>
            Just a helper class to create IG Toolbars.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.ControlHelpers.ToolbarHelper.SetToolbarVisible(System.String,System.Boolean)">
            <summary>
            Sets the toolbar visible state.
            </summary>
            <param name="toolbarId">The toolbar id.</param>
            <param name="visible">if set to <c>true</c> [visible].</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.ControlHelpers.ToolbarHelper.IsToolbarVisible(System.String)">
            <summary>
            Determines whether [is toolbar visible] [the specified toolbar id].
            </summary>
            <param name="toolbarId">The toolbar id.</param>
            <returns>
            	<c>true</c> if [is toolbar visible] [the specified toolbar id]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:RssBandit.WinGui.Forms.ControlHelpers.ToolbarHelper.RssBanditToolbarManager">
            <summary> 
            This class is a custom tool provider that derives from UltraToolbarsManager. 
            See the IG docs for more information on the options available when creating custom tool providers. 
             
            The RssBanditToolbarManager class performs 2 important functions: 
                   1. Registering the custom tool types that it supports (see the private ToolFactory class‘s constructor) 
                       When registering a custom tool type, the tool provider: 
                           a. supplies a reference to an IToolProvider implementation 
                           b. supplies a Guid to identify the custom tool type.  This Guid will be contained in the 
                              customizer‘s request to create an instance of the custom tool type. 
                           c. supplies a descriptive string used in the NewTool dialog to identify the custom tool 
                           d. supplies a string to be used as the basis for the custom tool instance‘s key and caption 
                        
                   2. Contains a private ToolFactory class that implements the IToolProvider interface which allows the 
                      Customizer to call back when it needs to create an instance of a registered custom tool. 
                       
               The RssBanditToolbarManager also overrides the virtual property ShowBuiltInToolTypesInCustomizer to  
               demonstrate how to prevent toolbars manager from displaying the built-in tools in the designtime 
               customizer. 
            </summary> 
        </member>
        <member name="M:RssBandit.WinGui.Forms.ControlHelpers.ToolbarHelper.RssBanditToolbarManager.#cctor">
            <summary> 
            Static constructor used to create a single instance of our private tool provider class. 
            </summary> 
        </member>
        <member name="M:RssBandit.WinGui.Forms.ControlHelpers.ToolbarHelper.RssBanditToolbarManager.#ctor">
            <summary> 
            Standard constructor. 
            </summary> 
        </member>
        <member name="M:RssBandit.WinGui.Forms.ControlHelpers.ToolbarHelper.RssBanditToolbarManager.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:RssBandit.WinGui.Forms.ControlHelpers.ToolbarHelper.RssBanditToolbarManager"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.ControlHelpers.ToolbarHelper.RssBanditToolbarManager.Dispose(System.Boolean)">
            <summary>
            Overriden. Invoked when the component has been disposed.
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Forms.ControlHelpers.ToolbarHelper.RssBanditToolbarManager.ToolFactory">
            <summary> 
            A private class that implements IToolProvider. 
            </summary> 
        </member>
        <member name="M:RssBandit.WinGui.Forms.ControlHelpers.ToolbarHelper.RssBanditToolbarManager.ToolFactory.Infragistics#Win#UltraWinToolbars#IToolProvider#CreateToolInstance(System.Guid,System.String)">
            <summary> 
            Creates and returns an instance of the tool identified by the specified GUID id. 
            </summary> 
            <param name="toolID">The Guid identifier specified for the tool when it was registered.</param> 
            <param name="key">The key assigned to the tool.</param> 
            <returns>A new instance of the specified tool.</returns> 
        </member>
        <member name="T:RssBandit.WinGui.EntertainmentThreadHandlerBase">
            <summary>
            EntertainmentThreadHandlerBase used to display a waiting dialog (entertainment)
            for a longer running task in a separate thread.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.EntertainmentThreadHandlerBase.#ctor">
            <summary>
            Initializer.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.EntertainmentThreadHandlerBase.Start(System.Windows.Forms.IWin32Window)">
            <summary>
            Starts the task impl. within the abstract Run() method in a separate thread.
            </summary>
            <param name="owner">IWin32Window. Owner of the displayed entertainment dialog</param>
            <returns>DialogResult. 
            DialogResult.Cancel, if the user cancelled the operation by closing the dialog.
            DialogResult.Abort, if the operation time out.
            DialogResult.OK, else.
            </returns>
            <remarks>This call allow the user to cancel the operation by closing the entertainment dialog.
            If you don't want to allow that, call another overloaded Start() method</remarks>
            <exception cref="T:System.ArgumentNullException">If owner is null</exception>
        </member>
        <member name="M:RssBandit.WinGui.EntertainmentThreadHandlerBase.Start(System.Windows.Forms.IWin32Window,System.String)">
            <summary>
            Starts the task impl. within the abstract Run() method in a separate thread.
            </summary>
            <param name="owner">IWin32Window. Owner of the displayed entertainment dialog</param>
            <param name="waitMessage">String. Message, to display while entertained.</param>
            <returns>DialogResult. 
            DialogResult.Cancel, if the user cancelled the operation by closing the dialog.
            DialogResult.Abort, if the operation time out.
            DialogResult.OK, else.
            </returns>
            <remarks>This call allow the user to cancel the operation by closing the entertainment dialog.
            If you don't want to allow that, call another overloaded Start() method</remarks>
            <exception cref="T:System.ArgumentNullException">If owner is null</exception>
        </member>
        <member name="M:RssBandit.WinGui.EntertainmentThreadHandlerBase.Start(System.Windows.Forms.IWin32Window,System.String,System.Boolean)">
            <summary>
            Starts the task impl. within the abstract Run() method in a separate thread.
            </summary>
            <param name="owner">IWin32Window. Owner of the displayed entertainment dialog</param>
            <param name="waitMessage">String. Message, to display while entertained.</param>
            <param name="allowCancel">Boolean. Set to false to prevent user from cancelling the operation.</param>
            <returns>DialogResult. 
            DialogResult.Cancel, if the user cancelled the operation by closing the dialog.
            DialogResult.Abort, if the operation time out.
            DialogResult.OK, else.
            </returns>
            <exception cref="T:System.ArgumentNullException">If owner is null</exception>
        </member>
        <member name="M:RssBandit.WinGui.EntertainmentThreadHandlerBase.Run">
            <summary>
            Implentation required for the Thread start call
            </summary>
            <example>
            Here is the impl. recommendation:
            <code>
            	try {				
            		// long running task
            	} catch (System.Threading.ThreadAbortException) {
            		// eat up: op. cancelled
            	} catch(Exception ex) {
            		// handle them, or publish:
            		p_operationException = ex;
            	} finally {
            		this.WorkDone.Set();	// signal end of operation to dismiss the dialog
            	}
            </code>
            </example>
        </member>
        <member name="P:RssBandit.WinGui.EntertainmentThreadHandlerBase.Timeout">
            <summary>
            Info about the operation result
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.EntertainmentThreadHandlerBase.OperationSucceeds">
            <summary>
            Info about the operation result
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.EntertainmentThreadHandlerBase.OperationException">
            <summary>
            Gets the operation exception, if any
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.EntertainmentThreadHandlerBase.OperationMessage">
            <summary>
            Info about the operation displayed in the dialog
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.EntertainmentThreadHandlerBase.WorkDone">
            <summary>
            Gets the AutoResetEvent
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Forms.PreferencesDialog">
            <summary>
            PreferencesDialog provides the editing interface
            for all major application options.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.PreferencesDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.PreferencesDialog.checkUseRemoteStorage_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Enable or disable remote storage
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.PreferencesDialog.InitWebSearchEnginesTab">
            <summary>
            Initialze the WebSearchEngines Tab Page
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.PreferencesDialog.OnControlValidating(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            called on every control
            </summary>
            <param name="sender">Which control is validated?</param>
            <param name="e">EventArgs with cancel parameter</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.PreferencesDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Forms.PreferencesDialog.SelectedSection">
            <summary>
            Gets or sets the selected section.
            </summary>
            <value>The selected section.</value>
        </member>
        <member name="P:RssBandit.WinGui.Forms.PreferencesDialog.RemoteStorageProtocol">
            <summary>
            Gets or sets the remote storage protocol.
            </summary>
            <value>The remote storage protocol.</value>
        </member>
        <member name="P:RssBandit.WinGui.Forms.PreferencesDialog.MaxItemAge">
            <summary>
            Gets or sets the max item age.
            </summary>
            <value>The max item age.</value>
        </member>
        <member name="T:RssBandit.WinGui.Controls.NotifyIconState">
            <summary>
            Used to manage the animation -> static icon transition(s)
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Controls.NotifyIconState.#ctor(System.String,System.String,System.Drawing.Icon)">
            <summary>
            Icon state Initializer.
            </summary>
            <param name="stateID"></param>
            <param name="stateTip"></param>
            <param name="icon"></param>
        </member>
        <member name="M:RssBandit.WinGui.Controls.NotifyIconState.#ctor(System.String,System.String,System.Windows.Forms.ImageList,System.Int32)">
            <summary>
            Animation state initializer.
            </summary>
            <param name="stateID"></param>
            <param name="stateTip"></param>
            <param name="aniImages"></param>
            <param name="aniLoops"></param>
        </member>
        <member name="F:RssBandit.WinGui.Controls.NotifyIconAnimation.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Controls.NotifyIconAnimation.CallShellNotify(System.Int32)">
            <summary>
            Only a helper to do not waste up the code with too many #if...#else.
            Wraps calls to Shell_NotifyIcon() and use the member var _NID.
            </summary>
            <param name="dwMessage">Notify message to send</param>
            <returns></returns>
        </member>
        <member name="M:RssBandit.WinGui.Controls.NotifyIconAnimation.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Controls.NotifyIconAnimation.ShowBalloon(RssBandit.WinGui.Controls.NotifyIconAnimation.EBalloonIcon,System.String,System.String)">
            <summary>
            Overloaded. Display a balloon window on top of the tray icon.
            </summary>
            <param name="icon">Balloon window icon</param>
            <param name="text">Text to display</param>
            <param name="title">Title to display</param>
        </member>
        <member name="M:RssBandit.WinGui.Controls.NotifyIconAnimation.ShowBalloon(RssBandit.WinGui.Controls.NotifyIconAnimation.EBalloonIcon,System.String,System.String,System.Int32)">
            <summary>
            Overloaded. Display a balloon window on top of the tray icon.
            </summary>
            <param name="icon">Balloon window icon</param>
            <param name="text">Text to display</param>
            <param name="title">Title to display</param>
            <param name="timeout">Time in msecs that the balloon window should be displayed</param>
        </member>
        <member name="M:RssBandit.WinGui.Controls.NotifyIconAnimation.SetState(System.String)">
            <summary>
            Set the new state. If it is an animation, it starts immediatly
            and iterates the animation as defined within the NotifyIconState.AniLoops
            property. If it was set to -1, this will be an endless animation.
            </summary>
            <param name="stateKey"></param>
            <returns></returns>
        </member>
        <member name="T:RssBandit.WinGui.Controls.NotifyIconAnimation.MessageHandler">
            <summary>
            Handles the window native events
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Controls.NotifyIconAnimation.NOTIFYICONDATA">
            <summary>
            See also http://www.pinvoke.net/default.aspx/Structures.NOTIFYICONDATA
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Controls.NotifyIconAnimation.NOTIFYICONDATA.cbSize">
            <summary>
            Size of this structure, in bytes. 
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Controls.NotifyIconAnimation.NOTIFYICONDATA.hWnd">
            <summary>
            Handle to the window that receives notification messages associated with an icon in the 
            taskbar status area. The Shell uses hWnd and uID to identify which icon to operate on 
            when Shell_NotifyIcon is invoked. 
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Controls.NotifyIconAnimation.NOTIFYICONDATA.uID">
            <summary>
            Application-defined identifier of the taskbar icon. The Shell uses hWnd and uID to identify 
            which icon to operate on when Shell_NotifyIcon is invoked. You can have multiple icons 
            associated with a single hWnd by assigning each a different uID. 
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Controls.NotifyIconAnimation.NOTIFYICONDATA.uFlags">
            <summary>
            Flags that indicate which of the other members contain valid data. This member can be 
            a combination of the NIF_XXX constants.
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Controls.NotifyIconAnimation.NOTIFYICONDATA.uCallbackMessage">
            <summary>
            Application-defined message identifier. The system uses this identifier to send 
            notifications to the window identified in hWnd. 
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Controls.NotifyIconAnimation.NOTIFYICONDATA.hIcon">
            <summary>
            Handle to the icon to be added, modified, or deleted. 
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Controls.NotifyIconAnimation.NOTIFYICONDATA.szTip">
            <summary>
            String with the text for a standard ToolTip. It can have a maximum of 64 characters including 
            the terminating NULL. For Version 5.0 and later, szTip can have a maximum of 
            128 characters, including the terminating NULL.
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Controls.NotifyIconAnimation.NOTIFYICONDATA.dwState">
            <summary>
            State of the icon. 
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Controls.NotifyIconAnimation.NOTIFYICONDATA.dwStateMask">
            <summary>
            A value that specifies which bits of the state member are retrieved or modified. 
            For example, setting this member to NIS_HIDDEN causes only the item's hidden state to be retrieved. 
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Controls.NotifyIconAnimation.NOTIFYICONDATA.szInfo">
            <summary>
            String with the text for a balloon ToolTip. It can have a maximum of 255 characters. 
            To remove the ToolTip, set the NIF_INFO flag in uFlags and set szInfo to an empty string. 
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Controls.NotifyIconAnimation.NOTIFYICONDATA.uVersion">
            <summary>
            NOTE: This field is also used for the Timeout value. Specifies whether the Shell notify 
            icon interface should use Windows 95 or Windows 2000 
            behavior. For more information on the differences in these two behaviors, see 
            Shell_NotifyIcon. This member is only employed when using Shell_NotifyIcon to send an 
            NIM_VERSION message. 
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Controls.NotifyIconAnimation.NOTIFYICONDATA.szInfoTitle">
            <summary>
            String containing a title for a balloon ToolTip. This title appears in boldface 
            above the text. It can have a maximum of 63 characters. 
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Controls.NotifyIconAnimation.NOTIFYICONDATA.dwInfoFlags">
            <summary>
            Adds an icon to a balloon ToolTip. It is placed to the left of the title. If the 
            szTitleInfo member is zero-length, the icon is not shown. See 
            <see cref="!:BalloonIconStyle">RMUtils.WinAPI.Structs.BalloonIconStyle</see> for more
            information.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ThListView.ThreadedListViewGroup">
            <summary>
            Summary description for ThreadedListViewGroup.
            </summary>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services4.PostItem">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.#ctor">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.SetState(System.String,System.String[],System.String[],System.String[])">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.BeginSetState(System.String,System.String[],System.String[],System.String[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.EndSetState(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.SetStateAsync(System.String,System.String[],System.String[],System.String[])">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.SetStateAsync(System.String,System.String[],System.String[],System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.UpdatePostMetadata(System.String,System.String,System.Boolean,RssBandit.CLR20.com.newsgator.services4.FeedMetadata[],System.Boolean)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.BeginUpdatePostMetadata(System.String,System.String,System.Boolean,RssBandit.CLR20.com.newsgator.services4.FeedMetadata[],System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.EndUpdatePostMetadata(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.UpdatePostMetadataAsync(System.String,System.String,System.Boolean,RssBandit.CLR20.com.newsgator.services4.FeedMetadata[],System.Boolean)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.UpdatePostMetadataAsync(System.String,System.String,System.Boolean,RssBandit.CLR20.com.newsgator.services4.FeedMetadata[],System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.UpdatePostMetadatav2(System.String,System.String,RssBandit.CLR20.com.newsgator.services4.FeedMetadata[],System.Boolean)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.BeginUpdatePostMetadatav2(System.String,System.String,RssBandit.CLR20.com.newsgator.services4.FeedMetadata[],System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.EndUpdatePostMetadatav2(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.UpdatePostMetadatav2Async(System.String,System.String,RssBandit.CLR20.com.newsgator.services4.FeedMetadata[],System.Boolean)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.UpdatePostMetadatav2Async(System.String,System.String,RssBandit.CLR20.com.newsgator.services4.FeedMetadata[],System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.RatePost(System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.BeginRatePost(System.String,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.EndRatePost(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.RatePostAsync(System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.RatePostAsync(System.String,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.GetLinkCount(System.String)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.BeginGetLinkCount(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.EndGetLinkCount(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.GetLinkCountAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.GetLinkCountAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.GetLinks(System.String)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.BeginGetLinks(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.EndGetLinks(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.GetLinksAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.GetLinksAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.GetPostId(System.String)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.BeginGetPostId(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.EndGetPostId(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.GetPostIdAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.GetPostIdAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.ClipPosts(RssBandit.CLR20.com.newsgator.services4.ClippedPost[])">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.BeginClipPosts(RssBandit.CLR20.com.newsgator.services4.ClippedPost[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.EndClipPosts(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.ClipPostsAsync(RssBandit.CLR20.com.newsgator.services4.ClippedPost[])">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.ClipPostsAsync(RssBandit.CLR20.com.newsgator.services4.ClippedPost[],System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.ClipItems(RssBandit.CLR20.com.newsgator.services4.ClippedItem[])">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.BeginClipItems(RssBandit.CLR20.com.newsgator.services4.ClippedItem[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.EndClipItems(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.ClipItemsAsync(RssBandit.CLR20.com.newsgator.services4.ClippedItem[])">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.ClipItemsAsync(RssBandit.CLR20.com.newsgator.services4.ClippedItem[],System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.UnClipPosts(System.String[])">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.BeginUnClipPosts(System.String[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.EndUnClipPosts(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.UnClipPostsAsync(System.String[])">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.UnClipPostsAsync(System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.GetItems(System.String[])">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.BeginGetItems(System.String[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.EndGetItems(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.GetItemsAsync(System.String[])">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.GetItemsAsync(System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.GetHighlyViewedPosts(System.Int32,System.DateTime,System.DateTime,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.BeginGetHighlyViewedPosts(System.Int32,System.DateTime,System.DateTime,System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.EndGetHighlyViewedPosts(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.GetHighlyViewedPostsAsync(System.Int32,System.DateTime,System.DateTime,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.GetHighlyViewedPostsAsync(System.Int32,System.DateTime,System.DateTime,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.SendPost(System.Int64,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.BeginSendPost(System.Int64,System.String,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.EndSendPost(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.SendPostAsync(System.Int64,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.SendPostAsync(System.Int64,System.String,System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services4.PostItem.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:RssBandit.CLR20.com.newsgator.services4.PostItem.SetStateCompleted">
            <remarks/>
        </member>
        <member name="E:RssBandit.CLR20.com.newsgator.services4.PostItem.UpdatePostMetadataCompleted">
            <remarks/>
        </member>
        <member name="E:RssBandit.CLR20.com.newsgator.services4.PostItem.UpdatePostMetadatav2Completed">
            <remarks/>
        </member>
        <member name="E:RssBandit.CLR20.com.newsgator.services4.PostItem.RatePostCompleted">
            <remarks/>
        </member>
        <member name="E:RssBandit.CLR20.com.newsgator.services4.PostItem.GetLinkCountCompleted">
            <remarks/>
        </member>
        <member name="E:RssBandit.CLR20.com.newsgator.services4.PostItem.GetLinksCompleted">
            <remarks/>
        </member>
        <member name="E:RssBandit.CLR20.com.newsgator.services4.PostItem.GetPostIdCompleted">
            <remarks/>
        </member>
        <member name="E:RssBandit.CLR20.com.newsgator.services4.PostItem.ClipPostsCompleted">
            <remarks/>
        </member>
        <member name="E:RssBandit.CLR20.com.newsgator.services4.PostItem.ClipItemsCompleted">
            <remarks/>
        </member>
        <member name="E:RssBandit.CLR20.com.newsgator.services4.PostItem.UnClipPostsCompleted">
            <remarks/>
        </member>
        <member name="E:RssBandit.CLR20.com.newsgator.services4.PostItem.GetItemsCompleted">
            <remarks/>
        </member>
        <member name="E:RssBandit.CLR20.com.newsgator.services4.PostItem.GetHighlyViewedPostsCompleted">
            <remarks/>
        </member>
        <member name="E:RssBandit.CLR20.com.newsgator.services4.PostItem.SendPostCompleted">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services4.NGAPIToken">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.NGAPIToken.Token">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.NGAPIToken.EnableCompression">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.NGAPIToken.AnyAttr">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services4.rssChannelItemEnclosure">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.rssChannelItemEnclosure.url">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.rssChannelItemEnclosure.type">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services4.rssChannelItemGuid">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.rssChannelItemGuid.isPermaLink">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.rssChannelItemGuid.Value">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services4.rssChannelItem">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.rssChannelItem.title">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.rssChannelItem.link">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.rssChannelItem.description">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.rssChannelItem.pubDate">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.rssChannelItem.guid">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.rssChannelItem.postId">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.rssChannelItem.read">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.rssChannelItem.readSpecified">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.rssChannelItem.deleted">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.rssChannelItem.deletedSpecified">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.rssChannelItem.commentRss">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.rssChannelItem.comment">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.rssChannelItem.comments">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.rssChannelItem.author">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.rssChannelItem.enclosure">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.rssChannelItem.userRating">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.rssChannelItem.avgRating">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.rssChannelItem.folderId">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.rssChannelItem.feedId">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.rssChannelItem.extensionData">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.rssChannelItem.source">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services4.rssChannel">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.rssChannel.title">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.rssChannel.link">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.rssChannel.copyright">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.rssChannel.description">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.rssChannel.webMaster">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.rssChannel.lastBuildDate">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.rssChannel.token">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.rssChannel.id">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.rssChannel.ttl">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.rssChannel.item">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services4.rss">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.rss.channel">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.rss.version">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.rss.token">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services4.ClippedItem">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.ClippedItem.PostId">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.ClippedItem.Url">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.ClippedItem.Title">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.ClippedItem.FolderId">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services4.ClippedPost">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.ClippedPost.PostId">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.ClippedPost.FolderId">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.ClippedPost.Deleted">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.ClippedPost.LastModified">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services4.PostMetadata">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.PostMetadata.PostID">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.PostMetadata.State">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.PostMetadata.StateSpecified">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.PostMetadata.FlagState">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.PostMetadata.FlagStateSpecified">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.PostMetadata.UserActions">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services4.FeedMetadata">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.FeedMetadata.FeedID">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.FeedMetadata.UserActions">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.FeedMetadata.PostMetadata">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services4.PostState">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.PostState.PostID">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.PostState.State">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.PostState.FeedID">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.PostState.FlagState">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.PostState.FlagStateSpecified">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.PostState.UserActions">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services4.NGImpersonate">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.NGImpersonate.ImpersonateUser">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.NGImpersonate.AnyAttr">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services4.SetStateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services4.SetStateCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.SetStateCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services4.UpdatePostMetadataCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services4.UpdatePostMetadataCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.UpdatePostMetadataCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services4.UpdatePostMetadatav2CompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services4.UpdatePostMetadatav2CompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.UpdatePostMetadatav2CompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services4.RatePostCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services4.GetLinkCountCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services4.GetLinkCountCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.GetLinkCountCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services4.GetLinksCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services4.GetLinksCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.GetLinksCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services4.GetPostIdCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services4.GetPostIdCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.GetPostIdCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services4.ClipPostsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services4.ClipItemsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services4.ClipItemsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.ClipItemsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services4.UnClipPostsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services4.GetItemsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services4.GetItemsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.GetItemsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services4.GetHighlyViewedPostsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services4.GetHighlyViewedPostsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services4.GetHighlyViewedPostsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services4.SendPostCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.#ctor">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.AddSubscription(System.String,System.Int32,RssBandit.CLR20.com.newsgator.services3.NGOSCredential)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.BeginAddSubscription(System.String,System.Int32,RssBandit.CLR20.com.newsgator.services3.NGOSCredential,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.EndAddSubscription(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.AddSubscriptionAsync(System.String,System.Int32,RssBandit.CLR20.com.newsgator.services3.NGOSCredential)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.AddSubscriptionAsync(System.String,System.Int32,RssBandit.CLR20.com.newsgator.services3.NGOSCredential,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.DeleteSubscriptions(System.Int32[])">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.BeginDeleteSubscriptions(System.Int32[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.EndDeleteSubscriptions(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.DeleteSubscriptionsAsync(System.Int32[])">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.DeleteSubscriptionsAsync(System.Int32[],System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.ReplaceSubscriptions(System.String,System.Xml.XmlElement)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.BeginReplaceSubscriptions(System.String,System.Xml.XmlElement,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.EndReplaceSubscriptions(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.ReplaceSubscriptionsAsync(System.String,System.Xml.XmlElement)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.ReplaceSubscriptionsAsync(System.String,System.Xml.XmlElement,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.MergeSubscriptions(System.String,System.Xml.XmlElement)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.BeginMergeSubscriptions(System.String,System.Xml.XmlElement,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.EndMergeSubscriptions(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.MergeSubscriptionsAsync(System.String,System.Xml.XmlElement)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.MergeSubscriptionsAsync(System.String,System.Xml.XmlElement,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.MoveSubscription(System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.BeginMoveSubscription(System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.EndMoveSubscription(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.MoveSubscriptionAsync(System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.MoveSubscriptionAsync(System.Int32,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.RenameSubscription(System.Int32,System.String)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.BeginRenameSubscription(System.Int32,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.EndRenameSubscription(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.RenameSubscriptionAsync(System.Int32,System.String)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.RenameSubscriptionAsync(System.Int32,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.GetSubscriptionCounts(System.String)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.BeginGetSubscriptionCounts(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.EndGetSubscriptionCounts(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.GetSubscriptionCountsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.GetSubscriptionCountsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.GetSubscriptionList(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.BeginGetSubscriptionList(System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.EndGetSubscriptionList(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.GetSubscriptionListAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.GetSubscriptionListAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.GetUpdates(System.String,System.String,System.String@)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.BeginGetUpdates(System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.EndGetUpdates(System.IAsyncResult,System.String@)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.GetUpdatesAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.GetUpdatesAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.AddSubscriptionCompleted">
            <remarks/>
        </member>
        <member name="E:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.DeleteSubscriptionsCompleted">
            <remarks/>
        </member>
        <member name="E:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.ReplaceSubscriptionsCompleted">
            <remarks/>
        </member>
        <member name="E:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.MergeSubscriptionsCompleted">
            <remarks/>
        </member>
        <member name="E:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.MoveSubscriptionCompleted">
            <remarks/>
        </member>
        <member name="E:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.RenameSubscriptionCompleted">
            <remarks/>
        </member>
        <member name="E:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.GetSubscriptionCountsCompleted">
            <remarks/>
        </member>
        <member name="E:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.GetSubscriptionListCompleted">
            <remarks/>
        </member>
        <member name="E:RssBandit.CLR20.com.newsgator.services3.SubscriptionWebService.GetUpdatesCompleted">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services3.NGAPIToken">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services3.NGAPIToken.Token">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services3.Credential">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services3.Credential.username">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services3.Credential.passwordenc">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services3.Credential.domain">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services3.NGOSCredential">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services3.NGOSCredential.Item">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services3.AddSubscriptionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services3.AddSubscriptionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services3.AddSubscriptionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services3.DeleteSubscriptionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services3.ReplaceSubscriptionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services3.MergeSubscriptionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services3.MergeSubscriptionsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services3.MergeSubscriptionsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services3.MoveSubscriptionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services3.RenameSubscriptionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services3.GetSubscriptionCountsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services3.GetSubscriptionCountsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services3.GetSubscriptionCountsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services3.GetSubscriptionListCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services3.GetSubscriptionListCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services3.GetSubscriptionListCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services3.GetUpdatesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services3.GetUpdatesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services3.GetUpdatesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services3.GetUpdatesCompletedEventArgs.newToken">
            <remarks/>
        </member>
        <member name="T:RssBandit.WebSearch.SearchEngineHandler">
            <summary>
            Summary description for SearchEngineHandler.
            </summary>
        </member>
        <member name="F:RssBandit.WebSearch.SearchEngineHandler._engines">
            <summary>
            Holds the search engines.
            </summary>
        </member>
        <member name="F:RssBandit.WebSearch.SearchEngineHandler.validationErrorOccured">
            <summary>
            Internal flag used to track whether the XML in the 
            searches config validated against the schema. 
            </summary>
        </member>
        <member name="F:RssBandit.WebSearch.SearchEngineHandler.enginesLoaded">
            <summary>
            Internal flag used to track whether the XML in the 
            searches config validated against the schema. 
            </summary>
        </member>
        <member name="F:RssBandit.WebSearch.SearchEngineHandler.searchConfigSchema">
            <summary>
            The schema for the search engines list format
            </summary>
        </member>
        <member name="M:RssBandit.WebSearch.SearchEngineHandler.LoadSearchConfigSchema">
            <summary>
             Loads the schema for search Engines into an XmlSchema object. 
            </summary>		
        </member>
        <member name="M:RssBandit.WebSearch.SearchEngineHandler.LoadEngines(System.String,System.Xml.Schema.ValidationEventHandler)">
            <summary>
            Loads the search engines list from the given URL. 
            </summary>
            <param name="configUrl">The URL of the engines config</param>
            <param name="veh">The event handler that should be invoked on the client if validation errors occur</param>
            <exception cref="T:System.Xml.XmlException">XmlException thrown if XML is not well-formed</exception>
        </member>
        <member name="M:RssBandit.WebSearch.SearchEngineHandler.RepairedPhrasePlaceholders">
            <summary>
            Because of the localiaziation issue with the hardcoded "[PHRASE]" string
            we have to repair (replace) teh old definitions by the new one: "{0}"
            </summary>
        </member>
        <member name="M:RssBandit.WebSearch.SearchEngineHandler.LoaderValidationCallback(System.Object,System.Xml.Schema.ValidationEventArgs)">
            <summary>
            Handles errors that occur during schema validation of search engines list
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:RssBandit.WebSearch.SearchEngineHandler.SaveEngines(System.IO.Stream)">
            <summary>
            Loads the search engines list from the given URL. 
            </summary>
            <param name="configUrl">The Stream of the engines config</param>
            <exception cref="T:System.Exception">Exception thrown on file access errors</exception>
        </member>
        <member name="M:RssBandit.WebSearch.SearchEngineHandler.GenerateDefaultEngines">
            <summary>
            Generates a config file with default search engine(s).
            </summary>
        </member>
        <member name="M:RssBandit.WebSearch.SearchEngineHandler.Clear">
            <summary>
            Reset the engines.
            </summary>
        </member>
        <member name="P:RssBandit.WebSearch.SearchEngineHandler.EnginesOK">
            <summary>
            Boolean flag indicates whether the search engines list was loaded 
            successfully during the last call to LoadEngines()
            </summary>
        </member>
        <member name="P:RssBandit.WebSearch.SearchEngineHandler.EnginesLoaded">
            <summary>
            Boolean flag indicates whether the search engines list was loaded 
            during the last call to LoadEngines()
            </summary>
        </member>
        <member name="T:RssBandit.WebSearch.SearchEngines">
            <remarks/>
        </member>
        <member name="F:RssBandit.WebSearch.SearchEngines.Engines">
            <remarks/>
        </member>
        <member name="F:RssBandit.WebSearch.SearchEngines.NewTabRequired">
            <remarks/>
        </member>
        <member name="T:RssBandit.WebSearch.SearchEngine">
            <remarks/>
        </member>
        <member name="P:RssBandit.WebSearch.SearchEngine.Title">
            <remarks/>
        </member>
        <member name="P:RssBandit.WebSearch.SearchEngine.SearchLink">
            <remarks/>
        </member>
        <member name="P:RssBandit.WebSearch.SearchEngine.Description">
            <remarks/>
        </member>
        <member name="P:RssBandit.WebSearch.SearchEngine.ImageName">
            <remarks/>
        </member>
        <member name="P:RssBandit.WebSearch.SearchEngine.IsActive">
            <remarks/>
        </member>
        <member name="P:RssBandit.WebSearch.SearchEngine.ReturnRssResult">
            <remarks/>
        </member>
        <member name="P:RssBandit.WebSearch.SearchEngine.MergeRssResult">
            <remarks/>
        </member>
        <member name="T:RssBandit.Common.Logging.ProfilerHelper">
            <summary>
             Helps to profile some calls.
            </summary>
            <remarks>
            Usage:
              long secs = 0;
              ProfilerHelper.StartMeasure(ref secs);
              // ... time consuming task here
              Trace.WriteLine(ProfilerHelper.StopMeasureString(secs), "task perf.");
            </remarks>
        </member>
        <member name="T:RssBandit.WinGui.PostReplyThreadHandler">
            <summary>
            Summary description for PostReplyThreadHandler.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.PostReplyThreadHandler.#ctor(NewsComponents.NewsHandler,System.String,NewsComponents.NewsItem,NewsComponents.NewsItem)">
            <summary>
            Initializes a new instance of the <see cref="T:RssBandit.WinGui.PostReplyThreadHandler"/> class.
            </summary>
            <param name="feedHandler">The feed handler.</param>
            <param name="commentApiUri">The comment API URI.</param>
            <param name="item2post">The item2post.</param>
            <param name="inReply2item">The in reply2item.</param>
        </member>
        <member name="M:RssBandit.WinGui.PostReplyThreadHandler.#ctor(NewsComponents.NewsHandler,NewsComponents.NewsItem,NewsComponents.Feed.feedsFeed)">
            <summary>
            Initializes a new instance of the <see cref="T:RssBandit.WinGui.PostReplyThreadHandler"/> class.
            </summary>
            <param name="feedHandler">The feed handler.</param>
            <param name="item2post">The item2post.</param>
            <param name="postTarget">The post target.</param>
        </member>
        <member name="P:RssBandit.WinGui.PostReplyThreadHandler.CommentApiUri">
            <summary>
            Gets or sets the comment API URI.
            </summary>
            <value>The comment API URI.</value>
        </member>
        <member name="P:RssBandit.WinGui.PostReplyThreadHandler.ItemToPost">
            <summary>
            Gets or sets the item to post.
            </summary>
            <value>The item to post.</value>
        </member>
        <member name="P:RssBandit.WinGui.PostReplyThreadHandler.PostTarget">
            <summary>
            Gets or sets the post target.
            </summary>
            <value>The post target.</value>
        </member>
        <member name="T:RssBandit.WinGui.Dialogs.ManageAddInDialog">
            <summary>
            ManageAddInDialog: as the name indicates
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Dialogs.ManageAddInDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Dialogs.ManageAddInDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Dialogs.ManageAddInDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Dialogs.DialogBase">
            <summary>
            DialogBase can be inherited from to get the right
            icon, OK/Cancel, Line separator, helpProvider, errorProvider,
            toolTip and resizing behavior.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Dialogs.DialogBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RssBandit.WinGui.Dialogs.DialogBase"/> class.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Dialogs.DialogBase.ApplyComponentTranslations">
            <summary>
            Initializes the component translations of the base dialog
            and calles then InitializeComponentTranslation().
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Dialogs.DialogBase.InitializeComponentTranslation">
            <summary>
            Place to Initializes the child component translation. Must be impl.
            to translate the control captions. 
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Dialogs.DialogBase.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Dialogs.DialogBase.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ThListView.Sorting.ThreadedListViewSorter">
            <summary>
            Summary description for ThreadedListViewSorter.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ThListView.Sorting.ThreadedListViewSorter.Sort(System.Int32)">
            <summary>
            Sorts the rows based on the given column and the current sort order
            </summary>
            <param name="column">Column to be sorted</param>
        </member>
        <member name="M:System.Windows.Forms.ThListView.Sorting.ThreadedListViewSorter.Sort(System.Int32,System.Windows.Forms.SortOrder)">
            <summary>
            Sorts the rows based on the given column and sort order
            </summary>
            <param name="column">Column to be sorted</param>
            <param name="order">Sort order</param>
        </member>
        <member name="M:System.Windows.Forms.ThListView.Sorting.ThreadedListViewSorter.GetComparer">
            <summary>
            Get the comparer matching the current SortOrder and Column of the attached listview.
            If SortOrder is SortOrder.None, null is returned.
            </summary>
            <returns>IComparer</returns>
        </member>
        <member name="T:RssBandit.WinGui.Controls.DirectoryBrowser">
            <summary>
            This control is used for browsing to a Directory and selecting it. 
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Controls.DirectoryBrowser.returnPath">
            <summary>
            The path that was chosen by the user on closing the dialog
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Controls.DirectoryBrowser.fb">
            <summary>
            The FolderBrowser instance used by this class. 
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Controls.DirectoryBrowser.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Controls.DirectoryBrowser.RunDialog">
            <summary>
            Displays the dialog
            </summary>
            <returns>Returns the result of closing the dialog</returns>
        </member>
        <member name="M:RssBandit.WinGui.Controls.DirectoryBrowser.ShowDialog">
            <summary>
            Shows the dialog
            </summary>
            <returns>The DialogResult on closing the dialog</returns>
        </member>
        <member name="P:RssBandit.WinGui.Controls.DirectoryBrowser.ReturnPath">
            <summary>
            The path to the Directory that was chosen by the user
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Controls.DirectoryBrowser.Description">
            <summary>
            Gets or sets the description displayed on top of the treeview.
            </summary>
            <value>The description.</value>
        </member>
        <member name="T:RssBandit.WinGui.ICommandBarImplementationSupport">
            <summary>
            Impl. by a class, that is able to manage the real
            command related object instances (add, remove, etc).
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.CommandBarManager">
            <summary>
            CommandBarManager.
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.CommandBar">
            <summary>
            Decorator for TD.SandBar.ToolBar
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.CommandBarItemCollection">
            <summary>
            Decorator for TD.SandBar.ToolBar.Items collection
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.TagIdentifier">
            <summary>
            Used to store a Tag AND the identifier at the Tag
            property of decorated items
            </summary>
        </member>
        <member name="T:RssBandit.Win32">
            <summary>
            Common used Win32 Interop decl.
            </summary>
        </member>
        <member name="M:RssBandit.Win32.DllGetVersion(RssBandit.Win32.DLLVERSIONINFO@)">
            <summary>
            Implemented by many of the Microsoft® Windows® Shell dynamic-link libraries 
            (DLLs) to allow applications to obtain DLL-specific version information
            </summary>
            <param name="pdvi">Pointer to a DLLVERSIONINFO structure that receives the 
            version information. The cbSize member must be filled in before calling 
            the function</param>
            <returns>Returns NOERROR if successful, or an OLE-defined error value otherwise</returns>
        </member>
        <member name="M:RssBandit.Win32.PlaySound(System.String,System.IntPtr,RssBandit.Win32.SoundFlags)">
            <summary>
            Plays a sound.
            </summary>
            <param name="sound">Sound to play</param>
            <param name="hModule">Handle to the executable file that contains 
            the resource to be loaded. This parameter must be IntPtr.Zero unless SND_RESOURCE is specified in fdwSound.</param>
            <param name="fdwSound">SoundFlags.SND_* combinations</param>
            <returns></returns>
        </member>
        <member name="F:RssBandit.Win32.ApplicationSoundsAllowed">
            <summary>
            Sets/Gets if application sounds are anabled.
            </summary>
        </member>
        <member name="M:RssBandit.Win32.PlaySound(System.String)">
            <summary>
            Plays a application sound.
            </summary>
            <param name="applicationSound">The application sound.</param>
        </member>
        <member name="M:RssBandit.Win32.PlaySoundFromRegistry(System.String)">
            <summary>
            Plays a application sound as configured in the registry.
            </summary>
            <param name="applicationSound">The application sound.</param>
        </member>
        <member name="M:RssBandit.Win32.GetWindowsServicePackInfo(System.Int32@,System.Int32@)">
            <summary>
            Gets the windows service pack info.
            </summary>
            <param name="servicePackMajor">The service pack major.</param>
            <param name="servicePackMinor">The service pack minor.</param>
        </member>
        <member name="M:RssBandit.Win32.GetStartupWindowState">
            <summary>
            API Wrapper to retrive the startup process window state.
            </summary>
            <returns>FormWindowState</returns>
        </member>
        <member name="M:RssBandit.Win32.ModifyWindowStyle(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Helper routine to modify the window style of any native windows widget
            </summary>
            <param name="hWnd">widget handle</param>
            <param name="styleToRemove">Style to be removed. Should be 0 (zero), if
            you only want to add a style.</param>
            <param name="styleToAdd">Style to add. Should be 0 (zero), if
            you only want to remove a style.</param>
        </member>
        <member name="M:RssBandit.Win32.FreezePainting(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            </summary>
            <param name="ctrl"></param>
            <param name="freeze"></param>
        </member>
        <member name="P:RssBandit.Win32.Registry">
            <summary>
            Gets the registry instance.
            </summary>
            <value>The registry.</value>
        </member>
        <member name="P:RssBandit.Win32.IsOSAtLeastWindows2000">
            <summary>
            Returns true, if the OS is at least Windows 2000 (or higher), else false.
            </summary>
        </member>
        <member name="P:RssBandit.Win32.IsOSAtLeastWindowsXP">
            <summary>
            Returns true, if the OS is at least Windows XP (or higher), else false.
            </summary>
        </member>
        <member name="P:RssBandit.Win32.IsOSWindowsXP">
            <summary>
            Returns true, if the OS is exact Windows XP, else false.
            </summary>
        </member>
        <member name="P:RssBandit.Win32.IsOSAtLeastWindowsXPSP2">
            <summary>
            Returns true, if the OS is Windows XP SP2 and higher, else false.
            </summary>
        </member>
        <member name="P:RssBandit.Win32.IsOSWindowsVista">
            <summary>
            Returns true, if the OS is exact Windows Vista, else false.
            </summary>
        </member>
        <member name="P:RssBandit.Win32.IsOSAtLeastWindowsVista">
            <summary>
            Returns true, if the OS is at least Windows Vista (or higher), else false.
            </summary>
        </member>
        <member name="P:RssBandit.Win32.IsIE6">
            <summary>
            Gets a value indicating whether IE6 is available.
            </summary>
            <value><c>true</c> if IE6 is available; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RssBandit.Win32.IsIE6SP2">
            <summary>
            Gets a value indicating whether IE6 SP2 is available.
            </summary>
            <value>
            	<c>true</c> if IE6 SP2 is available; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:RssBandit.Win32.RECT">
            <summary>
            The RECT structure defines the coordinates of the upper-left 
            and lower-right corners of a rectangle
            </summary>
        </member>
        <member name="F:RssBandit.Win32.RECT.left">
            <summary>Specifies the x-coordinate of the upper-left corner of the rectangle</summary>
        </member>
        <member name="F:RssBandit.Win32.RECT.top">
            <summary>Specifies the y-coordinate of the upper-left corner of the rectangle</summary>
        </member>
        <member name="F:RssBandit.Win32.RECT.right">
            <summary>Specifies the x-coordinate of the lower-right corner of the rectangle</summary>
        </member>
        <member name="F:RssBandit.Win32.RECT.bottom">
            <summary>Specifies the y-coordinate of the lower-right corner of the rectangle</summary>
        </member>
        <member name="T:RssBandit.Win32.DLLVERSIONINFO">
            <summary>
            Receives dynamic-link library (DLL)-specific version information. 
            It is used with the DllGetVersion function
            </summary>
        </member>
        <member name="F:RssBandit.Win32.DLLVERSIONINFO.cbSize">
            <summary>
            Size of the structure, in bytes. This member must be filled 
            in before calling the function
            </summary>
        </member>
        <member name="F:RssBandit.Win32.DLLVERSIONINFO.dwMajorVersion">
            <summary>
            Major version of the DLL. If the DLL's version is 4.0.950, 
            this value will be 4
            </summary>
        </member>
        <member name="F:RssBandit.Win32.DLLVERSIONINFO.dwMinorVersion">
            <summary>
            Minor version of the DLL. If the DLL's version is 4.0.950, 
            this value will be 0
            </summary>
        </member>
        <member name="F:RssBandit.Win32.DLLVERSIONINFO.dwBuildNumber">
            <summary>
            Build number of the DLL. If the DLL's version is 4.0.950, 
            this value will be 950
            </summary>
        </member>
        <member name="F:RssBandit.Win32.DLLVERSIONINFO.dwPlatformID">
            <summary>
            Identifies the platform for which the DLL was built
            </summary>
        </member>
        <member name="T:RssBandit.Win32.SoundFlags">
            <summary>
            PlaySound function (fdwSound parameter) flags
            </summary>
        </member>
        <member name="M:RssBandit.Win32.IRegistry.CheckAndInitSounds(System.String)">
            <summary>
            Checks and init RSS bandit sounds 
            (configurable via Windows Sounds Control Panel).
            </summary>
            <param name="appKey">The app key (file name without extension and path).
            E.g. "RssBandit".</param>
            <remarks>
            See also: http://blogs.msdn.com/larryosterman/archive/2006/01/24/517183.aspx
            </remarks>
        </member>
        <member name="M:RssBandit.Win32.IRegistry.IsInternetExplorerExtensionRegistered(RssBandit.Win32.IEMenuExtension)">
            <summary>
            For more infos read:
            http://msdn.microsoft.com/library/default.asp?url=/workshop/browser/ext/tutorials/context.asp
            </summary>
        </member>
        <member name="M:RssBandit.Win32.IRegistry.RegisterInternetExplorerExtension(RssBandit.Win32.IEMenuExtension)">
            <summary>
            Registers the internet explorer extension.
            </summary>
            <param name="extension">The extension.</param>
        </member>
        <member name="M:RssBandit.Win32.IRegistry.UnRegisterInternetExplorerExtension(RssBandit.Win32.IEMenuExtension)">
            <summary>
            Uns the register internet explorer extension.
            </summary>
            <param name="extension">The extension.</param>
        </member>
        <member name="P:RssBandit.Win32.IRegistry.InstanceActivatorPort">
            <summary>
            Set/Get the Port number to be used by the Single Instance Activator.
            </summary>
        </member>
        <member name="P:RssBandit.Win32.IRegistry.CurrentFeedProtocolHandler">
            <summary>
            Set/Get the current "feed:" Url protocol handler. 
            Provide the complete executable file path name.
            </summary>
            <exception cref="T:System.Exception">On set, if there are no rights to write the value</exception>
        </member>
        <member name="P:RssBandit.Win32.IRegistry.RunAtStartup">
            <summary>
            Set to true to execute Bandit if windows user login to 
            the system, else false.
            </summary>
        </member>
        <member name="T:RssBandit.Win32.WindowsRegistry">
            <summary>
            Wrap the windows registry access needed for Bandit
            </summary>
        </member>
        <member name="F:RssBandit.Win32.WindowsRegistry.InternetExplorerExtensionsContexts">
            <summary>
            Context Value is integer build from flag(s):
            	Default 0x1 
            	Images 0x2 
            	Controls 0x4 
            	Tables 0x8 
            	Text selection 0x10 
            	Anchor 0x20 
            </summary>
        </member>
        <member name="M:RssBandit.Win32.WindowsRegistry.GetInternetExplorerVersion">
            <summary>
            Gets the internet explorer version.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RssBandit.Win32.WindowsRegistry.RssBandit#Win32#IRegistry#CheckAndInitSounds(System.String)">
            <summary>
            Checks and init RSS bandit sounds 
            (configurable via Windows Sounds Control Panel).
            </summary>
            <param name="appKey">The app key (file name without extension and path).
            E.g. "RssBandit".</param>
            <remarks>
            See also: http://blogs.msdn.com/larryosterman/archive/2006/01/24/517183.aspx
            </remarks>
        </member>
        <member name="M:RssBandit.Win32.WindowsRegistry.RssBandit#Win32#IRegistry#IsInternetExplorerExtensionRegistered(RssBandit.Win32.IEMenuExtension)">
            <summary>
            For more infos read:
            http://msdn.microsoft.com/library/default.asp?url=/workshop/browser/ext/tutorials/context.asp
            </summary>
        </member>
        <member name="M:RssBandit.Win32.WindowsRegistry.RssBandit#Win32#IRegistry#RegisterInternetExplorerExtension(RssBandit.Win32.IEMenuExtension)">
            <summary>
            Registers the internet explorer extension.
            </summary>
            <param name="extension">The extension.</param>
        </member>
        <member name="M:RssBandit.Win32.WindowsRegistry.RssBandit#Win32#IRegistry#UnRegisterInternetExplorerExtension(RssBandit.Win32.IEMenuExtension)">
            <summary>
            Uns the register internet explorer extension.
            </summary>
            <param name="extension">The extension.</param>
        </member>
        <member name="M:RssBandit.Win32.WindowsRegistry.RssBandit#Win32#IRegistry#GetInternetExplorerVersion">
            <summary>
            Gets the internet explorer version.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RssBandit.Win32.WindowsRegistry.ClassesRootKey(System.Boolean)">
            <summary>
            Gets also called from the UACManager class
            </summary>
            <param name="writable"></param>
            <returns></returns>
        </member>
        <member name="P:RssBandit.Win32.WindowsRegistry.RssBandit#Win32#IRegistry#InstanceActivatorPort">
            <summary>
            Set/Get the Port number to be used by the Single Instance Activator.
            </summary>
        </member>
        <member name="P:RssBandit.Win32.WindowsRegistry.RssBandit#Win32#IRegistry#CurrentFeedProtocolHandler">
            <summary>
            Set/Get the current "feed:" Url protocol handler. 
            Provide the complete executable file path name.
            </summary>
            <exception cref="T:System.Exception">On set, if there are no rights to write the value</exception>
        </member>
        <member name="P:RssBandit.Win32.WindowsRegistry.RssBandit#Win32#IRegistry#RunAtStartup">
            <summary>
            Set to true to execute Bandit if windows user login to 
            the system, else false.
            </summary>
        </member>
        <member name="T:RssBandit.Win32.PortableRegistry">
            <summary>
            Wrap the registry access needed for a portable Bandit running from stick
            </summary>
        </member>
        <member name="M:RssBandit.Win32.PortableRegistry.RssBandit#Win32#IRegistry#CheckAndInitSounds(System.String)">
            <summary>
            Checks and init RSS bandit sounds 
            (configurable via Windows Sounds Control Panel).
            </summary>
            <param name="appKey">The app key (file name without extension and path).
            E.g. "RssBandit".</param>
            <remarks>
            See also: http://blogs.msdn.com/larryosterman/archive/2006/01/24/517183.aspx
            </remarks>
        </member>
        <member name="M:RssBandit.Win32.PortableRegistry.RssBandit#Win32#IRegistry#IsInternetExplorerExtensionRegistered(RssBandit.Win32.IEMenuExtension)">
            <summary>
            For more infos read:
            http://msdn.microsoft.com/library/default.asp?url=/workshop/browser/ext/tutorials/context.asp
            </summary>
        </member>
        <member name="M:RssBandit.Win32.PortableRegistry.RssBandit#Win32#IRegistry#RegisterInternetExplorerExtension(RssBandit.Win32.IEMenuExtension)">
            <summary>
            Registers the internet explorer extension.
            </summary>
            <param name="extension">The extension.</param>
        </member>
        <member name="M:RssBandit.Win32.PortableRegistry.RssBandit#Win32#IRegistry#UnRegisterInternetExplorerExtension(RssBandit.Win32.IEMenuExtension)">
            <summary>
            Uns the register internet explorer extension.
            </summary>
            <param name="extension">The extension.</param>
        </member>
        <member name="M:RssBandit.Win32.PortableRegistry.RssBandit#Win32#IRegistry#GetInternetExplorerVersion">
            <summary>
            Gets the internet explorer version.
            </summary>
            <returns></returns>
        </member>
        <member name="P:RssBandit.Win32.PortableRegistry.RssBandit#Win32#IRegistry#InstanceActivatorPort">
            <summary>
            Set/Get the Port number to be used by the Single Instance Activator.
            </summary>
            <remarks>
            We assume here, the app running from a stick have reconfigured
            their data and cache path(s) to be on a folder at the stick. 
            So it is enough to protect that path(s) usage to one single app. 
            instance using a file containing the port number.
            </remarks>
        </member>
        <member name="P:RssBandit.Win32.PortableRegistry.RssBandit#Win32#IRegistry#CurrentFeedProtocolHandler">
            <summary>
            Set/Get the current "feed:" Url protocol handler. 
            Provide the complete executable file path name.
            </summary>
            <exception cref="T:System.Exception">On set, if there are no rights to write the value</exception>
        </member>
        <member name="P:RssBandit.Win32.PortableRegistry.RssBandit#Win32#IRegistry#RunAtStartup">
            <summary>
            Set to true to execute Bandit if windows user login to 
            the system, else false.
            </summary>
        </member>
        <member name="T:RssBandit.UxTheme">
            <summary>
            A class that wraps Windows XPs UxTheme.dll
            </summary>
        </member>
        <member name="M:RssBandit.UxTheme.#ctor">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:RssBandit.UxTheme.OpenThemeData(System.IntPtr,System.String)">
            <summary>
            Opens the theme data for a window and its associated class
            </summary>
            <param name="hwnd">Handle of the window for which theme data 
            is required</param>
            <param name="pszClassList">Pointer to a string that contains 
            a semicolon-separated list of classes</param>
            <returns>OpenThemeData tries to match each class, one at a 
            time, to a class data section in the active theme. If a match 
            is found, an associated HTHEME handle is returned. If no match 
            is found NULL is returned</returns>
        </member>
        <member name="M:RssBandit.UxTheme.CloseThemeData(System.IntPtr)">
            <summary>
            Closes the theme data handle
            </summary>
            <param name="hTheme">Handle to a window's specified theme data. 
            Use OpenThemeData to create an HTHEME</param>
            <returns>Returns S_OK if successful, or an error value otherwise</returns>
        </member>
        <member name="M:RssBandit.UxTheme.DrawThemeBackground(System.IntPtr,System.IntPtr,System.Int32,System.Int32,RssBandit.Win32.RECT@,RssBandit.Win32.RECT@)">
            <summary>
            Draws the background image defined by the visual style for the 
            specified control part
            </summary>
            <param name="hTheme">Handle to a window's specified theme data. 
            Use OpenThemeData to create an HTHEME</param>
            <param name="hdc">Handle to a device context (HDC) used for 
            drawing the theme-defined background image</param>
            <param name="iPartId">Value of type int that specifies the part 
            to draw</param>
            <param name="iStateId">Value of type int that specifies the state 
            of the part to draw</param>
            <param name="pRect">Pointer to a RECT structure that contains the 
            rectangle, in logical coordinates, in which the background image 
            is drawn</param>
            <param name="pClipRect">Pointer to a RECT structure that contains 
            a clipping rectangle. This parameter may be set to NULL</param>
            <returns>Returns S_OK if successful, or an error value otherwise</returns>
        </member>
        <member name="M:RssBandit.UxTheme.IsThemeActive">
            <summary>
            Tests if a visual style for the current application is active
            </summary>
            <returns>TRUE if a visual style is enabled, and windows with 
            visual styles applied should call OpenThemeData to start using 
            theme drawing services, FALSE otherwise</returns>
        </member>
        <member name="M:RssBandit.UxTheme.IsAppThemed">
            <summary>
            Reports whether the current application's user interface 
            displays using visual styles
            </summary>
            <returns>TRUE if the application has a visual style applied,
            FALSE otherwise</returns>
        </member>
        <member name="M:RssBandit.UxTheme.GetCurrentThemeName(System.Text.StringBuilder,System.Int32,System.Text.StringBuilder,System.Int32,System.Text.StringBuilder,System.Int32)">
            <summary>
            Retrieves the name of the current visual style, and optionally retrieves the 
            color scheme name and size name
            </summary>
            <param name="pszThemeFileName">Pointer to a string that receives the theme 
            path and file name</param>
            <param name="dwMaxNameChars">Value of type int that contains the maximum 
            number of characters allowed in the theme file name</param>
            <param name="pszColorBuff">Pointer to a string that receives the color scheme 
            name. This parameter may be set to NULL</param>
            <param name="cchMaxColorChars">Value of type int that contains the maximum 
            number of characters allowed in the color scheme name</param>
            <param name="pszSizeBuff">Pointer to a string that receives the size name. 
            This parameter may be set to NULL</param>
            <param name="cchMaxSizeChars">Value of type int that contains the maximum 
            number of characters allowed in the size name</param>
            <returns>Returns S_OK if successful, otherwise an error code</returns>
        </member>
        <member name="M:RssBandit.UxTheme.DrawThemeParentBackground(System.IntPtr,System.IntPtr,RssBandit.Win32.RECT@)">
            <summary>
            Draws the part of a parent control that is covered by a 
            partially-transparent or alpha-blended child control
            </summary>
            <param name="hwnd">Handle of the child control</param>
            <param name="hdc">Handle to the child control's device context </param>
            <param name="prc">Pointer to a RECT structure that defines the 
            area to be drawn. The rectangle is in the child window's coordinates. 
            This parameter may be set to NULL</param>
            <returns>Returns S_OK if successful, or an error value otherwise</returns>
        </member>
        <member name="P:RssBandit.UxTheme.AppThemed">
            <summary>
            Reports whether the current application's user interface 
            displays using visual styles
            </summary>
        </member>
        <member name="P:RssBandit.UxTheme.ThemeName">
            <summary>
            Retrieves the name of the current visual style
            </summary>
        </member>
        <member name="P:RssBandit.UxTheme.ColorName">
            <summary>
            Retrieves the color scheme name of the current visual style
            </summary>
        </member>
        <member name="T:RssBandit.UxTheme.WindowClasses">
            <summary>
            Window class IDs used by UxTheme.dll to draw controls
            </summary>
        </member>
        <member name="F:RssBandit.UxTheme.WindowClasses.Edit">
            <summary>
            TextBox class
            </summary>
        </member>
        <member name="F:RssBandit.UxTheme.WindowClasses.ListView">
            <summary>
            ListView class
            </summary>
        </member>
        <member name="F:RssBandit.UxTheme.WindowClasses.TreeView">
            <summary>
            TreeView class
            </summary>
        </member>
        <member name="T:RssBandit.UxTheme.Parts">
            <summary>
            Window parts IDs used by UxTheme.dll to draw controls
            </summary>
        </member>
        <member name="T:RssBandit.UxTheme.Parts.Edit">
            <summary>
            TextBox parts
            </summary>
        </member>
        <member name="F:RssBandit.UxTheme.Parts.Edit.EditText">
            <summary>
            TextBox
            </summary>
        </member>
        <member name="T:RssBandit.UxTheme.Parts.ListView">
            <summary>
            ListView parts
            </summary>
        </member>
        <member name="F:RssBandit.UxTheme.Parts.ListView.ListItem">
            <summary>
            ListView
            </summary>
        </member>
        <member name="T:RssBandit.UxTheme.Parts.TreeView">
            <summary>
            TreeView parts
            </summary>
        </member>
        <member name="F:RssBandit.UxTheme.Parts.TreeView.TreeItem">
            <summary>
            TreeView
            </summary>
        </member>
        <member name="T:RssBandit.UxTheme.PartStates">
            <summary>
            Window part state IDs used by UxTheme.dll to draw controls
            </summary>
        </member>
        <member name="T:RssBandit.UxTheme.PartStates.EditText">
            <summary>
            TextBox part states
            </summary>
        </member>
        <member name="F:RssBandit.UxTheme.PartStates.EditText.Normal">
            <summary>
            The TextBox is in its normal state
            </summary>
        </member>
        <member name="F:RssBandit.UxTheme.PartStates.EditText.Hot">
            <summary>
            The mouse is over the TextBox
            </summary>
        </member>
        <member name="F:RssBandit.UxTheme.PartStates.EditText.Selected">
            <summary>
            The TextBox is selected
            </summary>
        </member>
        <member name="F:RssBandit.UxTheme.PartStates.EditText.Disabled">
            <summary>
            The TextBox is disabled
            </summary>
        </member>
        <member name="F:RssBandit.UxTheme.PartStates.EditText.Focused">
            <summary>
            The TextBox currently has focus
            </summary>
        </member>
        <member name="F:RssBandit.UxTheme.PartStates.EditText.Readonly">
            <summary>
            The TextBox is readonly
            </summary>
        </member>
        <member name="T:RssBandit.UxTheme.PartStates.ListItem">
            <summary>
            ListView part states
            </summary>
        </member>
        <member name="F:RssBandit.UxTheme.PartStates.ListItem.Normal">
            <summary>
            The ListView is in its normal state
            </summary>
        </member>
        <member name="F:RssBandit.UxTheme.PartStates.ListItem.Hot">
            <summary>
            The mouse is over the ListView
            </summary>
        </member>
        <member name="F:RssBandit.UxTheme.PartStates.ListItem.Selected">
            <summary>
            The ListView is selected
            </summary>
        </member>
        <member name="F:RssBandit.UxTheme.PartStates.ListItem.Disabled">
            <summary>
            The ListView is disabled
            </summary>
        </member>
        <member name="F:RssBandit.UxTheme.PartStates.ListItem.SelectedNotFocused">
            <summary>
            The ListView is selected but currently does not have focus
            </summary>
        </member>
        <member name="T:RssBandit.UxTheme.PartStates.TreeItem">
            <summary>
            TreeView part states
            </summary>
        </member>
        <member name="F:RssBandit.UxTheme.PartStates.TreeItem.Normal">
            <summary>
            The TreeView is in its normal state
            </summary>
        </member>
        <member name="F:RssBandit.UxTheme.PartStates.TreeItem.Hot">
            <summary>
            The mouse is over the TreeView
            </summary>
        </member>
        <member name="F:RssBandit.UxTheme.PartStates.TreeItem.Selected">
            <summary>
            The TreeView is selected
            </summary>
        </member>
        <member name="F:RssBandit.UxTheme.PartStates.TreeItem.Disabled">
            <summary>
            The TreeView is disabled
            </summary>
        </member>
        <member name="F:RssBandit.UxTheme.PartStates.TreeItem.SelectedNotFocused">
            <summary>
            The TreeView is selected but currently does not have focus
            </summary>
        </member>
        <member name="T:Genghis.Windows.Forms.AniForm">
            <summary>
            AniForm is a MSNMessenger-style animated popup windows that
            can have any windows forms control placed on it.  The class'
            properties define animation direction, animation speed, delay
            and a number of other properties that are used to render and 
            animate the form at run-time.
            </summary>
        </member>
        <member name="F:Genghis.Windows.Forms.AniForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Genghis.Windows.Forms.AniForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Genghis.Windows.Forms.AniForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Genghis.Windows.Forms.AniForm.Animate">
            <summary>
            Displays the form and begins animation
            </summary>
        </member>
        <member name="M:Genghis.Windows.Forms.AniForm.RequestClose">
            <summary>
            Requests that the message window be closed immediately.
            </summary>
            <remarks>
            There may be a short interval between calling this method and
            when the Window actually closes
            </remarks>
        </member>
        <member name="E:Genghis.Windows.Forms.AniForm.AnimatingDone">
            <summary>
            Fires when the window stops animating (after it contracts and/or disappears)
            </summary>
        </member>
        <member name="P:Genghis.Windows.Forms.AniForm.Direction">
            <summary>
            The direction of the message window expansion
            </summary>
        </member>
        <member name="P:Genghis.Windows.Forms.AniForm.Speed">
            <summary>
            The speed with which the window expands/contracts.  Valid
            values are between 1 and 50
            </summary>
        </member>
        <member name="P:Genghis.Windows.Forms.AniForm.StartColor">
            <summary>
            For gradient backgrounds, the beginning color of the gradient
            </summary>
        </member>
        <member name="P:Genghis.Windows.Forms.AniForm.EndColor">
            <summary>
            For gradient backgrounds, the ending color of the gradient
            </summary>
        </member>
        <member name="P:Genghis.Windows.Forms.AniForm.BackgroundMode">
            <summary>
            Sets or retrieves the background mode of the message window.
            See <see cref="P:Genghis.Windows.Forms.AniForm.BackgroundMode"/> for background mode choices
            </summary>
        </member>
        <member name="P:Genghis.Windows.Forms.AniForm.Delay">
            <summary>
            The delay (in milliseconds) between when the window expands
            and when it contracts
            </summary>
        </member>
        <member name="P:Genghis.Windows.Forms.AniForm.Animating">
            <summary>
            Indicates whether this Form is currently animating or not
            </summary>
        </member>
        <member name="P:Genghis.Windows.Forms.AniForm.CloseRequested">
            <summary>
            Indicates whether or not someone has requested that the
            window close prematurely.  This property will be set to
            true between the time the close is requested and when the
            window actually disappears.
            </summary>
        </member>
        <member name="P:Genghis.Windows.Forms.AniForm.Placement">
            <summary>
            Indicates where the message window will appear on the screen
            </summary>
        </member>
        <member name="P:Genghis.Windows.Forms.AniForm.StartLocation">
            <summary>
            If the <see cref="P:Genghis.Windows.Forms.AniForm.Placement"/> property is set to Normal, then this
            property indicates the initial location of the form when it
            is displayed
            </summary>
        </member>
        <member name="P:Genghis.Windows.Forms.AniForm.IsActivated">
            <summary>
            Indicates whether or not the form is activated
            </summary>
        </member>
        <member name="P:Genghis.Windows.Forms.AniForm.BorderStyle">
            <summary>
            Specifies the border style for the form
            </summary>
        </member>
        <member name="P:Genghis.Windows.Forms.AniForm.FullSize">
            <summary>
            Specifies the full size of the form when expanded
            </summary>
        </member>
        <member name="P:Genghis.Windows.Forms.AniForm.StackMode">
            <summary>
            Specifies the stacking mode used by this form
            </summary>
        </member>
        <member name="P:Genghis.Windows.Forms.AniForm.AutoDispose">
            <summary>
            Determines if the form closes itself and calls Dispose() internally once
            it is done animating. 
            </summary>
            <remarks>
            If set to true, a given AniForm instance can only be used once, otherwise
            the caller has the responsibility for calling Close() and Dispose() to
            release all respources associated with the AniForm.
            </remarks>
        </member>
        <member name="M:RssBandit.WinGui.Forms.ToastNotify.Init(RssBandit.WinGui.ItemActivateCallback,RssBandit.WinGui.DisplayFeedPropertiesCallback)">
            <summary>
            Init the ToastNotify with the needed callbacks.
            </summary>
            <param name="onItemActivateCallback"></param>
            <param name="onFeedPropertiesDialog"></param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.ToastNotify.Init(RssBandit.WinGui.ItemActivateCallback,RssBandit.WinGui.DisplayFeedPropertiesCallback,RssBandit.WinGui.FeedActivateCallback)">
            <summary>
            Init the ToastNotify with the needed callbacks.
            </summary>
            <param name="onItemActivateCallback"></param>
            <param name="onFeedPropertiesDialog"></param>
            <param name="onFeedActivateCallback"></param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.ToastNotify.Init(RssBandit.WinGui.EnclosureActivateCallback,RssBandit.WinGui.DisplayFeedPropertiesCallback)">
            <summary>
            Init the ToastNotify with the needed callbacks.
            </summary>
            <param name="enclosureActivateCallback"></param>
            <param name="onFeedPropertiesDialog"></param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.ToastNotify.Init(RssBandit.WinGui.EnclosureActivateCallback,RssBandit.WinGui.DisplayFeedPropertiesCallback,RssBandit.WinGui.FeedActivateCallback)">
            <summary>
            Init the ToastNotify with the needed callbacks.
            </summary>
            <param name="enclosureActivateCallback"></param>
            <param name="onFeedPropertiesDialog"></param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.ToastNotify.Init(RssBandit.WinGui.ItemActivateCallback,RssBandit.WinGui.DisplayFeedPropertiesCallback,RssBandit.WinGui.FeedActivateCallback,RssBandit.WinGui.EnclosureActivateCallback)">
            <summary>
            Init the ToastNotify with the needed callbacks.
            </summary>
            <param name="onItemActivateCallback"></param>
            <param name="onFeedPropertiesDialog"></param>
            <param name="onFeedActivateCallback"></param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.ToastNotify.ItemsToDisplay(System.String,System.Int32,System.Collections.IList)">
            <summary>
            Init the toast display.
            </summary>
            <param name="feedName">Feed name</param>
            <param name="unreadItemsYetDisplayed"></param>
            <param name="items"></param>
            <returns>true, if items found to display, else false </returns>
            <exception cref="T:System.InvalidOperationException">If no new items was found</exception>
        </member>
        <member name="M:RssBandit.WinGui.Forms.ToastNotify.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.ToastNotify.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.NewsItemToastNotify.#ctor">
            <summary>
            Default constructor calls base
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.NewsItemToastNotify.#ctor(RssBandit.WinGui.ItemActivateCallback,RssBandit.WinGui.DisplayFeedPropertiesCallback)">
            <summary>
            Init the NewsItemToastNotify with the needed callbacks.
            </summary>
            <param name="onItemActivateCallback"></param>
            <param name="onFeedPropertiesDialog"></param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.NewsItemToastNotify.#ctor(RssBandit.WinGui.ItemActivateCallback,RssBandit.WinGui.DisplayFeedPropertiesCallback,RssBandit.WinGui.FeedActivateCallback)">
            <summary>
            Init the NewsItemToastNotify with the needed callbacks.
            </summary>
            <param name="onItemActivateCallback"></param>
            <param name="onFeedPropertiesDialog"></param>
            <param name="onFeedActivateCallback"></param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.NewsItemToastNotify.ItemsToDisplay(System.String,System.Int32,System.Collections.IList)">
            <summary>
            Init the toast display.
            </summary>
            <param name="feedName">Feed name</param>
            <param name="unreadItemsYetDisplayed"></param>
            <param name="items"></param>
            <returns>true, if items found to display, else false </returns>
            <exception cref="T:System.InvalidOperationException">If no new items was found</exception>
        </member>
        <member name="M:RssBandit.WinGui.Forms.EnclosureToastNotify.#ctor">
            <summary>
            Default constructor calls base
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.EnclosureToastNotify.#ctor(RssBandit.WinGui.EnclosureActivateCallback,RssBandit.WinGui.DisplayFeedPropertiesCallback)">
            <summary>
            Init the NewsItemToastNotify with the needed callbacks.
            </summary>
            <param name="onEnclosureActivateCallback"></param>
            <param name="onFeedPropertiesDialog"></param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.EnclosureToastNotify.#ctor(RssBandit.WinGui.EnclosureActivateCallback,RssBandit.WinGui.DisplayFeedPropertiesCallback,RssBandit.WinGui.FeedActivateCallback)">
            <summary>
            Init the NewsItemToastNotify with the needed callbacks.
            </summary>
            <param name="onEnclosureActivateCallback"></param>
            <param name="onFeedPropertiesDialog"></param>
            <param name="onFeedActivateCallback"></param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.EnclosureToastNotify.ItemsToDisplay(System.String,System.Int32,System.Collections.IList)">
            <summary>
            Init the toast display.
            </summary>
            <param name="feedName">Feed name</param>
            <param name="unreadItemsYetDisplayed"></param>
            <param name="items"></param>
            <returns>true, if items found to display, else false </returns>
            <exception cref="T:System.InvalidOperationException">If no new items was found</exception>
        </member>
        <member name="T:System.Windows.Forms.ThListView.ImagePosition">
            <summary>
            Positions of the ThreadedListView background image
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ThListView.ThreadedListViewColumnHeader">
            <summary>
            ThreadedListViewColumnHeader.
            </summary>
        </member>
        <member name="T:RssBandit.AdditionalFeedElements">
            <summary>
            AdditionalFeedElements contains the RSS Bandit owned
            additional feed XML elements/attributes and namespaces
            used to annotate, keep relations between feeds etc.
            </summary>
        </member>
        <member name="F:RssBandit.AdditionalFeedElements.Namespace">
            <summary>
            Gets the common namespace used for RSS Bandit extensions
            </summary>
        </member>
        <member name="F:RssBandit.AdditionalFeedElements.OldElementPrefix">
            <summary>
            Gets the former common namespace extension prefix
            </summary>
        </member>
        <member name="F:RssBandit.AdditionalFeedElements.ElementPrefix">
            <summary>
            Gets the common namespace extension prefix
            </summary>
        </member>
        <member name="F:RssBandit.AdditionalFeedElements.FlaggedElementName">
            <summary>
            Gets the element name used to store flag state of new items
            </summary>
        </member>
        <member name="F:RssBandit.AdditionalFeedElements.DeletedElementName">
            <summary>
            Gets the element name used to keep the feed url of deleted news items 
            </summary>
        </member>
        <member name="F:RssBandit.AdditionalFeedElements.ErrorElementName">
            <summary>
            Gets the element name used to keep the feed url of failed feeds 
            (messages stored as news items) 
            </summary>
        </member>
        <member name="P:RssBandit.AdditionalFeedElements.OriginalFeedOfFlaggedItem">
            <summary>
            Gets the <see cref="T:System.Xml.XmlQualifiedName"/> used to reference 
            the original feed of flagged items.
            </summary>
            <value>XmlQualifiedName</value>
        </member>
        <member name="P:RssBandit.AdditionalFeedElements.OriginalFeedOfDeletedItem">
            <summary>
            Gets the <see cref="T:System.Xml.XmlQualifiedName"/> used to reference 
            the original feed of deleted items.
            </summary>
            <value>XmlQualifiedName</value>
        </member>
        <member name="P:RssBandit.AdditionalFeedElements.OriginalFeedOfWatchedItem">
            <summary>
            Gets the <see cref="T:System.Xml.XmlQualifiedName"/> used to reference 
            the original feed of watched items.
            </summary>
            <value>XmlQualifiedName</value>
        </member>
        <member name="P:RssBandit.AdditionalFeedElements.OriginalFeedOfErrorItem">
            <summary>
            Gets the <see cref="T:System.Xml.XmlQualifiedName"/> used to reference 
            the original feed of deleted items.
            </summary>
            <value>XmlQualifiedName</value>
        </member>
        <member name="T:RssBandit.WinGui.Utility.History">
            <summary>
            A class with behavior similar to 
            IE's history navigation (Back, Forward)
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Utility.History.Add(RssBandit.WinGui.Utility.HistoryEntry)">
            <summary>
            Add an entry to the history
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:RssBandit.WinGui.Utility.History.Clear">
            <summary>
            Clear the history
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Utility.History.GetNext">
            <summary>
            Gets the next entry from history 
            (Move forward operation)
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Utility.History.GetNextAt(System.Int32)">
            <summary>
            Gets the next entry from history from the specified 
            zero based index (Move Forward operation)
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Utility.History.GetPrevious">
            <summary>
            Gets the previous entry from history
            (Move back operation)
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Utility.History.GetPreviousAt(System.Int32)">
            <summary>
            Gets the previous entry from history from the specified 
            zero based index (Move back operation)
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Utility.History.GetHeadOfNextEntries(System.Int32)">
            <summary>
            Gets a string list of Next-History entries by calling ToString()
            for entries (Move Forward Entries List)
            </summary>
            <param name="maxEntries">how many entries should be returned at once.
            If 0 (zero) or negative, the internal MaxEntries count will be used.</param>
            <returns>string[] list</returns>
        </member>
        <member name="M:RssBandit.WinGui.Utility.History.GetHeadOfPreviousEntries(System.Int32)">
            <summary>
            Gets a string list of Previous-History entries by calling ToString()
            for entries (Move Back Entries List)
            </summary>
            <param name="maxEntries">how many entries should be returned at once.
            If 0 (zero) or negative, the internal MaxEntries count will be used.</param>
            <returns>string[] list</returns>
        </member>
        <member name="M:RssBandit.WinGui.Utility.History.OnStateChanged">
            <summary>
            Raises the StateChanged event, if set
            </summary>
        </member>
        <member name="E:RssBandit.WinGui.Utility.History.StateChanged">
            <summary>
            Raised if the history state changed (Add,
            Clear, GetNext or GetPrevious called)
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Utility.History.Count">
            <summary>
            Gets the number of entries actually contained in the history.
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Utility.History.CanGetNext">
            <summary>
            Gets true, if the history can get the next entry
            (Can move forward)
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Utility.History.CanGetPrevious">
            <summary>
            Gets true, if the history can get the previous entry
            (Can move backward)
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Utility.HistoryEntry">
            <summary>
            HistoryEntry class. The entries type used by History
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Utility.HistoryMenuManager.Reset">
            <summary>
            Resets the control. Should get called after Toolbar.LoadFromXml(), 
            because the items maintained dynamically.
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Utility.HistoryNavigationEventArgs">
            <summary>
            Used as a parameter on the
            HistoryNavigationEventHandler delegate
            </summary>
        </member>
        <member name="T:RssBandit.Utility.Keyboard.ShortcutHandler">
            <summary>
            Class used to manage Menu shortcuts and Keyboard Combination shortcuts 
            for an application (in this case RSS Bandit).
            </summary>
        </member>
        <member name="M:RssBandit.Utility.Keyboard.ShortcutHandler.#ctor">
            <summary>
            Creates a new <see cref="T:RssBandit.Utility.Keyboard.ShortcutHandler"/> instance.
            </summary>
        </member>
        <member name="M:RssBandit.Utility.Keyboard.ShortcutHandler.Load(System.IO.Stream)">
            <summary>
            Loads the specified stream.
            </summary>
            <param name="stream">Stream.</param>
        </member>
        <member name="M:RssBandit.Utility.Keyboard.ShortcutHandler.Load(System.String)">
            <summary>
            Loads the specified path.
            </summary>
            <param name="path">Path.</param>
        </member>
        <member name="M:RssBandit.Utility.Keyboard.ShortcutHandler.Write(System.String)">
            <summary>
            Writes the specified path.
            </summary>
            <param name="path">Path.</param>
        </member>
        <member name="M:RssBandit.Utility.Keyboard.ShortcutHandler.Write(System.String,System.Text.Encoding)">
            <summary>
            Writes the contents of this instance into a settings file.
            </summary>
            <param name="path"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:RssBandit.Utility.Keyboard.ShortcutHandler.IsDefined(System.String)">
            <summary>
            Returns true if a shortcut for the command is defined.
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:RssBandit.Utility.Keyboard.ShortcutHandler.GetKeyCombinations(System.String)">
            <summary>
            Gets the key combinations associated with 
            the command.
            </summary>
            <param name="command">Command.</param>
            <returns></returns>
        </member>
        <member name="M:RssBandit.Utility.Keyboard.ShortcutHandler.RemoveKeyCombination(System.String,System.Int32)">
            <summary>
            Removes the key combination for the specified command.
            </summary>
            <param name="command">Command.</param>
            <param name="index">index of the command.</param>
        </member>
        <member name="M:RssBandit.Utility.Keyboard.ShortcutHandler.GetShortcut(System.String)">
            <summary>
            Gets the shortcut for the specified command.
            </summary>
            <param name="command">Name of the command.</param>
            <returns></returns>
        </member>
        <member name="M:RssBandit.Utility.Keyboard.ShortcutHandler.SetShortcut(System.String,System.Windows.Forms.Shortcut)">
            <summary>
            Sets the shortcut for the specified command.
            </summary>
            <param name="command">Command.</param>
            <param name="shortcut">Shortcut.</param>
        </member>
        <member name="M:RssBandit.Utility.Keyboard.ShortcutHandler.SetShortcut(System.String,System.Windows.Forms.Shortcut,System.Boolean)">
            <summary>
            Sets the shortcut for the specified command.
            </summary>
            <param name="command">Command.</param>
            <param name="shortcut">Shortcut.</param>
            <param name="displayed">True if this shortcut is displayed on the menu</param>
        </member>
        <member name="M:RssBandit.Utility.Keyboard.ShortcutHandler.IsShortcutDisplayed(System.String)">
            <summary>
            Returns true if the shortcut is visible, otherwise false.
            </summary>
            <param name="command">Command.</param>
            <returns></returns>
        </member>
        <member name="M:RssBandit.Utility.Keyboard.ShortcutHandler.IsCommandInvoked(System.String,System.IntPtr)">
            <summary>
            Given a wParam property of a WM_KEYDOWN Message, returns true if the key combination 
            is mapped to the specified command.
            </summary>
            <param name="wParam">
            The Message wParam containing the Keys 
            flag corresponding to a key combination.
            </param>
            <returns></returns>
        </member>
        <member name="M:RssBandit.Utility.Keyboard.ShortcutHandler.IsCommandInvoked(System.String,System.Windows.Forms.Keys)">
            <summary>
            Given a keys bitflag, returns true if the key combination 
            is mapped to the specified command.
            </summary>
            <param name="command"></param>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:RssBandit.Utility.Keyboard.ShortcutHandler.AddKeyboardCombination(System.String,System.Windows.Forms.Keys)">
            <summary>
            Adds the keyboard combination.
            </summary>
            <param name="command">Command.</param>
            <param name="keys">Keys.</param>
        </member>
        <member name="M:RssBandit.Utility.Keyboard.ShortcutHandler.GetMissingShortcutCommands">
            <summary>
            Gets the missing shortcut commands that have 
            not been defined in the settings file.
            </summary>
        </member>
        <member name="P:RssBandit.Utility.Keyboard.ShortcutHandler.IsComplete">
            <summary>
            Gets a value indicating whether this instance contains 
            a shortcut for every available command.
            </summary>
            <value>
            	<c>true</c> if [is complete]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:RssBandit.Utility.Keyboard.ShortcutHandler.AvailableMenuCommands">
            <summary>
            Gets the available shortcut commands.
            </summary>
            <remarks>
            This is a list of commands that are configured using 
            a <seealso cref="T:System.Windows.Forms.Shortcut"/> value.  
            The shortcut for these commands are used to set the Shortcut 
            property of the corresponding menu command.
            </remarks>
        </member>
        <member name="P:RssBandit.Utility.Keyboard.ShortcutHandler.AvailableKeyComboCommands">
            <summary>
            Gets the available Keyboard Combination commands.
            </summary>
            <remarks>
            This is a list of commands that are configured using 
            <seealso cref="T:System.Windows.Forms.Keys"/> values.  
            These are called "Keyboard Combination" commands because they configure 
            commands to be invoked based on the <seealso cref="T:System.Windows.Forms.IMessageFilter"/> 
            filtering of a combination of simultaneous keystrokes.
            </remarks>
        </member>
        <member name="T:RssBandit.Utility.Keyboard.DuplicateShortcutSettingException">
            <summary>
            Exception thrown when trying to load an invalid 
            settings file.
            </summary>
        </member>
        <member name="T:RssBandit.Utility.Keyboard.InvalidShortcutSettingsFileException">
            <summary>
            Exception thrown when trying to load an invalid 
            settings file.
            </summary>
        </member>
        <member name="M:RssBandit.Utility.Keyboard.InvalidShortcutSettingsFileException.#ctor">
            <summary>
            Creates a new <see cref="T:RssBandit.Utility.Keyboard.InvalidShortcutSettingsFileException"/> instance.
            </summary>
        </member>
        <member name="M:RssBandit.Utility.Keyboard.InvalidShortcutSettingsFileException.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:RssBandit.Utility.Keyboard.InvalidShortcutSettingsFileException"/> instance.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:RssBandit.Utility.Keyboard.InvalidShortcutSettingsFileException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new <see cref="T:RssBandit.Utility.Keyboard.InvalidShortcutSettingsFileException"/> instance.
            </summary>
            <param name="message">Message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:RssBandit.Utility.Keyboard.InvalidShortcutSettingsFileException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new <see cref="T:RssBandit.Utility.Keyboard.InvalidShortcutSettingsFileException"/> instance.
            </summary>
            <param name="info">Info.</param>
            <param name="context">Context.</param>
        </member>
        <member name="M:RssBandit.Utility.Keyboard.DuplicateShortcutSettingException.#ctor">
            <summary>
            Creates a new <see cref="T:RssBandit.Utility.Keyboard.DuplicateShortcutSettingException"/> instance.
            </summary>
        </member>
        <member name="M:RssBandit.Utility.Keyboard.DuplicateShortcutSettingException.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:RssBandit.Utility.Keyboard.DuplicateShortcutSettingException"/> instance.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:RssBandit.Utility.Keyboard.DuplicateShortcutSettingException.#ctor(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:RssBandit.Utility.Keyboard.DuplicateShortcutSettingException"/> instance.
            </summary>
            <param name="message">Message.</param>
            <param name="shortcutKey">Shortcut key.</param>
        </member>
        <member name="P:RssBandit.Utility.Keyboard.DuplicateShortcutSettingException.ShortcutKey">
            <summary>
            Gets the shortcut key.
            </summary>
            <value></value>
        </member>
        <member name="T:RssBandit.WinGui.HttpRequestFileThreadHandler">
            <summary>
            Summary description for HttpRequestFileThreadHandler.
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Forms.NewsgroupsConfiguration">
            <summary>
            Summary description for NewsgroupsConfiguration.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.NewsgroupsConfiguration.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.NewsgroupsConfiguration.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.DisplayingNewsChannelProcessor">
            <summary>
            Internal build in DisplayingNewsChannelProcessor.
            Strip bad tags.
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.StripBadTagsChannel">
            <summary>
            StripBadTagsChannel: implements a news channel processor to strip bad tags.
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Dialogs.PodcastOptionsDialog">
            <summary>
            Summary description for PodcastOptionsDialog.
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Dialogs.PodcastOptionsDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Dialogs.PodcastOptionsDialog.#ctor(RssBandit.RssBanditPreferences,RssBandit.AppServices.ICoreApplication)">
            <summary>
            Initializes a new instance of the <see cref="T:RssBandit.WinGui.Dialogs.PodcastOptionsDialog"/> class.
            </summary>
            <param name="prefs">The prefs.</param>
            <param name="coreApp">The core app.</param>
        </member>
        <member name="M:RssBandit.WinGui.Dialogs.PodcastOptionsDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Dialogs.PodcastOptionsDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Dialogs.PodcastOptionsDialog.OnControlValidating(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            called on every control
            </summary>
            <param name="sender">Which control is validated?</param>
            <param name="e">EventArgs with cancel parameter</param>
        </member>
        <member name="T:RssBandit.WinGui.Controls.TreeFeedsNodeBase">
            <summary>
            Base class of the tree view nodes
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Controls.TreeFeedsNodeBase.TextBeforeEditing">
            <summary>
            Used in the node editing events to keep the old node Text
            we need in the AfterLabelEditing event to maintain related
            data structures.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Controls.TreeFeedsNodeBase.SetIndividualImage(System.Drawing.Image)">
            <summary>
            Sets the individual node image. If null is provided,
            the node's original image is restored. 
            </summary>
            <param name="image">The image.</param>
        </member>
        <member name="M:RssBandit.WinGui.Controls.TreeFeedsNodeBase.InvalidateNode">
            <summary>
            Invalidates the node for UI repainting.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Controls.TreeFeedsNodeBase.BuildCategoryStoreName(RssBandit.WinGui.Controls.TreeFeedsNodeBase)">
            <summary>
            Helper that builds the full path trimmed category name (without root caption)
            </summary>
            <param name="node">the FeedTreeNodeBase</param>
            <returns>
            Category name in this form: 
              'Main Category\Sub Category\...\catNode Category'.
            Returns null in case node was null or no categories are found.
            </returns>
        </member>
        <member name="M:RssBandit.WinGui.Controls.TreeFeedsNodeBase.BuildCategoryStoreNameArray(RssBandit.WinGui.Controls.TreeFeedsNodeBase)">
            <summary>
            Helper that builds the full path trimmed category name array (without root caption)
            </summary>
            <param name="node">the FeedTreeNodeBase</param>
            <returns>Category names in this form: ['Main Category', 'Sub Category', ...,'catNode Category'].</returns>
        </member>
        <member name="E:RssBandit.WinGui.Controls.TreeFeedsNodeBase.ReadCounterZero">
            <summary>
            Gets raised, if the node's read counter reach zero
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Controls.TreeFeedsNodeBase.DataKey">
            <summary>
            Gets the data key. Is virtually the same as calling
            <see cref="P:RssBandit.WinGui.Controls.TreeFeedsNodeBase.DataKey"/> property on the base class, 
            but we prefer to use this to get rid of the casts (to string).
            </summary>
            <value>The data key (string).</value>
            <remarks>Used to store feedUrls for Feed node types, etc.
            </remarks>
        </member>
        <member name="P:RssBandit.WinGui.Controls.TreeFeedsNodeBase.ImageResolved">
            <summary>
            Gets the image of the node. If the node has been assigned a "real"
            image, this will be returned. If it has a image index within the imagelist,
            this image will be returned. If no image was found, null is returned.
            </summary>
            <value>The resolved node image.</value>
        </member>
        <member name="P:RssBandit.WinGui.Controls.TreeFeedsNodeBase.SelectedImageIndex">
            <summary>
            Gets the value of the selected image index for this node type. 
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Controls.TreeFeedsNodeBase.ImageIndex">
            <summary>
            Gets the value of the image index for this node type. 
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Controls.TreeFeedsNodeBase.Text">
            <summary>
            Now handles the whole visual node text formatting
            </summary>
            <value>Returns the Text (caption) of the node. 
            Sets the new displayed text and font of a node according to the
            unread items counter info.</value>
        </member>
        <member name="P:RssBandit.WinGui.Controls.TreeFeedsNodeBase.AnyNewComments">
            <summary>
            AnyNewComments and ItemsWithNewCommentsCount are working interconnected:
            if you set AnyUnreadComments to true, this will update the visualized info to
            use the NewComments Font. Otherwise, if you set AnyUnreadComments to false, it will 
            refresh the caption rendering to default.
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Controls.TreeFeedsNodeBase.ItemsWithNewCommentsCount">
            <summary>
            AnyNewComments and ItemsWithNewCommentsCount are working interconnected:
            if you set AnyNewComments to non zero, ItemsWithNewCommentsCount will be set to true and
            then updates the visualized info to use the NewComments Font and 
            read counter state info. If ItemsWithNewCommentsCount is set to zero,
            also AnyNewComments is reset to false and refresh the caption to default.
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Controls.TreeFeedsNodeBase.AnyUnread">
            <summary>
            AnyUnread and UnreadCount are working interconnected:
            if you set AnyUnread to true, this will update the visualized info to
            use the Unread Font, but no read counter state info. UnreadCount is NOT
            modified anyway. Otherwise, if you set AnyUnread to false, it will 
            refresh the caption rendering to default.
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Controls.TreeFeedsNodeBase.UnreadCount">
            <summary>
            AnyUnread and UnreadCount are working interconnected:
            if you set UnreadCount to non zero, AnyUnread will be set to true and
            then updates the visualized info to use the Unread Font and 
            read counter state info. If UnreadCount is set to zero,
            also AnyUnread is reset to false and refresh the caption to default.
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Controls.TreeFeedsNodeBase.CategoryStoreName">
            <summary>
            Gets the name of the category store.
            </summary>
            <value>The name of the category store.</value>
        </member>
        <member name="P:RssBandit.WinGui.Controls.TreeFeedsNodeBase.TypedRootFullPath">
            <summary>
            Gets the tpyed root full path of the node.
            The root node is represented by it's FeedNodeType.
            As such the returned path is I18N aware (root node captions
            are localized!)
            </summary>
            <value>The tpyed root full path.</value>
        </member>
        <member name="T:RssBandit.WinGui.Controls.SpecialRootNode">
            <summary>
            Root node to hold special folders, like Feed Errors and Flagged Item nodes.
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Controls.WasteBasketNode">
            <summary>
            Stores the deleted items.
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Controls.SmartFolderNodeBase">
            <summary>
            Provides a base implementation of ISmartFolder.
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Controls.SentItemsNode">
            <summary>
            Stores the sent items (reply comments, NNTP Posts).
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Controls.WatchedItemsNode">
            <summary>
            Stores the watched items.
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Controls.ExceptionReportNode">
            <summary>
            Stores the feed failures and exceptions reported while retrieving.
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Controls.FlaggedItemsNode">
            <summary>
            Stores the various flagged items.
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Controls.FlaggedItemsRootNode">
            <summary>
            The flagged items node root
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Controls.UnreadItemsNode">
            <summary>
            Stores the unread items.
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Controls.FinderRootNode">
            <summary>
            Root node to hold persistent FinderNodes.
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Controls.FinderNode">
            <summary>
            Represents a search folder in the tree.
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Controls.TempFinderNode">
            <summary>
            Represents a search folder in the tree for temporary
            search results (not persisted as a search folder)
            </summary>
        </member>
        <member name="T:RssBandit.IdentityNewsServerManager">
            <summary>
            Summary description for IdentityNewsServerManager.
            </summary>
        </member>
        <member name="M:RssBandit.IdentityNewsServerManager.CurrentSubscriptions(NewsComponents.INntpServerDefinition)">
            <summary>
            Gets (filters) the current subscriptions for Nntp feeds of a specific nntp server.
            </summary>
            <param name="sd">NntpServerDefinition</param>
            <returns>List of feedsFeed objects, that match</returns>
        </member>
        <member name="M:RssBandit.IdentityNewsServerManager.LoadNntpNewsGroups(System.Windows.Forms.IWin32Window,NewsComponents.INntpServerDefinition,System.Boolean)">
            <summary>
            Load the list of groups from either the cache, or if not available or forced 
            from the nntp server.
            </summary>
            <param name="owner">Windows handle</param>
            <param name="sd">NntpServerDefinition</param>
            <param name="forceLoadFromServer">set to true, if a 'fresh' group list should be loaded from the server</param>
            <returns>List of groups a server offer</returns>
        </member>
        <member name="M:RssBandit.IdentityNewsServerManager.FetchNewsGroupsFromServer(System.Windows.Forms.IWin32Window,NewsComponents.INntpServerDefinition)">
            <summary>
            Really loads the group list from the server.
            </summary>
            <param name="owner">Windows handle</param>
            <param name="sd">NntpServerDefinition</param>
            <returns>List of groups a server offer</returns>
            <exception cref="T:System.ArgumentNullException">If <see paramref="sd">param sd</see> is null</exception>
            <exception cref="T:System.Exception">On any failure we get on request</exception>
        </member>
        <member name="T:RssBandit.WinGui.Utility.ColorEx">
            <summary>
            Stores a color and provides conversion between the 
            RGB and HLS color models.
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Utility.ColorEx.HUEMAX">
            <summary> Maximum Hue </summary>
        </member>
        <member name="F:RssBandit.WinGui.Utility.ColorEx.SATMAX">
            <summary> Maximum Saturation </summary>
        </member>
        <member name="F:RssBandit.WinGui.Utility.ColorEx.BRIGHTMAX">
            <summary> Maximum Brightness </summary>
        </member>
        <member name="F:RssBandit.WinGui.Utility.ColorEx.RGBMAX">
            <summary> Maximum RBG </summary>
        </member>
        <member name="M:RssBandit.WinGui.Utility.ColorEx.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Utility.ColorEx.#ctor(System.Drawing.Color)">
            <summary>
            Constructor with a Color
            </summary>
            <param name="initialColor"> Color to initializ with</param>
        </member>
        <member name="M:RssBandit.WinGui.Utility.ColorEx.GetHue">
            <summary>
            Get the Hue of the Color
            </summary>
            <returns>Hue value</returns>
        </member>
        <member name="M:RssBandit.WinGui.Utility.ColorEx.GetSaturation">
            <summary>
            Get the Saturation of the Color
            </summary>
            <returns></returns>
        </member>
        <member name="M:RssBandit.WinGui.Utility.ColorEx.GetBrightness">
            <summary>
            Get Brighness of the Color
            </summary>
            <returns></returns>
        </member>
        <member name="M:RssBandit.WinGui.Utility.ColorEx.HSBToRGB(System.Int32,System.Single,System.Single)">
            <summary>
            Converts HSB Color components to an RGB System.Drawing.Color
            </summary>
            <param name="Hue">Hue component</param>
            <param name="Saturation">Saturation component</param>
            <param name="Brightness">Brightness component</param>
            <returns>Returns the RGB value as a System.Drawing.Color</returns>
        </member>
        <member name="M:RssBandit.WinGui.Utility.ColorEx.ColorizeOneNote(System.Windows.Forms.Control,System.Int32)">
            <summary>
            Colorize a control (BackColor) like the Tabs of Microsoft's OneNote.
            </summary>
            <param name="control"></param>
            <param name="index"></param>
        </member>
        <member name="P:RssBandit.WinGui.Utility.ColorEx.CurrentColor">
            <summary>
            The current Color (RGB model)
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Utility.ColorEx.Red">
            <summary>
            The Red component of the current Color
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Utility.ColorEx.Green">
            <summary>
            The Green component of the current Color
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Utility.ColorEx.Blue">
            <summary>
            The Blue component of the current Color
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Utility.ColorEx.Hue">
            <summary>
            The Hue component of the current Color
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Utility.ColorEx.Saturation">
            <summary>
            The Saturation component of the current Color
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Utility.ColorEx.Brightness">
            <summary>
            The Brightness component of the current Color
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Forms.SplashScreen">
            <summary>
            Summary description for SplashScreen.
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Forms.SplashScreen.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.SplashScreen.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.SplashScreen.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Forms.CategoryProperties">
            <summary>
            Summary description for CategoryProperties.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.CategoryProperties.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.CategoryProperties.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RssBandit.CLR20.RssBandit.UpdateService.UpdateService">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.RssBandit.UpdateService.UpdateService.#ctor">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.RssBandit.UpdateService.UpdateService.DownloadLink(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.RssBandit.UpdateService.UpdateService.BeginDownloadLink(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.RssBandit.UpdateService.UpdateService.EndDownloadLink(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.RssBandit.UpdateService.UpdateService.DownloadLinkAsync(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.RssBandit.UpdateService.UpdateService.DownloadLinkAsync(System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.RssBandit.UpdateService.UpdateService.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:RssBandit.CLR20.RssBandit.UpdateService.UpdateService.DownloadLinkCompleted">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.RssBandit.UpdateService.DownloadLinkCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.RssBandit.UpdateService.DownloadLinkCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.RssBandit.UpdateService.DownloadLinkCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:RssBandit.RssBanditPreferences">
            <summary>
            RssBanditPreferences manages 
            all the Bandit specific user preferences.
            </summary>
        </member>
        <member name="M:RssBandit.RssBanditPreferences.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:RssBandit.RssBanditPreferences"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:RssBandit.RssBanditPreferences.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.NumNewsItemsPerPage">
            <summary>
            Gets/Sets the number of news items to display per page in the newspaper view
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.NgosSyncToken">
            <summary>
            Gets/Sets the Newsgator Online sync token.
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.UserIdentityForComments">
            <summary>
            Gets/Sets the user identity used to post feed comments.
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.Referer">
            <summary>
            Obsolete. Do not use it anymore!
            Used only to migrate old values to the new structure UserIdentity.
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.UserName">
            <summary>
            Obsolete. Do not use it anymore!
            Used only to migrate old values to the new structure UserIdentity.
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.UserMailAddress">
            <summary>
            Obsolete. Do not use it anymore!
            Used only to migrate old values to the new structure UserIdentity.
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.FeedRefreshOnStartup">
            <summary>
            Sets/Get a value that control if feeds should be refreshed from the original
            source on startup of the application.
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.UseProxy">
            <summary>
            Gets/Set a value to control if the application have to use a proxy to
            request feeds.
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.UseIEProxySettings">
            <summary>
            If <see cref="P:RssBandit.RssBanditPreferences.UseProxy">UseProxy</see> is set to true, this option is used
            to force a take over the proxy settings from and installed Internet Explorer.
            (Including automatic proxy configuration).
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.BypassProxyOnLocal">
            <summary>
            Gets/Set the value if the used proxy should bypass requests
            for local (intranet) servers.
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.MarkItemsAsReadWhenViewed">
            <summary>
            Gets/Sets the value that indicates whether a news item should be automatically 
            marked as read when viewed in the newspaper view
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.LimitNewsItemsPerPage">
            <summary>
            Gets/Set the value that indicates whether a limited number of news items
            should be displayed per page in the newspaper view. 
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.ProxyBypassList">
            <summary>
            Sets/Get a list of servers/web addresses to bypass by the used proxy.
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.ProxyAddress">
            <summary>
            Sets/Get the proxy address.
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.ProxyPort">
            <summary>
            Sets/Get the proxy port number.
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.ProxyCustomCredentials">
            <summary>
            Sets/Get a value indicating if the proxy have to use 
            custom credentials (proxy needs authentication).
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.ProxyUser">
            <summary>
            Sets/Get the proxy custom credential user name.
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.ProxyPassword">
            <summary>
            Sets/Get the proxy custom credential user password.
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.NewsItemStylesheetFile">
            <summary>
            Sets/Get the global news item formatter stylesheet 
            (filename exluding path name)
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.SinglePlaylistName">
            <summary>
            Sets/Get the user-specified name for the WMP or iTunes playlist that will 
            contain all podcasts from RSS Bandit. 
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.ReuseFirstBrowserTab">
            <summary>
            Sets/Get a value to control if the first opened web browser Tab should
            be reused or not.
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.OpenNewTabsInBackground">
            <summary>
            Sets/Get a value to control if the new browser tabs should be opened 
            in the background.
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.AllowAppEventSounds">
            <summary>
            Gets or sets a value indicating whether to allow application
            event sounds.
            </summary>
            <value>
            	<c>true</c> if [allow app event sounds]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.RunBanditAsWindowsUserLogon">
            <summary>
            Gets or sets a value indicating whether to run bandit as windows user logon.
            It directly modifies the registry value within the "Run" section and
            don't get persisted into preferences file.
            </summary>
            <value>
            	<c>true</c> if [run bandit as windows user logon]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.SinglePodcastPlaylist">
            <summary>
            Sets/Get a value to control whether there should be a single playlist 
            for podcast files. If this value is false, then podcasts are added to 
            a playlist with the same name as the feed. 
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.AddPodcasts2Folder">
            <summary>
            Sets/Get a value to control if podcasts should be moved to a specified 
            podcasts folder. 
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.AddPodcasts2WMP">
            <summary>
            Sets/Get a value to control if a playlist in Windows Media Player should be 
            created when an WMP-compatible podcast is successfully downloaded
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.AddPodcasts2ITunes">
            <summary>
            Sets/Get a value to control if a playlist in iTunes should be 
            created when an iTunes-compatible podcast is successfully downloaded
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.UseFavicons">
            <summary>
            Sets/Get a value to control if the favicons are used as feed icons 
            in the tree view.
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.MarkItemsReadOnExit">
            <summary>
            Sets/Get a value to control if unread feed items should be marked as read
            while leaving the feed through UI navigation (to another feed/category)
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.NewsItemOpenLinkInDetailWindow">
            <summary>
            Sets/Get a value to control if an news item without a description
            should display the (web page) content of the link target instead (if true).
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.HideToTrayAction">
            <summary>
            Sets/Get the user action <see cref="T:RssBandit.HideToTray">HideToTray</see> 
            when the application should minimize to the
            system tray area.
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.AutoUpdateFrequency">
            <summary>
            Sets/Get the frequency defined in <see cref="T:RssBandit.AutoUpdateMode">AutoUpdateMode</see>
            the application should check for available updates (internet access required).
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.LastAutoUpdateCheck">
            <summary>
            Deprecated (cause NotSupportedException).
            Only kept for AppServices compatibility in version 1.5.0x,
            will be removed in Phoenix release!
            Please use the propery DateTime ICoreApplication:LastAutoUpdateCheck instead! 
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.NormalFont">
            <summary>
            Normal font used to render items (listview) 
            and feeds (treeview)
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.NormalFontColor">
            <summary>
            Normal font color used to render items (listview) 
            and feeds (treeview)
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.UnreadFont">
            <summary>
            Font used to highlight unread items (listview) 
            and feeds (treeview)
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.UnreadFontColor">
            <summary>
            Color used to highlight unread items (listview) 
            and feeds (treeview)
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.FlagFont">
            <summary>
            Font used to render flagged items (listview) 
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.FlagFontColor">
            <summary>
            Color used to render flagged items (listview) 
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.RefererFont">
            <summary>
            Font used to render items that refer back to the users 
            default identity (listview) 
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.RefererFontColor">
            <summary>
            Color used to render items that refer back to the users 
            default identity (listview) 
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.ErrorFont">
            <summary>
            Font used to render items that display an error message (listview) 
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.ErrorFontColor">
            <summary>
            Color used to render items that display an error message (listview) 
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.NewCommentsFont">
            <summary>
            Font used to render items that received new comments (watched) 
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.NewCommentsFontColor">
            <summary>
            Color used to render items that received new comments (watched) 
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.MaxItemAge">
            <summary>
            Sets/Get the TimeSpan for the global maximum news item age.
            You have to use TimeSpan.MinValue for the unlimited item age.
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.UseRemoteStorage">
            <summary>
            Sets/Get the value indicating if we have to use a remote storage
            for sync. states.
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.RemoteStorageUserName">
            <summary>
            Sets/Get the username that may be required to access
            the remote storage location.
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.RemoteStoragePassword">
            <summary>
            Sets/Get the password that may be required to access the remote
            storage location.
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.RemoteStorageProtocol">
            <summary>
            Sets/Get the type of remote storage to use. <see cref="T:RssBandit.RemoteStorageProtocolType"/>
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.RemoteStorageLocation">
            <summary>
            Sets/Get the remote storage location. Can vary dep. on
            the location type (ftp, share,...)
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.BrowserOnNewWindow">
            <summary>
            Sets/Get the behavior how to handle requests to open new
            window(s) while browsing
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.BrowserCustomExecOnNewWindow">
            <summary>
            Gets/Set the executable application to start if
            browser requires to open a new window.
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.BrowserJavascriptAllowed">
            <summary>
            Sets/Get if Javascript should be allowed to execute
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.BrowserJavaAllowed">
            <summary>
            Sets/Get if Java should be allowed to execute
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.BrowserActiveXAllowed">
            <summary>
            Sets/Get if ActiveX controls should be allowed to execute
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.BrowserBGSoundAllowed">
            <summary>
            Sets/Get if background sounds are allowed to be played
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.BrowserVideoAllowed">
            <summary>
            Sets/Get if video can be played
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.BrowserImagesAllowed">
            <summary>
            Sets/Get if images should be loaded
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.ShowAlertWindow">
            <summary>
            Sets/Get the DisplayFeedAlertWindow enumeration value
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.ShowNewItemsReceivedBalloon">
            <summary>
            Sets/Get if the system tray balloon tip should be displayed
            if new news items are received.
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.BuildRelationCosmos">
            <summary>
            Sets/Get if we build the relation cosmos (interlinkage of news items).
            </summary>
        </member>
        <member name="E:RssBandit.RssBanditPreferences.PropertyChanged">
            <summary>
            Gets fired on a change of any preference property.
            </summary>
        </member>
        <member name="T:RssBandit.RssBanditPreferences.OptionalFlags">
            <summary>
            To get rid of all the bool variables,
            we now use one store to track the bool states.
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditPreferences.EncryptionHelper.CompatibilityMode">
            <summary>
            Just to enable read of old encrypted values by 
            providing the value 'true'.
            </summary>
        </member>
        <member name="T:RssBandit.RssBanditPreferences.DeserializationTypeBinder">
            <summary>
            Helps to deserialize the old RSSBandit.XXXTypes classes/types.
            It maps the type to the new namespace and same class.
            </summary>
        </member>
        <member name="M:RssBandit.RssBanditPreferences.DeserializationTypeBinder.BindToType(System.String,System.String)">
            <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly"></see> name of the serialized object.</param>
            <param name="typeName">Specifies the <see cref="T:System.Type"></see> name of the serialized object.</param>
            <returns>
            The type of the object the formatter creates a new instance of.
            </returns>
        </member>
        <member name="T:RssBandit.Utility.CommandLineArgumentTypes">
            <summary>
            Used to control parsing of command-line arguments.
            </summary>
        </member>
        <member name="F:RssBandit.Utility.CommandLineArgumentTypes.Required">
            <summary>
            Indicates that this field is required. An error will be displayed
            if it is not present when parsing arguments.
            </summary>
        </member>
        <member name="F:RssBandit.Utility.CommandLineArgumentTypes.Unique">
            <summary>
            Only valid in conjunction with Multiple.
            Duplicate values will result in an error.
            </summary>
        </member>
        <member name="F:RssBandit.Utility.CommandLineArgumentTypes.Multiple">
            <summary>
            Inidicates that the argument may be specified more than once.
            Only valid if the argument is a collection
            </summary>
        </member>
        <member name="F:RssBandit.Utility.CommandLineArgumentTypes.Exclusive">
            <summary>
            Inidicates that if this argument is specified, no other arguments may be specified.
            </summary>
        </member>
        <member name="F:RssBandit.Utility.CommandLineArgumentTypes.AtMostOnce">
            <summary>
            The default type for non-collection arguments.
            The argument is not required, but an error will be reported if it is specified more than once.
            </summary>
        </member>
        <member name="F:RssBandit.Utility.CommandLineArgumentTypes.MultipleUnique">
            <summary>
            The default type for collection arguments.
            The argument is permitted to occur multiple times, but duplicate 
            values will cause an error to be reported.
            </summary>
        </member>
        <member name="T:RssBandit.Utility.CommandLineParser">
            <summary>
            Commandline parser.
            </summary>
        </member>
        <member name="M:RssBandit.Utility.CommandLineParser.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:RssBandit.Utility.CommandLineParser"/> class
            using possible arguments deducted from the specific <see cref="T:System.Type"/>.
            </summary>
            <param name="argumentSpecification">The <see cref="T:System.Type"/> from which the possible command-line arguments should be retrieved.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="argumentSpecification"/> is a null reference.</exception>
        </member>
        <member name="M:RssBandit.Utility.CommandLineParser.Parse(System.String[],System.Object)">
            <summary>
            Parses an argument list.
            </summary>
            <param name="args">The arguments to parse.</param>
            <param name="destination">The destination object on which properties will be set corresponding to the specified arguments.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="destination"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException">The <see cref="T:System.Type"/> of <paramref name="destination"/> does not match the argument specification that was used to initialize the parser.</exception>
        </member>
        <member name="M:RssBandit.Utility.CommandLineParser.GetCommandLineAttribute(System.Reflection.PropertyInfo)">
            <summary>
            Returns the <see cref="T:RssBandit.Utility.CommandLineArgumentAttribute"/> that's applied 
            on the specified property.
            </summary>
            <param name="propertyInfo">The property of which applied <see cref="T:RssBandit.Utility.CommandLineArgumentAttribute"/> should be returned.</param>
            <returns>
            The <see cref="T:RssBandit.Utility.CommandLineArgumentAttribute"/> that's applied to the 
            <paramref name="propertyInfo"/>, or a null reference if none was applied.
            </returns>
        </member>
        <member name="P:RssBandit.Utility.CommandLineParser.LogoBanner">
            <summary>
            Gets a logo banner using version and copyright attributes defined on the 
            <see cref="M:System.Reflection.Assembly.GetEntryAssembly"/> or the 
            <see cref="M:System.Reflection.Assembly.GetCallingAssembly"/>.
            </summary>
            <value>A logo banner.</value>
        </member>
        <member name="P:RssBandit.Utility.CommandLineParser.Usage">
            <summary>
            Gets the usage instructions.
            </summary>
            <value>The usage instructions.</value>
        </member>
        <member name="P:RssBandit.Utility.CommandLineParser.NoArgs">
            <summary>
            Gets a value indicating whether no arguments were specified on the
            command line.
            </summary>
        </member>
        <member name="T:RssBandit.Utility.CommandLineArgument">
            <summary>
            Represents a valid command-line argument.
            </summary>
        </member>
        <member name="M:RssBandit.Utility.CommandLineArgument.Finish(System.Object)">
            <summary>
            Sets the value of the argument on the specified object.
            </summary>
            <param name="destination">The object on which the value of the argument should be set.</param>
            <exception cref="T:RssBandit.Utility.CommandLineArgumentException">The argument is required and no value was specified.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>
            The matching property is collection-based, but is not initialized 
            and cannot be written to.
            </para>
            <para>-or-</para>
            <para>
            The matching property is collection-based, but has no strongly-typed
            Add method.
            </para>
            <para>-or-</para>
            <para>
            The matching property is collection-based, but the signature of the 
            Add method is not supported.
            </para>
            </exception>
        </member>
        <member name="M:RssBandit.Utility.CommandLineArgument.SetValue(System.String)">
            <summary>
            Assigns the specified value to the argument.
            </summary>
            <param name="value">The value that should be assigned to the argument.</param>
            <exception cref="T:RssBandit.Utility.CommandLineArgumentException">
            <para>Duplicate argument.</para>
            <para>-or-</para>
            <para>Invalid value.</para>
            </exception>
        </member>
        <member name="P:RssBandit.Utility.CommandLineArgument.ValueType">
            <summary>
            Gets the underlying <see cref="P:RssBandit.Utility.CommandLineArgument.Type"/> of the argument.
            </summary>
            <value>The underlying <see cref="P:RssBandit.Utility.CommandLineArgument.Type"/> of the argument.</value>
            <remarks>
            If the <see cref="P:RssBandit.Utility.CommandLineArgument.Type"/> of the argument is a collection type,
            this property will returns the underlying type of that collection.
            </remarks>
        </member>
        <member name="P:RssBandit.Utility.CommandLineArgument.LongName">
            <summary>
            Gets the long name of the argument.
            </summary>
            <value>The long name of the argument.</value>
        </member>
        <member name="P:RssBandit.Utility.CommandLineArgument.ShortName">
            <summary>
            Gets the short name of the argument.
            </summary>
            <value>The short name of the argument.</value>
        </member>
        <member name="P:RssBandit.Utility.CommandLineArgument.Description">
            <summary>
            Gets the description of the argument.
            </summary>
            <value>The description of the argument.</value>
        </member>
        <member name="P:RssBandit.Utility.CommandLineArgument.IsRequired">
            <summary>
            Gets a value indicating whether the argument is required.
            </summary>
            <value>
            <c>true</c> if the argument is required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:RssBandit.Utility.CommandLineArgument.SeenValue">
            <summary>
            Gets a value indicating whether a mathing command-line argument 
            was already found.
            </summary>
            <value>
            <c>true</c> if a matching command-line argument was already
            found; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:RssBandit.Utility.CommandLineArgument.AllowMultiple">
            <summary>
            Gets a value indicating whether the argument can be specified multiple
            times.
            </summary>
            <value>
            <c>true</c> if the argument may be specified multiple times;
            otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:RssBandit.Utility.CommandLineArgument.Unique">
            <summary>
            Gets a value indicating whether the argument can only be specified once
            with a certain value.
            </summary>
            <value>
            <c>true</c> if the argument should always have a unique value;
            otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:RssBandit.Utility.CommandLineArgument.Type">
            <summary>
            Gets the <see cref="P:RssBandit.Utility.CommandLineArgument.Type"/> of the property to which the argument
            is applied.
            </summary>
            <value>
            The <see cref="P:RssBandit.Utility.CommandLineArgument.Type"/> of the property to which the argument is
            applied.
            </value>
        </member>
        <member name="P:RssBandit.Utility.CommandLineArgument.IsCollection">
            <summary>
            Gets a value indicating whether the argument is collection-based.
            </summary>
            <value>
            <c>true</c> if the argument is collection-based; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:RssBandit.Utility.CommandLineArgument.IsArray">
            <summary>
            Gets a value indicating whether the argument is array-nased.
            </summary>
            <value>
            <c>true</c> if the argument is array-based; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:RssBandit.Utility.CommandLineArgument.IsDefault">
            <summary>
            Gets a value indicating whether the argument is the default argument.
            </summary>
            <value>
            <c>true</c> if the argument is the default argument; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:RssBandit.Utility.CommandLineArgument.IsExclusive">
            <summary>
            Gets a value indicating whether the argument cannot be combined with
            other arguments.
            </summary>
            <value>
            <c>true</c> if the argument cannot be combined with other arguments; 
            otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:RssBandit.Utility.CommandLineArgumentCollection">
            <summary>
            Contains a strongly typed collection of <see cref="T:RssBandit.Utility.CommandLineArgument"/> objects.
            </summary>
        </member>
        <member name="M:RssBandit.Utility.CommandLineArgumentCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RssBandit.Utility.CommandLineArgumentCollection"/> class.
            </summary>
        </member>
        <member name="M:RssBandit.Utility.CommandLineArgumentCollection.#ctor(RssBandit.Utility.CommandLineArgumentCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:RssBandit.Utility.CommandLineArgumentCollection"/> class
            with the specified <see cref="T:RssBandit.Utility.CommandLineArgumentCollection"/> instance.
            </summary>
        </member>
        <member name="M:RssBandit.Utility.CommandLineArgumentCollection.#ctor(RssBandit.Utility.CommandLineArgument[])">
            <summary>
            Initializes a new instance of the <see cref="T:RssBandit.Utility.CommandLineArgumentCollection"/> class
            with the specified array of <see cref="T:RssBandit.Utility.CommandLineArgument"/> instances.
            </summary>
        </member>
        <member name="M:RssBandit.Utility.CommandLineArgumentCollection.Add(RssBandit.Utility.CommandLineArgument)">
            <summary>
            Adds a <see cref="T:RssBandit.Utility.CommandLineArgument"/> to the end of the collection.
            </summary>
            <param name="item">The <see cref="T:RssBandit.Utility.CommandLineArgument"/> to be added to the end of the collection.</param> 
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:RssBandit.Utility.CommandLineArgumentCollection.AddRange(RssBandit.Utility.CommandLineArgument[])">
            <summary>
            Adds the elements of a <see cref="T:RssBandit.Utility.CommandLineArgument"/> array to the end of the collection.
            </summary>
            <param name="items">The array of <see cref="T:RssBandit.Utility.CommandLineArgument"/> elements to be added to the end of the collection.</param> 
        </member>
        <member name="M:RssBandit.Utility.CommandLineArgumentCollection.AddRange(RssBandit.Utility.CommandLineArgumentCollection)">
            <summary>
            Adds the elements of a <see cref="T:RssBandit.Utility.CommandLineArgumentCollection"/> to the end of the collection.
            </summary>
            <param name="items">The <see cref="T:RssBandit.Utility.CommandLineArgumentCollection"/> to be added to the end of the collection.</param> 
        </member>
        <member name="M:RssBandit.Utility.CommandLineArgumentCollection.Contains(RssBandit.Utility.CommandLineArgument)">
            <summary>
            Determines whether a <see cref="T:RssBandit.Utility.CommandLineArgument"/> is in the collection.
            </summary>
            <param name="item">The <see cref="T:RssBandit.Utility.CommandLineArgument"/> to locate in the collection.</param> 
            <returns>
            <c>true</c> if <paramref name="item"/> is found in the collection;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:RssBandit.Utility.CommandLineArgumentCollection.CopyTo(RssBandit.Utility.CommandLineArgument[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.        
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param> 
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:RssBandit.Utility.CommandLineArgumentCollection.IndexOf(RssBandit.Utility.CommandLineArgument)">
            <summary>
            Retrieves the index of a specified <see cref="T:RssBandit.Utility.CommandLineArgument"/> object in the collection.
            </summary>
            <param name="item">The <see cref="T:RssBandit.Utility.CommandLineArgument"/> object for which the index is returned.</param> 
            <returns>
            The index of the specified <see cref="T:RssBandit.Utility.CommandLineArgument"/>. If the <see cref="T:RssBandit.Utility.CommandLineArgument"/> is not currently a member of the collection, it returns -1.
            </returns>
        </member>
        <member name="M:RssBandit.Utility.CommandLineArgumentCollection.Insert(System.Int32,RssBandit.Utility.CommandLineArgument)">
            <summary>
            Inserts a <see cref="T:RssBandit.Utility.CommandLineArgument"/> into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The <see cref="T:RssBandit.Utility.CommandLineArgument"/> to insert.</param>
        </member>
        <member name="M:RssBandit.Utility.CommandLineArgumentCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            A <see cref="T:RssBandit.Utility.CommandLineArgumentEnumerator"/> for the entire collection.
            </returns>
        </member>
        <member name="M:RssBandit.Utility.CommandLineArgumentCollection.Remove(RssBandit.Utility.CommandLineArgument)">
            <summary>
            Removes a member from the collection.
            </summary>
            <param name="item">The <see cref="T:RssBandit.Utility.CommandLineArgument"/> to remove from the collection.</param>
        </member>
        <member name="P:RssBandit.Utility.CommandLineArgumentCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:RssBandit.Utility.CommandLineArgumentCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:RssBandit.Utility.CommandLineArgument"/> with the specified name.
            </summary>
            <param name="name">The name of the <see cref="T:RssBandit.Utility.CommandLineArgument"/> to get.</param>
        </member>
        <member name="T:RssBandit.Utility.CommandLineArgumentEnumerator">
            <summary>
            Enumerates the <see cref="T:RssBandit.Utility.CommandLineArgument"/> elements of a <see cref="T:RssBandit.Utility.CommandLineArgumentCollection"/>.
            </summary>
        </member>
        <member name="M:RssBandit.Utility.CommandLineArgumentEnumerator.#ctor(RssBandit.Utility.CommandLineArgumentCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:RssBandit.Utility.CommandLineArgumentEnumerator"/> class
            with the specified <see cref="T:RssBandit.Utility.CommandLineArgumentCollection"/>.
            </summary>
            <param name="arguments">The collection that should be enumerated.</param>
        </member>
        <member name="M:RssBandit.Utility.CommandLineArgumentEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; 
            <c>false</c> if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:RssBandit.Utility.CommandLineArgumentEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the 
            first element in the collection.
            </summary>
        </member>
        <member name="P:RssBandit.Utility.CommandLineArgumentEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
        </member>
        <member name="T:RssBandit.Utility.CommandLineArgumentException">
            <summary>
            The exception that is thrown when one of the command-line arguments provided 
            is not valid.
            </summary>
        </member>
        <member name="M:RssBandit.Utility.CommandLineArgumentException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RssBandit.Utility.CommandLineArgumentException"/> class.
            </summary>
        </member>
        <member name="M:RssBandit.Utility.CommandLineArgumentException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RssBandit.Utility.CommandLineArgumentException"/> class
            with a descriptive message.
            </summary>
            <param name="message">A descriptive message to include with the exception.</param>
        </member>
        <member name="M:RssBandit.Utility.CommandLineArgumentException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:RssBandit.Utility.CommandLineArgumentException"/> class
            with a descriptive message and an inner exception.
            </summary>
            <param name="message">A descriptive message to include with the exception.</param>
            <param name="innerException">A nested exception that is the cause of the current exception.</param>
        </member>
        <member name="M:RssBandit.Utility.CommandLineArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:RssBandit.Utility.CommandLineArgumentException"/> class 
            with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:RssBandit.Utility.CommandLineArgumentAttribute">
            <summary>
            Allows control of command line parsing.
            </summary>
        </member>
        <member name="M:RssBandit.Utility.CommandLineArgumentAttribute.#ctor(RssBandit.Utility.CommandLineArgumentTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:RssBandit.Utility.CommandLineArgumentAttribute"/> class
            with the specified argument type.
            </summary>
            <param name="argumentType">Specifies the checking to be done on the argument.</param>
        </member>
        <member name="P:RssBandit.Utility.CommandLineArgumentAttribute.Type">
            <summary>
            Gets or sets the checking to be done on the argument.
            </summary>
            <value>The checking that should be done on the argument.</value>
        </member>
        <member name="P:RssBandit.Utility.CommandLineArgumentAttribute.Name">
            <summary>
            Gets or sets the long name of the argument.
            </summary>
            <value>The long name of the argument.</value>
        </member>
        <member name="P:RssBandit.Utility.CommandLineArgumentAttribute.ShortName">
            <summary>
            Gets or sets the short name of the argument.
            </summary>
            <value>The short name of the argument.</value>
        </member>
        <member name="P:RssBandit.Utility.CommandLineArgumentAttribute.Description">
            <summary>
            Gets or sets the description of the argument.
            </summary>
            <value>The description of the argument.</value>
        </member>
        <member name="P:RssBandit.Utility.CommandLineArgumentAttribute.DescriptionIsResourceId">
            <summary>
            Gets or sets the value deciding whether the description is
            a normal string or a resource identifier.
            </summary>
            <value>The description of the argument.</value>
        </member>
        <member name="T:RssBandit.Utility.DefaultCommandLineArgumentAttribute">
            <summary>
            Marks a command-line option as being the default option.  When the name of 
            a command-line argument is not specified, this option will be assumed.
            </summary>
        </member>
        <member name="M:RssBandit.Utility.DefaultCommandLineArgumentAttribute.#ctor(RssBandit.Utility.CommandLineArgumentTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:RssBandit.Utility.CommandLineArgumentAttribute"/> class
            with the specified argument type.
            </summary>
            <param name="argumentType">Specifies the checking to be done on the argument.</param>
        </member>
        <member name="T:RssBandit.WinGui.Utility.NewsItemFormatter">
            <summary>
            Summary description for NewsItemFormatter.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Utility.NewsItemFormatter.ContainsXslStyleSheet(System.String)">
            <summary>
            Tests whether a particular stylesheet is contained within the item formatter
            </summary>
            <param name="name">The name of the stylesheet</param>
            <returns>Tests whether the </returns>
        </member>
        <member name="M:RssBandit.WinGui.Utility.NewsItemFormatter.AddXslStyleSheet(System.String,System.String)">
            <summary>
            Set/Get the currently used XSLT stylesheet to be used to format
            an NewsItem for the detail display.
            </summary>
            <exception cref="T:System.Xml.XmlException"></exception>
            <exception cref="T:System.Xml.Xsl.XsltException"></exception>
        </member>
        <member name="M:RssBandit.WinGui.Utility.NewsItemFormatter.ToHtml(System.String,System.Object,System.Xml.Xsl.XsltArgumentList)">
            <summary>
            Transform a NewsItem, FeedInfo or FeedInfoList using the specified stylesheet
            </summary>
            <param name="stylesheet">The stylesheet to use for transformation</param>
            <param name="transformTarget">The object to transform</param>
            <param name="xslArgs"></param>
            <returns>The results of the transformation</returns>
        </member>
        <member name="T:RssBandit.WinGui.Utility.NewsItemFormatter.LocalizerExtensionObject">
            <summary>
            Xslt Transformation extension to provide localized strings 
            to Xslt templates
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Utility.NewsItemFormatter.LocalizerExtensionObject.RelatedLinksText">
            <summary>
            Gets the localized related links text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RssBandit.WinGui.Utility.NewsItemFormatter.LocalizerExtensionObject.PreviousPageText">
            <summary>
            Returns the localized previous text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RssBandit.WinGui.Utility.NewsItemFormatter.LocalizerExtensionObject.NextPageText">
            <summary>
            Returns the localized next text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RssBandit.WinGui.Utility.NewsItemFormatter.LocalizerExtensionObject.DisplayingPageText">
            <summary>
            Returns the localized displaying page text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RssBandit.WinGui.Utility.NewsItemFormatter.LocalizerExtensionObject.PageOfText">
            <summary>
            Returns the localized of text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RssBandit.WinGui.Utility.NewsItemFormatter.LocalizerExtensionObject.ItemPublisherText">
            <summary>
            Gets the localized item publisher text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RssBandit.WinGui.Utility.NewsItemFormatter.LocalizerExtensionObject.ItemAuthorText">
            <summary>
            Gets the localized item author text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RssBandit.WinGui.Utility.NewsItemFormatter.LocalizerExtensionObject.ItemDateText">
            <summary>
            Gets the localized item date text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RssBandit.WinGui.Utility.NewsItemFormatter.LocalizerExtensionObject.ItemEnclosureText">
            <summary>
            Gets the localized item enclosure text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RssBandit.WinGui.Utility.NewsItemFormatter.LocalizerExtensionObject.ToggleFlagStateText">
            <summary>
            Gets the localized text to indicate toggle of flag states.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RssBandit.WinGui.Utility.NewsItemFormatter.LocalizerExtensionObject.ToggleReadStateText">
            <summary>
            Gets the localized text to indicate toggle of read state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RssBandit.WinGui.Utility.NewsItemFormatter.LocalizerExtensionObject.ToggleWatchStateText">
            <summary>
            Gets the localized text to indicate toggle of watched state.
            </summary>
            <returns></returns>
        </member>
        <member name="T:RssBandit.WinGui.Utility.FontStates">
            <summary>
            Used item states that have different font/color settings
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Utility.FontColorHelper">
            <summary>
            Maintain Font and Color infos used to highlight, 
            style and colorize items in the UI
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Utility.FontColorHelper.p_currentColorTable">
            <summary>
            Currently we use the Office 2003 color scheme for WinXP and lower,
            Office 2007 for Vista and higher
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Utility.FontColorHelper.CopyToFont(Infragistics.Win.FontData)">
            <summary>
            Copies Font Style Data to a new font it returns.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:RssBandit.WinGui.Utility.FontColorHelper.CopyFromFont(Infragistics.Win.FontData,System.Drawing.Font)">
            <summary>
            Copies Font Styles from font to data.
            </summary>
            <param name="data">The data.</param>
            <param name="font">The font.</param>
        </member>
        <member name="M:RssBandit.WinGui.Utility.FontColorHelper.MergeFontStyles(System.Drawing.Font,System.Drawing.FontStyle)">
            <summary>
            Return a new Font with the FontStyle of leadingFont and style merged
            if the styles are differ. The leadingFont else.
            </summary>
            <param name="leadingFont"></param>
            <param name="style"></param>
            <returns>Font</returns> 
        </member>
        <member name="M:RssBandit.WinGui.Utility.FontColorHelper.GetNameOfFont(System.Drawing.Font)">
            <summary>
            Convert Font to a serializable string
            </summary>
            <param name="font"></param>
            <returns></returns>
        </member>
        <member name="P:RssBandit.WinGui.Utility.FontColorHelper.UiColorScheme">
            <summary>
            Gets the static UI colors for the currently used color scheme.
            </summary>
            <value>The colors.</value>
        </member>
        <member name="T:RssBandit.WinGui.Forms.IdleTasks">
            <summary>
            Used to delay execution of some UI tasks if the app is idle
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Forms.IdleTask">
            <summary>
            Manage IdleTasks.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ThListView.Win32">
            <summary>
            Win32.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ThListView.Win32.BaseCodes">
            <summary>
            First message codes for sub message groups
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ThListView.Win32.W32_WM">
            <summary>
            Windows message codes WM_
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ThListView.Win32.W32_NM">
            <summary>
            Notify message codes NM_
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ThListView.Win32.W32_OCM">
            <summary>
            Reflected message codes OCM_
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ThListView.Win32.W32_LVM">
            <summary>
            ListView message codes LVM_
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ThListView.Win32.W32_LVN">
            <summary>
            ListView notification message codes LVN_ 
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ThListView.Win32.LVS_EX">
            <summary>
            ListView extended style flags
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ThListView.Win32.ListViewHitTestFlags">
            <summary>
            LV Item hit test results
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Controls.ItemSearchState">
            <summary>
            Enum defines the news item search states
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Controls.SearchPanel">
            <summary>
            SearchPanel. Handles all local search options.
            Is also used to display the current settings of a 
            persisted search.
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Controls.SearchPanel.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Controls.SearchPanel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Controls.SearchPanel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Controls.SearchPanel.SetFocus">
            <summary>
            Sets the focus.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Controls.SearchPanel.PopulateTreeRssSearchScope(RssBandit.WinGui.Controls.TreeFeedsNodeBase,System.Windows.Forms.ImageList)">
            <summary>
            Populates the treeview used as RSS search scope selection.
            </summary>
            <param name="sourceRootNode">The source root node.</param>
        </member>
        <member name="T:RssBandit.WinGui.Controls.Line">
            <summary>
            Draws a straight beveled or flat line.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Controls.Line.#ctor">
            <summary>
             Initializes a new instance of the Line class.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Controls.Line.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overrides <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)"/>.
            </summary>
            <param name="pe"></param>
        </member>
        <member name="M:RssBandit.WinGui.Controls.Line.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overrides <see cref="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)"/>.
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Controls.Line.Beveled">
            <summary>
            Gets or sets a value that indicates if the line should be drawn with a 
            beveled look. If false, only the <see cref="P:RssBandit.WinGui.Controls.Line.Highlight"/> color is used.
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Controls.Line.Highlight">
            <summary>
            Gets or sets the highlight color.
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Controls.Line.Shadow">
            <summary>
            Gets or sets the shadow color.
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Controls.Line.Orientation">
            <summary>
            Gets or sets the orientation of the line.
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Controls.Line.LineWidth">
            <summary>
            Gets the width of the line.
            </summary>
        </member>
        <member name="T:RssBandit.SpecialFeeds.LocalFeedsFeed">
            <summary>
            Special local feeds
            </summary>
        </member>
        <member name="M:RssBandit.SpecialFeeds.LocalFeedsFeed.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializer.
            </summary>
            <param name="feedUrl"></param>
            <param name="feedTitle"></param>
            <param name="feedDescription"></param>
            <exception cref="T:System.UriFormatException">If feedUrl could not be formatted as a Uri</exception>
        </member>
        <member name="M:RssBandit.SpecialFeeds.LocalFeedsFeed.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializer.
            </summary>
            <param name="feedUrl"></param>
            <param name="feedTitle"></param>
            <param name="feedDescription"></param>
            <param name="loadItems">bool</param>
            <exception cref="T:System.UriFormatException">If feedUrl could not be formatted as a Uri</exception>
        </member>
        <member name="M:RssBandit.SpecialFeeds.LocalFeedsFeed.#ctor(System.String,System.String,System.String,System.Xml.XmlReader)">
            <summary>
            Initializer.
            </summary>
            <param name="feedUrl">local file path</param>
            <param name="feedTitle"></param>
            <param name="feedDescription"></param>
            <param name="reader"></param>
            <exception cref="T:System.UriFormatException">If feedUrl could not be formatted as a Uri</exception>
        </member>
        <member name="M:RssBandit.SpecialFeeds.LocalFeedsFeed.WriteTo(System.Xml.XmlWriter)">
            <summary>
            Writes this object as an RSS 2.0 feed to the specified writer
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:RssBandit.SpecialFeeds.ExceptionManager">
            <summary>
            Threadsafe ExceptionManager to handle and report
            Feed errors and other errors that needs to be published 
            to a user. Singleton is implemented 
            (see also http://www.yoda.arachsys.com/csharp/beforefieldinit.html).
            </summary>
        </member>
        <member name="M:RssBandit.SpecialFeeds.ExceptionManager.RemoveFeed(System.String)">
            <summary>
            Removes the entries for the specified feed URL.
            </summary>
            <param name="feedUrl">The feed URL.</param>
        </member>
        <member name="M:RssBandit.SpecialFeeds.ExceptionManager.GetInstance">
            <summary>
            Returns a instance of ExceptionManager.
            </summary>
            <returns>Instance of the ExceptionManageer class</returns>
        </member>
        <member name="T:RssBandit.SpecialFeeds.ExceptionManager.InstanceHelper">
            <summary>
            Private instance helper class to impl. Singleton
            </summary>
        </member>
        <member name="M:RssBandit.SpecialFeeds.ExceptionManager.FeedException.ContainsInvalidXmlCharacter(System.String)">
            <summary>
            Used to test whether a string contains any character that is illegal in XML 1.0. 
            Specifically it checks for the ASCII control characters except for tab, carriage return 
            and newline which are the only ones allowed in XML. 
            </summary>
            <param name="errorMessage">the string to test</param>
            <returns>true if the string contains a character that is illegal in XML</returns>
        </member>
        <member name="T:AppInteropServices.ServiceManager">
            <summary>
            ServiceManager implements a similar algorithm described in
            http://msdn.microsoft.com/asp.net/using/building/components/default.aspx?pull=/library/en-us/dnaspp/html/searchforplugins.asp
            to find classes in assemblies that implements Syndication.Extensibility.IBlogExtension
            and RssBandit.UIServices.IAddInPackage.
            </summary>
        </member>
        <member name="M:AppInteropServices.ServiceManager.SearchForIBlogExtensions(System.String)">
            <summary>
            Walk all the assemblies in the specified directory looking 
            for classes that implements Syndication.Extensibility.IBlogExtension.
            </summary>
            <param name="path">path to search for service assemblies</param>
            <returns>ArrayList containing suitable processors found</returns>
            <permission cref="T:System.Security.Permissions.ReflectionPermission">Used to find extensions</permission>
        </member>
        <member name="M:AppInteropServices.ServiceManager.SearchForIBlogExtensionTypes(System.String)">
            <summary>
            Called by static method SearchForIBlogExtensions(). Instance method is used to test/load available plugin's.
            The above static method ensure that all tested dll's are loaded into a separate AppDomain, that is 
            unloaded after detecting all valid IBlogExtension's to save memory.
            </summary>
            <param name="path"></param>
            <returns>ArrayList of types, that impl. the IBlogExtension interface</returns>
            <remarks>If you call this method directly, all tested dll/exe are loaded into the default AppDomain!</remarks>
            <permission cref="T:System.Security.Permissions.ReflectionPermission">Used to find extensions</permission>
        </member>
        <member name="M:AppInteropServices.ServiceManager.UnloadLoaderAppDomain">
            <summary>
            Releases the app domain used for loading addins so we don't leak memory
            </summary>
        </member>
        <member name="M:AppInteropServices.ServiceManager.PopulateAndInitAddInPackages(RssBandit.UIServices.IAddInCollection)">
            <summary>
            Walk all the AddIns assembly locations 
            for classes that implements RssBandit.UIServices.IAddInPackage.
            Then it builds the full AddInList by initializing the AddIn name to the
            base assembly file name and creates the type instances.
            </summary>
            <param name="assemblies">AddInList with AddIn assembly locations</param>
            <returns>AddInList containing suitable types implementing IAddInPackages found</returns>
            <permission cref="T:System.Security.Permissions.ReflectionPermission">Used to find IAddInPackages implementors</permission>
        </member>
        <member name="M:AppInteropServices.ServiceManager.SearchForIAddInPackagesTypes(RssBandit.UIServices.IAddInCollection)">
            <summary>
            Called by static method SearchForIAddInPackages(). Instance method is used to test/load available 
            AddInPackages.
            The above static method ensure that all tested dll's are loaded into a separate AppDomain, that is 
            unloaded after detecting all valid IAddInPackages to save memory.
            </summary>
            <param name="addInList">addIns list with assembly locations set</param>
            <returns>Hashtable of types, that impl. the RssBandit.UIServices.IAddInPackage interface. 
            Key is the assembly location, item is a Type[] array</returns>
            <remarks>If you call this method directly, all tested dll/exe are 
            loaded into the default AppDomain!</remarks>
            <permission cref="T:System.Security.Permissions.ReflectionPermission">Used to find plugins</permission>
        </member>
        <member name="T:RssBandit.WinGui.Utility.CommandMediator">
            <summary>
            Summary description for CommandMediator.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Utility.CommandMediator.RegisterCommand(System.String,RssBandit.WinGui.Interfaces.ICommandComponent)">
            <summary>
            Register a GUI component that implements ICommandComponent that
            visual state (Enabled, Checked, Visible) have to be controlled by 
            the Application.
            </summary>
            <param name="cmdId">A command identifier. Multiple commands that executes the same action should have the same identifier. 
            They will be switched all to the same state on every state change request.</param>
            <param name="cmd">The UI component.</param>
        </member>
        <member name="M:RssBandit.WinGui.Utility.CommandMediator.ReRegisterCommand(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Re-registers the command.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Utility.CommandMediator.UnregisterCommand(System.String,RssBandit.WinGui.Interfaces.ICommandComponent)">
            <summary>
            Unregister a command.
            </summary>
            <param name="cmdId">Command identifier</param>
            <param name="cmd">The UI component</param>
        </member>
        <member name="M:RssBandit.WinGui.Utility.CommandMediator.SetEnabled(System.String[])">
            <summary>
            Switches the visual state of all registered ICommandComponents
            to enabled/disabled on base of the provided arguments.
            </summary>
            <param name="args">Provide an array of strings build up like this:
            <c>SetEnable("+cmdCloseExit", "-cmdMoveNext", "-cmdMoveBack")</c>.
            The first character controls the enable ("+") and disable ("-") state,
            the following characters specify a registered command ID.
            </param>
        </member>
        <member name="M:RssBandit.WinGui.Utility.CommandMediator.IsChecked(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Gets the unified checked state of the command.
            </summary>
            <param name="command">The command.</param>
            <remarks>Currently the checked state returned here depends on
            the kind of used component. For IG menu/state buttons the
            check state is already changed after user clicked the menu, while
            the (build in) context menu item has still the old
            checked state</remarks>
            <returns></returns>
        </member>
        <member name="F:RssBandit.WinGui.TopStoriesThreadHandler.memeFile">
            <summary>
            The path to the file that will be the Top Stories HTML page. 
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.TopStoriesThreadHandler.rssBanditApp">
            <summary>
            The calling instance of RSS Bandit application
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.TopStoriesThreadHandler.TopStories">
            <summary>
            The list of top stories. 
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.TopStoriesThreadHandler.#ctor">
            <summary>
            Default constructor cannot be called
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.TopStoriesThreadHandler.#ctor(RssBandit.RssBanditApplication,System.String)">
            <summary>
            Initializes the object with the calling RssBanditApplication instance. 
            </summary>
            <param name="rssBanditApp">The calling RssBanditApplication</param>
            <param name="memeFile">The file to write the Top Stories to after they have been determined.</param>
        </member>
        <member name="M:RssBandit.WinGui.TopStoriesThreadHandler.Run">
            <summary>
            Does the actual work of determining the top stories
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.TopStoriesThreadHandler.GenerateTopStoriesPage">
            <summary>
            Generates a the Top Stories HTML page 
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Forms.BrowseAction">
            <summary>
            Enumeration that defines the possible embedded web browser actions
            to perform from the main application.
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Forms.RootFolderType">
            <summary>
            Enumeration that defines the type of the known root folders
            of Bandit displayed within the treeview.
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Forms.FeedProcessingState">
            <summary>
            Defines the subscription tree node processing states
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Forms.DelayedTasks">
            <summary>
            Used to delay execution of some UI tasks by a timer
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Forms.WinGuiMain">
            <summary>
            Summary description for WinGuiMain.
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Forms.WinGuiMain._currentToolbarsVersion">
            <summary>
            To be raised by one on every Toolbars modification like new tools or menus!
            </summary>
            <remarks>
            If you forget this, you will always get your old toolbars layout
            restored from the users local machine.
            </remarks>
        </member>
        <member name="F:RssBandit.WinGui.Forms.WinGuiMain._currentDockingVersion">
            <summary>
            To be raised by one on every DockMananger docks modification like new docks!
            </summary>
            <remarks>
            If you forget this, you will always get your old docking layout
            restored from the users local machine.
            </remarks>
        </member>
        <member name="F:RssBandit.WinGui.Forms.WinGuiMain._currentExplorerBarVersion">
            <summary>
            To be raised by one on every UltraExplorerBar docks modification like new groups!
            </summary>
            <remarks>
            If you forget this, you will always get your old groups layout
            restored from the users local machine.
            </remarks>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.FlaggedFeedsNode(NewsComponents.Flagged)">
            <summary>
            Return the TreeNode instance representing/store of 
            the FlaggedFeeds. Because they all share the item list, it is enough
            to return one of them
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.WalkdownThenRefreshFontColor(RssBandit.WinGui.Controls.TreeFeedsNodeBase)">
            <summary>
            Helper. Work recursive on the startNode down to the leaves.
            Then reset all font/colors.
            </summary>
            <param name="startNode">Node to start with.</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.StartSearch(RssBandit.WebSearch.SearchEngine)">
            <summary>
            Initiate the search process
            </summary>
            <param name="thisEngine">A specific engine to use. If null, all
            active engines are started.</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.FindNextUnreadItem(RssBandit.WinGui.Controls.TreeFeedsNodeBase)">
            <summary>
            Populates the list view with the items for the feed represented by 
            the tree node then checks to see if any are unread. If this is the 
            case then the unread item is given focus.  
            </summary>
            <param name="tn"></param>
            <returns>True if an unread item exists for this feed and false otherwise</returns>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.NextNearFeedNode(RssBandit.WinGui.Controls.TreeFeedsNodeBase,System.Boolean)">
            <summary>
            From the startNode, this function returns the next
            FeedNode with UnreadCount > 0 that is hirarchically below the startNode.
            </summary>
            <param name="startNode">the Node to start with</param>
            <returns>FeedTreeNodeBase found or null</returns>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.MoveToNextUnreadItem">
            <summary>
            Moves from the currently selected item to the next unread item. 
            If no unread item is left then this method does nothing.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.BoundsToString(System.Drawing.Rectangle)">
            <summary>
            Help to simply serialize a bounds rect.
            </summary>
            <param name="b"></param>
            <returns>A ';' separated string: "X;Y;Width;Height".</returns>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.PopulateSmartFolder(RssBandit.WinGui.Controls.TreeFeedsNodeBase,System.Boolean)">
            <summary>
            Helper method to populate SmartFolders.
            </summary>
            <param name="feedNode">The tree node which represents the feed in the tree view</param>
            <param name="updateGui">Indicates whether the UI should be altered when the download is completed 
            or not. Basically if this flag is true then the list view and browser pane are updated while 
            they remain unchanged if this flag is false. </param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.PopulateFinderNode(RssBandit.WinGui.Controls.FinderNode,System.Boolean)">
            <summary>
            Helper method to populate Aggregated Folders.
            </summary>
            <param name="node">The tree node which represents the feed in the tree view</param>
            <param name="updateGui">Indicates whether the UI should be altered when the download is completed 
            or not. Basically if this flag is true then the list view and browser pane are updated while 
            they remain unchanged if this flag is false. </param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.ApplyNewsItemPropertyImages(System.Windows.Forms.ThListView.ThreadedListViewItem[])">
            <summary>call it if items are added to the listview only!</summary>
            <param name="items"></param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.ApplyAttachmentImageTo(System.Windows.Forms.ThListView.ThreadedListViewItem,System.Int32,System.Windows.Forms.ThListView.ColumnKeyIndexMap)">
            <summary>call it if items are added to the listview only!</summary>
            <param name="lvi"></param>
            <param name="attachemtCount"></param>
            <param name="indexMap"></param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.ApplyFlagStateTo(System.Windows.Forms.ThListView.ThreadedListViewItem,NewsComponents.Flagged,System.Windows.Forms.ThListView.ColumnKeyIndexMap)">
            <summary>call it if items are added to the listview only!</summary>
            <param name="lvi"></param>
            <param name="flagStatus"></param>
            <param name="indexMap"></param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.PopulateListView(RssBandit.WinGui.Controls.TreeFeedsNodeBase,System.Collections.Generic.IList{NewsComponents.NewsItem},System.Boolean)">
            <summary>
            Populates the list view with NewsItem's from the ArrayList. 
            </summary>
            <param name="associatedFeedsNode">The accociated tree Node</param>
            <param name="list">A list of NewsItem objects.</param>
            <param name="forceReload">Force reload of the listview</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.PopulateListView(RssBandit.WinGui.Controls.TreeFeedsNodeBase,System.Collections.Generic.IList{NewsComponents.NewsItem},System.Boolean,System.Boolean,RssBandit.WinGui.Controls.TreeFeedsNodeBase)">
            <summary>
            Populates the list view with NewsItem's from the ArrayList. 
            </summary>
            <param name="associatedFeedsNode">The accociated tree Node to populate</param>
            <param name="list">A list of NewsItem objects.</param>
            <param name="forceReload">Force reload of the listview</param>
            <param name="categorizedView">True, if the feed title should be appended to
            each RSS Item title: "...rss item title... (feed title)"</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.AsyncPopulateListView(RssBandit.WinGui.Controls.TreeFeedsNodeBase,System.Collections.Generic.IList{NewsComponents.NewsItem},System.Boolean,System.Boolean,RssBandit.WinGui.Controls.TreeFeedsNodeBase)">
            <summary>
            Can be called from another thread to populate the listview in the Gui thread.
            </summary>
            <param name="associatedFeedsNode"></param>
            <param name="list"></param>
            <param name="forceReload"></param>
            <param name="categorizedView"></param>
            <param name="initialFeedsNode"></param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.PopulateFullListView(System.Collections.Generic.IList{NewsComponents.NewsItem},System.Boolean)">
            <summary>
            Fully populates the list view with NewsItem's from the ArrayList 
            (forced reload).
            </summary>
            <param name="list">A list of NewsItem objects.</param>
            <param name="categorizedView">True, if the feed title should be appended to
            each RSS Item title: "...rss item title... (feed title)"</param>
            <returns>unread items</returns>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.PopulateSmartListView(System.Collections.Generic.IList{NewsComponents.NewsItem},System.Boolean,System.Boolean)">
            <summary>
            Add NewsItem's from the ArrayList to the current displayed ListView. 
            This contains usually some items, so we have to insert the new items 
            at the correct position(s).
            </summary>
            <param name="list">A list of NewsItem objects.</param>
            <param name="categorizedView">True, if the feed title should be appended to
            each RSS Item title: "...rss item title... (feed title)"</param>
            <param name="checkDuplicates">If true, we check if a NewsItem is allready populated.
            This has a perf. impact, if true!</param>
            <returns>unread items</returns>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.TriggerGUIStateOnNewFeeds(System.Boolean)">
            <summary>
            Called to refresh the GUI state after refresh of feeds/feed items
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.UpdateCommentStatus(RssBandit.WinGui.Controls.TreeFeedsNodeBase,NewsComponents.Feed.feedsFeed)">
            <summary>
            Updates the comment status for the specified tree node and any related search folders that may 
            contain items from this node. 
            </summary>
            <param name="tn">The tree node whose comment status is being updated</param>
            <param name="f">The feed associated with the tree node</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.UpdateCommentStatus(RssBandit.WinGui.Controls.TreeFeedsNodeBase,System.Collections.Generic.IList{NewsComponents.NewsItem},System.Boolean)">
            <summary>
            Updates the comment status for the specified tree node and any related search folders that may
            contain items from this node.
            </summary>
            <param name="tn">The tree node whose comment status is being updated</param>
            <param name="items">The items.</param>
            <param name="commentsRead">Indicates that these are new comments or whether the comments were just read</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.GetFeedItemsWithNewComments(System.Collections.Generic.IList{NewsComponents.NewsItem})">
            <summary>
            Returns the number of items with new comments in a particular list of items
            </summary>
            <param name="items">The list of items</param>
            <returns>The number of items with new comments</returns>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.WatchedItemsNodeRemoveItems(NewsComponents.Feed.feedsFeed)">
            <summary>
            Remove watched items of the feed f from the watched item tree node container.
            </summary>
            <param name="f">The feed.</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.WatchedItemsNodeRemoveItems(System.Collections.Generic.IList{NewsComponents.NewsItem})">
            <summary>
            Remove items from the watched item tree node container.
            The NewsItems in watched list are NOT checked again if they are
            watched!
            </summary>
            <param name="watched">The watched item list.</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.FilterWatchedFeedItems(NewsComponents.Feed.feedsFeed)">
            <summary>
            Gets the list of watched items only from the provided feed.
            </summary>
            <param name="f">The feed.</param>
            <returns></returns>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.FilterWatchedFeedItems(System.Collections.Generic.IList{NewsComponents.NewsItem})">
            <summary>
            Gets the watched items out of the provided list.
            </summary>
            <param name="items">The items.</param>
            <returns></returns>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.UnreadItemsNodeRemoveItems(System.String)">
            <summary>
            Remove unread items of the feed f from the unread item tree node container.
            </summary>
            <param name="feedLink">The feed link.</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.UnreadItemsNodeRemoveItems(NewsComponents.Feed.feedsFeed)">
            <summary>
            Remove unread items of the feed f from the unread item tree node container.
            </summary>
            <param name="f">The feed.</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.UnreadItemsNodeRemoveItems(System.Collections.Generic.IList{NewsComponents.NewsItem})">
            <summary>
            Remove items from the unread item tree node container.
            The NewsItems in unread list are NOT checked again if they are
            unread!
            </summary>
            <param name="unread">The unread item list.</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.FilterUnreadFeedItems(NewsComponents.Feed.feedsFeed)">
            <summary>
            Gets the list of unread item only from the provided feed.
            </summary>
            <param name="f">The feed.</param>
            <returns></returns>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.FilterUnreadFeedItems(System.Collections.Generic.IList{NewsComponents.NewsItem})">
            <summary>
            Gets the unread items out of the provided list.
            </summary>
            <param name="items">The items.</param>
            <returns></returns>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.CountUnreadFeedItems(NewsComponents.Feed.feedsFeed)">
            <summary>
            Returns the number of unread items in a particular feed
            </summary>
            <param name="f">The target feed</param>
            <returns>The number of unread items</returns>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.GetFeedItemsWithNewComments(NewsComponents.Feed.feedsFeed)">
            <summary>
            Returns the number of items with unread comments for this feed
            </summary>
            <param name="f">The target feed</param>
            <returns>The number of items with unread comments </returns>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.CountUnread(System.Int32@,System.Int32@)">
            <summary>
            Obtains the number of unread RSS feeds and total unread RSS items
            </summary>
            <param name="unreadFeeds">Total RSS feeds with at least one unread item</param>
            <param name="unreadMessages">Total unread items</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.OnEnclosureReceived(System.Object,NewsComponents.Net.DownloadItemEventArgs)">
            <summary>
            Invoked by RssBanditApplication when an enclosure has been successfully dowbloaded
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.GetCategoryItemsAtPage(System.Int32)">
            <summary>
            Returns a FeedInfoList containing the news items which should be displayed on the 
            specified page if in the newspaper view. 
            </summary>
            <param name="pageNum">The page number. If the page number is outside the range 
            of valid values then the first page is returned. </param>
            <returns>A FeedInfoList containing all the news items that should be displayed on 
            the specified page</returns>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.GetFeedItemsAtPage(System.Int32)">
            <summary>
            Returns a FeedInfo containing the news items which should be displayed on the 
            specified page if in the newspaper view. 
            </summary>
            <param name="pageNum">The page number. If the page number is outside the range 
            of valid values then the first page is returned. </param>
            <returns>A FeedInfo containing all the news items that should be displayed on 
            the specified page</returns>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.RefreshFeedDisplay(RssBandit.WinGui.Controls.TreeFeedsNodeBase,System.Boolean)">
            <summary>
            Reloads the list view if the feed node is selected and renders the newspaper view
            </summary>
            <param name="tn">the tree node</param>
            <param name="populateListview">indicates whether the list view should be repopulated or not</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.RefreshCategoryDisplay(RssBandit.WinGui.Controls.TreeFeedsNodeBase)">
            <summary>
             Reloads the list view if the category node is selected and renders the newspaper view
            </summary>
            <param name="tn">the tree node</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.WalkdownThenRefreshFeed(RssBandit.WinGui.Controls.TreeFeedsNodeBase,System.Boolean,System.Boolean,RssBandit.WinGui.Controls.TreeFeedsNodeBase,NewsComponents.Feed.FeedInfoList)">
            <summary>
            Helper. Work recursive on the startNode down to the leaves.
            Then call AsyncGetItemsForFeed() for each of them.
            </summary>
            <param name="startNode">Node to start with</param>
            <param name="forceRefresh">true, if refresh should be forced</param>
            <param name="categorized">indicates whether this is part of the refresh or click of a category node</param>
            <param name="initialFeedsNode">This is the node where the refresh began from</param>
            <param name="unreadItems">an array list to place the unread items in the category into. This is needed to render them afterwards 
            in a newspaper view</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.WalkdownAndCatchupCategory(RssBandit.WinGui.Controls.TreeFeedsNodeBase)">
            <summary>
            Helper. Work recursive on the startNode down to the leaves.
            Then catchup categories on any child FeedNode. Does not work on
            the root Node (there we call FeedHandler.MarkAllCachedItemsAsRead) !
            </summary>
            <param name="startNode">Node to start with. The startNode itself is 
            considered on catchup.</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.WalkdownThenRenameFeedCategory(RssBandit.WinGui.Controls.TreeFeedsNodeBase,System.String)">
            <summary>
            Helper. Work recursive on the startNode down to the leaves.
            Then rename categories on any FeedNode within owner.FeedsTable.
            </summary>
            <param name="startNode">Node to start with. The startNode itself is 
            not considered on renaming.</param>
            <param name="newCategory">new full category name (long name, with all the '\').</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.WalkdownThenDeleteFeedsOrCategories(RssBandit.WinGui.Controls.TreeFeedsNodeBase)">
            <summary>
            Helper. Work recursive on the startNode down to the leaves.
            Then delete all child categories and FeedNode refs in owner.FeedHandler.
            </summary>
            <param name="startNode">Node to start with. The startNode itself is 
            considered on delete.</param>
            <param name="startNode">new full category name (long name, with all the '\').</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.GetFeedColumnLayout(RssBandit.WinGui.Controls.TreeFeedsNodeBase)">
            <summary>
            Gets the feed column layout.
            </summary>
            <param name="startNode">The start node.</param>
            <returns></returns>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.SetFeedHandlerFeedColumnLayout(RssBandit.WinGui.Controls.TreeFeedsNodeBase,NewsComponents.Feed.FeedColumnLayout)">
            <summary>
            Sets the feed handler feed column layout.
            </summary>
            <param name="feedsNode">The feeds node.</param>
            <param name="layout">The layout.</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.SetGlobalFeedColumnLayout(RssBandit.WinGui.Interfaces.FeedNodeType,NewsComponents.Feed.FeedColumnLayout)">
            <summary>
            Sets the global feed column layout.
            </summary>
            <param name="type">The type.</param>
            <param name="layout">The layout.</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.GetListViewItem(NewsComponents.NewsItem)">
            <summary>
            A helper method that locates the ThreadedListViewItem representing
            the NewsItem object. 
            </summary>
            <param name="item">The RSS item</param>
            <returns>The ThreadedListViewItem or null if 
            it can't be found</returns>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.GetListViewItem(System.String)">
            <summary>
            A helper method that locates the ThreadedListViewItem representing
            the NewsItem object with the given ID. 
            </summary>
            <param name="id">The RSS item's ID</param>
            <returns>The ThreadedListViewItem or null if 
            it can't be found</returns>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.CreateSubscriptionsCategoryHive(RssBandit.WinGui.Controls.TreeFeedsNodeBase,System.String)">
            <summary>
            Traverse down the tree on the path defined by 'category' 
            starting with 'startNode'.
            </summary>
            <param name="startNode">FeedTreeNodeBase to start with</param>
            <param name="category">A category path, e.g. 'Category1\SubCategory1'.</param>
            <returns>The leave category node.</returns>
            <remarks>If one category in the path is not found, it will be created.</remarks>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.Close(System.Boolean)">
            <summary>
            Extended Close.
            </summary>
            <param name="forceShutdown"></param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.SetDefaultExpansionTreeNodeState">
            <summary>
            Sets the default expansion tree node states.
            Currently expand all root nodes.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.PlayEnclosure(NewsComponents.Net.DownloadItem)">
            <summary>
            This opens the downloaded file in the users target application associated with that 
            file type. 
            </summary>
            <param name="enclosure">The enclosure to launch or play</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.LoadFavicon(System.String)">
            <summary>
            Loads a favicon from the cache 
            </summary>
            <param name="name">The name of the favicon</param>
            <returns>The favicon as an image or null if there was an error loading the image</returns>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.ResizeFavicon(System.Drawing.Image,System.String)">
            <summary>
            Resizes the image to 16x16 so it can be used as a favicon in the treeview
            </summary>
            <param name="toResize"></param>
            <param name="location">The name of the image on the file system so it can be saved if 
            if resized. </param>
            <returns></returns>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.DetailTabNavigateToUrl(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Used to jump/navigate a web-link (url). Function will create 
            on demand a tabpage named in parameter <c>tab</c>, move it to front
            and open/navigate a web browser with the provided <c>url</c>.
            </summary>
            <param name="url">Web-Link to navigate to</param>
            <param name="tab">tabpage title name</param>
            <param name="createNewTab">true to force creation of a new Tab</param>
            <param name="setFocus">true to force brower Tab activation (move to foreground, set focus)</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.RequestBrowseAction(RssBandit.WinGui.Forms.BrowseAction)">
            <summary>
            Used to initiate a browse action.
            </summary>
            <param name="action">The specific action to perform</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.RefreshListviewContextMenu">
            <summary>
            Renders the context menu and determines which options are enabled/visible. 
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.RefreshListviewContextMenu(NewsComponents.NewsItem)">
            <summary>
            Renders the context menu and determines which options are enabled/visible. 
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.UpdateAllCommentFeeds(System.Boolean)">
            <summary>
            Initiate a async. call to RssParser.RefreshFeeds(force_download)
            </summary>
            <param name="force_download"></param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.UpdateAllFeeds(System.Boolean)">
            <summary>
            Initiate a async. call to RssParser.RefreshFeeds(force_download)
            </summary>
            <param name="force_download"></param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.CategoryOfSelectedNode">
            <summary>
            Extracts the category of the selected node within the feeds tree.
            </summary>
            <returns>Category found, or DefaultCategory</returns>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.AddNewFeedNode(System.String,NewsComponents.Feed.feedsFeed)">
            <summary>
            Add a new feed to the GUI tree view
            </summary>
            <param name="category">Feed Category</param>
            <param name="f">Feed</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.UpdateFavicon(System.String,System.Collections.Specialized.StringCollection)">
            <summary>
            Called on each finished successful favicon request.
            </summary>
            <param name="favicon"> The name of the favicon file</param> 
            <param name="feedUrls">The list of URLs that will utilize this favicon</param>		
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.ApplyFavicons">
            <summary>
            Converts the tree view to using favicons as feed icons where available
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.UpdateCommentFeed(System.Uri,System.Uri)">
            <summary>
            Called on each finished successful comment feed refresh.
            </summary>
            <param name="feedUri">The original feed Uri</param>
            <param name="newFeedUri">The new feed Uri (if permamently moved)</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.UpdateFeed(System.String,System.Uri,System.Boolean)">
            <summary>
            Called on each finished successful feed refresh.
            </summary>
            <param name="feedUri">The original feed Uri</param>
            <param name="newFeedUri">The new feed Uri (if permamently moved)</param>
            <param name="modified">Really new items received</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.UpdateFeed(System.Uri,System.Uri,System.Boolean)">
            <summary>
            Called on each finished successful feed refresh.
            </summary>
            <param name="feedUri">The original feed Uri</param>
            <param name="newFeedUri">The new feed Uri (if permamently moved)</param>
            <param name="modified">Really new items received</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.MarkSelectedNodeRead(RssBandit.WinGui.Controls.TreeFeedsNodeBase)">
            <summary>
            Can be called on every selected tree node.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.ToggleItemFlagState(System.String)">
            <summary>
            Toggle's the flag state of the identified RSS item
            </summary>
            <param name="id">The ID of the RSS item</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.CmdWatchItemComments(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Toggles watching a particular item or list of items for new comments by either watching the value of 
            slash:comments and thr:replies or subscribing to the comments feed. 
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.MarkFeedItemsFlagged(NewsComponents.Flagged)">
            <summary>
            Marks the selected feed items flagged. Called from the listview
            context menu.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.RemoveListviewItems(System.Collections.ICollection,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Removes the provided listview items (collection of ThreadedListViewItem objects). 
            Also considers childs.
            </summary>
            <param name="itemsToRemove">List of items to be removed</param>
            <param name="moveItemsToTrash">If true, the corresponding NewsItem(s) will be moved to the Trash SmartFolder</param>
            <param name="removeFromSmartFolder">If true, the  corresponding NewsItem(s) will be also removed from any SmartFolder</param>
            <param name="updateUnreadCounters">If true, the unread counter(s) will be updated</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.RemoveSelectedFeedItems">
            <summary>
            Remove the selected feed items. 
            Called from the listview context menu.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.RestoreSelectedFeedItems">
            <summary>
            Restore the selected feed items from the Wastebasket. 
            Called from the listview context menu.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.GetSelectedLVItems">
            <summary>
            Helper function which gets the list of selected list view items from the 
            currently visible list view. 
            </summary>
            <returns>The list of selected ThreadedListViewItems</returns>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.MarkSelectedItemsLVRead">
            <summary>
            Marks the selected listview items read. Called from the listview
            context menu.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.MarkSelectedItemsLVUnread">
            <summary>
            Marks the selected listview items unread. Called from the listview
            context menu.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.MarkAllItemsLVRead">
            <summary>
            Marks the all listview items read. Called from the listview
            context menu.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.MarkAllItemsLVUnread">
            <summary>
            Marks the all listview items unread. Called from the listview
            context menu.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.SwitchPage(System.String,System.Boolean)">
            <summary>
            Moves the newspaper view to the next or previous page. 
            </summary>
            <param name="pageType">Indicates whether the page is a category or feed node</param>
            <param name="go2nextPage">Indicates whether we are going to the next or previous page. If true
            we are going to the next page, otherwise we are going to the previous page</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.ToggleItemReadState(System.String,System.Boolean)">
            <summary>
            Toggles the identified item's read/unread state. 
            </summary>
            <param name="id">The ID of the RSS item</param>
            <param name="markRead">Indicates that the item should be marked as read NOT toggled</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.ToggleItemReadState(System.String)">
            <summary>
            Toggles the identified item's read/unread state. 
            </summary>
            <param name="id">The ID of the RSS item</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.ToggleItemWatchState(System.String)">
            <summary>
            Toggles the identified item's watchd state. 
            </summary>
            <param name="id">The ID of the RSS item</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.SetFeedItemsReadState(System.Collections.IList,System.Boolean)">
            <summary>
            Marks the selected feed items read/unread. Called from the listview
            context menu.
            </summary>
            <param name="items">The items.</param>
            <param name="beenRead">if set to <c>true</c> [been read].</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.MoveNode(RssBandit.WinGui.Controls.TreeFeedsNodeBase,RssBandit.WinGui.Controls.TreeFeedsNodeBase)">
            <summary>
            Moves a node to a new parent. 
            </summary>
            <param name="theNode">FeedTreeNodeBase to move.</param>
            <param name="target">New Parent FeedTreeNodeBase.</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.AddAutoDiscoveredUrl(RssBandit.WinGui.DiscoveredFeedsInfo)">
            <summary>
            Adds an autodiscovered URL to the auto discovered feeds drop down
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.AddFeedUrlSynchronized(System.String)">
            <summary>
            Calls/Open the newFeedDialog on the GUI thread, if required.
            </summary>
            <param name="newFeedUrl">Feed Url to add</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.InitShortcutManager">
            <summary>
            Creates and loads an instance of the SettingsHandler with 
            the user's keyboard shortcuts.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.InitFeedDetailsCaption">
            <summary>
            Init the colors, draw filter and bigger font of the Detail Header Caption.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.InitNavigatorHiddenCaption">
            <summary>
            Init the colors, draw filter and bigger font of the Navigator Hidden Header Caption.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.InitializeSearchPanel">
            <summary>
            Initializes the search panel.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.CreateIGToolbars">
            <summary>
            Creates the IG toolbars dynamically.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.OnToolbarBeforeToolDropdown(System.Object,Infragistics.Win.UltraWinToolbars.BeforeToolDropdownEventArgs)">
            <summary>
            Called before IG view menu tool dropdown.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Infragistics.Win.UltraWinToolbars.BeforeToolDropdownEventArgs"/> instance containing the event data.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:RssBandit.WinGui.Forms.WinGuiMain.CmdRefreshFinder(RssBandit.WinGui.Interfaces.ICommand)" -->
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.CmdMarkFinderItemsRead(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Marks all the items in a search folder as read
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.CmdRenameFinder(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Renames a search folder
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.CmdNewFinder(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Allows the user to create a new search folder
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.CmdDeleteFinder(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Deletes a search folder
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.WalkdownThenDeleteFinders(RssBandit.WinGui.Controls.TreeFeedsNodeBase)">
            <summary>
            Helper. Work recursive on the startNode down to the leaves.
            Then delete all child categories and FeedNode refs in owner.FeedHandler.
            </summary>
            <param name="startNode">Node to start with. The startNode itself is 
            considered on delete.</param>
            <param name="startNode">new full category name (long name, with all the '\').</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.CmdSelectAllNewsItems(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Select all items of the Feeds ListView.
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.CmdDeleteFeed(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.OnGenericListviewCommand(System.Int32,System.Boolean)">
            <summary>
            Called on generic listview commands and used for calling Addin-methods. 
            </summary>
            <param name="index">Index of the command. Points directly to the
            plugin within the arraylist</param>
            <param name="hasConfig">true, if we have to call config dialog</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.OnFinishLoading(System.Object)">
            <summary>
            Provide the entry point to the delayed loading of the feed list
            </summary>
            <param name="theStateObject">The timer callback parameter</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.OnFormMinimize(System.Object,System.EventArgs)">
            <summary>
            Here is the Form minimize event handler
            </summary>
            <param name="sender">This form</param>
            <param name="e">Empty. See WndProc()</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.PreFilterMessage(System.Windows.Forms.Message@)">
            <summary>
            Implements the IMessageFilter. 
            Helps grabbing all the important keys.
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.WndProc(System.Windows.Forms.Message@)">
            <summary>
            we are interested in an OnMinimized event
            </summary>
            <param name="m">Native window message</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.OnSaveConfig(RssBandit.WinGui.Utility.Settings)">
            <summary>
            GUI State persistence. Settings are: window position, splitter position, 
            floating window sizes, listview column order, sorting direction etc.
            This routine writes all of them to a centralized settings dictionary maintained
            by the Settings class.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.OnLoadConfig(RssBandit.WinGui.Utility.Settings)">
            <summary>
            GUI State persistence. Restore the control settings like window position,
            docked window states, toolbar button layout etc.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.InitSearchEngines">
            <summary>
            Called to build and re-build the search engine's Gui representation(s)
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.UpdateTreeStatus(NewsComponents.Collections.FeedsCollection)">
            <summary>
            Iterates through the treeview and highlights all feed titles that 
            have unread messages. 
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.CreateFeedInfoList(System.String,System.Collections.Generic.IList{NewsComponents.NewsItem})">
            <summary>
            Creates the feed info list. It takes the items and groups the
            unread items by feed for display.
            </summary>
            <param name="title">The title.</param>
            <param name="items">The items.</param>
            <returns></returns>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.OnTimerStartupTick(System.Object,System.EventArgs)">
            <summary>
            Called when startup timer fires (ca. 45 secs after UI startup).
            This delay is required, if Bandit gets started via Windows Auto-Start
            to prevent race conditions with WLAN startup/LAN init (we require the
            Internet connection to succeed)
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.GetOriginalFeedUrl(NewsComponents.NewsItem)">
            <summary>
            Returns the URL of the original feed for this NewsItem. 
            </summary>
            <remarks>Assumes the NewsItem is in the flagged or watched items smart folder</remarks>
            <param name="currentNewsItem"></param>
            <returns>The feed URL of the source feed if  a pointer to it exists and NULL otherwise.</returns>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.MarkCommentsAsViewed(RssBandit.WinGui.Controls.TreeFeedsNodeBase,NewsComponents.NewsItem)">
            <summary>
            Marks the comments for a NewsItem as read in a given feed node and across any other feed nodes 
            in which it appears. 
            </summary>
            <param name="tn">The feed node</param>
            <param name="currentNewsItem">The item whose comments have been read</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.OnFeedListItemKeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            support the keydown/pagedown keyup/pageup listview navigation 
            as well as deleting items via the Delete key.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.OnAnyToolbarToolClick(System.Object,Infragistics.Win.UltraWinToolbars.ToolClickEventArgs)">
            <summary>
            Called when any IG toolbar tool click].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Infragistics.Win.UltraWinToolbars.ToolClickEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.WinGuiMain.OnTasksTimerTick(System.Object,System.EventArgs)">
            <summary>
            Callback for DelayedTasks timer
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Forms.WinGuiMain.CurrentPageNumber">
            <summary>
            Returns the current page number in the reading pane. 
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Forms.WinGuiMain.LastPageNumber">
            <summary>
            Returns the page number for the last page in the reading pane. 
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Forms.WinGuiMain.GuiOwner">
            <summary>
            Gets and sets the GUI owner application
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Forms.WinGuiMain.InitialStartupState">
            <summary>
            Initialized on Class init with the initial Form state (usually defined on a Shortcut)
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Forms.WinGuiMain.UrlText">
            <summary>
            Provide access to the current entry text within the navigation dropdown
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Forms.WinGuiMain.WebSearchText">
            <summary>
            Provide access to the current entry text within the web search dropdown
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Forms.WinGuiMain.ExceptionNode">
            <summary>
            Return the TreeNode instance representing/store of 
            the FeedExceptions.
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Forms.WinGuiMain.SentItemsNode">
            <summary>
            Return the TreeNode instance representing/store of 
            the Sent Items.
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Forms.WinGuiMain.WatchedItemsNode">
            <summary>
            Return the TreeNode instance representing/store of 
            the Watched Items.
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Forms.WinGuiMain.UnreadItemsNode">
            <summary>
            Return the TreeNode instance representing/store of 
            the Unread Items.
            </summary>
            <value>The unread items node.</value>
        </member>
        <member name="P:RssBandit.WinGui.Forms.WinGuiMain.DeletedItemsNode">
            <summary>
            Return the TreeNode instance representing/store of 
            the Deleted Items.
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Forms.WinGuiMain.SearchResultNode">
            <summary>
            Gets the TreeNode instance representing/store of
            a non persistent search result (temp. result)
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Forms.WinGuiMain.CurrentSelectedFeedsNode">
            <summary>
            Gets or sets the current internal selected tree node (FeedTreeNodeBase).
            </summary>
            <value>an FeedTreeNodeBase instance</value>
            <remarks>
            If the internal current selected tree node is null, it
            try to return the selected node of the TreeView (property SelectedNode).
            If it is not null, it will be returned not regarding the current TreeView
            selection. This behavior enables to have a context menu related to the current
            clicked node item or (if set to null) a context menu related to current TreeView
            selection (highlighted).
            </remarks>
        </member>
        <member name="P:RssBandit.WinGui.Forms.WinGuiMain.NumSelectedListViewItems">
            <summary>
            Returns the number of selected list view items
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Forms.WinGuiMain.TreeImageList">
            <summary>
            Returns the Subscription Tree Image List.
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Forms.WinGuiMain.CurrentSelectedFeedItem">
            <summary>
            Gets or sets the current internal selected feed story item (NewsItem)
            </summary>
            <value>an NewsItem instance</value>
            <remarks>If the internal current NewsItem is null, it
            try to return the first item found on the ListView selctedItems list.
            If it is not null, it will be returned not regarding the current ListView
            selection. This behavior enables to have a context menu related to the current
            clicked item row or (if set to null) a context menu related to current ListView
            selection (highlighted).</remarks>
        </member>
        <member name="P:RssBandit.WinGui.Forms.WinGuiMain.ResultDispatcher">
            <summary>
            Gets the UI Result Dispatcher timer.
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Forms.WinGuiMain.ShutdownInProgress">
            <summary>
            Gets a value indicating whether shutdown is in progress.
            </summary>
            <value><c>true</c> if [shutdown in progress]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:RssBandit.WinGui.Forms.WinGuiMain.UpdateTreeStatusDelegate">
            <summary>
            Delegate used for calling UpdateTreeStatus(Hashtable) in the correct thread.
            </summary>
            <remarks>Read the article at 
            http://msdn.microsoft.com/library/en-us/dnforms/html/winforms06112002.asp
            for an explanation of why this delegate is needed.</remarks>
        </member>
        <member name="T:RssBandit.WinGui.Forms.WinGuiMain.PopulateListViewDelegate">
            <summary>
            Delegate used for calling PopulateListView() in the correct thread.
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Forms.WinGuiMain.SetGuiMessageFeedbackDelegate">
            <summary>
            Delegate used to invoke SetGuiStateFeedback() from other UI threads 
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Forms.WinGuiMain.SetGuiMessageStateFeedbackDelegate">
            <summary>
            Delegate used to invoke SetGuiStateFeedback() from other UI threads 
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Forms.WinGuiMain.GetCommentNewsItemsDelegate">
            <summary>
            Delegate used to invoke GetItemsForFeed() on RssParser class in a 
            background thread so as not to tie up the UI. 
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Forms.WinGuiMain.StartNewsSearchDelegate">
            <summary>
            used to start NewsSearch asynchron
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Forms.WinGuiMain.StartRssRemoteSearchDelegate">
            <summary>
            used to start RssRemoteSearch asynchron
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Forms.WinGuiMain.NavigateToURLDelegate">
            <summary>
            Called from within a toast window
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Forms.WinGuiMain.SubscribeToFeedUrlDelegate">
            <summary>
            Command line param
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Forms.WinGuiMain.DelayTaskDelegate">
            <summary>
            Used to queue a UI task
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Forms.WinGuiMain.CloseMainForm">
            <summary>
            Enable close window, if called from another thread
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Tools.AppPopupMenuCommand">
            <summary>
            Colleage base Popup Menu class, that is controlled by and talks to the mediator
            </summary>
            <remarks>
            A sample application provided by IG named "ToolProvider Component CS"
            shows how to correctly implement custom (inherited) tool classes!
            
            we don't need a type converter here, because we don't have custom properties
            </remarks>
        </member>
        <member name="F:RssBandit.WinGui.Tools.AppPopupMenuCommand.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Tools.AppPopupMenuCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor used for de-serialization
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Tools.AppPopupMenuCommand.ReJoinMediatorFrom(RssBandit.WinGui.Tools.AppPopupMenuCommand)">
            <summary>
            Takes over the mediator and executor from cmd.
            </summary>
            <param name="cmd">The CMD.</param>
        </member>
        <member name="M:RssBandit.WinGui.Tools.AppPopupMenuCommand.Clone(System.Boolean)">
            <summary>
            Returns a cloned copy of the tool.
            </summary>
            <param name="cloneNewInstance">If true, returns a clone of the tool that can serve as an instance of the tool, sharing the same SharedProps object.  If false, returns a tool that can be used as a new tool, with a clone of the original SharedProps object.</param>
            <returns></returns>
        </member>
        <member name="M:RssBandit.WinGui.Tools.AppPopupMenuCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called from our base class when ISerializable.GetObjectData is called.  Serialize all custom property data here.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:RssBandit.WinGui.Tools.AppPopupMenuCommand.Initialize(Infragistics.Win.UltraWinToolbars.ToolsCollectionBase)">
            <summary>
            Internal inherited method for initializing the tool when de-serialization completes.
            Automatically called by toolbars manager.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Tools.AppPopupMenuCommand.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Tools.AppPopupMenuCommand.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Tools.AppButtonToolCommand">
            <summary>
            Colleage base Tool Button class, that is controlled by and talks to the mediator
            </summary>
            <remarks>
            A sample application provided by IG named "ToolProvider Component CS"
            shows how to correctly implement custom (inherited) tool classes!
            </remarks>
        </member>
        <member name="F:RssBandit.WinGui.Tools.AppButtonToolCommand.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Tools.AppButtonToolCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor used for de-serialization
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Tools.AppButtonToolCommand.ReJoinMediatorFrom(RssBandit.WinGui.Tools.AppButtonToolCommand)">
            <summary>
            Takes over the mediator and executor from cmd.
            </summary>
            <param name="cmd">The CMD.</param>
        </member>
        <member name="M:RssBandit.WinGui.Tools.AppButtonToolCommand.Clone(System.Boolean)">
            <summary>
            Returns a cloned copy of the tool.
            </summary>
            <param name="cloneNewInstance">If true, returns a clone of the tool that can serve as an instance of the tool, sharing the same SharedProps object.  If false, returns a tool that can be used as a new tool, with a clone of the original SharedProps object.</param>
            <returns></returns>
        </member>
        <member name="M:RssBandit.WinGui.Tools.AppButtonToolCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called from our base class when ISerializable.GetObjectData is called.  Serialize all custom property data here.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:RssBandit.WinGui.Tools.AppButtonToolCommand.Initialize(Infragistics.Win.UltraWinToolbars.ToolsCollectionBase)">
            <summary>
            Internal inherited method for initializing the tool when de-serialization completes.
            Automatically called by toolbars manager.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Tools.AppButtonToolCommand.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Tools.AppButtonToolCommand.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Tools.AppStateButtonToolCommand">
            <summary>
            Colleage base Tool Button class, that is controlled by and talks to the mediator
            </summary>
            <remarks>
            A sample application provided by IG named "ToolProvider Component CS"
            shows how to correctly implement custom (inherited) tool classes!
            </remarks>
        </member>
        <member name="F:RssBandit.WinGui.Tools.AppStateButtonToolCommand.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Tools.AppStateButtonToolCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor used for de-serialization
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Tools.AppStateButtonToolCommand.ReJoinMediatorFrom(RssBandit.WinGui.Tools.AppStateButtonToolCommand)">
            <summary>
            Takes over the mediator and executor from cmd.
            </summary>
            <param name="cmd">The CMD.</param>
        </member>
        <member name="M:RssBandit.WinGui.Tools.AppStateButtonToolCommand.Clone(System.Boolean)">
            <summary>
            Returns a cloned copy of the tool.
            </summary>
            <param name="cloneNewInstance">If true, returns a clone of the tool that can serve as an instance of the tool, sharing the same SharedProps object.  If false, returns a tool that can be used as a new tool, with a clone of the original SharedProps object.</param>
            <returns></returns>
        </member>
        <member name="M:RssBandit.WinGui.Tools.AppStateButtonToolCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called from our base class when ISerializable.GetObjectData is called.  Serialize all custom property data here.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:RssBandit.WinGui.Tools.AppStateButtonToolCommand.Initialize(Infragistics.Win.UltraWinToolbars.ToolsCollectionBase)">
            <summary>
            Internal inherited method for initializing the tool when de-serialization completes.
            Automatically called by toolbars manager.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Tools.AppStateButtonToolCommand.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Tools.AppStateButtonToolCommand.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Tools.AppStateButtonToolCommand.RssBandit#WinGui#Interfaces#ICommandComponent#get_Checked">
            <summary>
            Colleage base Tool Button class, that is controlled by and talks to the mediator
            </summary>
            <remarks>
            A sample application provided by IG named "ToolProvider Component CS"
            shows how to correctly implement custom (inherited) tool classes!
            </remarks>
        </member>
        <member name="M:RssBandit.WinGui.Tools.AppStateButtonToolCommand.RssBandit#WinGui#Interfaces#ICommandComponent#set_Checked(System.Boolean)">
            <summary>
            Colleage base Tool Button class, that is controlled by and talks to the mediator
            </summary>
            <remarks>
            A sample application provided by IG named "ToolProvider Component CS"
            shows how to correctly implement custom (inherited) tool classes!
            </remarks>
        </member>
        <member name="T:System.Windows.Forms.ThListView.ListHelper">
            <summary>
            ListHelper contains static helper functions.
            </summary>
        </member>
        <member name="T:RssBandit.RssBanditUpdateManager">
            <summary>
            ApplicationUpdateManager.
            </summary>
        </member>
        <member name="T:RssBandit.ApplicationExceptions">
            <summary>
            Some handled exceptions
            </summary>
        </member>
        <member name="F:RssBandit.ApplicationExceptions.Unknown">
            <summary>
            Unknown or unhandled exception.
            </summary>
        </member>
        <member name="F:RssBandit.ApplicationExceptions.FeedlistOldFormat">
            <summary>
            Old feedlist file or old feedlist content format detected
            </summary>
        </member>
        <member name="F:RssBandit.ApplicationExceptions.FeedlistOnRead">
            <summary>
            File IO error while reading feedlist
            </summary>
        </member>
        <member name="F:RssBandit.ApplicationExceptions.FeedlistOnProcessContent">
            <summary>
            Usually a XmlException while processing the feedlist content
            </summary>
        </member>
        <member name="F:RssBandit.ApplicationExceptions.FeedlistNA">
            <summary>
            No feedlist found/available
            </summary>
        </member>
        <member name="T:RssBandit.BanditApplicationException">
            <summary>
             Bandit Exception should be used for all our own exceptions
            </summary>
        </member>
        <member name="M:RssBandit.BanditApplicationException.#ctor">
            <summary>
             Base Contructor
            </summary>
        </member>
        <member name="M:RssBandit.BanditApplicationException.#ctor(RssBandit.ApplicationExceptions)">
            <summary>
             Base Constructor with Error Number
            </summary>
            <param name="number">ApplicationExceptions</param>
        </member>
        <member name="M:RssBandit.BanditApplicationException.#ctor(System.String)">
            <summary>
             Base Constructor with Error Text
            </summary>
            <param name="errorText">Error Text </param>
        </member>
        <member name="M:RssBandit.BanditApplicationException.#ctor(RssBandit.ApplicationExceptions,System.String)">
            <summary>
             Base Constructor with Error Text and Error Number
            </summary>
            <param name="number">ApplicationExceptions</param>
            <param name="errorText">Error Text</param>
        </member>
        <member name="M:RssBandit.BanditApplicationException.#ctor(RssBandit.ApplicationExceptions,System.Exception)">
            <summary>
             Base Constructor with Error Text and Error Number
            </summary>
            <param name="number">ApplicationExceptions</param>
            <param name="inner">Inner Exception</param>
        </member>
        <member name="M:RssBandit.BanditApplicationException.#ctor(System.String,System.Exception)">
            <summary>
            Base Constructor with Error Text and Exception
            </summary>
            <param name="errorText">Error Text </param>
            <param name="inner">Inner Exception</param>
        </member>
        <member name="M:RssBandit.BanditApplicationException.#ctor(RssBandit.ApplicationExceptions,System.String,System.Exception)">
            <summary>
            Base Constructor with Error Text and Exception and Number
            </summary>
            <param name="number">ApplicationExceptions</param>
            <param name="errorText">Error Text</param>
            <param name="inner">Exception</param>
        </member>
        <member name="M:RssBandit.BanditApplicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISeriazable Constructor used for Serializing the Exception
            </summary>
            <param name="info">Serialization Info Object</param>
            <param name="context">Serializtion Context </param>
        </member>
        <member name="M:RssBandit.BanditApplicationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Interface for serializing
            </summary>
            <param name="info">Info Object</param>
            <param name="context">Context Object</param>
        </member>
        <member name="M:RssBandit.BanditApplicationException.InitializeEnvironmentInformation">
            <summary>
            Initialization function that gathers environment information safely.
            </summary>
        </member>
        <member name="P:RssBandit.BanditApplicationException.Number">
            <summary>
             Returns the number of the Exception
            </summary>
        </member>
        <member name="P:RssBandit.BanditApplicationException.OsNameVersion">
            <summary>
            Machine name where the exception occurred.
            </summary>
        </member>
        <member name="P:RssBandit.BanditApplicationException.FrameworkVersion">
            <summary>
            Framework Version used where the exception occurred.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.ListFeedsDrawFilter.MeasureDisplayStringWidth(System.Drawing.Graphics,System.String,System.Drawing.Font)">
            <summary>
            Measures a string in hte graphics param.
            </summary>
            <param name="graphics"></param>
            <param name="text"></param>
            <param name="font"></param>
            <returns></returns>
        </member>
        <member name="T:Genghis.Preferences">
             <summary>
             Provides a way to persist user preferences.</summary>
             <remarks>
             By default, this class uses Isolated Storage to provide provide portable
             and safe persistance.<br/>
             It is envisioned that in the future, alternate backing stores will be
             available (the registry would be an obvious one).
             </remarks>
            
             <example>
             Here's an example of how to persist the persist the personal details of a
             user (for registration purposes, perhaps).
             <code>
             Preferences prefWriter = Preferences.GetUserNode("Personal Details");
             prefWriter.SetProperty("Name", "Joe Bloggs");
             prefWriter.SetProperty("Age", 56);
             prefWriter.Close();
             </code>
            
             And here's an example of how to read these properties back in.
             <code>
             Preferences prefReader = Preferences.GetUserNode("Personal Details");
             string name = prefReader.GetString("Name", "Anonymous");
             int age = prefReader.GetInt32("Age", 0);
             prefReader.Close();
             </code>
             </example>
        </member>
        <member name="M:Genghis.Preferences.#ctor">
            <summary>
            Constructs a preferences writer at the root.</summary>
        </member>
        <member name="M:Genghis.Preferences.#ctor(System.String)">
            <summary>
            Constructs a preferences writer with a path.</summary>
            <param name="path">
            The path under which the preferences will be saved.</param>
        </member>
        <member name="M:Genghis.Preferences.Close">
            <summary>
            Disposes of any resources.</summary>
            <remarks>
            Equivalent to calling Dispose().</remarks>
        </member>
        <member name="M:Genghis.Preferences.ValidatePath(System.String,System.String)">
            <summary>
            Validates the path argument.</summary>
        </member>
        <member name="M:Genghis.Preferences.GetProperty(System.String,System.Object,System.Type)">
            <summary>
            Gets a property</summary>
            <param name="name">
            The property name.<br/>
            Use slash (/) to logically separate groups of settings.</param>
            <param name="defaultValue">
            The default property value.  If no previous property exists, or the
            preferences store is unavailable, this value will be returned.</param>
            <param name="returnType">
            The return type. This must be a type
            supported by the System.Convert class.  The supported types are:
            Boolean, Char, SByte, Byte, Int16, Int32, Int64, UInt16, UInt32,
            UInt64, Single, Double, Decimal, DateTime and String.</param>
            <returns>
            Returns the property value (with the same type as returnType).</returns>
        </member>
        <member name="M:Genghis.Preferences.GetProperty(System.String,System.Object)">
            <summary>
            Gets a property</summary>
            <param name="name">
            The property name.<br/>
            Use slash (/) to logically separate groups of
            settings.</param>
            <param name="defaultValue">
            The default property value.  If no previous property exists, or the
            preferences store is unavailable, this value will be returned.</param>
            <returns>
            Returns the property value (with the same type as defaultValue).</returns>
            <remarks>
            The return type is converted to the same type as the defaultValue
            argument before it is returned.  Therefore, this must be a type
            supported by the System.Convert class.  The supported types are:
            Boolean, Char, SByte, Byte, Int16, Int32, Int64, UInt16, UInt32,
            UInt64, Single, Double, Decimal, DateTime and String.</remarks>
        </member>
        <member name="M:Genghis.Preferences.SetProperty(System.String,System.Object)">
            <summary>
            Sets a property</summary>
            <param name="name">
            The property name.<br/>
            Use slash (/) to logically separate groups of settings.</param>
            <param name="value">
            The property value.</param>
            <remarks>
            Currently, the value parameter must be a type supported by the
            System.Convert class.  The supported types are: Boolean, Char, SByte,
            Byte, Int16, Int32, Int64, UInt16, UInt32, UInt64, Single, Double,
            Decimal, DateTime and String.</remarks>
        </member>
        <member name="M:Genghis.Preferences.Flush">
            <summary>
            Flushes any outstanding property data to disk.</summary>
        </member>
        <member name="M:Genghis.Preferences.GetSubnode(System.String)">
            <summary>
            Opens a new subnode to store settings under.
            </summary>
            <param name="path">The path of the new subnode.</param>
            <remarks>The subnode is created if it doesn't already exist.</remarks>
        </member>
        <member name="M:Genghis.Preferences.GetUserRoot">
            <summary>
            Constructs a preferences object at the root of the per-user
            settings.</summary>
        </member>
        <member name="M:Genghis.Preferences.GetUserNode(System.Type)">
            <summary>
            Constructs a per-user preferences object from a class.</summary>
            <param name="c">
            The class you want to store settings for.  All the
            periods in the name will be converted to slashes.</param>
        </member>
        <member name="M:Genghis.Preferences.GetUserNode(System.String)">
            <summary>
            Constructs a per-user preferences object from a path.</summary>
            <param name="path">
            Represents the path the preferences are stored under.
            Equivalent to a directory path or a registry key path.<br/>
            <b>Important Note:</b> The seperator character is slash ('/')
            <b>NOT</b> backslash ('\').
            </param>
            <remarks>The path of the root node is "".</remarks>
        </member>
        <member name="T:Genghis.IsolatedStorageUserPreferencesStore">
            <summary>
            A back-end preferences implementation using Isolated Storage as the
            underlying storage mechanism.</summary>
            <remarks>
            This implementation has the following properties:
            <list type="bullet">
            <item><description>Reads and writes are involve a single hashtable
            access, and are thus very fast.</description></item>
            <item><description>The backing file is read once on startup, and
            written once on shutdown (using the Application.ApplicationExit event).
            </description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Genghis.IsolatedStorageUserPreferencesStore.#ctor(System.String)">
            <summary>Initializes instance variables and loads initial settings from
            the backing store.</summary>
            <param name="path">
            Represents the name of the group the preferences are stored under.
            Roughly equivalent to a directory path or a registry key path.
            You can nest groups using the slash (/) character.
            "" (the empty string) represents the top-level group.  A slash (/)
            will be added to the end of the path if it is lacking one.</param>
        </member>
        <member name="M:Genghis.IsolatedStorageUserPreferencesStore.GetProperty(System.String,System.Object,System.Type)">
            <summary>
            Gets a property</summary>
            <param name="name">
            The property name.<br/>
            Use slash (/) to logically separate groups of settings.</param>
            <param name="defaultValue">
            The default property value.  If no previous property exists, or the
            preferences store is unavailable, this value will be returned.</param>
            <param name="returnType">
            The return type. This must be a type
            supported by the System.Convert class.  The supported types are:
            Boolean, Char, SByte, Byte, Int16, Int32, Int64, UInt16, UInt32,
            UInt64, Single, Double, Decimal, DateTime and String.</param>
            <returns>
            Returns the property value (with the same type as returnType).</returns>
        </member>
        <member name="M:Genghis.IsolatedStorageUserPreferencesStore.SetProperty(System.String,System.Object)">
            <summary>
            Sets a property</summary>
            <param name="name">
            The property name.<br/>
            Use slash (/) to logically separate groups of settings.</param>
            <param name="value">
            The property value.</param>
            <remarks>
            Currently, the value parameter must be a type supported by the
            System.Convert class.  The supported types are: Boolean, Char, SByte,
            Byte, Int16, Int32, Int64, UInt16, UInt32, UInt64, Single, Double,
            Decimal, DateTime and String.</remarks>
        </member>
        <member name="M:Genghis.IsolatedStorageUserPreferencesStore.Flush">
            <summary>
            Flushes any outstanding properties to disk.</summary>
        </member>
        <member name="M:Genghis.IsolatedStorageUserPreferencesStore.OnApplicationExit(System.Object,System.EventArgs)">
            <summary>
            Flush any outstanding preferences data on application exit.</summary>
        </member>
        <member name="M:Genghis.IsolatedStorageUserPreferencesStore.CreateSettingsStream">
            <summary>
            Creates a write-only stream on the backing store.</summary>
            <returns>
            A stream to write to.</returns>
        </member>
        <member name="M:Genghis.IsolatedStorageUserPreferencesStore.OpenSettingsStream">
            <summary>
            Opens a read-only stream on the backing store.</summary>
            <returns>
            A stream to read from.</returns>
        </member>
        <member name="M:Genghis.IsolatedStorageUserPreferencesStore.Deserialize">
            <summary>Deserializes to the userStore hashtable from an isolated storage stream.</summary>
            <remarks>Exceptions are silently ignored.</remarks>
        </member>
        <member name="M:Genghis.IsolatedStorageUserPreferencesStore.Serialize">
            <summary>Serializes the userStore hashtable to an isolated storage stream.</summary>
            <remarks>Exceptions are silently ignored.</remarks>
        </member>
        <member name="T:RssBandit.WinGui.Forms.ExportFeedsDialog">
            <summary>
            ExportFeedsDialog.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.ExportFeedsDialog.#ctor">
            <summary>
            Constructor is private because we always want to populate the tree
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.ExportFeedsDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.ExportFeedsDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.TreeFeedsNodeGroupHeaderPainter.PaintOutlook2003Header(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints a node background as a Outlook 2003 header.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="r">The rectangle.</param>
        </member>
        <member name="T:RssBandit.WinGui.TreeFeedsDrawFilter">
            <summary>
            Used to impl. custom UltraTreeNode drawing additions
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.TreeFeedsDrawFilter.Infragistics#Win#IUIElementDrawFilter#GetPhasesToFilter(Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Called before each element is about to be drawn.
            </summary>
            <param name="drawParams">Exposes properties required for drawing an element (e.g. Element, Graphics, InvalidRect etc.)</param>
            <returns>
            Bit flags indicating which phases of the drawing operation to filter. The DrawElement method will be called only for those phases.
            </returns>
        </member>
        <member name="M:RssBandit.WinGui.TreeFeedsDrawFilter.Infragistics#Win#IUIElementDrawFilter#DrawElement(Infragistics.Win.DrawPhase,Infragistics.Win.UIElementDrawParams@)">
            <summary>
            Called during the drawing operation of a UIElement for a specific phase
            of the operation. This will only be called for the phases returned
            from the GetPhasesToFilter method.
            </summary>
            <param name="drawPhase">Contains a single bit which identifies the current draw phase.</param>
            <param name="drawParams">Exposes properties required for drawing an element (e.g. Element, Graphics, InvalidRect etc.)</param>
            <returns>
            Returning true from this method indicates that this phase has been handled and the default processing should be skipped.
            </returns>
        </member>
        <member name="T:RssBandit.UACManager">
            <summary>
            User Account Control Manager.
            Gets info about critical actions , e.g. registry access require 
            higher OS privilegs or user rights.
            </summary>
        </member>
        <member name="M:RssBandit.UACManager.Denied(RssBandit.ElevationRequiredAction)">
            <summary>
            Checks, if the action is denied for the current windows user.
            </summary>
            <param name="action">The action.</param>
            <returns>True, in case the action cannot be performed successfully
            without user elevation.</returns>
        </member>
        <member name="T:RssBandit.WinGui.Utility.WheelSupport">
            <summary>
            Mouse Wheel Support.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Utility.WheelSupport.#ctor(System.Windows.Forms.Form)">
            <summary>
            Add support for wheel scrolling on non-focused UI widgets 
            to the form f.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:RssBandit.WinGui.Utility.WheelSupport.GetTopmostChild(System.Windows.Forms.Control,System.Drawing.Point)">
            <summary>
            Gets the topmost child.
            </summary>
            <param name="ctrl">The control to start.</param>
            <param name="mousePosition">The mouse position.</param>
            <returns>Control</returns>
        </member>
        <member name="M:RssBandit.WinGui.Utility.WheelSupport.ScrollHtmlControl(IEControl.HtmlControl,System.Windows.Forms.Message)">
            <summary>
            Mouse wheel scrolling on IEControl support.
            Thanks to // thanks to http://sourceforge.net/users/kevindente/:
            </summary>
            <param name="control"></param>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="E:RssBandit.WinGui.Utility.WheelSupport.OnGetChildControl">
            <summary>
            Should return the child control of the provided parent control.
            </summary>
            <remarks>Use it to handle special parent/child relationships on third party controls,
            like document manager or toolbars</remarks>
        </member>
        <member name="T:RssBandit.WinGui.Utility.WheelSupport.OnGetChildControlHandler">
            <summary>
             Used in OnGetChildControl event
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ThListView.ThreadedListView">
            <summary>
            ThreadedListView, an extended listview control.
            </summary>
            <remarks>
            Rework required: CLR 2.0 ListView already implement
            Groups and VirtualMode (XP and 2003 only, if visual styles enabled)
            </remarks>
        </member>
        <member name="M:System.Windows.Forms.ThListView.ThreadedListView.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ThListView.ThreadedListView.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ThListView.ThreadedListView.CollapseListViewItem(System.Windows.Forms.ThListView.ThreadedListViewItem)">
            <summary>
            The workhorse to collapse a threaded listview item
            </summary>
            <param name="lvItem"></param>
        </member>
        <member name="M:System.Windows.Forms.ThListView.ThreadedListView.ExpandListViewItem(System.Windows.Forms.ThListView.ThreadedListViewItem,System.Boolean)">
            <summary>
            The workhorse to expand a threaded listview item
            </summary>
            <param name="lvItem"></param>
            <param name="activate">true, if lvItem should be activated</param>
        </member>
        <member name="M:System.Windows.Forms.ThListView.ThreadedListView.CheckForLayoutModifications">
            <summary>
            Tests for relevant modifications related to the listview layout
            and raise the ListLayoutModified event
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ThListView.ThreadedListView.ApplyLayoutModifications">
            <summary>
            Take over any layout modifications, so CheckForLayoutModifications() will
            not raise the ListLayoutModified event
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ThListView.ThreadedListView.InsertItemsForPlaceHolder(System.String,System.Windows.Forms.ThListView.ThreadedListViewItem[],System.Boolean)">
            <summary>
            Insert items as a replacement for a placeholder item inserted before.
            The placeholder item will be identified by the placeHolderTicket to be provided.
            </summary>
            <param name="placeHolderTicket">The unique placeholder item's ticket. (string)</param>
            <param name="newChildItems">ThreadedListViewItem array</param>
            <param name="sortOnInsert">True uses the current sort column and order to insert childs. 
            Set to false, if you want to sort by your own.</param>
            <exception cref="T:System.ArgumentNullException">If placeHolderTicket is null or empty</exception>
        </member>
        <member name="M:System.Windows.Forms.ThListView.ThreadedListView.RefreshSortMarks(System.Int32,System.Windows.Forms.SortOrder)">
            <summary>
            RefreshSortMarks uses LVM_GETHEADER and HDM_SETITEM to manipulate the header control
            of the underlying listview control.
            </summary>
            <param name="sortedColumnIndex">int. Index of the column that gets sorted</param>
            <param name="sortOrder">The sort order.</param>
        </member>
        <member name="T:RssBandit.WinGui.Controls.SmoothLabelDrawFilter">
            <summary>
            Helper to draw the Details Header Caption Label Text Font
            anti-aliased (smooth).
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Utility.CultureChanger">
            <summary>
            Helper class to temporary switch the current thread culture.
            </summary>
            <example>
            <code>
            	using (CultureChanger cc = new CultureChanger("en-US")) {
            		// do things with an en-US culture
            	}
            	// go on with the previous thread culture
            </code>
            </example>
        </member>
        <member name="M:RssBandit.WinGui.Utility.CultureChanger.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:RssBandit.WinGui.Utility.CultureChanger"/> class.
            </summary>
            <param name="culture">The culture.</param>
        </member>
        <member name="M:RssBandit.WinGui.Utility.CultureChanger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RssBandit.WinGui.Utility.CultureChanger"/> class.
            </summary>
            <param name="culture">The culture.</param>
        </member>
        <member name="P:RssBandit.WinGui.Utility.CultureChanger.InvariantCulture">
            <summary>
            Gets the CultureChanger for the invariant culture.
            </summary>
            <value>The invariant culture.</value>
        </member>
        <member name="T:RssBandit.WinGui.Utility.UrlFormatter">
            <summary>
            Supports Url encoded formatting of parameters, that can contain 
            encoding directives: {0:&lt;encoding&gt;}
            e.g. {0:euc-jp}
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Utility.EventsHelper">
            <summary>
            When publishing events in C#, you need to test that the delegate has targets. 
            You also must handle exceptions the subscribers throw, otherwise, the publishing 
            sequence is aborted. You can iterate over the delegate’s internal invocation list 
            and handle individual exceptions that way. 
            This generic helper class called EventsHelper that does just that. 
            EventsHelper can publish to any delegate, accepting any collection of parameters. 
            EventsHelper can also publish asynchronously and concurrently to the subscribers 
            using the thread pool, turning any subscriber’s target method into a fire-and-forget 
            method.
            </summary>
            <remarks>Thanks to http://www.idesign.net/ </remarks>
        </member>
        <member name="T:RssBandit.WinGui.Utility.Settings">
            <summary>
            Helper to save/restore Gui Settings (other than User Preferences).
            This includes such things like Window size and position, panel sizes, dock layout etc.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Utility.Settings.NewsComponents#IPersistedSettings#GetProperty(System.String,System.Type,System.Object)">
            <summary>
            Gets the property value.
            </summary>
            <param name="name">The name.</param>
            <param name="returnType">Type of the return.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:RssBandit.WinGui.Utility.Settings.NewsComponents#IPersistedSettings#SetProperty(System.String,System.Object)">
            <summary>
            Sets a property
            </summary>
            <param name="name">The property name.<br/>
            Use slash (/) to logically separate groups of settings.</param>
            <param name="value">The property value.</param>
        </member>
        <member name="M:RssBandit.WinGui.Utility.Settings.SetProperty(System.String,System.Object)">
            <summary>
            Sets a property
            </summary>
            <param name="name">The property name.<br/>
            Use slash (/) to logically separate groups of settings.</param>
            <param name="value">The property value.</param>
            <remarks>
            Currently, the value parameter must be a type supported by the
            System.Convert class.  The supported types are: Boolean, Char, SByte,
            Byte, Int16, Int32, Int64, UInt16, UInt32, UInt64, Single, Double,
            Decimal, DateTime and String.</remarks>
        </member>
        <member name="M:RssBandit.WinGui.Utility.Settings.Flush">
            <summary>
            Flushes any outstanding properties to disk.</summary>
        </member>
        <member name="M:RssBandit.WinGui.Utility.Settings.Close">
            <summary>Close resources and flush content (if needed) </summary>
        </member>
        <member name="M:RssBandit.WinGui.Utility.Settings.OpenSettingsStream">
            <summary>
            Opens a read-only stream on the backing store.</summary>
            <returns>
            A stream to read from.</returns>
        </member>
        <member name="M:RssBandit.WinGui.Utility.Settings.Deserialize">
            <summary>Deserializes to the userStore hashtable from an storage stream.</summary>
            <remarks>Exceptions are silently ignored.</remarks>
        </member>
        <member name="M:RssBandit.WinGui.Utility.Settings.Serialize">
            <summary>Serializes the userStore hashtable to an storage stream.</summary>
            <remarks>Exceptions are silently ignored.</remarks>
        </member>
        <member name="M:RssBandit.WinGui.Utility.SerializableWebTabState.Save(System.IO.Stream,RssBandit.WinGui.Utility.SerializableWebTabState)">
            <summary>
            Saves the SerializableWebTabState instance to specified stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:RssBandit.WinGui.Utility.SerializableWebTabState.Load(System.IO.Stream)">
            <summary>
            Loads the SerializableWebTabState from specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns></returns>
        </member>
        <member name="F:RssBandit.WinGui.Utility.Utils.fullInternetStateTestCounter">
            <summary>
            Used to count internally to decide when we should make a forced INetState test
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Utility.Utils.CurrentINetState(System.Net.IWebProxy,System.Boolean)">
            <summary>
            Figures out, if we are connected to the Internet.
            First it try to use the SENSAPI to do the work (see also 
            http://msdn.microsoft.com/msdnmag/issues/02/08/SENS/default.aspx).
            As this article describes, it does not make sense to use the SENS TCP/IP 
            notifications. So we test by a timer calling this function again and again.
            If SENSAPI fails, we fall back to the impl. based on a KB article: Q242558
            http://support.microsoft.com/default.aspx?scid=kb;en-us;242558
            </summary>
            <param name="currentProxy">The current proxy to be used.</param>
            <param name="forceFullTest">true to enforce a full connection state test</param>
            <returns>INetState</returns>
        </member>
        <member name="P:RssBandit.WinGui.Utility.Utils.VisualStylesEnabled">
            <summary>
            Returns whether Windows XP Visual Styles are currently enabled
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Utility.FinderSearchNodes.GetFinders(RssBandit.WinGui.Controls.TreeFeedsNodeBase)">
            <summary>
            Iterate recursivly to get all finders from the treenode collection(s)
            </summary>
            <param name="startNode"></param>
        </member>
        <member name="T:RssBandit.WinGui.Utility.RssFinder">
            <summary>
            Class get's serialized to persist defined searches.
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Utility.RssFinder.AnyAttr">
            <remarks/>
        </member>
        <member name="M:RssBandit.WinGui.Utility.RssFinder.NotifyCategoryChanged(System.String,System.String)">
            <summary>
            Call it on every change of a category name or deletion.
            </summary>
            <param name="oldCategoryPath">Old category name</param>
            <param name="newCategoryPath">New category name. If null, it is recognized as deleted</param>
        </member>
        <member name="M:RssBandit.WinGui.Utility.RssFinder.NotifyFeedUrlChanged(System.String,System.String)">
            <summary>
            Call it on every change of a feed Url or deletion.
            </summary>
            <param name="oldFeedUrl">Old feed Url</param>
            <param name="newFeedUrl">New feed Url. If null, it is recognized as deleted</param>
        </member>
        <member name="T:RssBandit.WinGui.Utility.RssFinder.SearchScopeResolveCallback">
            <summary>
            Called to resolve the array of category paths and
            feed Urls. The callback should return a array of feedsFeed, that contains
            the valid scope set. 
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.NewsHandlerState">
            <summary>
            The various states for the application.
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.GuiStateManager">
            <summary>
            Class used to manage the current state of the user interface.  
            For example, this indicates whether the application is currently 
            idle, refreshing one feed, refreshing all etc...  Also 
            handles connectivity state.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.GuiStateManager.MoveNewsHandlerStateTo(RssBandit.WinGui.NewsHandlerState)">
            <summary>
            Used to indicate that the application has 
            transitioned form one state to another.
            </summary>
            <param name="newState"></param>
        </member>
        <member name="M:RssBandit.WinGui.GuiStateManager.MoveInternetConnectionStateTo(RssBandit.INetState)">
            <summary>
            Moves the internet connection state to the specified new state.
            </summary>
            <param name="newState">State of the new.</param>
        </member>
        <member name="M:RssBandit.WinGui.GuiStateManager.#ctor">
            <summary>
            Creates a new <see cref="T:RssBandit.WinGui.GuiStateManager"/> instance.
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.GuiStateManager.NewsHandlerState">
            <summary>
            Gets the state of the news handler.
            </summary>
            <value></value>
        </member>
        <member name="P:RssBandit.WinGui.GuiStateManager.InternetAccessAllowed">
            <summary>
            Gets a value indicating whether internet access is allowed (i.e. 
            the user is connected and online).
            </summary>
            <value>
            	<c>true</c> if internet access allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:RssBandit.WinGui.GuiStateManager.InternetConnectionOffline">
            <summary>
            Gets a value indicating whether the internet connection is offline.
            </summary>
            <value>
            	<c>true</c> if internet connection is offline; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:RssBandit.WinGui.GuiStateManager.InternetConnectionState">
            <summary>
            Gets the state of the internet connection.
            </summary>
            <value></value>
        </member>
        <member name="T:RssBandit.WinGui.Forms.ImportFeedsDialog">
            <summary>
            Summary description for ImportFeedsDialog.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.ImportFeedsDialog.#ctor">
            <summary>
            Constructor is private because we always want the categories
            combo box to be filled
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.ImportFeedsDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.ImportFeedsDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Forms.AddSubscriptionWizard">
            <summary>
            AddSubscriptionWizard summerize and handles 
            all kind of subscriptions now:
              By URL (direct, and autodiscovered)
              By Search/Topic
              NNTP Groups
              Direct NNTP Group
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Forms.IWaitDialog">
            <summary>
            Detach wait thread dialog implementation. This interface allows
            other forms to act like the build in EntertainmentDialog.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.IWaitDialog.Initialize(System.Threading.AutoResetEvent,System.TimeSpan,System.Drawing.Icon)">
            <summary>
            Initialize the wait dialog states.
            </summary>
            <param name="waitHandle"></param>
            <param name="timeout"></param>
            <param name="dialogIcon"></param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.IWaitDialog.StartWaiting(System.Windows.Forms.IWin32Window,System.String,System.Boolean)">
            <summary>
            Starts the waiting for thread operation end.
            </summary>
            <param name="owner">Dialog owner</param>
            <param name="waitMessage">Thread operation message to display</param>
            <param name="allowCancel">indicates if the thread operation can be cancelled by the user/UI</param>
            <returns>On user cancel: any DialogResult except of DialogResult.OK, else DialogResult.OK</returns>
        </member>
        <member name="F:RssBandit.WinGui.Forms.AddSubscriptionWizard.Feed">
            <summary>
            The new subscription - feed, if not null it is ready to be subscribed.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.AddSubscriptionWizard.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.AddSubscriptionWizard.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.AddSubscriptionWizard.SetWizardTaskInfo(System.Int32,RssBandit.WinGui.Forms.AddSubscriptionWizard.WizardValidationTask,System.String)">
            <summary>
            Set the validation task info for one task
            </summary>
            <param name="index">Zero based.</param>
            <param name="task"></param>
            <param name="message"></param>
        </member>
        <member name="M:RssBandit.WinGui.Forms.AddSubscriptionWizard.ValidateFeedUri(System.String,System.Exception@)">
            <summary>
            Returns null, if invalid
            </summary>
            <param name="url"></param>
            <returns>valid Url or null</returns>
        </member>
        <member name="M:RssBandit.WinGui.Forms.AddSubscriptionWizard.FeedUrls(System.Int32)">
            <summary>
            Gets the indexed feed URL.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:RssBandit.WinGui.Forms.AddSubscriptionWizard.FeedTitles(System.Int32)">
            <summary>
            Gets the indexed feed title.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:RssBandit.WinGui.Forms.AddSubscriptionWizard.ProcessFeedUrl">
            <summary>
            Ensures the Feed URL is valid and is in the proper form if an NNTP URL
            </summary>		
        </member>
        <member name="P:RssBandit.WinGui.Forms.AddSubscriptionWizard.MultipleFeedsToSubscribe">
            <summary>
            Gets a value indicating whether multiple feeds available to subscribe or not.
            </summary>
            <value>
            	<c>true</c> if multiple feeds to subscribe; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:RssBandit.WinGui.Forms.AddSubscriptionWizard.MultipleFeedsToSubscribeCount">
            <summary>
            Gets the count of multiple feeds to subscribe.
            </summary>
            <value>int</value>
        </member>
        <member name="P:RssBandit.WinGui.Forms.AddSubscriptionWizard.FeedUrl">
            <summary>
            Gets or sets the feed URL.
            </summary>
            <value>The feed URL.</value>
        </member>
        <member name="P:RssBandit.WinGui.Forms.AddSubscriptionWizard.FeedCategory">
            <summary>
            Gets or sets the feed category.
            </summary>
            <value>The feed category.</value>
        </member>
        <member name="P:RssBandit.WinGui.Forms.AddSubscriptionWizard.FeedTitle">
            <summary>
            Gets or sets the feed title.
            </summary>
            <value>The feed title.</value>
        </member>
        <member name="P:RssBandit.WinGui.Forms.AddSubscriptionWizard.SearchTerms">
            <summary>
            Gets or sets the search terms.
            </summary>
            <value>The search terms.</value>
        </member>
        <member name="P:RssBandit.WinGui.Forms.AddSubscriptionWizard.FeedCredentialUser">
            <summary>
            Gets the feed credential user.
            </summary>
            <value>The feed credential user.</value>
        </member>
        <member name="P:RssBandit.WinGui.Forms.AddSubscriptionWizard.FeedCredentialPwd">
            <summary>
            Gets the feed credential PWD.
            </summary>
            <value>The feed credential PWD.</value>
        </member>
        <member name="P:RssBandit.WinGui.Forms.AddSubscriptionWizard.FeedStylesheet">
            <summary>
            Gets the feed stylesheet.
            </summary>
            <value>The feed stylesheet.</value>
        </member>
        <member name="P:RssBandit.WinGui.Forms.AddSubscriptionWizard.MaxItemAge">
            <summary>
            Gets or sets the max item age.
            </summary>
            <value>The max item age.</value>
        </member>
        <member name="P:RssBandit.WinGui.Forms.AddSubscriptionWizard.AlertEnabled">
            <summary>
            Gets a value indicating whether [alert enabled].
            </summary>
            <value><c>true</c> if [alert enabled]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RssBandit.WinGui.Forms.AddSubscriptionWizard.MarkItemsReadOnExit">
            <summary>
            Gets a value indicating whether to mark items read on exit.
            </summary>
            <value>
            	<c>true</c> if [mark items read on exit]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:RssBandit.WinGui.Forms.AddSubscriptionWizard.RefreshRate">
            <summary>
            Gets the refresh rate.
            </summary>
            <value>The refresh rate.</value>
        </member>
        <member name="F:RssBandit.WinGui.Forms.WizardMode.Default">
            <summary>
            Show all steps
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Forms.WizardMode.SubscribeURL">
            <summary>
            Feed URL steps
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Forms.WizardMode.SubscribeSearch">
            <summary>
            Search steps
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Forms.WizardMode.SubscribeNNTPGroup">
            <summary>
            NNTP Group steps
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Forms.WizardMode.SubscribeNNTPDirect">
            <summary>
            Like SubscribeNNTPGroup, but but ignores the pageHowToSelection
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Forms.WizardMode.SubscribeNNTPGroupDirect">
            <summary>
            Like SubscribeNNTPGroup, but did no go back from title/category step
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Forms.WizardMode.SubscribeURLDirect">
            <summary>
            Like SubscribeURL, but but ignores the pageHowToSelection
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Forms.WizardMode.SubscribeSearchDirect">
            <summary>
            Like SubscribeSearch, but but ignores the pageHowToSelection
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ThListView.ThreadedListViewItemCollection">
            <summary>
            Summary description for ThreadedListViewItemCollection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ThListView.ThreadedListViewItemCollection.Enumerator.#ctor(System.Windows.Forms.ThListView.ThreadedListViewItemCollection)">
            <summary>
            	Initializes a new instance of the <c>Enumerator</c> class.
            </summary>
            <param name="tc"></param>
        </member>
        <member name="M:System.Windows.Forms.ThListView.ThreadedListViewItemCollection.Enumerator.MoveNext">
            <summary>
            	Advances the enumerator to the next element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            	The collection was modified after the enumerator was created.
            </exception>
            <returns>
            	<c>true</c> if the enumerator was successfully advanced to the next element; 
            	<c>false</c> if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:System.Windows.Forms.ThListView.ThreadedListViewItemCollection.Enumerator.Reset">
            <summary>
            	Sets the enumerator to its initial position, before the first element in the collection.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ThListView.ThreadedListViewItemCollection.Enumerator.Current">
            <summary>
            	Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ThListView.ThreadedListViewItem">
            <summary>
            Summary description for ThreadedListViewItem.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ThListView.ThreadedListViewItem.SetSubItemImage(System.Int32,System.Int32)">
            <summary>
            Set an image for a sub-item column.
            </summary>
            <param name="subItemIndex">int. The sub-item index</param>
            <param name="imageIndex">int. The image index.</param>
        </member>
        <member name="M:System.Windows.Forms.ThListView.ThreadedListViewItem.ClearSubItemImage(System.Int32)">
            <summary>
            Reset/Clear an previously set sub-item image.
            </summary>
            <param name="subItemIndex">int. The sub-item index</param>
        </member>
        <member name="P:System.Windows.Forms.ThListView.ThreadedListViewItem.KeyPath">
            <summary>
            Works like the Path property of the TreeNode class, but returns
            an array of Key objects instead of a string with a path delimiter.
            </summary>
            <remarks>
            Example: an item with IndentLevel 1 will return an array with two object keys:
            <c>object[] {parent.Key, this.Key}</c>.
            </remarks>
        </member>
        <member name="P:System.Windows.Forms.ThListView.ThreadedListViewItem.IndentLevel">
            <summary>
            Get/Sets the indent level. Used to display related items as conversation threads.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ThListView.ThreadedListViewItem.OriginalIndex">
            <summary>
            Gets the original index (item creation order). 
            This usually does NOT start with an index of 0 (zero).
            Used to enable a sort by original creation order.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ThListView.ThreadedListViewItem.HasChilds">
            <summary>
            Sets or gets the info, if this item has or will be have childs.
            This decides about if any state image will be displayed.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ThListView.ThreadedListViewItem.IsComment">
            <summary>
            Indicates that the threaded listview item is a threaded comment. 
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ThListView.ThreadedListViewItem.Expanded">
            <summary>
            Sets or gets the item's Expanded state
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ThListView.ThreadedListViewItem.Collapsed">
            <summary>
            Sets or gets the item's Collapsed state.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ThListView.ThreadedListViewItemPlaceHolder">
            <summary>
            To be used as a placeholder for async. insertion of items.
            <see cref="P:System.Windows.Forms.ThListView.ThreadedListViewItemPlaceHolder.InsertionPointTicket">InsertionPointTicket</see> returns
            a unique indentifier for this item.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ThListView.ThreadedListViewItemPlaceHolder.InsertionPointTicket">
            <summary>
            Gets the unique insertion point ticket.
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.AutoDiscoveredFeedsMenuHandler">
            <summary>
            AutoDiscoveredFeedsMenuHandler manages the menu/tool dropdown list of 
            autodiscovered feeds for available HTML content.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.AutoDiscoveredFeedsMenuHandler.Reset">
            <summary>
            Resets the control. Should get called after Toolbar.LoadFromXml(), 
            because the items maintained dynamically.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.AutoDiscoveredFeedsMenuHandler.DiscoverFeedInContent(System.String,System.String,System.String)">
            <summary>
            Discover feeds in the provided content.
            </summary>
            <param name="htmlContent">string content to lookup</param>
            <param name="pageUrl">string Url of the content. Used to calculate relative link targets.</param>
            <param name="pageTitle">string Title of the content. Used as the menu entry Text on the managed dropdown control</param>
        </member>
        <member name="M:RssBandit.WinGui.AutoDiscoveredFeedsMenuHandler.Add(RssBandit.WinGui.DiscoveredFeedsInfo)">
            <summary>
            Will add a DiscoveredFeedsInfo entry to the managed tool dropdown.
            </summary>
            <param name="info">DiscoveredFeedsInfo instance</param>
        </member>
        <member name="M:RssBandit.WinGui.AutoDiscoveredFeedsMenuHandler.ThreadRun(System.Object)">
            <summary>
            Thread entry point
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:RssBandit.WinGui.AutoDiscoveredFeedsMenuHandler.AsyncDiscoverFeedsInContent(System.String,System.String,System.String)">
            <summary>
            Thread worker procedure.
            </summary>
            <param name="htmlContent"></param>
            <param name="pageUrl"></param>
            <param name="pageTitle"></param>
        </member>
        <member name="M:RssBandit.WinGui.AutoDiscoveredFeedsMenuHandler.RefreshDiscoveredItemContainer">
            <summary>
            Refresh the discovered feeds menu item container. It sync. automatically with the 
            main UI thread, if required.
            </summary>
        </member>
        <member name="E:RssBandit.WinGui.AutoDiscoveredFeedsMenuHandler.OnDiscoveredFeedsSubscribe">
            <summary>
            Gets fired, if a user click/select a discovered entry from the dropdown control.
            If you do not cancel the event via DiscoveredFeedsSubscribeCancelEventArgs Cancel property,
            this entry will be removed from the dropdown list.
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.AutoDiscoveredFeedsMenuHandler.AddAutoDiscoveredFeedCallback">
            <summary>
            Callback delegate used when adding an auto discovered feed to the toolbar
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.AutoDiscoveredFeedsMenuHandler.DiscoveredFeedsSubscribeCallback">
            <summary>
            Callback used for OnDiscoveredFeedsSubscribe event
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.AutoDiscoveredFeedsMenuHandler.CallbackState">
            <summary>
            Async. State container.
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.DiscoveredFeedsSubscribeCancelEventArgs">
            <summary>
            Used as a parameter on the
            AutoDiscoveredFeedsMenuHandler.DiscoveredFeedsSubscribeCallback delegate
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.DiscoveredFeedsInfo">
            <summary>
            Container class to store all the informations needed to describe autodiscovered feeds for a website.
            </summary>
        </member>
        <member name="T:RssBandit.CLR20.DasBlog.ConfigEditingService">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.DasBlog.ConfigEditingService.#ctor">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.DasBlog.ConfigEditingService.GetSiteConfig">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.DasBlog.ConfigEditingService.BeginGetSiteConfig(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.DasBlog.ConfigEditingService.EndGetSiteConfig(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.DasBlog.ConfigEditingService.GetSiteConfigAsync">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.DasBlog.ConfigEditingService.GetSiteConfigAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.DasBlog.ConfigEditingService.UpdateSiteConfig(RssBandit.CLR20.DasBlog.SiteConfig)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.DasBlog.ConfigEditingService.BeginUpdateSiteConfig(RssBandit.CLR20.DasBlog.SiteConfig,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.DasBlog.ConfigEditingService.EndUpdateSiteConfig(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.DasBlog.ConfigEditingService.UpdateSiteConfigAsync(RssBandit.CLR20.DasBlog.SiteConfig)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.DasBlog.ConfigEditingService.UpdateSiteConfigAsync(RssBandit.CLR20.DasBlog.SiteConfig,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.DasBlog.ConfigEditingService.EnumBlogrolls">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.DasBlog.ConfigEditingService.BeginEnumBlogrolls(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.DasBlog.ConfigEditingService.EndEnumBlogrolls(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.DasBlog.ConfigEditingService.EnumBlogrollsAsync">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.DasBlog.ConfigEditingService.EnumBlogrollsAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.DasBlog.ConfigEditingService.GetBlogroll(System.String)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.DasBlog.ConfigEditingService.BeginGetBlogroll(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.DasBlog.ConfigEditingService.EndGetBlogroll(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.DasBlog.ConfigEditingService.GetBlogrollAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.DasBlog.ConfigEditingService.GetBlogrollAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.DasBlog.ConfigEditingService.PostBlogroll(System.String,System.Xml.XmlElement)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.DasBlog.ConfigEditingService.BeginPostBlogroll(System.String,System.Xml.XmlElement,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.DasBlog.ConfigEditingService.EndPostBlogroll(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.DasBlog.ConfigEditingService.PostBlogrollAsync(System.String,System.Xml.XmlElement)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.DasBlog.ConfigEditingService.PostBlogrollAsync(System.String,System.Xml.XmlElement,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.DasBlog.ConfigEditingService.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:RssBandit.CLR20.DasBlog.ConfigEditingService.GetSiteConfigCompleted">
            <remarks/>
        </member>
        <member name="E:RssBandit.CLR20.DasBlog.ConfigEditingService.UpdateSiteConfigCompleted">
            <remarks/>
        </member>
        <member name="E:RssBandit.CLR20.DasBlog.ConfigEditingService.EnumBlogrollsCompleted">
            <remarks/>
        </member>
        <member name="E:RssBandit.CLR20.DasBlog.ConfigEditingService.GetBlogrollCompleted">
            <remarks/>
        </member>
        <member name="E:RssBandit.CLR20.DasBlog.ConfigEditingService.PostBlogrollCompleted">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.DasBlog.authenticationHeader">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.authenticationHeader.userName">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.authenticationHeader.password">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.DasBlog.PingService">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.PingService.Endpoint">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.PingService.Name">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.PingService.Url">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.PingService.PingApi">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.DasBlog.PingApiType">
            <remarks/>
        </member>
        <member name="F:RssBandit.CLR20.DasBlog.PingApiType.Basic">
            <remarks/>
        </member>
        <member name="F:RssBandit.CLR20.DasBlog.PingApiType.Extended">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.DasBlog.CrosspostSite">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.CrosspostSite.Any">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.CrosspostSite.allblognames">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.CrosspostSite.profileName">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.CrosspostSite.hostName">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.CrosspostSite.port">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.CrosspostSite.endpoint">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.CrosspostSite.username">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.CrosspostSite.password">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.CrosspostSite.blogid">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.CrosspostSite.blogname">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.CrosspostSite.apitype">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.CrosspostSite.AnyAttr">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.DasBlog.ContentFilter">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.ContentFilter.Any">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.ContentFilter.find">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.ContentFilter.replace">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.ContentFilter.isregex">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.ContentFilter.AnyAttr">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.DasBlog.SiteConfig">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.Any">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.Title">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.Subtitle">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.Theme">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.Description">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.Contact">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.Root">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.Copyright">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.RssDayCount">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.RssMainEntryCount">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.RssEntryCount">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.EnableRssItemFooters">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.RssItemFooter">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.FrontPageDayCount">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.FrontPageEntryCount">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.CategoryAllEntries">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.FrontPageCategory">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.AlwaysIncludeContentInRSS">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.EntryTitleAsLink">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.NotifyWebLogsDotCom">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.NotifyBloGs">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.ObfuscateEmail">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.NotificationEMailAddress">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.SendCommentsByEmail">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.SendReferralsByEmail">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.SendTrackbacksByEmail">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.SendPingbacksByEmail">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.SendPostsByEmail">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.EnableBloggerApi">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.EnableComments">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.EnableCommentApi">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.EnableConfigEditService">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.EnableEditService">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.EnableAutoPingback">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.ShowCommentCount">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.EnableTrackbackService">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.EnablePingbackService">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.EnableStartPageCaching">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.EnableBlogrollDescription">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.EnableUrlRewriting">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.EnableFtb">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.EnableCrossposts">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.UseUserCulture">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.ShowItemDescriptionInAggregatedViews">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.EnableClickThrough">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.EnableAggregatorBugging">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.DisplayTimeZoneIndex">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.AdjustDisplayTimeZone">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.EditPassword">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.ContentDir">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.LogDir">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.BinariesDir">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.SmtpServer">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.EnablePop3">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.Pop3Server">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.Pop3Username">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.Pop3Password">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.Pop3SubjectPrefix">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.Pop3Interval">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.Pop3InlineAttachedPictures">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.Pop3InlinedAttachedPicturesThumbHeight">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.ApplyContentFiltersToWeb">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.ApplyContentFiltersToRSS">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.EnableXSSUpstream">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.XSSUpstreamEndpoint">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.XSSUpstreamUsername">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.XSSUpstreamPassword">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.XSSRSSFilename">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.XSSUpstreamInterval">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.ContentFilters">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.CrosspostSites">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.Pop3DeleteAllMessages">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.Pop3LogIgnoredEmails">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.EnableReferralUrlBlackList">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.ReferralUrlBlackList">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.EnableCaptcha">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.EnableReferralUrlBlackList404s">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.EnableMovableTypeBlackList">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.ChannelImageUrl">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.EnableCrossPostFooter">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.CrossPostFooter">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.EnableTitlePermaLink">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.EnableTitlePermaLinkUnique">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.EnableTitlePermaLinkSpaces">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.EncryptLoginPassword">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.EnableSmtpAuthentication">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.SmtpUserName">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.SmtpPassword">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.RssLanguage">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.EnableSearchHighlight">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.EnableEntryReferrals">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.PingServices">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.FeedBurnerName">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.SiteConfig.AnyAttr">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.DasBlog.GetSiteConfigCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.DasBlog.GetSiteConfigCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.GetSiteConfigCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.DasBlog.UpdateSiteConfigCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.DasBlog.EnumBlogrollsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.DasBlog.EnumBlogrollsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.EnumBlogrollsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.DasBlog.GetBlogrollCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.DasBlog.GetBlogrollCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.DasBlog.GetBlogrollCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.DasBlog.PostBlogrollCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services.LocationWebService">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services.LocationWebService.#ctor">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services.LocationWebService.GetLocations">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services.LocationWebService.BeginGetLocations(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services.LocationWebService.EndGetLocations(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services.LocationWebService.GetLocationsAsync">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services.LocationWebService.GetLocationsAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services.LocationWebService.CreateLocation(System.String,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services.LocationWebService.BeginCreateLocation(System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services.LocationWebService.EndCreateLocation(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services.LocationWebService.CreateLocationAsync(System.String,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services.LocationWebService.CreateLocationAsync(System.String,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services.LocationWebService.DeleteLocation(System.Int32)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services.LocationWebService.BeginDeleteLocation(System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services.LocationWebService.EndDeleteLocation(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services.LocationWebService.DeleteLocationAsync(System.Int32)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services.LocationWebService.DeleteLocationAsync(System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services.LocationWebService.Update(RssBandit.CLR20.com.newsgator.services.Location)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services.LocationWebService.BeginUpdate(RssBandit.CLR20.com.newsgator.services.Location,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services.LocationWebService.EndUpdate(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services.LocationWebService.UpdateAsync(RssBandit.CLR20.com.newsgator.services.Location)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services.LocationWebService.UpdateAsync(RssBandit.CLR20.com.newsgator.services.Location,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services.LocationWebService.GetUnreadCount(System.String)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services.LocationWebService.BeginGetUnreadCount(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services.LocationWebService.EndGetUnreadCount(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services.LocationWebService.GetUnreadCountAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services.LocationWebService.GetUnreadCountAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services.LocationWebService.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:RssBandit.CLR20.com.newsgator.services.LocationWebService.GetLocationsCompleted">
            <remarks/>
        </member>
        <member name="E:RssBandit.CLR20.com.newsgator.services.LocationWebService.CreateLocationCompleted">
            <remarks/>
        </member>
        <member name="E:RssBandit.CLR20.com.newsgator.services.LocationWebService.DeleteLocationCompleted">
            <remarks/>
        </member>
        <member name="E:RssBandit.CLR20.com.newsgator.services.LocationWebService.UpdateCompleted">
            <remarks/>
        </member>
        <member name="E:RssBandit.CLR20.com.newsgator.services.LocationWebService.GetUnreadCountCompleted">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services.NGAPIToken">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services.NGAPIToken.Token">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services.Location">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services.Location.id">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services.Location.name">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services.Location.contentOnline">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services.Location.autoAddSubs">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services.GetLocationsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services.GetLocationsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services.GetLocationsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services.CreateLocationCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services.CreateLocationCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services.CreateLocationCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services.DeleteLocationCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services.UpdateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services.GetUnreadCountCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services.GetUnreadCountCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services.GetUnreadCountCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:RssBandit.Common.Logging.Log">
            <summary>
             Wrapper around Log4Net.
             For configuration options have a look to http://logging.apache.org/log4net/release/manual/configuration.html.
             For configuration examples have a look to http://logging.apache.org/log4net/release/config-examples.html.
            </summary>
        </member>
        <member name="M:RssBandit.Common.Logging.Log.#cctor">
            <summary>
            statick initializer
            </summary>
        </member>
        <member name="M:RssBandit.Common.Logging.Log.Error(System.String,System.Exception)">
            <summary>
            Log an error. If you don't want to use your own ILog variable returned by
            <see cref="M:RssBandit.Common.Logging.Log.GetLogger(System.Type)">GetLogger</see>, you can call this method.
            </summary>
            <param name="message">Message</param>
            <param name="exception">Exception</param>
            <remarks>The class information included always refer to <c>Common.Logging</c>.</remarks>
        </member>
        <member name="M:RssBandit.Common.Logging.Log.Error(System.String)">
            <summary>
            Log an error. If you don't want to use your own ILog variable returned by
            <see cref="M:RssBandit.Common.Logging.Log.GetLogger(System.Type)">GetLogger</see>, you can call this method.
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="M:RssBandit.Common.Logging.Log.Warning(System.String,System.Exception)">
            <summary>
            Log a warning. If you don't want to use your own ILog variable returned by
            <see cref="M:RssBandit.Common.Logging.Log.GetLogger(System.Type)">GetLogger</see>, you can call this method.
            </summary>
            <param name="message">Message</param>
            <param name="exception">Exception</param>
        </member>
        <member name="M:RssBandit.Common.Logging.Log.Warning(System.String)">
            <summary>
            Log a warning. If you don't want to use your own ILog variable returned by
            <see cref="M:RssBandit.Common.Logging.Log.GetLogger(System.Type)">GetLogger</see>, you can call this method.
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="M:RssBandit.Common.Logging.Log.Fatal(System.String,System.Exception)">
            <summary>
            Log a fatal error. If you don't want to use your own ILog variable returned by
            <see cref="M:RssBandit.Common.Logging.Log.GetLogger(System.Type)">GetLogger</see>, you can call this method.
            </summary>
            <param name="message"> Message</param>
            <param name="exception">Exception</param>
        </member>
        <member name="M:RssBandit.Common.Logging.Log.Fatal(System.String)">
            <summary>
            Log a fatal error. If you don't want to use your own ILog variable returned by
            <see cref="M:RssBandit.Common.Logging.Log.GetLogger(System.Type)">GetLogger</see>, you can call this method.
            </summary>
            <param name="message">Message </param>
        </member>
        <member name="M:RssBandit.Common.Logging.Log.Info(System.String,System.Exception)">
            <summary>
            Log an info error. If you don't want to use your own ILog variable returned by
            <see cref="M:RssBandit.Common.Logging.Log.GetLogger(System.Type)">GetLogger</see>, you can call this method.
            </summary>
            <param name="message">Message</param>
            <param name="exception">Exception</param>
        </member>
        <member name="M:RssBandit.Common.Logging.Log.Info(System.String)">
            <summary>
             Log a info message. If you don't want to use your own ILog variable returned by
            <see cref="M:RssBandit.Common.Logging.Log.GetLogger(System.Type)">GetLogger</see>, you can call this method.
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="M:RssBandit.Common.Logging.Log.Trace(System.String)">
            <summary>
             Log a trace message. If you don't want to use your own ILog variable returned by
            <see cref="M:RssBandit.Common.Logging.Log.GetLogger(System.Type)">GetLogger</see>, you can call this method.
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="M:RssBandit.Common.Logging.Log.Trace(System.String,System.Exception)">
            <summary>
             Log a trace message. If you don't want to use your own ILog variable returned by
            <see cref="M:RssBandit.Common.Logging.Log.GetLogger(System.Type)">GetLogger</see>, you can call this method.
            </summary>
            <param name="message">Message</param>
            <param name="exception">Exception to trace</param>
        </member>
        <member name="M:RssBandit.Common.Logging.Log.Debug(System.String,System.Exception)">
            <summary>
            Log an debug error. If you don't want to use your own ILog variable returned by
            <see cref="M:RssBandit.Common.Logging.Log.GetLogger(System.Type)">GetLogger</see>, you can call this method.
            </summary>
            <param name="message">Message</param>
            <param name="exception">Exception</param>
        </member>
        <member name="M:RssBandit.Common.Logging.Log.Debug(System.String)">
            <summary>
             Log a debug message. If you don't want to use your own ILog variable returned by
            <see cref="M:RssBandit.Common.Logging.Log.GetLogger(System.Type)">GetLogger</see>, you can call this method.
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="M:RssBandit.Common.Logging.Log.GetLogger(System.Type)">
            <summary>
             If you want to use your own ILog variable in your class, initialize
             them with a instance returned by this method.
            </summary>
            <param name="type">System.Type</param>
            <returns>Instance of a logger impl. ILog</returns>
        </member>
        <member name="P:RssBandit.Common.Logging.Log.Log4NetConfigFile">
            <summary>
             The Full Path to the Config File
            </summary>
        </member>
        <member name="T:RssBandit.Xml.RssBanditNamespace">
            <summary>
            Provides public constants for wellknown XML namespaces.
            </summary>
        </member>
        <member name="F:RssBandit.Xml.RssBanditNamespace.BrowserTabState">
            <summary>
            Namespace for BrowserTabState XML serialization
            </summary>
        </member>
        <member name="F:RssBandit.Xml.RssBanditNamespace.TreeState">
            <summary>
            Namespace for treeState XML serialization
            </summary>
        </member>
        <member name="F:RssBandit.Xml.RssBanditNamespace.SearchConfiguration">
            <summary>
            Namespace for Search Engine Configuration XML serialization
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.PrefetchFeedThreadHandler">
            <summary>
            Thread handler for Prefetching a Feed to discover some properties
            without subscribing.
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Forms.EntertainmentDialog">
            <summary>
            EntertainmentDialog used by EntertainmentThreadHandlerBase
            inherited classes.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.EntertainmentDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.EntertainmentDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.EntertainmentDialog.timer_Tick(System.Object,System.EventArgs)">
            <summary>
            Runs every 100 msecs
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:RssBandit.WinGui.Controls.VerticalHeaderLabel">
            <summary>
            Summary description for VerticalHeaderLabel.
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Controls.VerticalHeaderLabel.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Controls.VerticalHeaderLabel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Controls.VerticalHeaderLabel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Controls.VerticalHeaderLabel.OnImageClick">
            <summary>
            Called when the image was clicked and raises the ImageClick event (if set).
            </summary>
        </member>
        <member name="E:RssBandit.WinGui.Controls.VerticalHeaderLabel.ImageClick">
            <summary>
            Raised, if an image is assigned and the mouse click happens over them.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Controls.TreeHelper.CreateCategoryHive(RssBandit.WinGui.Controls.TreeFeedsNodeBase,System.String,System.Windows.Forms.ContextMenu)">
            <summary>
            Traverse down the tree on the path defined by 'category' 
            starting with 'startNode' and create nodes of type FeedNodeType.Category.
            </summary>
            <param name="startNode">FeedTreeNodeBase to start with</param>
            <param name="category">A category path, e.g. 'Category1\SubCategory1'.</param>
            <param name="contextMenu">Category Node context Menu</param>
            <returns>The top category node.</returns>
            <remarks>If one category in the path is not found, it will be created.</remarks>
        </member>
        <member name="M:RssBandit.WinGui.Controls.TreeHelper.CreateCategoryHive(RssBandit.WinGui.Controls.TreeFeedsNodeBase,System.String,System.Windows.Forms.ContextMenu,RssBandit.WinGui.Interfaces.FeedNodeType)">
            <summary>
            Traverse down the tree on the path defined by 'category' 
            starting with 'startNode'.
            </summary>
            <param name="startNode">FeedTreeNodeBase to start with</param>
            <param name="category">A category path, e.g. 'Category1\SubCategory1'.</param>
            <param name="contextMenu">Category Node context Menu</param>
            <param name="categoryNodeType">FeedNodeType (should be one of the category types)</param>
            <returns>The top category node.</returns>
            <remarks>If one category in the path is not found, it will be created.</remarks>
        </member>
        <member name="M:RssBandit.WinGui.Controls.TreeHelper.FindChildNode(RssBandit.WinGui.Controls.TreeFeedsNodeBase,System.String,RssBandit.WinGui.Interfaces.FeedNodeType)">
            <summary>
            Find a direct child node.
            </summary>
            <param name="n"></param>
            <param name="text"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:RssBandit.WinGui.Controls.TreeHelper.IsChildNode(RssBandit.WinGui.Controls.TreeFeedsNodeBase,RssBandit.WinGui.Controls.TreeFeedsNodeBase)">
            <summary>
            Determines whether nodeToTest is a child node of the specified parent.
            </summary>
            <param name="parent">The parent.</param>
            <param name="nodeToTest">The node to test.</param>
            <returns>
            	<c>true</c> if [is child node] [the specified parent]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:RssBandit.WinGui.Controls.TreeHelper.FindNode(RssBandit.WinGui.Controls.TreeFeedsNodeBase,NewsComponents.NewsItem)">
            <summary>
            A helper method that locates the tree node containing the feed 
            that an NewsItem object belongs to. 
            </summary>
            <param name="item">The RSS item</param>
            <returns>The tree node this object belongs to or null if 
            it can't be found</returns>
        </member>
        <member name="M:RssBandit.WinGui.Controls.TreeHelper.FindNode(RssBandit.WinGui.Controls.TreeFeedsNodeBase,NewsComponents.Feed.feedsFeed)">
            <summary>
            Overloaded helper method that locates the tree node containing the feed. 
            </summary>
            <param name="f">The FeedsFeed</param>
            <returns>The tree node this object belongs to or null if 
            it can't be found</returns>
        </member>
        <member name="M:RssBandit.WinGui.Controls.TreeHelper.FindNode(RssBandit.WinGui.Controls.TreeFeedsNodeBase,System.String)">
            <summary>
            Overloaded helper method that locates the tree node containing the feed. 
            </summary>
            <param name="feedUrl">The Feed Url</param>
            <returns>The tree node this object belongs to or null if 
            it can't be found</returns>
        </member>
        <member name="M:RssBandit.WinGui.Controls.TreeHelper.GetNewNodeToActivate(RssBandit.WinGui.Controls.TreeFeedsNodeBase)">
            <summary>
            Gets the new node to activate. We assume, the current node
            provided is about to be removed/set invisible.
            </summary>
            <param name="current">The current node.</param>
            <returns></returns>
            <remarks>Used algorithm:
            We try to select the next sibling of current node. If there is no one,
            we take the previous sibling. If there is again no one, we take the parent
            node of current. If we are at root, and there is no parent, we
            return the next visible node of the current.</remarks>
        </member>
        <member name="M:RssBandit.WinGui.Controls.TreeHelper.ConvertToDefaultableBoolean(System.Boolean)">
            <summary>
            Converts to defaultable boolean.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
            <returns></returns>
        </member>
        <member name="M:RssBandit.WinGui.Controls.TreeHelper.ConvertToSortType(System.Windows.Forms.SortOrder)">
            <summary>
            Converts the sort enums.
            </summary>
            <param name="sortOrder">The sort order.</param>
            <returns></returns>
        </member>
        <member name="M:RssBandit.WinGui.Controls.TreeHelper.CopyNodes(RssBandit.WinGui.Controls.TreeFeedsNodeBase[],System.Windows.Forms.TreeView,System.Boolean)">
            <summary>
            Copies the nodes of different treeview controls.
            Source are UltraTreeNodes (UltraTreeView), destination is
            the common MS TreeView.
            </summary>
            <param name="nodes">The nodes.</param>
            <param name="destinationTree">The destination tree.</param>
            <param name="isChecked">if set to <c>true</c> [is checked].</param>
        </member>
        <member name="M:RssBandit.WinGui.Controls.TreeHelper.CopyNodes(RssBandit.WinGui.Controls.TreeFeedsNodeBase,System.Windows.Forms.TreeView,System.Boolean)">
            <summary>
            Copies the nodes to the destination treeview control.
            </summary>
            <param name="node">The node.</param>
            <param name="destinationTree">The destination tree.</param>
            <param name="isChecked">if set to <c>true</c> [is checked].</param>
        </member>
        <member name="M:RssBandit.WinGui.Controls.TreeHelper.GetCheckedNodes(System.Windows.Forms.TreeNode,System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            We assume: leave nodes are nodes with a Tag != null.
            </summary>
            <param name="startNode"></param>
            <param name="folders"></param>
            <param name="leaveNodes"></param>
        </member>
        <member name="M:RssBandit.WinGui.Controls.TreeHelper.GetCheckedNodes(System.Windows.Forms.TreeNode,System.Collections.ArrayList)">
            <summary>
            Fills the checkedNodes list with all nodes that are checked.
            </summary>
            <param name="startNode"></param>
            <param name="checkedNodes">List will be filled with nodes that are checked</param>
        </member>
        <member name="M:RssBandit.WinGui.Controls.TreeHelper.SetCheckedNodes(System.Windows.Forms.TreeNode,System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            We assume: leave nodes are nodes with a Tag != null.
            </summary>
            <param name="startNode"></param>
            <param name="folders"></param>
            <param name="leaveNodeTags"></param>
        </member>
        <member name="M:RssBandit.WinGui.Controls.TreeHelper.BuildCategoryStoreName(System.Windows.Forms.TreeNode)">
            <summary>
            Helper that builds the full path trimmed category name (without root caption)
            </summary>
            <param name="theNode">a TreeNode</param>
            <returns>Category name in this form: 
            'Main Category\Sub Category\...\catNode Category' without the root node caption.
            </returns>
        </member>
        <member name="M:RssBandit.WinGui.Controls.TreeHelper.BuildCategoryStoreName(System.String)">
            <summary>
            Helper that builds the full path trimmed category name (without root caption)
            </summary>
            <param name="fullPathName">The full Path Name of a TreeNode</param>
            <returns>Category name in this form: 
            'Main Category\Sub Category\...\catNode Category' without the root node caption.
            </returns>
        </member>
        <member name="M:RssBandit.WinGui.Controls.TreeHelper.BuildCategoryStoreNameArray(System.String,System.Boolean)">
            <summary>
            Helper that builds the full path trimmed category name (without root caption)
            </summary>
            <param name="fullPathName">The full Path Name of a TreeNode</param>
            <param name="ignoreLeaveNode">if set to <c>true</c>, the leave node name is ignored.</param>
            <returns>
            If input (fullPathName) was:
            'Root\Main Category\Sub Category\...\catNode Category\LeaveNode Name'
            It returns in case ignoreLeaveNode was <c>false</c>:
            'Main Category\Sub Category\...\catNode Category\LeaveNode Name' without the root node caption.
            If ignoreLeaveNode is set to <c>true</c>, the result will be:
            'Main Category\Sub Category\...\catNode Category' without the root node caption
            and LeaveNode caption.
            </returns>
        </member>
        <member name="T:RssBandit.WinGui.Controls.TreeFeedsNodeUIElementCreationFilter">
            <summary> 
            Users of Infragistics controls normally don't need an understanding of how UIElements are implemented and most
            often have no need for using a UIElement creation filter. This advanced extensibility mechanism is exposed for
            developers who want to modify, add to and/or replace the UIElements of a control. 
            
            All controls that are based on the PLF (Presentation Layer Framework) expose a UIElement creation/positioning
            extensibility mechanism. To customize the size and/or location of UIElements or to add or replace one or more
            UIElements of a control you need to implement the IUIElementCreationFilter interface on an object and set the
            CreationFilter property of the control to that object at runtime.
            
            IUIElementCreationFilter contains two methods: BeforeCreateChildElements and AfterCreateChildElements.
            The BeforeCreateChildElements method is called for each UIElement just after it's created. After this, the
            UIElement will, if appropriate create other "child" UIElements. After a "parent" has finished creating all of
            its child UIElements, the AfterCreateChildElements method is called.
            
            We use the creation filter to extend the NodeSelectableArea to get teh unread count
            visualization included.
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Controls.TreeFeedsNodeUIElementCreationFilter.cachedGraphics">
            <summary>
            Used only to measure strings
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Controls.TreeFeedsNodeUIElementCreationFilter.Infragistics#Win#IUIElementCreationFilter#BeforeCreateChildElements(Infragistics.Win.UIElement)">
            <summary>
            BeforeCreateChildElements - called from inside the VerifyChildElements method if the child elements were
            marked dirty. This is called before PositionChildElements. Returning true from this method indicates that
            the default creation logic should be bypassed and PositionChildElements will not be called. 
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Controls.TreeFeedsNodeUIElementCreationFilter.Infragistics#Win#IUIElementCreationFilter#AfterCreateChildElements(Infragistics.Win.UIElement)">
            <summary>
            AfterCreateChildElements - Called after a "parent" has finished creating all of its child UIElements
            and PositionChildElements has been called called.  
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Controls.UltraTreeNodeExpansionMemento">
            <summary>
            Class to store and restore UltraTree nodes expansion states
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Controls.UltraTreeNodeExpansionMemento.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RssBandit.WinGui.Controls.UltraTreeNodeExpansionMemento"/> class.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Controls.UltraTreeNodeExpansionMemento.#ctor(Infragistics.Win.UltraWinTree.UltraTree)">
            <summary>
            Initializes a new instance of the <see cref="T:RssBandit.WinGui.Controls.UltraTreeNodeExpansionMemento"/> class
            and store the nodes expansion states.
            </summary>
            <param name="tree">The tree.</param>
        </member>
        <member name="M:RssBandit.WinGui.Controls.UltraTreeNodeExpansionMemento.#ctor(RssBandit.WinGui.Controls.TreeFeedsNodeBase)">
            <summary>
            Initializes a new instance of the <see cref="T:RssBandit.WinGui.Controls.UltraTreeNodeExpansionMemento"/> class
            and store the nodes expansion states.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:RssBandit.WinGui.Controls.UltraTreeNodeExpansionMemento.Restore(Infragistics.Win.UltraWinTree.UltraTree)">
            <summary>
            Restores the specified tree node expansion states.
            </summary>
            <param name="tree">The tree.</param>
        </member>
        <member name="M:RssBandit.WinGui.Controls.UltraTreeNodeExpansionMemento.Restore(RssBandit.WinGui.Controls.TreeFeedsNodeBase)">
            <summary>
            Restores the specified tree node expansion states.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:RssBandit.WinGui.Controls.UltraTreeNodeExpansionMemento.Save(System.IO.Stream,Infragistics.Win.UltraWinTree.UltraTree)">
            <summary>
            Saves the UltraTreeNodeExpansionMemento instance to specified stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:RssBandit.WinGui.Controls.UltraTreeNodeExpansionMemento.Load(System.IO.Stream)">
            <summary>
            Loads the UltraTreeNodeExpansionMemento from specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns></returns>
        </member>
        <member name="M:RssBandit.WinGui.Controls.UltraTreeNodeExpansionMemento.AddNodesRecursive(RssBandit.WinGui.Controls.TreeFeedsNodeBase,System.Collections.IList)">
            <summary>
            Adds the expanded nodes recursive.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:RssBandit.WinGui.Controls.UltraTreeNodeExpansionMemento.ExpandNodesRecursive(RssBandit.WinGui.Controls.TreeFeedsNodeBase,System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Expands the nodes recursive.
            </summary>
            <param name="node">The node.</param>
            <param name="expanded">The expanded.</param>
        </member>
        <member name="T:RssBandit.WinGui.Controls.NodeInfoManager">
            <summary>
            Not in yet in use, but shows a way to dynamically
            create bitmaps and append that as additional infos to
            the node's RightImages collection. 
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Controls.NodeInfoManager.cachedGraphics">
            <summary>
            Used only to measure strings
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Controls.NodeInfoManager.UpdateUnreadInfo(RssBandit.WinGui.Controls.TreeFeedsNodeBase)">
            <summary>
            Updates the unread info. This seems to be the only
            workaround to get the unread counter display area included
            in the mouse sensitive/clickable/selectable range.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="T:RssBandit.WinGui.Controls.OptionSectionPanel">
            <summary>
            OptionSectionPanel mimics the option panels of Outlook 2003
            (Caption text, a line on the right and optional an image left below).
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Controls.OptionSectionPanel.#ctor">
            <summary>
            Initializer.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Controls.OptionSectionPanel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Controls.OptionSectionPanel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Controls.OptionSectionPanel.Image">
            <summary>
            Set/Get the image to be displayed for this option
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Controls.OptionSectionPanel.Text">
            <summary>
            Set/Get the section caption text
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Controls.OptionSectionPanel.ImageLocation">
            <summary>
            Set/Get the Image Location.
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Menus.AppContextMenuCommand">
            <summary>
            Colleage base Menu class, that is controlled by and talks to the mediator
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Menus.AppContextMenuCommand.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Menus.AppContextMenuCommand.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Menus.AppContextMenuCommand.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.AutoDiscoverFeedsThreadHandler">
            <summary>
            Thread handler for AddSubscriptionWizard.
            </summary>
        </member>
        <member name="T:RssBandit.ThreadWorkerProgressArgs">
            <summary>
            ThreadWorkerProgressArgs class transport the ThreadWorker progress arguments
            to the callee. 
            </summary>
        </member>
        <member name="F:RssBandit.ThreadWorkerProgressArgs.TaskID">
            <summary>
            Task ID that is currently in progress
            </summary>
        </member>
        <member name="F:RssBandit.ThreadWorkerProgressArgs.Exception">
            <summary>
            The exception (if any) while processing.
            </summary>
        </member>
        <member name="F:RssBandit.ThreadWorkerProgressArgs.MaxProgress">
            <summary>
            Maximum number of sub-tasks of a thread task.
            </summary>
        </member>
        <member name="F:RssBandit.ThreadWorkerProgressArgs.CurrentProgress">
            <summary>
            Current index of sub-tasks of a thread task.
            </summary>
        </member>
        <member name="F:RssBandit.ThreadWorkerProgressArgs.Done">
            <summary>
            Is true, if the task finish.
            </summary>
        </member>
        <member name="F:RssBandit.ThreadWorkerProgressArgs.Result">
            <summary>
            The result container.
            </summary>
        </member>
        <member name="M:RssBandit.ThreadWorkerProgressArgs.#ctor(System.Enum,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:RssBandit.ThreadWorkerProgressArgs"/> class.
            </summary>
            <param name="taskID">The task ID.</param>
            <param name="total">The total.</param>
            <param name="current">The current.</param>
        </member>
        <member name="M:RssBandit.ThreadWorkerProgressArgs.#ctor(System.Enum,System.Int32,System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:RssBandit.ThreadWorkerProgressArgs"/> class.
            </summary>
            <param name="taskID">The task ID.</param>
            <param name="total">The total.</param>
            <param name="current">The current.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:RssBandit.ThreadWorkerProgressArgs.#ctor(System.Enum,System.Int32,System.Int32,System.Exception,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:RssBandit.ThreadWorkerProgressArgs"/> class.
            </summary>
            <param name="taskID">The task ID.</param>
            <param name="total">The total.</param>
            <param name="current">The current.</param>
            <param name="exception">The exception.</param>
            <param name="done">if set to <c>true</c> the thread has finished the work.</param>
            <param name="result">The result.</param>
        </member>
        <member name="T:RssBandit.ThreadWorkerProgressHandler">
            <summary>
            The callback routine using the ShowProgressArgs class
            </summary>
        </member>
        <member name="T:RssBandit.BackgroundTaskRunningArgs">
            <summary>
            BackgroundTaskRunningArgs class transport the ThreadWorker current state as arguments
            to the subscriber. If you set Cancel to true, ALL background tasks are cancelled!
            </summary>
        </member>
        <member name="T:RssBandit.BackgroundTaskRunningHandler">
            <summary>
            The callback routine using the BackgroundTaskRunningArgs class
            </summary>
        </member>
        <member name="T:RssBandit.Filter.NewsItemFilterManager">
            <summary>
            Summary description for NewsItemFilterManager.
            </summary>
        </member>
        <member name="M:RssBandit.Filter.NewsItemFilterManager.Add(System.Object,RssBandit.WinGui.Interfaces.INewsItemFilter)">
            <summary>
            Add a new filter to the internal collection. If the filter exists,
            it will be replaced by the new one.
            </summary>
            <param name="key">Filter Identifier</param>
            <param name="newFilter">A INewsItemFilter instance</param>
            <returns>The INewsItemFilter instance</returns>
        </member>
        <member name="M:RssBandit.Filter.NewsItemFilterManager.Remove(System.Object)">
            <summary>
            Removes a filter from the internal collection.
            </summary>
            <param name="key">Filter identifier</param>
        </member>
        <member name="M:RssBandit.Filter.NewsItemFilterManager.Apply(System.Windows.Forms.ThListView.ThreadedListViewItem)">
            <summary>
            Apply all filters to the specified NewsItem.
            </summary>
            <param name="item">The NewsItem instance</param>
        </member>
        <member name="M:RssBandit.Filter.NewsItemFilterManager.Apply(System.Object,NewsComponents.NewsItem)">
            <summary>
            Apply a specific filter to the specified NewsItem.
            </summary>
            <param name="item">The NewsItem instance</param>
        </member>
        <member name="E:RssBandit.Filter.NewsItemFilterManager.FilterMatch">
            <summary>
            Can be used to refresh Gui state. Called, if any filter criteria match
            </summary>
        </member>
        <member name="P:RssBandit.Filter.NewsItemFilterManager.Item(System.Object)">
            <summary>
            Indexer: Sets/Get a INewsItemFilter
            </summary>
        </member>
        <member name="M:RssBandit.Filter.NewsItemReferrerFilter.OnFeedlistLoaded(System.Object,System.EventArgs)">
            <summary>
            Used to init. Identities are stored in the feedlist, so we need
            that to init.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:RssBandit.Filter.NewsItemReferrerFilter.OnPreferencesChanged(System.Object,System.EventArgs)">
            <summary>
            When the user changes any preferences, this method is called to 
            make sure that we have a correct identity referer url.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:RssBandit.Filter.NewsItemReferrerFilter.Match(NewsComponents.NewsItem)">
            <summary>
            Returns true if the NewsItem has an outgoing link to the default user's identity 
            referer url
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:RssBandit.Filter.NewsItemReferrerFilter.ApplyAction(NewsComponents.NewsItem,System.Windows.Forms.ThListView.ThreadedListViewItem)">
            <summary>
            Sets the font of the list view item to the color used to denote 
            an item that links to the user's URL.  Currently this color is 
            Blue.
            </summary>
            <param name="item"></param>
            <param name="lvItem"></param>
            <param name="controlParent"></param>
        </member>
        <member name="M:RssBandit.Filter.NewsItemFlagFilter.Match(NewsComponents.NewsItem)">
            <summary>
            Returns true if the NewsItem has a flag
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:RssBandit.Filter.NewsItemFlagFilter.ApplyAction(NewsComponents.NewsItem,System.Windows.Forms.ThListView.ThreadedListViewItem)">
            <summary>
            Sets the font of the list view item to the color used to denote 
            an item that links to the user's URL.  Currently this color is 
            Blue.
            </summary>
            <param name="item"></param>
            <param name="lvItem"></param>
            <param name="controlParent"></param>
        </member>
        <member name="T:RssBandit.RssBanditApplication">
            <summary>
            Summary description for WinGuiMainMediator.
            </summary>
        </member>
        <member name="F:RssBandit.RssBanditApplication.DefaultPlaylistName">
            <summary>
            This is the default name for the playlist created by RSS Bandit in Windows Media Player
            or iTunes. 
            </summary>
        </member>
        <member name="F:RssBandit.RssBanditApplication.versionPostfix">
            <summary>
            additional string appended to Assembly version info
            </summary>
            <remarks>Next Final Release: remove the temp. preferences file 
            reading/writing before publishing!</remarks>
        </member>
        <member name="F:RssBandit.RssBanditApplication.displayingNewsChannel">
            <summary>
            Manage the channel processors working on displaying items and feeds
            (before we render them in the detail pane)
            </summary>
        </member>
        <member name="F:RssBandit.RssBanditApplication.sharedUICulture">
            <summary>
            used to share the current UI thread's UI culture on various threads
            </summary>
        </member>
        <member name="F:RssBandit.RssBanditApplication.sharedCulture">
            <summary>
            used to share the current thread's culture on various threads
            </summary>
        </member>
        <member name="F:RssBandit.RssBanditApplication.portableApplicationMode">
            <summary>
            make Bandit running from a stick
            </summary>
        </member>
        <member name="M:RssBandit.RssBanditApplication.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>
            	<para>A service object of type <paramref name="serviceType"/>.</para>
            	<para>-or-</para>
            	<para>
            		<see langword="null"/> if there is no service object of type <paramref name="serviceType"/>.</para>
            </returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.StartMainGui(System.Windows.Forms.FormWindowState)">
            <summary>
            Startup the Main GUI Interface.
            </summary>
        </member>
        <member name="M:RssBandit.RssBanditApplication.UnloadAddIns">
            <summary>
            Cleanup task for addins
            </summary>
        </member>
        <member name="M:RssBandit.RssBanditApplication.GetErrorLogPath">
            <summary>
            Gets the error log path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.GetFeedErrorFileName">
            <summary>
            Gets the name of the feed error file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.GetFlagItemsFileName">
            <summary>
            Gets the name of the flag items file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.GetWatchedItemsFileName">
            <summary>
            Gets the name of the watched items file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.GetSentItemsFileName">
            <summary>
            Gets the name of the sent items file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.GetDeletedItemsFileName">
            <summary>
            Gets the name of the deleted items file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.GetSearchFolderFileName">
            <summary>
            Gets the name of the search folder file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.GetShortcutSettingsFileName">
            <summary>
            Gets the name of the shortcut settings file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.GetSettingsFileName">
            <summary>
            Gets the name of the settings file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.GetFeedListFileName">
            <summary>
            Gets the name of the feed list file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.GetTopStoriesFileName">
            <summary>
            Gets the name of the generated Top Stories page
            </summary>
            <returns></returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.GetCommentsFeedListFileName">
            <summary>
            Gets the name of the comments feed list file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.GetOldFeedListFileName">
            <summary>
            Gets the old name of the feed list file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.GetTrustedCertIssuesFileName">
            <summary>
            Gets the name of the trusted certificate issues file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.GetLogFileName">
            <summary>
            Gets the name of the log file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.GetBrowserTabStateFileName">
            <summary>
            Gets the name of the file containing the information about open browser tabs
            when the application was last closed 
            </summary>
            <returns></returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.GetSubscriptionTreeStateFileName">
            <summary>
            Gets the name of the subscription tree state file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.GetPreferencesFileNameOldBinary">
            <summary>
            Gets the preferences file name (old binary format).
            </summary>
            <returns></returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.GetPreferencesFileName">
            <summary>
            Gets the name of the preferences file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CommentFeedListValidationCallback(System.Object,System.Xml.Schema.ValidationEventArgs)">
            <summary>
            Handles errors that occur during schema validation of RSS feed list
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.FeedListValidationCallback(System.Object,System.Xml.Schema.ValidationEventArgs)">
            <summary>
            Handles errors that occur during schema validation of RSS feed list
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.MakeDefaultAggregator">
            <summary>
            Method install Bandit as the "feed:" url scheme handler
            </summary>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CheckAndRegisterIEMenuExtensions">
            <summary>
            Checks and register IE Menu Extensions.
            Ensures that there is a 'Subscribe in RSS Bandit' menu option. Also if we 
            are the default aggregator, we remove the option to subscribe in the default 
            aggregator.			
            </summary>
        </member>
        <member name="M:RssBandit.RssBanditApplication.IsDefaultAggregator">
            <summary>
            Method test the running application, if it is registered as the
            default "feed:" protocol scheme handler.
            </summary>
            <returns>true, if registered, else false</returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.IsDefaultAggregator(System.String)">
            <summary>
            Method test the provided appPath (incl. .exe name!), if it is registered as the
            default "feed:" protocol scheme handler.
            </summary>
            <param name="appPath">Full path name incl. executable name</param>
            <returns>true, if registered, else false</returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.PublishException(System.Exception)">
            <summary>
            Publish a unexpected exception to the user (simple OK dialog is displayed)
            </summary>
            <param name="ex">Exception to report</param>
            <returns>OK DialogResult</returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.PublishException(System.Exception,System.Boolean)">
            <summary>
            Publish a unexpected exception to the user. 
            Retry/Ignore/Cancel dialog is displayed, if <c>resumable</c> is true.
            </summary>
            <param name="ex">Exception to report</param>
            <param name="resumable">Set this to true, if the exception is resumable and react
            to the DialogResult returned.</param>
            <returns>Retry/Ignore/Cancel DialogResults</returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CreateLocalFeedRequestException(System.Exception,NewsComponents.Feed.feedsFeed,NewsComponents.IFeedDetails)">
            <summary>
            Helper to create a wrapped Exception, that provides more error infos for a feed
            </summary>
            <param name="e">Exception</param>
            <param name="f">feedsFeed</param>
            <param name="fi">IFeedDetails</param>
            <returns></returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.OnRequestCertificateIssue(System.Object,NewsComponents.Net.CertificateIssueCancelEventArgs)">
            <summary>
            Called by AsynWebRequest, if a web request caused a certificate problem.
            Used to sync. the async. call to the UI thread.
            </summary>
            <param name="sender"></param>
            <param name="e">CertificateIssueCancelEventArgs</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.OnUpdateFeedsStarted(System.Object,NewsComponents.NewsHandler.UpdateFeedsEventArgs)">
            <summary>
            Called by RssParser, if a RefreshFeeds() was initiated (all feeds)
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.BeforeDownloadFeedStarted(System.Object,NewsComponents.NewsHandler.DownloadFeedCancelEventArgs)">
            <summary>
            Called by RssParser, if a feed start's to download.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.OnUpdateFeedStarted(System.Object,NewsComponents.NewsHandler.UpdateFeedEventArgs)">
            <summary>
            Called by RssParser, if a Refresh of a individual Feed was initiated
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.OnUpdatedFeed(System.Object,NewsComponents.NewsHandler.UpdatedFeedEventArgs)">
            <summary>
            Called by RssParser, after a feed was updated.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.OnUpdatedCommentFeed(System.Object,NewsComponents.NewsHandler.UpdatedFeedEventArgs)">
            <summary>
            Called by RssParser, after a comment feed was updated.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.OnUpdatedFavicon(System.Object,NewsComponents.NewsHandler.UpdatedFaviconEventArgs)">
            <summary>
            Called by NewsHandler, after a favicon was updated.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.OnDownloadedEnclosure(System.Object,NewsComponents.Net.DownloadItemEventArgs)">
            <summary>
            Called by NewsHandler, after an enclosure has been downloaded.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.OnUpdateFeedException(System.Object,NewsComponents.NewsHandler.UpdateFeedExceptionEventArgs)">
            <summary>
            Called by RssParser, if update of a feed caused an exception
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.OnAllCommentFeedRequestsCompleted(System.Object,System.EventArgs)">
            <summary>
            Called by RssParser, if all pending comment feed updates are done.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.OnAllRequestsCompleted(System.Object,System.EventArgs)">
            <summary>
            Called by RssParser, if all pending feed updates are done.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.IsWMPFile(System.String)">
            <summary>
            Tests whether a file type is supported by Windows Media Player by checking the 
            file extension. 
            </summary>
            <param name="fileExt">The file extension to test</param>
            <returns>True if the file extension is supported by Windows Media Player</returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.AddPodcastToWMP(NewsComponents.Net.DownloadItem)">
            <summary>
            Adds the downloaded item to a playlist in Windows Media Player. 
            </summary>
            <remarks>The title of the playlist is the name of the feed in RSS Bandit.</remarks>
            <param name="podcast"></param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.IsITunesFile(System.String)">
            <summary>
            Tests whether a file type is supported by iTunesby checking the 
            file extension. 
            </summary>
            <param name="fileExt">The file extension to test</param>
            <returns>True if the file extension is supported by iTunes</returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.AddPodcastToITunes(NewsComponents.Net.DownloadItem)">
            <summary>
            Adds the downloaded item to a playlist in iTunes. 
            </summary>
            <remarks>The title of the playlist is the name of the feed in RSS Bandit.</remarks>
            <param name="podcast"></param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.SubscriptionModified(NewsComponents.NewsFeedProperty)">
            <summary>
            Notification method about a setting that was modified,
            relevant to the subscriptions.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.FeedWasModified(NewsComponents.Feed.feedsFeed,NewsComponents.NewsFeedProperty)">
            <summary>
            Notification method about a feed that was modified.
            </summary>
            <param name="feed">The feed.</param>
            <param name="property">The property.</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.FeedWasModified(System.String,NewsComponents.NewsFeedProperty)">
            <summary>
            Notification method about a feed that was modified.
            </summary>
            <param name="feedUrl">The feed URL.</param>
            <param name="property">The property.</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.GetFeed(System.String)">
            <summary>
            Gets the feedsFeed from FeedHandler.
            </summary>
            <param name="feedUrl">The feed URL (can be null).</param>
            <returns>feedsFeed if found, else null</returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.GetFeedInfo(System.String)">
            <summary>
            Gets the feed info (IFeedDetails).
            </summary>
            <param name="feedUrl">The feed URL (can be null).</param>
            <returns>IFeedDetails if found, else null</returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.MessageQuestion(System.String)">
            <summary>
            Displays a Message box as a question.
            </summary>
            <param name="text">The text.</param>
            <returns></returns>
            <remarks>Ensures, it gets displayed in foreground and 
            use the main form as the parent</remarks>
        </member>
        <member name="M:RssBandit.RssBanditApplication.MessageQuestion(System.String,System.String)">
            <summary>
            Displays a Message box as a question.
            </summary>
            <param name="text">The text.</param>
            <param name="captionPostfix">The caption postfix, appended to the appl. caption.</param>
            <returns></returns>
            <remarks>Ensures, it gets displayed in foreground and
            use the main form as the parent</remarks>
        </member>
        <member name="M:RssBandit.RssBanditApplication.MessageInfo(System.String)">
            <summary>
            Displays a informational Message box.
            </summary>
            <param name="text">The text.</param>
            <returns></returns>
            <remarks>Ensures, it gets displayed in foreground and 
            use the main form as the parent</remarks>
        </member>
        <member name="M:RssBandit.RssBanditApplication.MessageWarn(System.String)">
            <summary>
            Displays a warning Message box.
            </summary>
            <param name="text">The text.</param>
            <returns></returns>
            <remarks>Ensures, it gets displayed in foreground and 
            use the main form as the parent</remarks>
        </member>
        <member name="M:RssBandit.RssBanditApplication.MessageError(System.String)">
            <summary>
            Displays a error Message box.
            </summary>
            <param name="text">The text.</param>
            <returns></returns>
            <remarks>Ensures, it gets displayed in foreground and 
            use the main form as the parent</remarks>
        </member>
        <member name="M:RssBandit.RssBanditApplication.IsFormAvailable(System.Windows.Forms.Form)">
            <summary>
            Determines whether is the form available and safe to get called.
            </summary>
            <param name="f">The form.</param>
            <returns>
            	<c>true</c> if the form can be called; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.SearchConfigValidationCallback(System.Object,System.Xml.Schema.ValidationEventArgs)">
            <summary>
            Handles errors that occur during schema validation of search engines list
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.RemoveUnreadItemsSearchFolders">
            <summary>
            Removes default "Unread Items" search folder since this has now been replaced by a Special Folder. 
            </summary>
            <remarks>This code used to be in the custom action for the installer but was moved once we got rid 
            of custom actions due to Vista install issues</remarks>
        </member>
        <member name="M:RssBandit.RssBanditApplication.GetFeedColumnLayout(System.String)">
            <summary>
            Returns the individual FeedColumnLayout for a feed, or
            the global one.
            </summary>
            <param name="feedUrl"></param>
            <returns>FeedColumnLayout</returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.GetCategoryColumnLayout(System.String)">
            <summary>
            Returns the FeedColumnLayout
            </summary>
            <param name="category"></param>
            <returns></returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.InstallDefaultFeedList">
            <summary>
            Creates the default feed list if it doesn't exist. 
            </summary>
            <remarks>This code used to be in the custom action for the installer but was moved once we got rid 
            of custom actions due to Vista install issues</remarks>
        </member>
        <member name="M:RssBandit.RssBanditApplication.LoadFeedList">
            <summary>
            Load the feedlist. To have exception handling and UI feedback,
            please call StartLoadingFeedlist().
            </summary>
            <exception cref="T:RssBandit.BanditApplicationException">On any failure</exception>
        </member>
        <member name="M:RssBandit.RssBanditApplication.DisableFeed(System.String)">
            <summary>
            Disable a feed (with UI update)
            </summary>
            <param name="feedUrl">string</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.DisableFeed(NewsComponents.Feed.feedsFeed,RssBandit.WinGui.Controls.TreeFeedsNodeBase)">
            <summary>
            Disable a feed (with UI update)
            </summary>
            <param name="f">feedsFeed</param>
            <param name="feedsNode">FeedTreeNodeBase</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.RemoveItemFromSmartFolder(RssBandit.WinGui.Interfaces.ISmartFolder,NewsComponents.NewsItem)">
            <summary>
            Removes a NewsItem from a SmartFolder.
            </summary>
            <param name="folder"></param>
            <param name="item"></param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.ReFlagNewsItem(NewsComponents.NewsItem)">
            <summary>
            Get a NewsItem to re-flag: usually called on a already flagged item. It try to
            find the corresponding feed containing the item and re-flag them.
            </summary>
            <param name="theItem">NewsItem to re-flag</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.ReWatchNewsItem(NewsComponents.NewsItem)">
            <summary>
            Get a NewsItem to unwatch: usually called on an already watched item. It try to
            find the corresponding feed containing the item and unwatches them.
            </summary>
            <param name="theItem">NewsItem to re-flag</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.FlagNewsItem(NewsComponents.NewsItem)">
            <summary>
            Get a NewsItem to flag and add them (Clone) to the flagged item node collection
            </summary>
            <param name="theItem">NewsItem to flag</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.UpdateWatchedItems(System.Collections.Generic.IList{NewsComponents.NewsItem})">
            <summary>
            Updates the state of the WatchedItems based on the state of the items passed in
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.WatchNewsItem(NewsComponents.NewsItem)">
            <summary>
            Gets a NewsItem to Watch and adds it (Clone) to the watched item node
            </summary>
            <param name="theItem">NewsItem to watch</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.AddSentNewsItem(NewsComponents.NewsItem,NewsComponents.NewsItem)">
            <summary>
            Adds the replyItem to the sent news item feed.
            </summary>
            <param name="inResponse2item">The item responded to.</param>
            <param name="replyItem">The reply item itself.</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.AddSentNewsItem(NewsComponents.Feed.feedsFeed,NewsComponents.NewsItem)">
            <summary>
            Adds the replyItem to the sent news item feed.
            </summary>
            <param name="postTarget">The feedsFeed posted to.</param>
            <param name="replyItem">The reply item itself.</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.DeleteNewsItem(NewsComponents.NewsItem)">
            <summary>
            Gets a NewsItem to delete and add them to the deleted items feed
            </summary>
            <param name="theItem">NewsItem to delete</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.RestoreNewsItem(NewsComponents.NewsItem)">
            <summary>
            Gets a NewsItem and restore it. It will be removed from the deleted items feed
            and added back to the original container feed. 
            It returns the original container tree node if found and restored, else null.
            </summary>
            <param name="item">NewsItem</param>
            <returns>FeedTreeNodeBase</returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.PublishXmlFeedError(System.Exception,System.String,System.Boolean)">
            <summary>
            Publish an XML Feed error.
            </summary>
            <param name="e">XmlException to publish</param>
            <param name="feedLink">The errornous feed url</param>
            <param name="updateNodeIcon">Set to true, if you want to get the node icon reflecting the errornous state</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.PublishXmlFeedError(System.Exception,NewsComponents.Feed.feedsFeed,System.Boolean)">
            <summary>
            Publish an XML Feed error.
            </summary>
            <param name="e">XmlException to publish</param>
            <param name="f">The errornous feedsFeed</param>
            <param name="updateNodeIcon">Set to true, if you want to get the node icon reflecting the errornous state</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CreateLocalFeedRequestException(System.Exception,NewsComponents.Feed.feedsFeed)">
            <summary>
            Helper to create a wrapped Exception, that provides more error infos for a feed
            </summary>
            <param name="e">Exception</param>
            <param name="f">feedsFeed</param>
            <returns></returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CreateLocalFeedRequestException(System.Exception,System.String)">
            <summary>
            Helper to create a wrapped Exception, that provides more error infos for a feed
            </summary>
            <param name="e">Exception</param>
            <param name="feedUrl">feed Url</param>
            <returns></returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.UpdateXmlFeedErrorFeed(System.Exception,System.String,System.Boolean)">
            <summary>
            Add the exception to the local feedError feed. 
            Rewrite/Recreate the file on demand.
            </summary>
            <param name="e">An Exception to publish</param>
            <param name="resourceUri">The resource Uri that raise the exception.</param>
            <param name="updateNodeIcon">Set this to true, if you want to get the icon state reflecting the reported exception</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.InitializeFlaggedItems">
            <summary>
            Flags the NewsItems in the regular feeds that are currently in the flagItemList.
            </summary>
        </member>
        <member name="M:RssBandit.RssBanditApplication.OnApplicationExit(System.Object,System.EventArgs)">
            <summary>
            Called on Application Exit. Close the main form and save application state (RSS Feeds).
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.OnAutoSave(System.Object)">
            <summary>
            Called from the autoSaveTimer. It is re-used to probe for a 
            valid open internet connection...
            </summary>
            <param name="theStateObject"></param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.SaveApplicationState">
            <summary>
            Saves Application State: the feedlist, changed cached files, search folders, flagged items and sent items
            </summary>
        </member>
        <member name="M:RssBandit.RssBanditApplication.SaveApplicationState(System.Boolean)">
            <summary>
            Saves Application State: the feedlist, changed cached files, search folders, flagged items and sent items
            </summary>
            <param name="appIsClosing">if set to <c>true</c> [app is closing].</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdCatchUpCurrentSelectedNode(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Catch Up the current selected node in subscriptions treeview.
            Works for all subscription types (feed, category, all).
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdDeleteAllFeedItems(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Called only from subscriptions tree on SmartFolder(s)
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdDeleteSelectedFeedItems(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Called from listview context menu or Edit|Delete menu
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdRestoreSelectedFeedItems(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Called from listview context menu or Edit|Restore items menu
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdNewFeed(System.String,System.String,System.String)">
            <summary>
            Pops up the NewFeedDialog class and adds a new feed to the list 
            of subscribed feeds.
            </summary>
            <param name="category">Feed category</param>
            <param name="feedLink">Feed link</param>
            <param name="feedTitle">Feed title</param>
            <returns>true, if the dialog succeeds (feed subscribed), else false</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:RssBandit.RssBanditApplication.InterceptUrlNavigation(System.String)" -->
        <member name="M:RssBandit.RssBanditApplication.AskAndCheckForDefaultAggregator">
            <summary>
            Check for current default aggregator. If we are not the default, then display
            the question dialog, if we have to ask.
            </summary>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CheckAndInitSoundEvents">
            <summary>
            Checks and init sounds events.
            </summary>
        </member>
        <member name="M:RssBandit.RssBanditApplication.HandleUrlFeedProtocol(System.String)">
            <summary>
            Detect, if the url contains the 'feed:' protocol. If so, it just remove it
            to prepare a valid web url.
            </summary>
            <param name="feedUrl">Url to mangle</param>
            <returns>Mangled Url</returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.PrepareXsltArgs">
            <summary>
            Used to initialize parameters to the XSLT template that formats the feeds as HTMl. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.FormatFeeds(System.String,NewsComponents.Feed.FeedInfoList)">
            <summary>
            Uses the current defined XSLT template to format the feeds to HTML.
            </summary>
            <param name="stylesheet">The stylesheet.</param>
            <param name="feeds">The list of feeds to transform</param>
            <returns>The feeds formatted as a HTML string</returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.FormatFeed(System.String,NewsComponents.Feed.FeedInfo)">
            <summary>
            Uses the current defined XSLT template to
            format the feed  to HTML.
            </summary>
            <param name="stylesheet">The stylesheet.</param>
            <param name="feed">The feed to transform</param>
            <returns>The feed formatted as a HTML string</returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.FormatNewsItem(System.String,NewsComponents.NewsItem,NewsComponents.Search.SearchCriteriaCollection)">
            <summary>
            Uses the current defined XSLT template to
            format the item to HTML.
            </summary>
            <param name="stylesheet">The stylesheet.</param>
            <param name="item">The NewsItem</param>
            <param name="toHighlight">To highlight.</param>
            <returns>The NewsItem formatted as a HTML string</returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.ReadAppSettingsEntry(System.String,System.Type,System.Object)">
            <summary>
            Reads an app settings entry.
            </summary>
            <param name="name">The name of the entry.</param>
            <param name="entryType">Expected Type of the entry.</param>
            <param name="defaultValue">The default value.</param>
            <returns>Value read or defaultValue</returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.GetAssemblyInformationalVersion(System.Reflection.Assembly)">
            <summary>
            Retrives the assembly informational version (from the AssemblyInformationalVersionAttribute).
            </summary>
            <param name="assembly">Assembly</param>
            <returns>String. It is empty if no description was found.</returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.GetNewsItemFormatterTemplate">
            <summary>
            Loads the default stylesheet from disk and returns it as a string
            </summary>
            <returns>The XSLT stylesheet</returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.GetNewsItemFormatterTemplate(System.String)">
            <summary>
            Loads the stylesheet from disk and returns it as a string
            </summary>
            <param name="stylesheet">The stylesheet name</param>
            <returns>The XSLT stylesheet</returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdExitApp(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Exiting the Application.
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdShowAlertWindowNone(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Show Alert Windows Mode: None.
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdShowAlertWindowConfigPerFeed(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Show Alert Windows Mode: Configured Feeds.
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdShowAlertWindowAll(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Show Alert Windows Mode: All.
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdToggleShowNewItemsReceivedBalloon(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Toggle the Show New Items Received Balloon Mode.
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdToggleInternetConnectionMode(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Toggle the Internet Connection Mode.
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdAboutApp(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Display the about box.
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdWebHelp(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Display the Help Web-Page.
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdReportAppBug(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Display the Bug Report Web-Page.
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdWorkspaceNews(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Display the Workspace News Web-Page.
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdWikiNews(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Display the Wiki News Web-Page.
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdVisitForum(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Display the Wiki News Web-Page.
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdDonateToProject(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Display Donate to project Web-Page.
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdSendLogsByMail(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Send logs by mail.
            </summary>
            <param name="sender">The sender.</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdCheckForUpdates(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Check for program updates.
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdCheckForUpdates(RssBandit.AutoUpdateMode)">
            <summary>
            Check for program updates.
            </summary>
            <param name="mode">Update Mode</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdShowMainGui(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Re-Display/Open the main GUI.
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdRefreshFeeds(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Refresh all feeds.
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdNewFeed(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Pops up the SubscriptionWizard and adds a new feed to the list 
            of subscribed feeds. It uses WizardMode.SubscribeURLDirect.
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdNewSubscription(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Pops up the SubscriptionWizard and adds a new feed to the list 
            of subscribed feeds. WizardMode.Default
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdNewNntpFeed(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Pops up the SubscriptionWizard and adds a new feed to the list 
            of subscribed feeds. WizardMode.SubscribeNNTPDirect
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdNextUnreadFeedItem(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Moves the focus to the next unread feed item if available.
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdOpenManageAddInsDialog(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Display a dialog to manage AddIns.
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdTopStories(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Display the most popular recently linked stories in the 
            Web browser pane. 
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdAutoDiscoverFeed(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Display the wizard dialog to autodiscover feeds.
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdNewCategory(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Pops up the NewCategoryDialog class and adds a new category to the list 
            of subscribed feeds.
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdDeleteAll(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Delete all Feeds subscribed to.
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdUpdateCategory(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdRenameCategory(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdDeleteCategory(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdUpdateFeed(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdRenameFeed(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdViewSourceOfFeed(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdValidateFeed(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Overloaded. Validates a feed link.
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdValidateFeed(System.String)">
            <summary>
            Overloaded. Validates a feed link.
            </summary>
            <param name="feedLink">Feed link</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdNavigateFeedHome(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Overloaded. Navigates to feed home page (feed link).
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdNavigateFeedHome(System.String)">
            <summary>
            Overloaded. Navigates to feed home page (feed link).
            </summary>
            <param name="feedLink">Feed link</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdNavigateFeedLinkCosmos(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Overloaded. Display technorati link cosmos of the feed.
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdNavigateFeedLinkCosmos(System.String)">
            <summary>
            Overloaded. Display technorati link cosmos of the feed.
            </summary>
            <param name="feedLink">Feed link</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdExportFeeds(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Uses SaveFileDialog to save the feed file either as a file conforming 
            to feeds.xsd or an OPML file in the format used by Radio Userland, AmphetaDesk, 
            and other news aggregators. 
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdImportFeeds(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Loads a feed list using the open file dialog. Either feed lists conforming 
            to the feeds.xsd schema or OPML files in the format used by Radio UserLand, 
            AmphetaDesk and other news aggregators. 
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdUploadFeeds(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Sends the feed list to the location configured on the 
            Remote Storage tab of the Options dialog.
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdDownloadFeeds(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Loads the feed list from the location configured on the 
            Remote Storage tab of the Options dialog.
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdShowOptions(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdShowFeedProperties(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdShowCategoryProperties(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>Displays the properties dialog for a category </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdMarkFeedItemsUnread(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Listview context menu command
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdMarkFeedItemsRead(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Listview context menu command
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdPostReplyToItem(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Opens the reply post window to allow a user to
            answer to an post (send a comment to a feed item) 
            or reply to NNTP group post.
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdPostNewItem(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Opens the new post window to allow a user to
            create a new post to send to a NNTP group.
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdGenericListviewCommand(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Calling a generic listview context menu item command used 
            e.g. for plugin's supporting IBlogExtension
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.CmdGenericListviewCommandConfig(RssBandit.WinGui.Interfaces.ICommand)">
            <summary>
            Calling a generic listview context menu config item command, 
            e.g. for plugin's supporting IBlogExtension.
            </summary>
            <param name="sender">Object that initiates the call</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.Main(System.String[])">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="M:RssBandit.RssBanditApplication.HandleCommandLineArgs(System.String[])">
            <summary>
            Handle command line arguments.
            </summary>
            <param name="args">Arguments string list</param>
            <returns>True, if all is OK, False if further processing should stop.</returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.OnPostReplyFormPostReply(System.Object,RssBandit.WinGui.Forms.PostReplyEventArgs)">
            <summary>
            PostReplyForm callback
            </summary>
            <param name="replyEventArgs"></param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.ShowPodcastOptionsDialog(System.Windows.Forms.IWin32Window,System.EventHandler)">
            <summary>
            Shows the podcast options.
            </summary>
            <param name="owner">The owner.</param>
            <param name="optionsChangedHandler">The options changed handler.</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.ShowOptions(RssBandit.OptionDialogSection,System.Windows.Forms.IWin32Window,System.EventHandler)">
            <summary>
            Display the options dialog and select the desired detail section
            </summary>
            <param name="selectedSection">OptionDialogSection</param>
            <param name="owner">The owner.</param>
            <param name="optionsChangedHandler">The options changed handler.</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.ShowNntpServerManagementDialog(System.Windows.Forms.IWin32Window,System.EventHandler)">
            <summary>
            Shows the NNTP server management dialog.
            </summary>
            <param name="owner">The owner.</param>
            <param name="definitionChangeEventHandler">The definition change event handler.</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.ShowUserIdentityManagementDialog(System.Windows.Forms.IWin32Window,System.EventHandler)">
            <summary>
            Shows the user identity management dialog.
            </summary>
            <param name="owner">The owner.</param>
            <param name="definitionChangeEventHandler">The definition change event handler.</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.UnsubscribeFeed(System.String,System.Boolean)">
            <summary>
            Unsubscribes the feed by feedUrl.
            </summary>
            <param name="feedUrl">The feed URL.</param>
            <param name="askUser">if set to <c>true</c> [ask user].</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.UnsubscribeFeed(NewsComponents.Feed.feedsFeed,System.Boolean)">
            <summary>
            Unsubscribes the feed.
            </summary>
            <param name="feed">The feed.</param>
            <param name="askUser">if set to <c>true</c> [ask user].</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.GetItemFormatterStylesheets">
            <summary>
            Gets the News Item Formatter Stylesheet list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.NavigateToUrl(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            UI thread save navigation to an Url.
            </summary>
            <param name="url">Url to navigate to</param>
            <param name="tabCaption">The suggested tab caption (maybe replaced by the url's html page title)</param>
            <param name="forceNewTabOrWindow">Force to open a new Tab/Window</param>
            <param name="setFocus">Force to set the focus to the new Tab/Window</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.NavigateToUrlAsUserPreferred(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Navigates to an provided Url on the user preferred Web Browser.
            So it may be the external OS Web Browser, or the internal one.
            </summary>
            <param name="url">Url to navigate to</param>
            <param name="tabCaption">The suggested tab caption (maybe replaced by the url's html page title)</param>
            <param name="forceNewTabOrWindow">Force to open a new Browser Window (Tab)</param>
            <param name="setFocus">Force to set the focus to the new Window (Tab)</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.NavigateToUrlInExternalBrowser(System.String)">
            <summary>
            Navigates to an provided Url with help of the OS system preferred Web Browser.
            If it fails to navigate with that browser, it falls back to internal tabbed browsing.
            </summary>
            <param name="url">Url to navigate to</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.RssBandit#AppServices#ICoreApplication#RegisterReceivingNewsChannelProcessor(NewsComponents.IChannelProcessor)">
            <summary>
            Register a IChannelProcessor services, that works
            in the receiving news channel chain: the moment we requested new feeds
            or update feeds from the original sources. 
            </summary>
            <param name="channelProcessor">IChannelProcessor</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.RssBandit#AppServices#ICoreApplication#UnregisterReceivingNewsChannelProcessor(NewsComponents.IChannelProcessor)">
            <summary>
            Unregister a previously registered IChannelProcessor services 
            and removes it from the receiving news channel processing chain.
            </summary>
            <param name="channelProcessor">IChannelProcessor</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.RegisterDisplayingNewsChannelProcessor(NewsComponents.IChannelProcessor)">
            <summary>
            Register a IChannelProcessor services, that works
            in the displaying news channel chain: the moment before we render feeds
            or newsitems in the detail display pane. 
            </summary>
            <param name="channelProcessor">IChannelProcessor</param>
        </member>
        <member name="M:RssBandit.RssBanditApplication.UnregisterDisplayingNewsChannelProcessor(NewsComponents.IChannelProcessor)">
            <summary>
            Unregister a previously registered IChannelProcessor services 
            and removes it from the receiving news channel processing chain.
            </summary>
            <param name="channelProcessor">IChannelProcessor</param>
        </member>
        <member name="P:RssBandit.RssBanditApplication.SharedUICulture">
            <summary>
            Gets or sets the shared UI culture.
            </summary>
            <value>The shared UI culture.</value>
        </member>
        <member name="P:RssBandit.RssBanditApplication.SharedCulture">
            <summary>
            Gets or sets the shared culture.
            </summary>
            <value>The shared culture.</value>
        </member>
        <member name="P:RssBandit.RssBanditApplication.Version">
            <summary>
            Gets the version (no version postfix).
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:RssBandit.RssBanditApplication.VersionLong">
            <summary>
            Gets the version (long format, incl. version postfix).
            </summary>
            <value>The version string.</value>
        </member>
        <member name="P:RssBandit.RssBanditApplication.VersionShort">
            <summary>
            Gets the version (short format, incl. version postfix).
            </summary>
            <value>The version</value>
        </member>
        <member name="P:RssBandit.RssBanditApplication.ApplicationInfos">
            <summary>
            Gets the application infos.
            </summary>
            <value>The application infos.</value>
        </member>
        <member name="P:RssBandit.RssBanditApplication.UpdateServiceUrl">
            <summary>
            Gets the update service URL.
            </summary>
            <value>The update service URL.</value>
        </member>
        <member name="P:RssBandit.RssBanditApplication.FeedValidationUrlBase">
            <summary>
            Gets the feed validation URL base.
            </summary>
            <value>The feed validation URL base.</value>
        </member>
        <member name="P:RssBandit.RssBanditApplication.AppGuid">
            <summary>
            Gets the app GUID. Used by update web-service.
            </summary>
            <value>The app GUID.</value>
        </member>
        <member name="P:RssBandit.RssBanditApplication.UserAgent">
            <summary>
            Gets the user agent. Used for web-access.
            </summary>
            <value>The user agent.</value>
        </member>
        <member name="P:RssBandit.RssBanditApplication.DefaultPreferences">
            <summary>
            Gets the default preferences.
            </summary>
            <value>The default preferences.</value>
        </member>
        <member name="P:RssBandit.RssBanditApplication.UnconditionalCommentRss">
            <summary>
            Gets a value indicating whether to use unconditional comment RSS.
            </summary>
            <value>
            	<c>true</c> if [unconditional comment RSS]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:RssBandit.RssBanditApplication.AutomaticColorSchemes">
            <summary>
            Gets a value indicating whether to use automatic color schemes.
            </summary>
            <value>
            	<c>true</c> if [automatic color schemes]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:RssBandit.RssBanditApplication.PortableApplicationMode">
            <summary>
            Gets a value indicating whether [portable application mode].
            </summary>
            <value>
            	<c>true</c> if [portable application mode]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:RssBandit.RssBanditApplication.ShouldAskForDefaultAggregator">
            <summary>
            Returns true, if a Yes/No dialog should be displayed on startup (asking for
            to make Bandit the default "feed:" scheme protocol handler)
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditApplication.EnclosureFolder">
            <summary>
            Gets the current Enclosure folder
            </summary>		
        </member>
        <member name="P:RssBandit.RssBanditApplication.PodcastFolder">
            <summary>
            Gets the current Podcast folder
            </summary>		
        </member>
        <member name="P:RssBandit.RssBanditApplication.NumEnclosuresToDownloadOnNewFeed">
            <summary>
            Indicates the number of enclosures which should be downloaded automatically from a newly subscribed feed.
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditApplication.EnclosureCacheSize">
            <summary>
            Indicates the maximum amount of space that enclosures and podcasts can use on disk.
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditApplication.PodcastFileExtensions">
            <summary>
            Gets a semi-colon delimited list of file extensions of enclosures that 
            should be treated as podcasts
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditApplication.DownloadCreateFolderPerFeed">
            <summary>
            Gets whether enclosures should be created in a subfolder named after the feed. 
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditApplication.EnableEnclosureAlerts">
            <summary>
            Gets whether alert Windows should be displayed for enclosures or not. 
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditApplication.DownloadEnclosures">
            <summary>
            Gets whether enclosures should be downloaded automatically or not.
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditApplication.LastAutoUpdateCheck">
            <summary>
            Gets or sets the last auto update check date.
            </summary>
            <value>Date of the last auto update check.</value>
        </member>
        <member name="P:RssBandit.RssBanditApplication.CommentFeedlistModified">
            <summary>
            Property CommentFeedlistModified (bool)
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditApplication.UnreadItemsFeed">
            <summary>
            Get/Sets the unread items local feed
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditApplication.WatchedItemsFeed">
            <summary>
            Gets or sets the watched items feed.
            </summary>
            <value>The watched items feed.</value>
        </member>
        <member name="P:RssBandit.RssBanditApplication.DeletedItemsFeed">
            <summary>
            Get/Sets the deleted items local feed
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditApplication.RssBandit#AppServices#ICoreApplication#WebSearchEngines">
            <summary>
            Gets the defined web search engines. 
            Items are of type ISearchEngine, keys are the corresponding Title.
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditApplication.DisplayingNewsChannelServices">
            <summary>
            Gets the receiving news channel.
            </summary>
            <value>The displaying news channel services.</value>
        </member>
        <member name="P:RssBandit.RssBanditApplication.CoreServices">
            <summary>
            Internal accessor to the ICoreApplication interface services.
            </summary>
        </member>
        <member name="P:RssBandit.RssBanditApplication.CommandLineOptions.StartInTaskbarNotificationAreaOnly">
            <summary>
            Have a look to http://blogs.gotdotnet.com/raymondc/permalink.aspx/5a811e6f-cd12-48de-8994-23409290faea,
            that is why we does not name it "StartInSystemTray" or such.
            </summary>
        </member>
        <member name="M:RssBandit.RssBanditApplication.ApplicationHelper.ActivateRunningProcessInstance">
            <summary>
            Detect if there is an instance of your application already running.
            If detected, it will bring that application to the foreground 
            (restoring its window state if iconic), and then terminating the 
            current application. This is useful in instances where you want to 
            ensure that only one instance of your application is running.
            </summary>
            <returns>true, if another instance was found and get activated.
            Else false (you should continue to initialize)</returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.ApplicationHelper.FindProcessWindow(System.Int32)">
            <summary>
            Try to find a window with a window text that looks like 
            the provided caption the old API way (calls EnumWindows)
            </summary>
            <param name="processId">The process id the window should belongs to. Optional.</param>
            <returns>The found window handle, else IntPtr.Zero</returns>
        </member>
        <member name="M:RssBandit.RssBanditApplication.ApplicationHelper.EvalWindow(System.IntPtr,System.Int32)">
            <summary>
            Callback routine to enum windows
            </summary>
            <param name="hWnd">Window handles</param>
            <param name="lParam">Here: used to contain the process Id</param>
            <returns></returns>
        </member>
        <member name="T:RssBandit.Exceptions.ExceptionEventArgs">
            <summary>
            Used to populate exceptions without throwing them. 
            </summary>
        </member>
        <member name="T:RssBandit.Exceptions.FeedExceptionEventArgs">
            <summary>
            Used to populate feed exceptions without throwing them. 
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.ApplicationTrayState">
            <summary>
            Summary description for ApplicationTrayState.
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.TrayStateManager">
            <summary>
            TrayStateManager class manages the application
            states to be visualized within the system tray icon.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.TrayStateManager.OnAnimationFinished(System.Object,RssBandit.WinGui.Controls.NotifyIconState)">
            <summary>
            Called from the NotifyIconAnimation if a animation is done (non-endless).
            This we use to switch to the next visual app state.
            </summary>
            <param name="sender">My NotifyIconAnimation</param>
            <param name="animation">The current NotifyIconState of type Animation.</param>
        </member>
        <member name="P:RssBandit.WinGui.TrayStateManager.CurrentState">
            <summary>
            Use it to set/switch the 
            </summary>
        </member>
        <member name="T:Genghis.Windows.Forms.AnimateDirection">
            <summary>
            Indicates the direction in which the message window expands
            </summary>
        </member>
        <member name="F:Genghis.Windows.Forms.AnimateDirection.LeftToRight">
            <summary>
            The for, expands from left to right on the screen, and then
            contracts from right to left
            </summary>
        </member>
        <member name="F:Genghis.Windows.Forms.AnimateDirection.BottomToTop">
            <summary>
            The form expands from bottom to top on the screen, and then
            contracts from top to bottom
            </summary>
        </member>
        <member name="T:Genghis.Windows.Forms.BackgroundMode">
            <summary>
            Enumeration which contains the options for the form background for
            an <see cref="T:Genghis.Windows.Forms.AniForm"/>.
            </summary>
        </member>
        <member name="F:Genghis.Windows.Forms.BackgroundMode.Normal">
            <summary>
            The form's background is painted as any normal form would be.
            All applicable properties will be enforced (e.g. BackgroundColor)
            </summary>
        </member>
        <member name="F:Genghis.Windows.Forms.BackgroundMode.GradientHorizontal">
            <summary>
            The background is drawn with a horizontal gradient brush.  The
            gradient starts with <see cref="!:StartColor"/> and ends with
            <see cref="!:EndColor"/>
            </summary>
        </member>
        <member name="F:Genghis.Windows.Forms.BackgroundMode.GradientVertical">
            <summary>
            The background is drawn with a vertical gradient brush.  The
            gradient starts with <see cref="!:StartColor"/> and ends with
            <see cref="!:EndColor"/>
            </summary>
        </member>
        <member name="T:Genghis.Windows.Forms.FormPlacement">
            <summary>
            Indicates where the form should be displayed
            </summary>
        </member>
        <member name="F:Genghis.Windows.Forms.FormPlacement.Normal">
            <summary>
            The form is displayed at the position specified by its
            <see cref="!:Location"/> property
            </summary>
        </member>
        <member name="F:Genghis.Windows.Forms.FormPlacement.Tray">
            <summary>
            The form is displayed near the system tray
            </summary>
        </member>
        <member name="F:Genghis.Windows.Forms.FormPlacement.Centered">
            <summary>
            The form is displayed in the center of the screen
            </summary>
        </member>
        <member name="T:Genghis.Windows.Forms.BorderStyle">
            <summary>
            The styles available for the AniForm border
            </summary>
        </member>
        <member name="F:Genghis.Windows.Forms.BorderStyle.None">
            <summary>
            No border is drawn
            </summary>
        </member>
        <member name="F:Genghis.Windows.Forms.BorderStyle.FixedSingle">
            <summary>
            a 1-pixel, black border is drawn
            </summary>
        </member>
        <member name="F:Genghis.Windows.Forms.BorderStyle.Raised">
            <summary>
            The border is drawn to give the appearance of a raised "bump" edge
            </summary>
        </member>
        <member name="T:Genghis.Windows.Forms.StackMode">
            <summary>
            Defines modes for AniForm stacking behavior
            </summary>
        </member>
        <member name="F:Genghis.Windows.Forms.StackMode.None">
            <summary>
            The form will not be stacked and will be placed according
            to the <see cref="!:Placement"/> and <see cref="!:StartLocation"/>
            properties
            </summary>
        </member>
        <member name="F:Genghis.Windows.Forms.StackMode.Top">
            <summary>
            If there are any visible forms in the stack, the current form will
            be placed at the top of it
            </summary>
        </member>
        <member name="F:Genghis.Windows.Forms.StackMode.FirstAvailable">
            <summary>
            The current form will be placed as low in the stack as possible
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Forms.PostReplyForm">
            <summary>
            Summary description for PostReplyForm.
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Forms.PostReplyForm.useEnglishReplyPrefix">
            <summary>
            Someone may not like to have the translated/localized "Re: " prefixes
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Forms.PostReplyForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.PostReplyForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.PostReplyForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.PostReplyForm.GetPrefixedTitle(System.String)">
            <summary>
            Gets the prefixed title.
            </summary>
            <param name="feedItemTitle">The feed item title.</param>
            <returns></returns>
        </member>
        <member name="P:RssBandit.WinGui.Forms.PostReplyForm.ReplyToItem">
            <summary>
            Gets or sets the reply to NewsItem.
            </summary>
            <value>The reply to item.</value>
        </member>
        <member name="P:RssBandit.WinGui.Forms.PostReplyForm.PostToFeed">
            <summary>
            Gets or sets the feedsFeed to post to.
            </summary>
            <value>The feedsFeed to post to.</value>
        </member>
        <member name="T:RssBandit.WinGui.Forms.PostReplyEventHandler">
            <summary>
            Callback to initiate the post action
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Forms.PostReplyEventArgs">
            <summary>
            Event arguments container for post reply action
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.PostReplyEventArgs.#ctor(NewsComponents.NewsItem,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Designated initializer
            </summary>
            <param name="replyToItem"></param>
            <param name="title"></param>
            <param name="name"></param>
            <param name="url"></param>
            <param name="email"></param>
            <param name="comment"></param>
            <param name="beautify"></param>
        </member>
        <member name="T:RssBandit.WinGui.Dialogs.AskForDefaultAggregator">
            <summary>
            Summary description for AskForDefaultAggregator.
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Dialogs.AskForDefaultAggregator.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Dialogs.AskForDefaultAggregator.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Dialogs.AskForDefaultAggregator.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ThListView.ThreadedListViewGroupCollection">
            <summary>
            Summary description for ThreadedListViewGroupCollection.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ThListView.ThreadedListViewColumnHeaderCollection">
            <summary>
            Summary description for ThreadedListViewColumnHeaderCollection.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ThListView.ThreadedListViewColumnHeaderCollection.GetIndexByKey(System.String)">
            <summary>
            Returns the index of the Column identified by column ID.
            </summary>
            <param name="columnID">string</param>
            <returns>int. -1, if not found</returns>
        </member>
        <member name="M:System.Windows.Forms.ThListView.ThreadedListViewColumnHeaderCollection.GetColumnIndexMap">
            <summary>
            Returns a collection for faster column key to index lookup.
            Can be used to create new items/subitems according to the current column keys.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ThListView.ColumnKeyIndexMap">
            <summary>
            Helper class for faster column key to index lookup.
            Can be used to create new items/subitems according to the current column keys.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.ThListView.ColumnKeyIndexMap.Item(System.String)">
            <summary>
            Set/Get the index of a column key
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Controls.StateSerializationHelper">
            <summary>
            Does support general state serialization of on controls
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:RssBandit.WinGui.Controls.StateSerializationHelper.SaveControlStateToByte(Infragistics.Win.UltraWinToolbars.UltraToolbarsManager,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:RssBandit.WinGui.Controls.StateSerializationHelper.SaveControlStateToString(Infragistics.Win.UltraWinToolbars.UltraToolbarsManager,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:RssBandit.WinGui.Controls.StateSerializationHelper.SaveToolbarManager(Infragistics.Win.UltraWinToolbars.UltraToolbarsManager,System.Boolean,System.Boolean)" -->
        <member name="M:RssBandit.WinGui.Controls.StateSerializationHelper.LoadControlStateFromByte(Infragistics.Win.UltraWinToolbars.UltraToolbarsManager,System.Byte[],RssBandit.WinGui.Utility.CommandMediator)">
            <summary>
            Restores a ToolbarManager using the provided byte-array.
            Prior to applying the settings the (shared) properties 'Caption' and 'ToolTip'
            of each element in the Tools-Collection
            saved  and restored after applying the settings from the byte-array.
            This avoids that strings from a different login-language are restored.
            No Exceptions are catched by this method.
            </summary>
            <param name="toolbarManager">UltraToolbarsManager</param>
            <param name="theSettings">byte[]</param>
            <param name="mediator">The mediator.</param>
        </member>
        <member name="M:RssBandit.WinGui.Controls.StateSerializationHelper.LoadControlStateFromString(Infragistics.Win.UltraWinToolbars.UltraToolbarsManager,System.String,RssBandit.WinGui.Utility.CommandMediator)">
            <summary>
            Restores a ToolbarManager using the provided byte-array.
            Prior to applying the settings the (shared) properties 'Caption' and 'ToolTip'
            of each element in the Tools-Collection
            saved  and restored after applying the settings from the byte-array.
            This avoids that strings from a different login-language are restored.
            No Exceptions are catched by this method.
            </summary>
            <param name="toolbarManager">UltraToolbarsManager</param>
            <param name="theSettings">string</param>
            <param name="mediator">The mediator.</param>
        </member>
        <member name="M:RssBandit.WinGui.Controls.StateSerializationHelper.LoadToolbarManager(Infragistics.Win.UltraWinToolbars.UltraToolbarsManager,System.IO.Stream,System.Boolean,RssBandit.WinGui.Utility.CommandMediator)">
            <summary>
            Restores a ToolbarManager using the provided byte-array.
            Prior to applying the settings the (shared) properties 'Caption' and 'ToolTip'
            of each element in the Tools-Collection
            saved  and restored after applying the settings from the byte-array.
            This avoids that strings from a different login-language are restored.
            No Exceptions are catched by this method.
            </summary>
            <param name="toolbarManager">UltraToolbarsManager</param>
            <param name="stream">Stream</param>
            <param name="asBinary">bool</param>
            <param name="mediator">The mediator.</param>
        </member>
        <member name="M:RssBandit.WinGui.Controls.StateSerializationHelper.LoadExplorerBar(Infragistics.Win.UltraWinExplorerBar.UltraExplorerBar,RssBandit.WinGui.Utility.Settings,System.String)">
            <summary>
            Restores a UltraExplorerBar using the provided Preferences.
            </summary>
            <param name="explorerBar">UltraExplorerBar</param>
            <param name="store">Settings</param>
            <param name="preferenceID">String. The ID the settings should come from 
            (multiple sets may exist in the Preference store)</param>
            <exception cref="T:System.ArgumentNullException">If any of the parameters is null</exception>
            <exception cref="T:System.InvalidOperationException">If the collection of groups allow duplicate keys
             or any group does not have a unique key</exception>
        </member>
        <member name="M:RssBandit.WinGui.Controls.StateSerializationHelper.SaveExplorerBar(Infragistics.Win.UltraWinExplorerBar.UltraExplorerBar,RssBandit.WinGui.Utility.Settings,System.String)">
            <summary>
            Saves a UltraExplorerBar using the provided Preferences store.
            </summary>
            <param name="explorerBar">UltraExplorerBar</param>
            <param name="store">Settings</param>
            <param name="preferenceID">String. The ID the settings should come from 
            (multiple sets may exist in the Preference store)</param>
            <exception cref="T:System.ArgumentNullException">If any of the parameters is null</exception>
            <exception cref="T:System.InvalidOperationException">If the collection of groups allow duplicate keys
             or any group does not have a unique key</exception>
        </member>
        <member name="T:RssBandit.ExceptionLog4NetPublisher">
            <summary>
            Summary description for FormPublisher.
            </summary>
        </member>
        <member name="M:RssBandit.ExceptionLog4NetPublisher.#ctor">
            <summary>
            Initialize the Exception Log4Net Publisher
            </summary>
        </member>
        <member name="M:RssBandit.ExceptionLog4NetPublisher.Publish(System.Exception,System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Log4Net Publisher
            </summary>
            <param name="exception">Exception</param>
            <param name="additionalInfo">Additional Information</param>
            <param name="configSettings">Parameters</param>
        </member>
        <member name="T:RssBandit.BanditExceptionPublisher">
            <summary>
            Exception Publisher for File and Mail
            </summary>
        </member>
        <member name="M:RssBandit.BanditExceptionPublisher.#ctor">
            <summary>
            Constructor for the Exception publisher
            </summary>
        </member>
        <member name="T:RssBandit.Common.Utils.TypeConverter">
            <summary>
            Helper class that deals with the stupidity of generics and collections. 
            </summary>
        </member>
        <member name="M:RssBandit.Common.Utils.TypeConverter.UpCast``2">
            <summary>
            Returns a delegate that can be used to cast a subtype back to its base type. 
            </summary>
            <typeparam name="T">The derived type</typeparam>
            <typeparam name="U">The base type</typeparam>
            <returns>Delegate that can be used to cast a subtype back to its base type. </returns>
        </member>
        <member name="M:RssBandit.Common.Utils.TypeConverter.DownCast``2">
            <summary>
            Returns a delegate that can be used to cast a base to the specified derived type. 
            </summary>
            <typeparam name="T">The derived type</typeparam>
            <typeparam name="U">The base type</typeparam>
            <returns>Delegate that can be used to cast a base to the specified derived type.  </returns>
        </member>
        <member name="T:RssBandit.WinGui.Dialogs.SecurityIssueDialog">
            <summary>
            Summary description for SecurityIssueDialog.
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Dialogs.SecurityIssueDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Dialogs.SecurityIssueDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Dialogs.SecurityIssueDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Forms.DiscoveredFeedsDialog">
            <summary>
            Summary description for AutoDiscoveredFeedsDialog.
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.Forms.DiscoveredFeedsDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.DiscoveredFeedsDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.DiscoveredFeedsDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Controls.WindowSerializer">
            <summary>
            A class to automatically serialize/deserialize the state of a form.
            This is a MODIFIED class from the original sources at Genghis!
            We added a small fix for multiple srceen support and some convinient
            public properties to control what properties of a form should get serialized.
            </summary>
            <example>
            The sample below will persist the state of the MainWindow form.
            <code>
            class MainWindow : Form {
                WindowSerializer windowSerializer;
                public MainWindow() {
                    windowSerializer = new WindowSerializer(this);
                }
            }
            </code>
            </example>
            <remarks>
            We use a specific app.config setting to use our own preference (file) store:
            	&lt;add key="CustomPreferencesStore" 
            	           value="RssBandit.WinGui.Utility.Settings,RssBandit" /&gt;
            </remarks>
        </member>
        <member name="M:RssBandit.WinGui.Controls.WindowSerializer.#ctor">
            <summary>
            Constructs an empty WindowSerializer.  If the Form property is not
            set, then this class will do nothing.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Controls.WindowSerializer.#ctor(System.Windows.Forms.Form)">
            <summary>
            Constructs WindowSerializer with a form.
            </summary>
            <param name="form">
            The form whose state is to be persisted.
            </param>
        </member>
        <member name="M:RssBandit.WinGui.Controls.WindowSerializer.OnLoad(System.Object,System.EventArgs)">
            <summary>
            Handle Load event.  Loads position settings and moves/sizes the
            form.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Controls.WindowSerializer.OnMove(System.Object,System.EventArgs)">
            <summary>
            Handle Move event.  Records form position.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Controls.WindowSerializer.OnResize(System.Object,System.EventArgs)">
            <summary>
            Handle Resize event.  Records form size.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Controls.WindowSerializer.OnClosing(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Handle Close event.  Saves window state.
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Controls.WindowSerializer.Form">
            <summary>
            Gets or sets the form which is to have it's state persisted.
            </summary>
            <value>
            The form which is to have it's state persisted.
            </value>
            <remarks>
            If the WindowSerializer is used inside Visual Studio in a Windows
            Forms designer, Form is automatically set to the control that
            contains the WindowSerializer. For example, if you place a
            WindowSerializer on a designer for Form1 (which inherits from
            Form), the Form property of WindowSerializer is set to the
            instance of Form1.
            </remarks>
        </member>
        <member name="P:RssBandit.WinGui.Controls.WindowSerializer.FormName">
            <summary>
            Gets or sets the name of the form.
            </summary>
            <value>
            The name of the form.
            </value>
            <remarks>
            <para>The name of the form should be unique and unchanging.</para>
            <para>The default name is the full class name of the Form.</para>
            </remarks>
        </member>
        <member name="P:RssBandit.WinGui.Controls.WindowSerializer.SaveOnlyLocation">
            <summary>
            Get or set the boolean to save only the location of a form, but not the size.
            Default is False.
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Controls.WindowSerializer.SaveNoWindowState">
            <summary>
            Get or set the boolean to prevent saving of the WindowState.
            Default is False.
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Controls.NavigatorHeaderDrawFilter">
            <summary>
            Helps to draw the small chevron.
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Controls.VisualStyles">
            <summary>
            Enumeration to sepcify the visual style to be applied to the CollapsibleSplitter control
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Controls.SplitterState">
            <summary>
            Enumeration to specify the current animation state of the control.
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Controls.CollapsibleSplitter">
            <summary>
            A custom collapsible splitter that can resize, hide and show associated form controls
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Controls.CollapsibleSplitter.IsCollapsed">
            <summary>
            The initial state of the Splitter. Set to True if the control to hide is not visible by default
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Controls.CollapsibleSplitter.ControlToHide">
            <summary>
            The System.Windows.Forms.Control that the splitter will collapse
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Controls.CollapsibleSplitter.UseAnimations">
            <summary>
            Determines if the collapse and expanding actions will be animated
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Controls.CollapsibleSplitter.AnimationDelay">
            <summary>
            The delay in millisenconds between animation steps
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Controls.CollapsibleSplitter.AnimationStep">
            <summary>
            The amount of pixels moved in each animation step
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Controls.CollapsibleSplitter.ExpandParentForm">
            <summary>
            When true the entire parent form will be expanded and collapsed, otherwise just the contol to expand will be changed
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Controls.CollapsibleSplitter.VisualStyle">
            <summary>
            The visual style that will be painted on the control
            </summary>
        </member>
        <member name="P:RssBandit.WinGui.Controls.CollapsibleSplitter.BorderStyle3D">
            <summary>
            An optional border style to paint on the control. Set to Flat for no border
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Controls.CollapsibleSplitterDesigner">
            <summary>
            A simple designer class for the CollapsibleSplitter control to remove 
            unwanted properties at design time.
            </summary>
        </member>
        <member name="T:RssBandit.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:RssBandit.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:RssBandit.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Forms.FeedProperties">
            <summary>
            Feed Properties dialog.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.FeedProperties.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Forms.FeedProperties.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RssBandit.Resource">
            <summary>
            Helper class used to manage application Resources
            </summary>
        </member>
        <member name="M:RssBandit.Resource.#ctor">
            <summary>
            private Constructor
            </summary>
        </member>
        <member name="M:RssBandit.Resource.GetStream(System.String)">
            <summary>
            Gets a resource stream with the messages used by the Bandit classes
            </summary>
            <param name="name">resource key</param>
            <returns>a resource stream</returns>
        </member>
        <member name="M:RssBandit.Resource.LoadCursor(System.String)">
            <summary>
            Loads an Cursor resource from the executing assembly Manifest stream.
            </summary>
            <param name="cursorName">The name of the cursor resource</param>
            <returns>Cursor instance.</returns>
            <remarks>Remember, that resource names within a project subfolder 
            needs to be prefixed with subfolder name like this: "MySubfolder.MyResource.cur".
            The Resource class uses the Namespace of itself to prefix the provided name.
            </remarks>
        </member>
        <member name="M:RssBandit.Resource.LoadIcon(System.String)">
            <summary>
            Loads an Icon resource from the executing assembly Manifest stream.
            </summary>
            <param name="iconName">The name of the icon resource</param>
            <returns>Icon instance.</returns>
            <remarks>Remember, that resource names within a project subfolder 
            needs to be prefixed with subfolder name like this: "MySubfolder.MyResource.ico".
            The Resource class uses the Namespace of itself to prefix the provided name.
            </remarks>
        </member>
        <member name="M:RssBandit.Resource.LoadIcon(System.String,System.Drawing.Size)">
            <summary>
            Loads an Icon resource with a specific size 
            from the executing assembly Manifest stream.
            </summary>
            <param name="iconName">The name of the icon resource</param>
            <param name="iconSize">The size of the icon to load</param>
            <returns>Icon instance.</returns>
            <remarks>Remember, that resource names within a project subfolder 
            needs to be prefixed with subfolder name like this: "MySubfolder.MyResource.ico".
            The Resource class uses the Namespace of itself to prefix the provided name.
            </remarks>
        </member>
        <member name="M:RssBandit.Resource.LoadBitmap(System.String)">
            <summary>
            Loads an Bitmap resource 
            from the executing assembly Manifest stream.
            </summary>
            <param name="imageName">Name of the bitmap resource</param>
            <returns>Bitmap instance.</returns>
            <remarks>Remember, that resource names within a project subfolder 
            needs to be prefixed with subfolder name like this: "MySubfolder.MyResource.gif".
            The Resource class uses the Namespace of itself to prefix the provided name.
            </remarks>
        </member>
        <member name="M:RssBandit.Resource.LoadBitmap(System.String,System.Drawing.Point)">
            <summary>
            Loads an Bitmap resource 
            from the executing assembly Manifest stream and makes it transparent.
            </summary>
            <param name="imageName">Name of the bitmap resource</param>
            <param name="transparentPixel">A pixel, that marks a color at the position
            to be used as transparent color.</param>
            <returns>Bitmap instance.</returns>
            <remarks>Remember, that resource names within a project subfolder 
            needs to be prefixed with subfolder name like this: "MySubfolder.MyResource.bmp".
            The Resource class uses the Namespace of itself to prefix the provided name.
            </remarks>
        </member>
        <member name="M:RssBandit.Resource.LoadBitmapStrip(System.String,System.Drawing.Size)">
            <summary>
            Loads an BitmapStrip resource 
            from the executing assembly Manifest stream.
            </summary>
            <param name="imageName">Name of the BitmapStrip resource</param>
            <param name="imageSize">Size of one image</param>
            <returns>ImageList instance, that contains the images from the strip</returns>
            <remarks>Remember, that resource names within a project subfolder 
            needs to be prefixed with subfolder name like this: "MySubfolder.MyStripResource.bmp".
            The Resource class uses the Namespace of itself to prefix the provided name.
            </remarks>
        </member>
        <member name="M:RssBandit.Resource.LoadBitmapStrip(System.String,System.Drawing.Size,System.Drawing.Point)">
            <summary>
            Loads an BitmapStrip resource 
            from the executing assembly Manifest stream and makes it transparent.
            </summary>
            <param name="imageName">Name of the BitmapStrip resource</param>
            <param name="imageSize">Size of one image</param>
            <param name="transparentPixel">A pixel, that marks a color at the position
            to be used as transparent color.</param>
            <returns>ImageList instance, that contains the images from the strip</returns>
            <remarks>Remember, that resource names within a project subfolder 
            needs to be prefixed with subfolder name like this: "MySubfolder.MyStripResource.bmp".
            The Resource class uses the Namespace of itself to prefix the provided name.
            </remarks>
        </member>
        <member name="T:RssBandit.Resource.NewsItemImage">
            <summary>
            News Item Core Image Indexes. 
            It is important that the Read state preceeds the Unread state by one!
            </summary>
        </member>
        <member name="T:RssBandit.Resource.NewsItemRelatedImage">
            <summary>
            The used listview image index offsets
            (centralized here to enable easier icon modifications).
            </summary>
        </member>
        <member name="T:RssBandit.Resource.ToolItemImage">
            <summary>
            Main Toolitems Image Indexes. 
            </summary>
        </member>
        <member name="F:RssBandit.Resource.ToolItemImage.BrowserItemImageOffset">
            <summary>
            This offset is used to address BrowserItemImage's
            within AllToolsImages.bmp strip!
            </summary>
            <example>
            int openFolderIndex = 
              ToolItemImage.BrowserItemImageOffset + 
              BrowserItemImage.OpenFolder;
            </example>
        </member>
        <member name="T:RssBandit.Resource.BrowserItemImage">
            <summary>
            Browser Toolitems Image Indexes. 
            </summary>
        </member>
        <member name="T:RssBandit.Resource.SubscriptionTreeImage">
            <summary>
            The used subscription tree image index offsets
            (centralized here to enable easier icon modifications).
            </summary>
        </member>
        <member name="T:RssBandit.Resource.Toolbar">
            <summary>
            Defines toolbar keys
            </summary>
        </member>
        <member name="T:RssBandit.Resource.NavigatorGroup">
            <summary>
            Defines Navigator Group keys
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.SynchronizationFormat">
            <summary>
            The format used during synchronization of two instances of RSS Bandit. 
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.SynchronizationFormat.Zip">
            <summary>
            A ZIP file called rssbandit-state.zip containing feedlist.xml, flagitems.xml, replyitems.xml and 
            searchfolders.xml is used for synchronization. 
            </summary>
        </member>
        <member name="F:RssBandit.WinGui.SynchronizationFormat.Siam">
            <summary>
            A SIAM file called feeds.siam is used for synchronization. 
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.NgosDownloadFeedState">
            <summary>
            Helper class used for passing data between callbacks
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.RemoteFeedlistThreadHandler">
            <summary>
            Summary description for RemoteFeedlistThreadHandler.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.RemoteFeedlistThreadHandler.RunUpload">
            <summary>
            Upload application state either as a ZIP file or as a SIAM file 
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.RemoteFeedlistThreadHandler.ZipFiles(System.String[],ICSharpCode.SharpZipLib.Zip.ZipOutputStream)">
            <summary>
            Zips up the files listed into the specified stream
            </summary>
            <param name="files">The list of files to zip</param>
            <param name="zos">The stream to store the zipped files</param>
        </member>
        <member name="M:RssBandit.WinGui.RemoteFeedlistThreadHandler.RunUpload(RssBandit.WinGui.SynchronizationFormat)">
            <summary>
            Upload application state either as a ZIP file or as a SIAM file 
            </summary>
            <param name="syncFormat">The synchronization format to use</param>
        </member>
        <member name="M:RssBandit.WinGui.RemoteFeedlistThreadHandler.RunDownload">
            <summary>
            Download application state either as a ZIP file or as a SIAM file from a remote location.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.RemoteFeedlistThreadHandler.RunDownload(RssBandit.WinGui.SynchronizationFormat)">
            <summary>
            Download application state either as a ZIP file or as a SIAM file from a remote location.
            </summary>
            <param name="syncFormat">The synchronization format to use</param>
        </member>
        <member name="M:RssBandit.WinGui.RemoteFeedlistThreadHandler.Synchronize(System.IO.Stream,RssBandit.WinGui.SynchronizationFormat)">
            <summary>
            Synchronizes the current state of RSS Bandit from the data in the stream. 
            </summary>
            <param name="stream">The data to synchronize RSS Bandit from</param>
            <param name="syncFormat">The synchronization format used</param>
        </member>
        <member name="M:RssBandit.WinGui.RemoteFeedlistThreadHandler.NgosDownloadFeedToGetReadItems(System.Object)">
            <summary>
            Helper method which downloads a feed from Newsgator Online so we can 
            determine what we've read in NewsgatorOnline that aren't marked as read in RSS Bandit
            </summary>
            <param name="stateInfo">The state information needed to perform the operation</param>	
        </member>
        <member name="M:RssBandit.WinGui.RemoteFeedlistThreadHandler.NgosDownloadFeedToSetReadItems(System.Object)">
            <summary>
            Helper method which downloads a feed from Newsgator Online so we can get 
            the Post IDs of items we've read that aren't marked as read on Newsgator Online. 
            </summary>
            <param name="stateInfo">The state information needed to perform the operation</param>
        </member>
        <member name="M:RssBandit.WinGui.RemoteFeedlistThreadHandler.GetFolderId(RssBandit.CLR20.com.newsgator.services1.FolderWebService,NewsComponents.Feed.feedsFeed,System.Xml.XmlElement)">
            <summary>
            Helper method which gets the FolderID for the specified folder from NewsGator. 	
            </summary>
            <param name="fows">The NewsGator folder Web service</param>
            <param name="feed">The feed whose folder ID we are seeking</param>
            <param name="newsgatorOpml">The NewsGator OPML file</param>
            <returns>The NewsGator folder ID of the item</returns>
        </member>
        <member name="M:RssBandit.WinGui.RemoteFeedlistThreadHandler.CreateNewsgatorCategoryHive(RssBandit.CLR20.com.newsgator.services1.FolderWebService,NewsComponents.Feed.feedsFeed,System.Xml.XmlElement)">
            <summary>
            Helper method used for constructing folders in NewsGator Online.
            </summary>
            <param name="fows">The NewsGator folder Web service</param>
            <param name="feed">The feed whose folder ID we are seeking</param>
            <param name="newsgatorOpml">The NewsGator OPML file</param>
            <returns>The NewsGator folder ID of the item</returns>
        </member>
        <member name="M:RssBandit.WinGui.RemoteFeedlistThreadHandler.GetReadItemUrls(NewsComponents.Feed.feedsFeed,System.Collections.Generic.List{System.String})">
            <summary>
            Helper method that returns the permalink URLs of read items for 
            the specified feed into the provided collection. 
            </summary>
            <param name="f">The feed whose unread and deleted items are being fetched</param>
            <param name="readItems">The collection in which to place the URLs of the read items</param>
        </member>
        <member name="T:Genghis.Windows.Forms.CursorChanger">
            <summary>
            A class to change the cursor for the current window. 
            Upon Disposal, the class will return the original 
            cursor.
            </summary>
            <example>This example shows how the cursor will be changed during the scope 
            of the object (before disposal):
            <code>
            using (ChangeCursor cursorChanger = new CursorChanger(Cursors.WaitCursor))
            {
              ...
            }
            </code>
            </example>
        </member>
        <member name="M:Genghis.Windows.Forms.CursorChanger.#ctor(System.Windows.Forms.Cursor)">
            <summary>
            Constructs a new CursorChanger object specifying the new Cursor to show.
            </summary>
            <param name="newCursor">The new cursor to show during the lifetime 
            of the CursorChanger object</param>
        </member>
        <member name="M:Genghis.Windows.Forms.CursorChanger.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:Genghis.Windows.Forms.CursorChanger.Dispose">
            <summary>
            Dispose method.  Returns the original 
            </summary>
        </member>
        <member name="T:RssBandit.WinGui.Dialogs.SearchEngineProperties">
            <summary>
            Summary description for SearchEngineProperties.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Dialogs.SearchEngineProperties.#ctor(RssBandit.WebSearch.SearchEngine)">
            <summary>
            Initializes the dialog to display WebSearchEngine properties.
            </summary>
            <param name="engine">SearchEngine to display</param>
        </member>
        <member name="M:RssBandit.WinGui.Dialogs.SearchEngineProperties.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Dialogs.SearchEngineProperties.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Dialogs.FeedSourceDialog.FontToString(System.Drawing.Font)">
            <summary>
            Convert Font to a serializable string
            </summary>
            <param name="font"></param>
            <returns></returns>
        </member>
        <member name="M:RssBandit.WinGui.Dialogs.FeedSourceDialog.StringToFont(System.String,System.Drawing.Font)">
            <summary>
            Transform string name to font.
            </summary>
            <param name="name">The name.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:RssBandit.WinGui.Dialogs.FeedSourceDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RssBandit.WinGui.Dialogs.FeedSourceDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ThListView.Sorting.ThreadedListViewItemComparer">
            <summary>
            Provides simple text sorting (case sensitive)
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ThListView.Sorting.ThreadedListViewItemComparer.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="sortColumn">Column to be sorted</param>
            <param name="ascending">true, if ascending order, false otherwise</param>
        </member>
        <member name="M:System.Windows.Forms.ThListView.Sorting.ThreadedListViewItemComparer.Compare(System.Object,System.Object)">
            <summary>
            Implementation of IComparer.Compare
            </summary>
            <param name="lhs">First Object to compare</param>
            <param name="rhs">Second Object to compare</param>
            <returns>Less that zero if lhs is less than rhs. Greater than zero if lhs greater that rhs. Zero if they are equal</returns>
        </member>
        <member name="M:System.Windows.Forms.ThListView.Sorting.ThreadedListViewItemComparer.OnCompare(System.String,System.String)">
            <summary>
            Overridden to do type-specific comparision.
            </summary>
            <param name="lhs">First Object to compare</param>
            <param name="rhs">Second Object to compare</param>
            <returns>Less that zero if lhs is less than rhs. Greater than zero if lhs greater that rhs. Zero if they are equal</returns>
        </member>
        <member name="T:System.Windows.Forms.ThListView.Sorting.ThreadedListViewTextItemComparer">
            <summary>
            Provides text sorting (case sensitive)
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ThListView.Sorting.ThreadedListViewTextItemComparer.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="sortColumn">Column to be sorted</param>
            <param name="ascending">true, if ascending order, false otherwise</param>
        </member>
        <member name="T:System.Windows.Forms.ThListView.Sorting.ThreadedListViewCaseInsensitiveTextItemComparer">
            <summary>
            Provides text sorting (case in-sensitive)
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ThListView.Sorting.ThreadedListViewCaseInsensitiveTextItemComparer.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="sortColumn">Column to be sorted</param>
            <param name="ascending">true, if ascending order, false otherwise</param>
        </member>
        <member name="M:System.Windows.Forms.ThListView.Sorting.ThreadedListViewCaseInsensitiveTextItemComparer.OnCompare(System.String,System.String)">
            <summary>
            Case-insensitive compare
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ThListView.Sorting.ThreadedListViewDateTimeItemComparer">
            <summary>
            Provides date sorting
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ThListView.Sorting.ThreadedListViewDateTimeItemComparer.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="sortColumn">Column to be sorted</param>
            <param name="ascending">true, if ascending order, false otherwise</param>
        </member>
        <member name="M:System.Windows.Forms.ThListView.Sorting.ThreadedListViewDateTimeItemComparer.OnCompare(System.String,System.String)">
            <summary>
            Date compare
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ThListView.Sorting.ThreadedListViewInt32ItemComparer">
            <summary>
            Provides integer (32 bits) sorting
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ThListView.Sorting.ThreadedListViewInt32ItemComparer.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="sortColumn">Column to be sorted</param>
            <param name="ascending">true, if ascending order, false otherwise</param>
        </member>
        <member name="M:System.Windows.Forms.ThListView.Sorting.ThreadedListViewInt32ItemComparer.OnCompare(System.String,System.String)">
            <summary>
            Integer compare
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ThListView.Sorting.ThreadedListViewInt64ItemComparer">
            <summary>
            Provides integer (64 bits) sorting
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ThListView.Sorting.ThreadedListViewInt64ItemComparer.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="sortColumn">Column to be sorted</param>
            <param name="ascending">true, if ascending order, false otherwise</param>
        </member>
        <member name="M:System.Windows.Forms.ThListView.Sorting.ThreadedListViewInt64ItemComparer.OnCompare(System.String,System.String)">
            <summary>
            Integer compare
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ThListView.Sorting.ThreadedListViewDoubleItemComparer">
            <summary>
            Provides floating-point sorting
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ThListView.Sorting.ThreadedListViewDoubleItemComparer.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="sortColumn">Column to be sorted</param>
            <param name="ascending">true, if ascending order, false otherwise</param>
        </member>
        <member name="M:System.Windows.Forms.ThListView.Sorting.ThreadedListViewDoubleItemComparer.OnCompare(System.String,System.String)">
            <summary>
            Floating-point compare
            </summary>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services1.FolderWebService">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services1.FolderWebService.#ctor">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services1.FolderWebService.GetOrCreateFolder(System.String,System.Int32,System.String)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services1.FolderWebService.BeginGetOrCreateFolder(System.String,System.Int32,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services1.FolderWebService.EndGetOrCreateFolder(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services1.FolderWebService.GetOrCreateFolderAsync(System.String,System.Int32,System.String)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services1.FolderWebService.GetOrCreateFolderAsync(System.String,System.Int32,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services1.FolderWebService.CreateFolder(System.String,System.Int32,System.String)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services1.FolderWebService.BeginCreateFolder(System.String,System.Int32,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services1.FolderWebService.EndCreateFolder(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services1.FolderWebService.CreateFolderAsync(System.String,System.Int32,System.String)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services1.FolderWebService.CreateFolderAsync(System.String,System.Int32,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services1.FolderWebService.DeleteFolder(System.Int32)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services1.FolderWebService.BeginDeleteFolder(System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services1.FolderWebService.EndDeleteFolder(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services1.FolderWebService.DeleteFolderAsync(System.Int32)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services1.FolderWebService.DeleteFolderAsync(System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services1.FolderWebService.MoveFolder(System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services1.FolderWebService.BeginMoveFolder(System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services1.FolderWebService.EndMoveFolder(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services1.FolderWebService.MoveFolderAsync(System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services1.FolderWebService.MoveFolderAsync(System.Int32,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services1.FolderWebService.RenameFolder(System.Int32,System.String)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services1.FolderWebService.BeginRenameFolder(System.Int32,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services1.FolderWebService.EndRenameFolder(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services1.FolderWebService.RenameFolderAsync(System.Int32,System.String)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services1.FolderWebService.RenameFolderAsync(System.Int32,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services1.FolderWebService.GetFolders">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services1.FolderWebService.BeginGetFolders(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services1.FolderWebService.EndGetFolders(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services1.FolderWebService.GetFoldersAsync">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services1.FolderWebService.GetFoldersAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:RssBandit.CLR20.com.newsgator.services1.FolderWebService.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:RssBandit.CLR20.com.newsgator.services1.FolderWebService.GetOrCreateFolderCompleted">
            <remarks/>
        </member>
        <member name="E:RssBandit.CLR20.com.newsgator.services1.FolderWebService.CreateFolderCompleted">
            <remarks/>
        </member>
        <member name="E:RssBandit.CLR20.com.newsgator.services1.FolderWebService.DeleteFolderCompleted">
            <remarks/>
        </member>
        <member name="E:RssBandit.CLR20.com.newsgator.services1.FolderWebService.MoveFolderCompleted">
            <remarks/>
        </member>
        <member name="E:RssBandit.CLR20.com.newsgator.services1.FolderWebService.RenameFolderCompleted">
            <remarks/>
        </member>
        <member name="E:RssBandit.CLR20.com.newsgator.services1.FolderWebService.GetFoldersCompleted">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services1.NGAPIToken">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services1.NGAPIToken.Token">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services1.GetOrCreateFolderCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services1.GetOrCreateFolderCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services1.GetOrCreateFolderCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services1.CreateFolderCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services1.CreateFolderCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services1.CreateFolderCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services1.DeleteFolderCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services1.MoveFolderCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services1.RenameFolderCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services1.GetFoldersCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RssBandit.CLR20.com.newsgator.services1.GetFoldersCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:RssBandit.CLR20.com.newsgator.services1.GetFoldersCompletedEventArgs.Result">
            <remarks/>
        </member>
    </members>
</doc>
