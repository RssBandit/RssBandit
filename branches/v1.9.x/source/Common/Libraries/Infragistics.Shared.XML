<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Infragistics.Shared</name>
    </assembly>
    <members>
        <member name="T:Infragistics.Shared.ISparseArrayItem">
            <summary>
            This interface can be implemented on items to be contained in the sparse 
            array to get a fast IndexOf operation.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.ISparseArrayItem.GetOwnerData(Infragistics.Shared.SparseArray)">
            <summary>
            Gets the owner data of the item.
            </summary>
            <param name="context">The sparse array context.</param>
            <remarks>
            <p class="body"><b>GetOwnerData</b> and <see cref="M:Infragistics.Shared.ISparseArrayItem.SetOwnerData(System.Object,Infragistics.Shared.SparseArray)"/> methods are used by the <see cref="T:Infragistics.Shared.SparseArray"/> implementation to maintain a transparent piece of data. It uses this data to provide efficient IndexOf operation.</p>
            </remarks>
            <returns>The owner data of the item.</returns>
        </member>
        <member name="M:Infragistics.Shared.ISparseArrayItem.SetOwnerData(System.Object,Infragistics.Shared.SparseArray)">
            <summary>
            Sets the owner data of the item.
            </summary>
            <param name="ownerData">The owner data to assign to the item.</param>
            <param name="context">The sparse array context.</param>
            <remarks>
            <p class="body"><see cref="M:Infragistics.Shared.ISparseArrayItem.GetOwnerData(Infragistics.Shared.SparseArray)"/> and <b>SetOwnerData</b> methods are used by the <see cref="T:Infragistics.Shared.SparseArray"/> implementation to maintain a transparent piece of data. It uses this data to provide efficient IndexOf operation.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.Shared.ISparseArrayMultiItem">
            <summary>
            ISparseArrayMultiItem interface.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.ISparseArrayMultiItem.GetItemAtScrollIndex(System.Int32)">
            <summary>
            Returns a descendant item at the specified index. The returned item 
            doesn't necessarily have to be an immediate child.
            </summary>
            <param name="scrollIndex">The index of the descendant item.</param>
            <returns>The descendant item found at the specified index.</returns>
        </member>
        <member name="P:Infragistics.Shared.ISparseArrayMultiItem.ScrollCount">
            <summary>
            Gets the scroll count of this item. If the scroll count is 0 then item 
            is considered hidden otherwise it's considered visible. Scroll count must 
            be a non-negative number.
            </summary>
        </member>
        <member name="T:Infragistics.Shared.ICreateItemCallback">
            <summary>
            ICreateItemCallback interface.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.ICreateItemCallback.CreateItem(Infragistics.Shared.SparseArray,System.Int32)">
            <summary>
            Returns a new item to be assigned to a location in the array. CreateItem should not 
            set the new item at the location in the array. Array and relativeIndex are provided 
            for information only. Also the implementation should not modify array in any way 
            otherwise results will be undefined.
            </summary>
            <param name="array">The array to provide as context; this array will remain unmodified.</param>
            <param name="relativeIndex">The relative index of the item to create.</param>
        </member>
        <member name="T:Infragistics.Shared.SparseArray">
            <summary>
            SparseArray class.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.SparseArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Shared.SparseArray"/> class with the default factor
            </summary>
        </member>
        <member name="M:Infragistics.Shared.SparseArray.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Shared.SparseArray"/> class
            </summary>
            <param name="useOwnerData">If true then either all items should implement ISparseArrayItem interface or the derived class should override <see cref="M:Infragistics.Shared.SparseArray.GetOwnerData(System.Object)"/> and <see cref="M:Infragistics.Shared.SparseArray.SetOwnerData(System.Object,System.Object)"/> methods to maintain owner data for items.</param>
        </member>
        <member name="M:Infragistics.Shared.SparseArray.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Shared.SparseArray"/> class .
            </summary>
            <param name="factor">The number in determining how the array should grow.</param>
        </member>
        <member name="M:Infragistics.Shared.SparseArray.#ctor(System.Int32,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Shared.SparseArray"/> class.
            </summary>
            <param name="factor">The number in determining how the array should grow.</param>
            <param name="growthFactor">Must be between 0f and 1f exclusive.</param>
        </member>
        <member name="M:Infragistics.Shared.SparseArray.#ctor(System.Int32,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Shared.SparseArray"/> class.
            </summary>
            <param name="factor">The number in determining how the array should grow.</param>
            <param name="growthFactor">Must be between 0f and 1f exclusive.</param>
            <param name="useOwnerData">If true then all the items must implement ISparseArrayItem interface.</param>
        </member>
        <member name="M:Infragistics.Shared.SparseArray.#ctor(System.Boolean,System.Int32,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Shared.SparseArray"/> class.
            </summary>
            <param name="manageScrollCounts">Specifies whether scroll count and position should be maintained.</param>
            <param name="factor">The number in determining how the array should grow.</param>
            <param name="growthFactor">Must be between 0f and 1f exclusive.</param>
        </member>
        <member name="M:Infragistics.Shared.SparseArray.Expand(System.Int32)">
            <summary>
            Expands the array to the new count. New count must be greater than or equal to the 
            current count. This has the same logical effect as adding new count - current count 
            number of null items at the end of the array.
            </summary>
            <param name="newCount">The new size of the array.</param>
        </member>
        <member name="M:Infragistics.Shared.SparseArray.Add(System.Object)">
            <summary>
            Adds the speicifed item at the end of the collection.
            </summary>
            <param name="item"></param>
            <returns>The index at which the item was added.</returns>
        </member>
        <member name="M:Infragistics.Shared.SparseArray.Insert(System.Int32,System.Object)">
            <summary>
            Inserts the specified item at the specified location in the array.
            </summary>
            <param name="index">The location in the array that the item should be inserted.</param>
            <param name="item">The item to insert into the array.</param>
        </member>
        <member name="M:Infragistics.Shared.SparseArray.AddRange(System.Collections.ICollection)">
            <summary>
            Adds items in the specified collection to the end of the collection.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Infragistics.Shared.SparseArray.InsertRange(System.Int32,System.Collections.ICollection)">
            <summary>
            Inserts items in the specified collection to the collection at the specified index.
            </summary>
            <param name="index">The index at which to insert the specified items.</param>
            <param name="items">The collection of items to insert into the array.</param>
        </member>
        <member name="M:Infragistics.Shared.SparseArray.RemoveAt(System.Int32)">
            <summary>
            Removes an item at the specified index.
            </summary>
            <param name="index">The index of the item to remove.</param>
        </member>
        <member name="M:Infragistics.Shared.SparseArray.IndexOf(System.Object)">
            <summary>
            Retruns the index of the specified item.
            </summary>
            <param name="item">The item whose index should be determined.</param>
            <returns>The index of the specified item, or -1 if the item is not found.</returns>
        </member>
        <member name="M:Infragistics.Shared.SparseArray.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes count number of items starting at the specified index in the array.
            </summary>
            <param name="index">The location in the array of the first item to remove.</param>
            <param name="count">The number of items to remove from the collection.</param>
        </member>
        <member name="M:Infragistics.Shared.SparseArray.Remove(System.Object)">
            <summary>
            Removes the specified item. If the item doesn't exist in the collection, it does nothing.
            </summary>
            <param name="value">The item to remove from the array.</param>
        </member>
        <member name="M:Infragistics.Shared.SparseArray.Contains(System.Object)">
            <summary>
            Returns true if the specified item is contained in the collection.
            </summary>
            <param name="value">The item that should be searched for within the collection.</param>
            <returns>True if the object was found in the collection, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Shared.SparseArray.Clear">
            <summary>
            Removes all items from the array.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.SparseArray.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies all the elements from this collection to the specified array starting at index.
            </summary>
            <param name="array">The array into which the items should be copied.</param>
            <param name="index">The position in the array at which copying should begin.</param>
        </member>
        <member name="M:Infragistics.Shared.SparseArray.CopyTo(System.Array,System.Int32,Infragistics.Shared.ICreateItemCallback)">
            <summary>
            Copies all the elements from this collection to the specified array starting at index.
            </summary>
            <param name="array">The array into which the items should be copied.</param>
            <param name="index">The position in the array at which copying should begin.</param>
            <param name="callback">A callback mechanism used to insert new items when null slots are encountered.</param>
        </member>
        <member name="M:Infragistics.Shared.SparseArray.ToArray">
            <summary>
            Returns a new array containing all the elements of this collection.
            </summary>
            <returns>An object array containing all the elements of this collection.</returns>
        </member>
        <member name="M:Infragistics.Shared.SparseArray.ToArray(System.Type)">
            <summary>
            Returns a new array of specified type containing all the elements of this collection.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of array to create.</param>
            <returns>An array of the specified type containing all the elements of this collection.</returns>
        </member>
        <member name="M:Infragistics.Shared.SparseArray.GetItem(System.Int32)">
            <summary>
            Gets the item at the specified index. If the item at the specified index is null 
            and createItemCallback parameter is non-null, it will call CreateItem on the 
            callback to create it and set it on the array at the specified index.
            </summary>
            <param name="index">The index of the item to get.</param>
            <returns>The item at the specified index, or null if no item exists.</returns>
        </member>
        <member name="M:Infragistics.Shared.SparseArray.GetItem(System.Int32,Infragistics.Shared.ICreateItemCallback)">
            <summary>
            Gets the item at the specified index. If the item at the specified index is null 
            and createItemCallback parameter is non-null, it will call CreateItem on the 
            callback to create it and set it on the array at the specified index.
            </summary>
            <param name="index">The index of the item to get.</param>
            <param name="createItemCallback">A callback mechanism used to insert new items when null slots are encountered.</param>
            <returns>The item at the specified index, or null if no item exists.</returns>
        </member>
        <member name="M:Infragistics.Shared.SparseArray.Reverse">
            <summary>
            Reverses the order of items in the collection.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.SparseArray.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses the order of items in the specified range.
            </summary>
            <param name="index">The location of the first item in the array to start reversing.</param>
            <param name="count">The number of items to reverse.</param>
        </member>
        <member name="M:Infragistics.Shared.SparseArray.Sort">
            <summary>
            Sorts the array.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.SparseArray.Sort(System.Collections.IComparer)">
            <summary>
            Sorts the array.
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:Infragistics.Shared.SparseArray.GetOwnerData(System.Object)">
            <summary>
            Returns the owner data of the item. Derived class can override <b>GetOwnerData</b> and <b>SetOwnerData</b> to support owner data without having to implement ISparseArrayItem interface on the items.
            </summary>
            <param name="item">The item whose owner data should be returned.</param>
            <returns>The owner data of the item, or null if none found.</returns>
        </member>
        <member name="M:Infragistics.Shared.SparseArray.SetOwnerData(System.Object,System.Object)">
            <summary>
            Sets the owner data on item. Derived class can override <b>GetOwnerData</b> and <b>SetOwnerData</b> to support owner data without having to implement ISparseArrayItem interface on the items.
            </summary>
            <param name="item">The item whose owner data should be assigned.</param>
            <param name="ownerData">The owner data to assign to the item.</param>
        </member>
        <member name="M:Infragistics.Shared.SparseArray.GetVisibleCount">
            <summary>
            Returns the visible count.
            </summary>
            <returns>The number of visible items.</returns>
        </member>
        <member name="M:Infragistics.Shared.SparseArray.GetScrollCount">
            <summary>
            Returns the scroll count.
            </summary>
            <returns>The total scroll count of all scroll areas.</returns>
        </member>
        <member name="M:Infragistics.Shared.SparseArray.GetVisibleIndexOf(Infragistics.Shared.ISparseArrayMultiItem)">
            <summary>
            Returns the visible index associted with the specified item. Item must be contained 
            within the array. If the item is hidden, that is it's ScrollCount is 0, the this
            method returns -1.
            </summary>
            <param name="item">The item whose visible index should be determined.</param>
            <returns>The visible index of the specified item.</returns>
        </member>
        <member name="M:Infragistics.Shared.SparseArray.GetScrollIndexOf(Infragistics.Shared.ISparseArrayMultiItem)">
            <summary>
            Gets the scroll index of the specified item.
            </summary>
            <param name="item">The item whose scroll index should be returned.</param>
            <returns>The scroll index of the specified item.</returns>
        </member>
        <member name="M:Infragistics.Shared.SparseArray.GetScrollIndexOf(Infragistics.Shared.ISparseArrayMultiItem,System.Boolean)">
            <summary>
            Gets the scroll index of the specified item.
            </summary>
            <param name="item">The item whose scroll index should be returned.</param>
            <param name="ignoreItemHiddenState">If false then returns -1 if the item is hidden. 
            If true, returns the visible index of item as it would have been if it were visible.
            This parameter doesn't have any effect on the returned value if the item is not hidden.
            </param>
            <returns>The scroll index of the specified item.</returns>
        </member>
        <member name="M:Infragistics.Shared.SparseArray.GetItemAtVisibleIndexOffset(Infragistics.Shared.ISparseArrayMultiItem,System.Int32,Infragistics.Shared.ICreateItemCallback)">
            <summary>
            Returns offset'th visible item from startItem. StartItem can be hidden in which case
            it will start from the next visible item. Offset can be 0. If the resulting visible
            index is out of bounds, returns null.
            </summary>
            <param name="startItem">The start item whose visible index is used to base the offset on.</param>
            <param name="offset">The number of places from the start item to check.</param>
            <param name="createItemCallback">The callback mechanism used to create new items when a null slot is encountered.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Shared.SparseArray.GetItemAtVisibleIndex(System.Int32,Infragistics.Shared.ICreateItemCallback)">
            <summary>
            Returns the item at the specified visible index. This method returns null if the visible index is out of bounds.
            </summary>
            <param name="visibleIndex">Visible index at which to get the item.</param>
            <param name="createItemCallback">Optional call back to create the item at the specified visible index if none exists at that visible index.</param>
            <returns>The item at the specified index.</returns>
        </member>
        <member name="M:Infragistics.Shared.SparseArray.GetItemAtScrollIndex(System.Int32,Infragistics.Shared.ICreateItemCallback)">
            <summary>
            Returns the item at the specified scroll index. This method returns null if the scroll index is out of bounds.
            </summary>
            <param name="scrollIndex">Visible index at which to get the item.</param>
            <param name="createItemCallback">Optional call back to create the item at the specified scroll index if none exists at that scroll index.</param>
            <returns>The item at the specified scroll index, or null if the scroll index is out of bounds.</returns>
        </member>
        <member name="M:Infragistics.Shared.SparseArray.NotifyItemScrollCountChanged(Infragistics.Shared.ISparseArrayMultiItem)">
            <summary>
            Whenever a scroll count of an item contained within this collection is changed, 
            the collection must be notified of the change. If not notified of such a change,
            behavior of various scroll and visible index related methods will be undefined.
            </summary>
            <param name="item">Item whose scroll count changed.</param>
        </member>
        <member name="M:Infragistics.Shared.SparseArray.DirtyScrollCountInfo">
            <summary>
            Dirties scroll count info for the whole collection so next time it will be re-calculated.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.SparseArray.OnScrollCountChanged">
            <summary>
            Called by the sparse array whenever visible count or scroll count changes or is dirtied. Default implementation does nothing. This may get called multiple times for the same change as well as may get called even when the count doesn't change but is simply dirtied.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.SparseArray.OnDeserializationComplete">
            <summary>
            Sets the owner data on all the items contained in the tree. Typically you do not 
            need to call this as the sprase array automatically manages the owner data as you
            add and remove items. This is useful if you deserialize the sparse array and
            need to make sure that the owner data are set properly on the contained items.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.SparseArray.GetEnumerator">
            <summary>
            Returns an instance of IEnumerator that can be used to enumerate through all the 
            elements of this collection.
            </summary>
            <returns>A <see cref="T:System.Collections.IEnumerator"/> to traverse the collection.</returns>
        </member>
        <member name="M:Infragistics.Shared.SparseArray.GetEnumerator(Infragistics.Shared.ICreateItemCallback)">
            <summary>
            Returns an instance of IEnumerator that can be used to enumerate through all the 
            elements of this collection. New elements will be created to fill null slots via
            createItemCallback parameter if it's non-null.
            </summary>
            <param name="createItemCallback">A callback mechanism used to insert new items when null slots are encountered.</param>
            <returns>A <see cref="T:System.Collections.IEnumerator"/> to traverse the collection.</returns>
        </member>
        <member name="P:Infragistics.Shared.SparseArray.Count">
            <summary>
            Retruns the number of items contained in the collection.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.SparseArray.Item(System.Int32)">
            <summary>
            Indexer.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.SparseArray.IsSynchronized">
            <summary>
            Indicates whether this collection is synchronized. Always returns false.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.SparseArray.SyncRoot">
            <summary>
            Returns an object that can be used to synchronize thread access.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.SparseArray.NonNullItems">
            <summary>
            Returns a new instance of enumerable that can be used to enumerate through only the non-null items in the collection.
            </summary>
        </member>
        <member name="T:Infragistics.Shared.strings_CalcEngine">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_AnchoredReference">
            <summary>
              Looks up a localized string similar to Attempt to access {0} as an unanchored reference.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_ExplicitThis">
            <summary>
              Looks up a localized string similar to {0} - Explicit This not supported.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_ExternalRange">
            <summary>
              Looks up a localized string similar to Range contains External Reference.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_FormulaNotSupported">
            <summary>
              Looks up a localized string similar to {0} - Attempt to access formula on a reference that doesn&apos;t support formulas.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_InvalidOperand">
            <summary>
              Looks up a localized string similar to Invalid Operand.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_InvalidReference">
            <summary>
              Looks up a localized string similar to Invalid or unavailable reference.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_MethodNotSupported">
            <summary>
              Looks up a localized string similar to {0} does not support {1}..
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_NoCurrentRangeElement">
            <summary>
              Looks up a localized string similar to No current Range Element.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_NullOperand">
            <summary>
              Looks up a localized string similar to Null operand.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_RangeFromLast">
            <summary>
              Looks up a localized string similar to fromT.Last not set.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_RangeFromNull">
            <summary>
              Looks up a localized string similar to RefRange: from is null.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_RangeFromRefBase">
            <summary>
              Looks up a localized string similar to RefRange: from is not a RefBase : {0}.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_RangeLast">
            <summary>
              Looks up a localized string similar to RefRange Validate: last tuples [{0}] != [{1}].
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_RangeNormalizeScope">
            <summary>
              Looks up a localized string similar to RefRange Normalize: bad scope [{0}/{1}].
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_RangeToNull">
            <summary>
              Looks up a localized string similar to RefRange: to is null.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_RangeToRefBase">
            <summary>
              Looks up a localized string similar to RefRange: to is not a RefBase : {0}.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_RangeTuple">
            <summary>
              Looks up a localized string similar to RefRange Validate: tuples [{0}] !=  [{1}].
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_RangeValidateCount">
            <summary>
              Looks up a localized string similar to RefRange Validate: from count {0} != to count {1}.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_ReadOnlyReference">
            <summary>
              Looks up a localized string similar to {0} - Attempt to set value on readonly reference.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_ReferenceNotEumerable">
            <summary>
              Looks up a localized string similar to {0} is not an enumerable reference.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_RefMalformed">
            <summary>
              Looks up a localized string similar to {0} - Malformed Reference  {1}.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_RP_ContainsBase">
            <summary>
              Looks up a localized string similar to RefParser.Contains - Empty Base.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_RP_ContainsTarget">
            <summary>
              Looks up a localized string similar to RefParser.Contains - Empty Target.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_RP_EmptyElement">
            <summary>
              Looks up a localized string similar to Invalid reference {0}. Empty element encountered at location {1}..
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_RP_EmptyReference">
            <summary>
              Looks up a localized string similar to Invalid reference {0}. Reference is empty..
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_RP_MalformedExtra">
            <summary>
              Looks up a localized string similar to RefParser Malformed Reference: Multiple [{0}] found in [{1}].
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_RP_MalformedUnexpected">
            <summary>
              Looks up a localized string similar to RefParser Malformed Reference: Unexpected [{0}] found in [{1}].
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_RP_MergeRelativeBase">
            <summary>
              Looks up a localized string similar to RefParser.Merge: Base is Relative.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_RP_MissingCloseParenthesis">
            <summary>
              Looks up a localized string similar to Invalid reference {0}. Missing close parenthesis..
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_RP_MissingEndQuotes">
            <summary>
              Looks up a localized string similar to Invalid reference {0}. Missing end quotes..
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_RT_Expected">
            <summary>
              Looks up a localized string similar to RefTuple: Expected [{0}] in [{1}].
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_RT_InvalidScope">
            <summary>
              Looks up a localized string similar to Invalid scope: {0}..
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_RT_InvalidScope_CharactersAfterClosingQuotes">
            <summary>
              Looks up a localized string similar to Characters encountered after closing double quotes in {0} scope at location {1}..
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_RT_InvalidTuple_CharactersAfterScopeEnd">
            <summary>
              Looks up a localized string similar to Invalid element {0}. Characters encountered after the end of the scope..
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_RT_InvalidTuple_MissingCloseParenthesis">
            <summary>
              Looks up a localized string similar to Invalid element {0}. Missing close parenthesis..
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_RT_InvalidTuple_MissingEndQuotes">
            <summary>
              Looks up a localized string similar to Invalid element {0}. Missing end quotes..
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_RT_InvalidTuple_NamePortionEmpty">
            <summary>
              Looks up a localized string similar to Invalid element {0}. Element name portion empty..
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_RT_InvalidTuple_ScopeIndexLarge">
            <summary>
              Looks up a localized string similar to Invalid element {0}. Index {1} is invalid: {2}..
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_RT_InvalidTuple_UnescapedCharacter">
            <summary>
              Looks up a localized string similar to Unescaped {0} character encountered in {1} at location {2}..
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_RT_NullRefName">
            <summary>
              Looks up a localized string similar to RefTuple: null RefName.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_RT_Unexpected">
            <summary>
              Looks up a localized string similar to RefTuple: unexpected [{0}] in [{1}].
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_ScopeAllNotLast">
            <summary>
              Looks up a localized string similar to {0} - Scope All must appear in last element  {1}.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_UCErrorCode_Div">
            <summary>
              Looks up a localized string similar to Divide by zero.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_UCErrorCode_Fail">
            <summary>
              Looks up a localized string similar to Fail.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_UCErrorCode_NA">
            <summary>
              Looks up a localized string similar to Not applicable.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_UCErrorCode_Null">
            <summary>
              Looks up a localized string similar to Null Value.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_UCErrorCode_Num">
            <summary>
              Looks up a localized string similar to Invalid numeric values in the function or formula..
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_UCErrorCode_Ok">
            <summary>
              Looks up a localized string similar to Succeed.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_UCErrorCode_Reference">
            <summary>
              Looks up a localized string similar to Invalid or unavailable reference.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_UCErrorCode_Unknown">
            <summary>
              Looks up a localized string similar to Invalid code.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_UCErrorCode_Value">
            <summary>
              Looks up a localized string similar to Incorrect type of argument or operand..
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_UnexpectedScope">
            <summary>
              Looks up a localized string similar to {0} - Unexpected scope for Parent {1}.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_UnknownRange">
            <summary>
              Looks up a localized string similar to Unknown Range Type.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_UnknownRefType">
            <summary>
              Looks up a localized string similar to {0} - Unknown RefType  {1}.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Error_UnknownScope">
            <summary>
              Looks up a localized string similar to {0} - Unknown scope  {1}.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Value_UCErrorCode_Div">
            <summary>
              Looks up a localized string similar to #DIV/0!.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Value_UCErrorCode_Fail">
            <summary>
              Looks up a localized string similar to #FAIL.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Value_UCErrorCode_NA">
            <summary>
              Looks up a localized string similar to #N/A.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Value_UCErrorCode_Null">
            <summary>
              Looks up a localized string similar to #NULL!.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Value_UCErrorCode_Num">
            <summary>
              Looks up a localized string similar to #NUM!.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Value_UCErrorCode_Ok">
            <summary>
              Looks up a localized string similar to #OK.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Value_UCErrorCode_Reference">
            <summary>
              Looks up a localized string similar to #REF!.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Value_UCErrorCode_Unknown">
            <summary>
              Looks up a localized string similar to #N/A.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.strings_CalcEngine.Value_UCErrorCode_Value">
            <summary>
              Looks up a localized string similar to #VALUE!.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcErrorCode">
            <summary>
            Enumeration of error codes assigned to <see cref="T:Infragistics.Win.CalcEngine.UltraCalcErrorValue"/>.
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.UltraCalcErrorCode.Reference">
            <summary>
            Occurs when an invalid or disconnected reference is encountered while evaluating a formula
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.UltraCalcErrorCode.Value">
            <summary>
            Occurs when the wrong type of argument or operand is used in a formula
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.UltraCalcErrorCode.Div">
            <summary>
            Occurs when a number is divided by zero (0)
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.UltraCalcErrorCode.NA">
            <summary>
            Occurs when @NA is entered into a formula
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.UltraCalcErrorCode.Num">
            <summary>
            Occurs with invalid numeric values in a formula or function
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.UltraCalcErrorCode.Circularity">
            <summary>
            Occurs when a circularity formula is used when circularities are not allowed.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcErrorException">
            <summary>
            Exception containing an <see cref="T:Infragistics.Win.CalcEngine.UltraCalcErrorValue"/>.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcException">
            <summary>
            Generic Calc Exception.  All Calc Exceptions derive from this so that a developer can
            easily turn off our exceptions during debugging.
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.UltraCalcException.LocationPlaceholder">
            <summary>
            For Infragistics internal use only.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcException.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.CalcEngine.UltraCalcException"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcException.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.CalcEngine.UltraCalcException"/> with the specified error message
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.CalcEngine.UltraCalcException"/> with the specified error message and exception instance.
            </summary>
            <param name="message">Error message</param>
            <param name="innerException">The exception that caused this exception</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcException.#ctor(System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            For Infragistics internal use only.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcErrorException.#ctor(Infragistics.Win.CalcEngine.UltraCalcErrorValue)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.CalcEngine.UltraCalcErrorException"/> using the specified <see cref="T:Infragistics.Win.CalcEngine.UltraCalcErrorValue"/>
            </summary>
            <param name="errorValue">The UltraCalcErrorValue that has generated the exception.</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcErrorException.ToString">
            <summary>
            Returns the string representation of the underlying error value.
            </summary>
            <returns>The string representation of the underlying error value.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcErrorException.Value">
            <summary>
            Get the <b>UltraCalcErrorValue</b> associated with the exception
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcValueException">
            <summary>
            Calc value Exception
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValueException.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.CalcEngine.UltraCalcValueException"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValueException.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.CalcEngine.UltraCalcValueException"/> with the specified error message.
            </summary>
            <param name="message">Error message text.</param>
            <remarks>
            <p class="body">It's the developer's responsibility to ensure the <i>message</i> text
            has been properly localized.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValueException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.CalcEngine.UltraCalcValueException"/> with the specified error message and exception instance.
            </summary>
            <param name="message">Error message text.</param>
            <param name="innerException">An underlying exception that was responsible for this <see cref="T:Infragistics.Win.CalcEngine.UltraCalcValueException"/> being thrown.</param>
            <remarks>
            <p class="body">It's the developer's responsibility to ensure the <i>message</i> text
            has been properly localized.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcNumberException">
            <summary>
            Number Exception
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcNumberException.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.CalcEngine.UltraCalcNumberException"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcNumberException.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.CalcEngine.UltraCalcNumberException"/> with the specified error message.
            </summary>
            <param name="message">Error message text.</param>
            <remarks>
            <p class="body">It's the developer's responsibility to ensure the <i>message</i> text
            has been properly localized.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcNumberException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.CalcEngine.UltraCalcNumberException"/> with the specified error message and exception instance.
            </summary>
            <param name="message">Error message text.</param>
            <param name="innerException">An underlying exception that was responsible for this <see cref="T:Infragistics.Win.CalcEngine.UltraCalcNumberException"/> being thrown.</param>
            <remarks>
            <p class="body">It's the developer's responsibility to ensure the <i>message</i> text
            has been properly localized.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcErrorValue">
            <summary>
            Provides methods and properties used to define and manage a calculation error value.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcErrorValue.#ctor(Infragistics.Win.CalcEngine.UltraCalcErrorCode)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.CalcEngine.UltraCalcErrorValue"/> with the specified error code.
            </summary>
            <param name="code"><see cref="T:Infragistics.Win.CalcEngine.UltraCalcErrorCode"/> value to assign this instance</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcErrorValue.#ctor(Infragistics.Win.CalcEngine.UltraCalcErrorCode,System.String)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.CalcEngine.UltraCalcErrorValue"/> with the specified error code and error message
            </summary>
            <param name="code"><see cref="T:Infragistics.Win.CalcEngine.UltraCalcErrorCode"/> value</param>
            <param name="message">Localized Message indicating reason for error</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcErrorValue.#ctor(Infragistics.Win.CalcEngine.UltraCalcErrorCode,System.String,System.Object)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.CalcEngine.UltraCalcErrorValue"/> with the specified error code, message and error value.
            </summary>
            <param name="code"><see cref="T:Infragistics.Win.CalcEngine.UltraCalcErrorCode"/> value</param>
            <param name="message">Localized Message indicating reason for error</param>
            <param name="value">Value associated with error</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcErrorValue.ToString">
            <summary>
            Return a string message that denotes reason for error
            </summary>
            <returns>String containing error message</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcErrorValue.RaiseException">
            <summary>
            Raise an <see cref="T:Infragistics.Win.CalcEngine.UltraCalcErrorException"/> exception containing this class's error information
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcErrorValue.Code">
            <summary>
            Gets the error code for this class instance
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcErrorValue.Message">
            <summary>
            Gets error message for this class instance. Note that when setting this property the 
            message is assumed to be localized.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcErrorValue.ErrorValue">
            <summary>
            Gets the error object for this class instance
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.IUltraCalcReference">
            <summary>
            The Primary Reference Inteface.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.IUltraCalcReference.CreateReference(System.String)">
            <summary>
            Create a new reference relative to this reference.  
            </summary>
            <param name="referenceString">The reference string.</param>
            <returns>The new reference.</returns>
            <remarks>
            A reference string may be external or internal.  
            <p>A external reference has the form "//object_name/object_specific_part".  
            The control identified by object_name must implement <see cref="T:Infragistics.Win.CalcEngine.IUltraCalcReference"/> and be able to 
            parse object_specific_part.</p>
            <p>An internal reference is a reference within the same control that implements this 
            instance of the interface.  An internal reference can be absolute or relative.  Absolute 
            references must begin with the "/" character.  Such references must be created relative to
            the root object in the control.  Relative references are created relative to this reference.</p>
            <p>Note that in complex reference models, multiple reference strings may point to the same
            underlying object.  The reference string used to create the reference must be available to
            other methods such as ResolveReference, References and MarkRelativeIndicies.  Consequently, if the reference 
            string is relative, a proxy reference object should be returned that retains the relative
            reference string.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.IUltraCalcReference.CreateRange(System.String,System.String)">
            <summary>
            Create a Range reference relative to this reference.
            </summary>
            <param name="fromReference">The start of the range, inclusive.</param>
            <param name="toReference">The end of the range, inclusive.</param>
            <returns>A RangeReference</returns>
            <remarks>
            CreateRange should return a <see cref="T:Infragistics.Win.CalcEngine.IUltraCalcReference"/> implementation whose References 
            method returns an iterator over the specified range.
            <p>This method must be able to handle external, absolute and relative references as 
            described in the CreateReference method.</p>
            <p>Note that both references in the range must be local to each other.</p>
            </remarks>
            <seealso cref="M:Infragistics.Win.CalcEngine.IUltraCalcReference.CreateReference(System.String)"/>
            <seealso cref="P:Infragistics.Win.CalcEngine.IUltraCalcReference.References"/>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.IUltraCalcReference.ResolveReference(Infragistics.Win.CalcEngine.IUltraCalcReference,Infragistics.Win.CalcEngine.ResolveReferenceType)">
            <summary>
            Resolves a reference relative to this reference.
            </summary>
            <param name="reference">The reference to resolve.</param>
            <param name="referenceType">Indicates whether the reference being resolved is the lvalue of the formula or an rvalue of the formula.</param>
            <returns>The resolved reference.</returns>
            <remarks>
            ResolveReference is used to merge two references while giving precedence to elements with
            more specific scope.  Each element in this reference and the input reference up to but not
            including the last element must be identical except for scope.  If the scopes are not identical,
            then one of the two scopes must be "any".  Note that elements with a scope of relative index
            are converted to scope "any" in the output reference.  This yields an enumerable reference and
            allows the calculation engine to properly construct the dirty network.  
            <p>The last element of the input reference replaces the
            last element of this reference.</p>
            <p>This method is used by the evaluator to take an unscoped reference, such as a column reference,
            and merge into a fully scoped reference, such as a row reference, to yield a cell reference.
            </p><p>
            Note that this method must operate on the reference string used to create the reference.  When
            a reference with relative scope is created by CreateReference, such as [Price(-1)], the underlying
            reference is a column reference. The reference string used to create the refernce is required
            to properly apply the scope to the merged result.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.IUltraCalcReference.MarkRelativeIndices(Infragistics.Win.CalcEngine.IUltraCalcReference)">
            <summary>
            For each reference tuple in this reference that has a relative index, mark the
            corresponding tuple in inReference.
            </summary>
            <param name="inReference">The Reference to be marked.</param>
            <remarks>
            This method is used by the evaluator to set up this reference for resolving an input 
            reference that has elements with a scope of relative index.
            <see>ResolveReference</see>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.IUltraCalcReference.ContainsReference(Infragistics.Win.CalcEngine.IUltraCalcReference)">
            <summary>
            Returns true if this reference contains inReference
            </summary>
            <param name="inReference">The contained candidate.</param>
            <returns>true if inReference is contained by this reference.</returns>
            <remarks>
            This method is used by the calculation engine to determine if the passed in reference
            is either a child of this reference or a more fully scoped version of this reference.  
            Each element in this reference is compared with the corresponding element in the input 
            reference.  If the identifers are the same, and if this scope contains the input scope, then
            the input reference is contained by this reference.  If the input reference is longer than 
            this reference and the common element are contained, then the input reference is contained.
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.IUltraCalcReference.IsSubsetReference(Infragistics.Win.CalcEngine.IUltraCalcReference)">
            <summary>
            Returns true if inReference is a proper subset of this reference
            </summary>
            <param name="inReference">The subset candidate.</param>
            <returns>true if inReference is contained by this reference.</returns>
            <remarks>
            This method is used by the calculation engine to determine if the passed in reference
            is fully contained by this reference.  
            Each element in this reference is compared with the corresponding element in the input 
            reference.  If the identifers are the same, and if this scope entirely contains the input scope, then
            the input reference is a proper subset this reference.  
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.IUltraCalcReference.IsSiblingReference(Infragistics.Win.CalcEngine.IUltraCalcReference)">
            <summary>
            Determines whether the given reference is a sibling of this reference
            </summary>
            <param name="reference">The reference to compare against this one</param>
            <returns>True if the reference is a sibling of the given reference</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.IUltraCalcReference.GetChildReferences(Infragistics.Win.CalcEngine.ChildReferenceType)">
            <summary>
            Returns the child references of the reference. This method can return null.
            </summary>
            <param name="referenceType">The <see cref="T:Infragistics.Win.CalcEngine.ChildReferenceType"/> to retrieve.</param>
            <returns>An array of <see cref="T:Infragistics.Win.CalcEngine.IUltraCalcReference"/> objects that represent the child references.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.IUltraCalcReference.AbsoluteName">
            <summary>
            The fully qualified unique name for the referenced element.  Read Only.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.IUltraCalcReference.ElementName">
            <summary>
            The unqualified name of this referenced element.  Read Only.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.IUltraCalcReference.Value">
            <summary>
            The <see cref="T:Infragistics.Win.CalcEngine.UltraCalcValue"/>, if any, associated with this Reference.  If this reference 
            does not contain a Value then a <see cref="T:Infragistics.Win.CalcEngine.UltraCalcErrorValue"/> is returned.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.IUltraCalcReference.Formula">
            <summary>
            The <see cref="T:Infragistics.Win.CalcEngine.IUltraCalcFormula"/>, if any, associated with this Reference.  If this reference 
            can not contain a formula then null is returned.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.IUltraCalcReference.RecalcVisible">
            <summary>
            Flag used by the calculation engine to manage the recalculation network. 
            Denotes the reference is visible.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.IUltraCalcReference.RecalcDeferred">
            <summary>
            True indicates that recalculating reference's formula can deferred until it become visible.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.IUltraCalcReference.HasRelativeIndex">
            <summary>
            True indicates that the reference was constructed with a relative index.  Read Only.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.IUltraCalcReference.HasAbsoluteIndex">
            <summary>
            True indicates that the reference was constructed with an absolute index.  Read Only.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.IUltraCalcReference.HasScopeAll">
            <summary>
            True indicates that the reference was constructed with an "*" scope index.  Read Only.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.IUltraCalcReference.Context">
            <summary>
            Returns a context for the Reference.
            </summary>
            <remarks><p class="body">Returns a meaningful object context for the reference. This could be an UltraGridCell, UltraGridColumn, NamedReference, Control, etc.</p></remarks>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.IUltraCalcReference.References">
            <summary>
            Return a collection of references if this Reference is enumerable.  An exception is
            thrown if this reference is not enumerable.
            </summary>
            <returns>A Reference collection.</returns>
            <remarks>
            The collection returned by this method must be constained to the scope specified by the 
            original string used to create the reference.  For example, if the original reference string
            was [Customers(State="MA")/Total], then the collection should be constained to the Total cells
            for all customers that have State = "MA".
            </remarks>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.IUltraCalcReference.IsEnumerable">
            <summary>
            Returns true if this reference is enumerable.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.IUltraCalcReference.IsDataReference">
            <summary>
            Returns true if this reference is a data reference.  A data reference contains a value, such as a Grid Cell or
            a Grid SummaryValue.  Many referenced elements, such as a Grid Column or a Grid Band, do not reference a value.
            Read Only. 
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.IUltraCalcReference.Parent">
            <summary>
            The Parent reference of this referenced element.  Used to navigate the element hierarchy.  If this
            referenced element is the root element, <b>Parent</b> returns null.  Read Only.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.IUltraCalcReference.IsDisposedReference">
            <summary>
            True indicates that the reference has been disposed.  Read Only.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.IUltraCalcReference.NormalizedAbsoluteName">
            <summary>
            Returns the normalized absolute name. Calculation engine makes use of normalized
            absolute names of references to compare two references and search for references.
            This property should return the absolute name with case insensitive parts of
            the absolute names converted to lower case.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.ChildReferenceType">
            <summary>
            Used for specifying the referenceType parameter to the <see cref="M:Infragistics.Win.CalcEngine.IUltraCalcReference.GetChildReferences(Infragistics.Win.CalcEngine.ChildReferenceType)"/> method.
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.ChildReferenceType.ReferencesWithFormulas">
            <summary>
            Returns references that have formulas, like column references or summary references 
            but not cell references.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.ResolveReferenceType">
            <summary>
            Specifies the type of reference being resolved in the <see cref="M:Infragistics.Win.CalcEngine.IUltraCalcReference.ResolveReference(Infragistics.Win.CalcEngine.IUltraCalcReference,Infragistics.Win.CalcEngine.ResolveReferenceType)"/> method.
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.ResolveReferenceType.LeftHandSide">
            <summary>
            Specifies that the reference being resolved is the lvalue of the formula.
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.ResolveReferenceType.RightHandSide">
            <summary>
            Specifies that the reference being resolved is an rvalue of the formula.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.IUltraCalcReferenceCollection">
            <summary>
            Collection of <see cref="T:Infragistics.Win.CalcEngine.IUltraCalcReference"/> objects
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFormulaStates">
            <summary>
            Provides a set of properties used by the <b>UltraCalcEngine</b> to manage the recalculation network.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFormulaStates.Reset">
            <summary>
            Resets the bits to false.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFormulaStates.RecalcVisible">
            <summary>
            Denotes the reference is visible.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFormulaStates.RecalcDeferred">
            <summary>
            Denotes whether the calculation of the reference's formula can be deferred until its visible
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcReferenceError">
            <summary>
            Implementation of <see cref="T:Infragistics.Win.CalcEngine.IUltraCalcReference"/> interface that denotes a reference error
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcReferenceError.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Infragistics.Win.CalcEngine.UltraCalcReferenceError"/>.
            </summary>
            <param name="reference">Absolute name of reference</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcReferenceError.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:Infragistics.Win.CalcEngine.UltraCalcReferenceError"/>.
            </summary>
            <param name="reference">Absolute name of reference</param>
            <param name="exception">Exception for which the reference should be created</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcReferenceError.#ctor(System.String,System.String)">
            <summary>
            Reference string constructor
            </summary>
            <param name="reference">Absolute name of reference</param>
            <param name="message">Localized Error message</param>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcReferenceError.Message">
            <summary>
            Get reference error message
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcValue">
            <summary>
            Provides methods that manage a composite data type representing a value.
            </summary>
            <remarks>
            <p class="body">
            An instance of this class may contain one of several base data types including doubles, singles, integers, booleans, strings, and error values.  
            <p></p>
            The class implements the IConvertible interface providing methods to perform conversions between the basic data types.  
            <p></p>
            Additionally the class provides methods to perform basic arithmetic operations and comparisons between <see cref="T:Infragistics.Win.CalcEngine.UltraCalcValue"/> objects.
            </p>
            </remarks>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.UltraCalcValue.value">
            <summary>
            Storage for the underlying data type
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.#ctor(System.Object)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.CalcEngine.UltraCalcValue"/>
            </summary>
            <param name="value">Object to be represented by the <see cref="T:Infragistics.Win.CalcEngine.UltraCalcValue"/>.</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.ToInt">
            <summary>
            Convert this class instance's value to an int
            </summary>
            <returns>A signed 32-bit integer value containing the equivalent value of this instance</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.ToInt(System.IFormatProvider)">
            <summary>
            Convert this class instance's value to an int
            </summary>
            <param name="provider">An <b>IFormatProvider</b> interface implementation that supplies culture-specific formatting information</param>
            <returns>A signed 32-bit integer value containing the equivalent value of this instance</returns>
            <remarks>
            <p class="body">
            If there is no meaningful conversion to an integer this method will throw an <b>InvalidCastException</b>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.ExceptionHandler(System.Exception)">
            <summary>
            Set this class's instance to an <b>UltraCalcErrorValue</b> based on the given exception
            </summary>
            <param name="e">Exception whose value is used to set this instance's error value</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.ToReference">
            <summary>
            Convert this instance's value to a <see cref="T:Infragistics.Win.CalcEngine.IUltraCalcReference"/>.
            </summary>
            <returns>If this instance contains a object that implements the <see cref="T:Infragistics.Win.CalcEngine.IUltraCalcReference"/> interface, this method returns the object instance, else a <see cref="T:Infragistics.Win.CalcEngine.UltraCalcReferenceError"/> is returned.</returns>
            <remarks>
            <p class="body">
            The instance value's underlying data type must be reference to return a reference, else a <see cref="T:Infragistics.Win.CalcEngine.UltraCalcReferenceError"/> is returned.
            <p></p>
            If there is no meaningful conversion to a reference, this method will throw an <b>InvalidCastException</b>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.ToErrorValue">
            <summary>
            Convert this instance's value to an <see cref="T:Infragistics.Win.CalcEngine.UltraCalcErrorValue"/>
            </summary>
            <returns>A <see cref="T:Infragistics.Win.CalcEngine.UltraCalcErrorValue"/> containing the equivalent error code to the value of this instance</returns>
            <remarks>
            <p class="body">
            This method returns an <see cref="T:Infragistics.Win.CalcEngine.UltraCalcErrorValue"/> whose error code is set this instance's error code.
            <p></p>
            If there this instance does not contain an error, a <see cref="T:Infragistics.Win.CalcEngine.UltraCalcErrorValue"/> containing a default value is returned
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.ToString">
            <summary>
            Returns a string representation of this instance's value.
            </summary>
            <returns>String representation of instance's value</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.AreValuesEqual(Infragistics.Win.CalcEngine.UltraCalcValue,Infragistics.Win.CalcEngine.UltraCalcValue)">
            <summary>
            Indicates if the value of the specified <see cref="T:Infragistics.Win.CalcEngine.UltraCalcValue"/> is equivalent to the <see cref="P:Infragistics.Win.CalcEngine.UltraCalcValue.Value"/>
            </summary>
            <param name="x">First <see cref="T:Infragistics.Win.CalcEngine.UltraCalcValue"/> to compare</param>
            <param name="y">Second <see cref="T:Infragistics.Win.CalcEngine.UltraCalcValue"/> to compare</param>
            <returns>True if the values are the same; otherwise false is returned.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.CompareTo(Infragistics.Win.CalcEngine.UltraCalcValue)">
            <summary>
            Compares current instance with the passed in <see cref="T:Infragistics.Win.CalcEngine.UltraCalcValue"/> instance. Returns 
            -1, 1 or 0 depending on whether the current instance is less than, greater than
            or equal to the passed in instance respectively.
            </summary>
            <param name="value">The object that this instance should be compared against.</param>
            <returns>-1, 1 or 0 depending on whether the current instance is less than, greater than
            or equal to the passed in instance respectively.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.CompareTo(Infragistics.Win.CalcEngine.UltraCalcValue,Infragistics.Win.CalcEngine.UltraCalcValue)">
            <summary>
            Compares x and y <see cref="T:Infragistics.Win.CalcEngine.UltraCalcValue"/> instances and returns -1 if x is less than y, 
            1 if x is greater than y and 0 if x and y are equal.
            </summary>
            <param name="x">The first value to compare.</param>
            <param name="y">The value to compare with the first value.</param>
            <returns>-1, 1 or 0 depending on whether the current instance is less than, greater than
            or equal to the passed in instance respectively.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.IsSameValue(Infragistics.Win.CalcEngine.UltraCalcValue)">
            <summary>
            Indicates if the specified <see cref="T:Infragistics.Win.CalcEngine.UltraCalcValue"/> has the save <see cref="P:Infragistics.Win.CalcEngine.UltraCalcValue.Value"/> as this instance.
            </summary>
            <param name="value"><see cref="T:Infragistics.Win.CalcEngine.UltraCalcValue"/> to compare against.</param>
            <returns>True if the <see cref="P:Infragistics.Win.CalcEngine.UltraCalcValue.Value"/> of both instances are equal; otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.GetResolvedValue">
            <summary>
            Gets the resolved value of the reference. This method will walk down the reference chain recursively to get the resolved value of the reference that is not just another reference. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.System#IConvertible#ToUInt64(System.IFormatProvider)">
            <summary>
            Convert this class instance's value to a ulong data type
            </summary>
            <param name="provider">An <b>IFormatProvider</b> interface implementation that supplies culture-specific formatting information</param>
            <returns>An 64-bit unsigned integer equivalent to the value of this instance</returns>
            <remarks>
            <p class="body">
            If there is no meaningful conversion, this method will throw an <b>InvalidCastException</b>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.System#IConvertible#ToSByte(System.IFormatProvider)">
            <summary>
            Convert this class instance's value to a SByte data type
            </summary>
            <param name="provider">An <b>IFormatProvider</b> interface implementation that supplies culture-specific formatting information</param>
            <returns>An 8-bit signed integer equivalent to the value of this instance</returns>
            <remarks>
            <p class="body">
            If there is no meaningful conversion, this method will throw an <b>InvalidCastException</b>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.ToDouble">
            <summary>
            Convert this class instance's value to a double data type
            </summary>
            <seealso cref="M:Infragistics.Win.CalcEngine.UltraCalcValue.ToDouble(System.IFormatProvider)"/>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.ToDouble(System.IFormatProvider)">
            <summary>
            Convert this class instance's value to a double data type
            </summary>
            <param name="provider">An <b>IFormatProvider</b> interface implementation that supplies culture-specific formatting information</param>
            <returns>A double-precision floating-point equivalent to the value of this instance</returns>
            <remarks>
            <p class="body">
            If there is no meaningful conversion, this method will throw an <b>InvalidCastException</b>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.ToDouble(System.Double@)">
            <summary>
            Converts the <see cref="P:Infragistics.Win.CalcEngine.UltraCalcValue.Value"/> to a double data type
            </summary>
            <param name="result">The resulting double value. If the return value is false, the result is 0.</param>
            <returns>True if the value was successfully converted to a double; otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.ToDateTime">
            <summary>
            Convert this class instance's value to a DateTime data type
            </summary>
            <seealso cref="M:Infragistics.Win.CalcEngine.UltraCalcValue.ToDateTime(System.IFormatProvider)"/>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.ToDateTime(System.IFormatProvider)">
            <summary>
            Convert this class instance's value to a DateTime data type
            </summary>
            <param name="provider">An <b>IFormatProvider</b> interface implementation that supplies culture-specific formatting information</param>
            <returns>A <b>DateTime</b> equivalent to the value of this instance</returns>
            <remarks>
            <p class="body">
            If there is no meaningful conversion, this method will throw an <b>InvalidCastException</b>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.ToSingle">
            <summary>
            Convert this class instance's value to a float data type
            </summary>
            <seealso cref="M:Infragistics.Win.CalcEngine.UltraCalcValue.ToSingle(System.IFormatProvider)"/>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.ToSingle(System.IFormatProvider)">
            <summary>
            Convert this class instance's value to a float data type
            </summary>
            <param name="provider">An <b>IFormatProvider</b> interface implementation that supplies culture-specific formatting information</param>
            <returns>A single-precision floating-point equivalent to the value of this instance</returns>
            <remarks>
            <p class="body">
            If there is no meaningful conversion, this method will throw an <b>InvalidCastException</b>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.ToBoolean">
            <summary>
            Convert this class instance's value to a boolean data type
            </summary>
            <seealso cref="M:Infragistics.Win.CalcEngine.UltraCalcValue.ToBoolean(System.IFormatProvider)"/>
            <returns>A boolean floating-point equivalent to the value of this instance</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.ToBoolean(System.IFormatProvider)">
            <summary>
            Convert this class instance's value to a boolean data type
            </summary>
            <param name="provider">An <b>IFormatProvider</b> interface implementation that supplies culture-specific formatting information</param>
            <returns>A boolean floating-point equivalent to the value of this instance</returns>
            <remarks>
            <p class="body">
            If there is no meaningful conversion, this method will throw an <b>InvalidCastException</b>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.ToInt32">
            <summary>
            Convert this class instance's value to a int data type
            </summary>
            <seealso cref="M:Infragistics.Win.CalcEngine.UltraCalcValue.ToInt32(System.IFormatProvider)"/>
            <returns>A 32-bit signed integer floating-point equivalent to the value of this instance</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.ToInt32(System.IFormatProvider)">
            <summary>
            Convert this class instance's value to a int data type
            </summary>
            <param name="provider">An <b>IFormatProvider</b> interface implementation that supplies culture-specific formatting information</param>
            <returns>A 32-bit signed integer floating-point equivalent to the value of this instance</returns>
            <remarks>
            <p class="body">
            If there is no meaningful conversion, this method will throw an <b>InvalidCastException</b>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.System#IConvertible#ToUInt16(System.IFormatProvider)">
            <summary>
            Convert this class instance's value to a ushort data type
            </summary>
            <param name="provider">An <b>IFormatProvider</b> interface implementation that supplies culture-specific formatting information</param>
            <returns>A 16-bit unsigned integer floating-point equivalent to the value of this instance</returns>
            <remarks>
            <p class="body">
            If there is no meaningful conversion, this method will throw an <b>InvalidCastException</b>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.ToInt16">
            <summary>
            Convert this class instance's value to a short data type
            </summary>
            <seealso cref="M:Infragistics.Win.CalcEngine.UltraCalcValue.ToInt16(System.IFormatProvider)"/>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.ToInt16(System.IFormatProvider)">
            <summary>
            Convert this class instance's value to a short data type
            </summary>
            <param name="provider">An <b>IFormatProvider</b> interface implementation that supplies culture-specific formatting information</param>
            <returns>A 16-bit signed integer floating-point equivalent to the value of this instance</returns>
            <remarks>
            <p class="body">
            If there is no meaningful conversion, this method will throw an <b>InvalidCastException</b>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.ToString(System.IFormatProvider)">
            <summary>
            Convert this class instance's value to a string instance data type
            </summary>
            <param name="provider">An <b>IFormatProvider</b> interface implementation that supplies culture-specific formatting information</param>
            <returns>A string instance equivalent to the value of this instance</returns>
            <remarks>
            <p class="body">
            If there is no meaningful conversion, this method will throw an <b>InvalidCastException</b>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.ToByte">
            <summary>
            Convert this class instance's value to a byte data type
            </summary>
            <seealso cref="M:Infragistics.Win.CalcEngine.UltraCalcValue.ToByte(System.IFormatProvider)"/>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.ToByte(System.IFormatProvider)">
            <summary>
            Convert this class instance's value to a byte data type
            </summary>
            <param name="provider">An <b>IFormatProvider</b> interface implementation that supplies culture-specific formatting information</param>
            <returns>A 8-bit unsigned integer equivalent to the value of this instance</returns>
            <remarks>
            <p class="body">
            If there is no meaningful conversion, this method will throw an <b>InvalidCastException</b>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.ToChar">
            <summary>
            Convert this class instance's value to a char data type
            </summary>
            <seealso cref="M:Infragistics.Win.CalcEngine.UltraCalcValue.ToChar(System.IFormatProvider)"/>
            <returns>A Unicode character equivalent to the value of this instance</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.ToChar(System.IFormatProvider)">
            <summary>
            Convert this class instance's value to a char type
            </summary>
            <param name="provider">An <b>IFormatProvider</b> interface implementation that supplies culture-specific formatting information</param>
            <returns>A Unicode character equivalent to the value of this instance</returns>
            <remarks>
            <p class="body">
            If there is no meaningful conversion, this method will throw an <b>InvalidCastException</b>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.ToInt64">
            <summary>
            Convert this class instance's value to a long data type
            </summary>
            <seealso cref="M:Infragistics.Win.CalcEngine.UltraCalcValue.ToInt64(System.IFormatProvider)"/>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.ToInt64(System.IFormatProvider)">
            <summary>
            Convert this class instance's value to a long data type
            </summary>
            <param name="provider">An <b>IFormatProvider</b> interface implementation that supplies culture-specific formatting information</param>
            <returns>A 64-bit signed integer equivalent to the value of this instance</returns>
            <remarks>
            <p class="body">
            If there is no meaningful conversion, this method will throw an <b>InvalidCastException</b>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.GetTypeCode">
            <summary>
            Returns the <b>TypeCode</b> for this instance
            </summary>
            <returns>The enumerated constant that is the <b>TypeCode</b> of the class or value type that implements this interface.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.ToDecimal">
            <summary>
            Convert this class instance's value to a decimal data type
            </summary>
            <seealso cref="M:Infragistics.Win.CalcEngine.UltraCalcValue.ToDecimal(System.IFormatProvider)"/>
            <returns>A <b>Decimal</b> equivalent to the value of this instance</returns>
            <seealso cref="M:Infragistics.Win.CalcEngine.UltraCalcValue.ToDecimal(System.IFormatProvider)"/>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.ToDecimal(System.Decimal@)">
            <summary>
            Converts the <see cref="P:Infragistics.Win.CalcEngine.UltraCalcValue.Value"/> to a decimal data type
            </summary>
            <param name="result">The resulting decimal value. If the return value is false, the result is 0.</param>
            <returns>True if the value was successfully converted to a decimal; otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.ToDecimal(System.IFormatProvider)">
            <summary>
            Convert this class instance's value to a decimal data type
            </summary>
            <param name="provider">An <b>IFormatProvider</b> interface implementation that supplies culture-specific formatting information</param>
            <returns>A <b>Decimal</b> equivalent to the value of this instance</returns>
            <remarks>
            <p class="body">
            If there is no meaningful conversion, this method will throw an <b>InvalidCastException</b>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.ToType(System.Type,System.IFormatProvider)">
            <summary>
            Convert this class instance's value to a uint data type
            </summary>
            <param name="conversionType">The <b>Type</b> to which the value of this instance is converted</param>
            <param name="provider">An <b>IFormatProvider</b> interface implementation that supplies culture-specific formatting information</param>
            <returns>An Object instance of type conversionType whose value is equivalent to the value of this instance.</returns>
            <remarks>
            <p class="body">
            If there is no meaningful conversion, this method will throw an <b>InvalidCastException</b>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.System#IConvertible#ToUInt32(System.IFormatProvider)">
            <summary>
            Convert this class instance's value to a uint data type
            </summary>
            <param name="provider">Format provider to use in conversion</param>
            <returns>A 32-bit unsigned integer equivalent to the value of this instance</returns>
            <remarks>
            <p class="body">
            If there is no meaningful conversion, this method will throw an <b>InvalidCastException</b>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.DateTimeToExcelDate(System.DateTime)">
            <summary>
            Converts a DateTime to Excel's numerical representation of a date.
            </summary>
            <remarks>
            <p class="body">
            When using the 1900 date system in Excel, dates before 3/1/1900 must be corrected, because Excel 
            incorrectly assumes 1900 is a leap year. This overload assumes the 1900 date system is being used
            as so it corrects the date values.
            </p>
            </remarks>
            <param name="dateValue">The DateTime value to convert to the Microsoft Excel date format.</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.DateTimeToExcelDate(System.DateTime,System.Boolean)">
            <summary>
            Converts a DateTime to Excel's numerical representation of a date.
            </summary>
            <param name="dateValue">The DateTime value to convert to the Microsoft Excel date format.</param>
            <param name="shouldCorrect1900Dates">
            When using the 1900 date system in Excel, dates before 3/1/1900 must be corrected, because Excel 
            incorrectly assumes 1900 is a leap year. Pass False to disable this correction.
            </param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.ExcelDateToDateTime(System.Double)">
            <summary>
            Converts Excel's numerical representation of a date to a DateTime.
            </summary>
            <remarks>
            <p class="body">
            When using the 1900 date system in Excel, dates before 3/1/1900 must be corrected, because Excel 
            incorrectly assumes 1900 is a leap year. This overload assumes the 1900 date system is being used
            as so it corrects the date values.
            </p>
            </remarks>
            <param name="excelDate">The Microsoft Excel date format which should be converted to a DateTime.</param>		
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.ExcelDateToDateTime(System.Double,System.Boolean)">
            <summary>
            Converts Excel's numerical representation of a date to a DateTime.
            </summary>
            <param name="excelDate">The Microsoft Excel date format which should be converted to a DateTime.</param>
            <param name="shouldCorrect1900Dates">
            When using the 1900 date system in Excel, dates before 3/1/1900 must be corrected, because Excel 
            incorrectly assumes 1900 is a leap year. Pass False to disable this correction.
            </param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.ExcelDateToTimeOfDay(System.Double)">
            <summary>
            Converts Excel's numerical representation of a time of day to a TimeSpan.
            </summary>
            <remarks>
            <p class="body">
            In Excel, only the fractional portion of the date value represents the time of day, so if <paramref name="excelDate"/>
            is greater than 1, only the fractional part will be used.
            </p>
            </remarks>
            <param name="excelDate">The Microsoft Excel date format which should be converted to a DateTime.</param>	
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.TimeOfDayToExcelDate(System.TimeSpan)">
            <summary>
            Converts a TimeSpan to Excel's numerical representation of a date.
            </summary>
            <remarks>
            <p class="body">
            The TimeSpan.Days portion of the <paramref name="timeValue"/> will not be used. Only the time of day will be used from the TimeSpan.
            </p>
            </remarks>
            <param name="timeValue">The TimeSpan value to convert to the Microsoft Excel date format.</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcValue.GetResolvedValue(System.Boolean)">
            <summary>
            Gets the resolved value of the reference. This method will walk down the reference chain recursively to get the resolved value of the reference that is not just another reference. 
            </summary>
            <param name="willUseValueInCalculations">
            True if the value returned will actually be used in calculations; False if the value is being requested to inspect some aspect of it, such as its type.
            </param>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.UltraCalcValue.UseExcelValueCompatibility">
            <summary>
            For Infragistics Internal Use Only
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.UltraCalcValue.UseExcelFunctionCompatibility">
            <summary>
            For Infragistics Internal Use Only
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcValue.IsReference">
            <summary>
            Returns whether this class instance contains a <see cref="T:Infragistics.Win.CalcEngine.IUltraCalcReference"/> value
            </summary>
            <returns>True if this instance class contains a reference, else false</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcValue.IsError">
            <summary>
            Returns whether this class instance contains an error value
            </summary>
            <returns>True if this class instance contains an error, else false</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcValue.IsNull">
            <summary>
            Returns whether this class instance contains a null value
            </summary>
            <returns>True if this instance class contains a null value, else false</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcValue.IsDBNull">
            <summary>
            Returns whether this class instance contains a DBNull value
            </summary>
            <returns>True if this instance class contains a null value, else false</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcValue.IsString">
            <summary>
            Returns whether this class instance contains a string value
            </summary>
            <returns>True if this instance class contains a string, else false</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcValue.IsBoolean">
            <summary>
            Returns whether this class instance contains a boolean value
            </summary>
            <returns>True if this instance class contains a boolean, else false</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcValue.IsDateTime">
            <summary>
            Returns whether this class instance contains a DateTime value
            </summary>
            <returns>True if this instance class contains a DateTime, else false</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcValue.Value">
            <summary>
            Return the underlying value
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcValue.UseExcelFormulaCompatibility">
            <summary>
            For Infragistics Internal Use Only
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.IUltraCalcFormula">
            <summary>
            Interface implemented by the formula object.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.IUltraCalcFormula.Evaluate(Infragistics.Win.CalcEngine.IUltraCalcReference)">
            <summary>
            Evaluate the compiled expression against the given base reference
            </summary>
            <param name="reference">Base reference used to resolve relative references into absolute references</param>
            <returns>Retuns an <see cref="T:Infragistics.Win.CalcEngine.UltraCalcValue"/> containing result of formula evaluation</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.IUltraCalcFormula.GetTokens">
            <summary>
            Returns an array of formula tokens in pre-fix form, called Reverse Polish Notation.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.IUltraCalcFormula.FormulaString">
            <summary>
            Formula string.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.IUltraCalcFormula.HasSyntaxError">
            <summary>
            Returns true if the formula has a syntax error. Formulas with syntax errors can not be added to the calc-network.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.IUltraCalcFormula.HasAlwaysDirty">
            <summary>
            Returns whether the formula contains an always dirty function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.IUltraCalcFormula.SyntaxError">
            <summary>
            Syntax error message. Returns null if the formula has no syntax errors, as would be indicated by <see cref="P:Infragistics.Win.CalcEngine.IUltraCalcFormula.HasSyntaxError"/> method.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.IUltraCalcFormula.BaseReference">
            <summary>
            Base reference associated with the formula.
            </summary>
            <remarks>
            <p class="body">Base reference associated with the formula. For example, in the case of a column formula, BaseReference would be the column reference.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.IUltraCalcFormula.References">
            <summary>
            Retuns a collection of references contained in the formula token string
            </summary>
            <returns>Collection of <see cref="T:Infragistics.Win.CalcEngine.IUltraCalcReference"/>s</returns>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcReferenceEventArgs">
            <summary>
            Event arguments class used to provide an <see cref="T:Infragistics.Win.CalcEngine.IUltraCalcReference"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcReferenceEventArgs.#ctor(Infragistics.Win.CalcEngine.IUltraCalcReference)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.CalcEngine.UltraCalcReferenceEventArgs"/>
            </summary>
            <param name="reference">Reference passsed to event handlers</param>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcReferenceEventArgs.Reference">
            <summary>
            Returns the associated <b>IUltraCalcReference</b>
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.IUltraCalcFormulaToken">
            <summary>
            Interface implemented by the calcengine formula token object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.IUltraCalcFormulaToken.Type">
            <summary>
            Return the token's type code
            </summary>
            <returns>The <b>UltraClacFormulaTokenType</b> for the this token</returns>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.IUltraCalcValueToken">
            <summary>
            Interface implemented by the calcengine formula token object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.IUltraCalcValueToken.Value">
            <summary>
            The UltraCalcValue represented by the token. 
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.IUltraCalcFunctionToken">
            <summary>
            Interface implemented by the calcengine formula token object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.IUltraCalcFunctionToken.ArgumentCount">
            <summary>
            Returns the number of arguments to the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.IUltraCalcFunctionToken.FunctionName">
            <summary>
            The name of the UltraCalcFunction represented by the token. 
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.IUltraCalcFunctionToken.FunctionOperator">
            <summary>
            Returns an UltraCalcOperatorFunction indicating the operator that the function reprsents or null of the function does not represent an operator.   
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFormulaTokenType">
            <summary>
            Identifies formula token types in the <b>UltraCalcFormulaToken</b> class
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.UltraCalcFormulaTokenType.Value">
            <summary>
            Indicates a value token containing an IUltraCalcReference.
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.UltraCalcFormulaTokenType.Function">
            <summary>
            Indicates a function token containing an IUltraCalcFunction. 
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcOperatorFunction">
            <summary>
            Enumeration of operator functions.
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.UltraCalcOperatorFunction.Add">
            <summary>
            Operator used to add two values ("+")
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> This operator must take exactly two operands/arguments.</p>
            </remarks>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.UltraCalcOperatorFunction.Subtract">
            <summary>
            Operator used to subtract two values ("-")
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> This operator must take exactly two operands/arguments.</p>
            </remarks>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.UltraCalcOperatorFunction.Multiply">
            <summary>
            Operator used to multiply two values ("*")
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> This operator must take exactly two operands/arguments.</p>
            </remarks>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.UltraCalcOperatorFunction.Divide">
            <summary>
            Operator used to divide two values ("/")
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> This operator must take exactly two operands/arguments.</p>
            </remarks>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.UltraCalcOperatorFunction.Equal">
            <summary>
            Operator used to compare two objects for equality ("=")
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> This operator must take exactly two operands/arguments.</p>
            </remarks>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.UltraCalcOperatorFunction.NotEqual">
            <summary>
            Operator used to compare if two values are different ("&gt;&lt;" or "!=")
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> This operator must take exactly two operands/arguments.</p>
            </remarks>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.UltraCalcOperatorFunction.GreaterThanOrEqual">
            <summary>
            Operator used to determine if one value is greater than or equal to a second value. ("&gt;=")
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> This operator must take exactly two operands/arguments.</p>
            </remarks>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.UltraCalcOperatorFunction.GreaterThan">
            <summary>
            Operator used to determine if one value is greater than a second value. ("&gt;")
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> This operator must take exactly two operands/arguments.</p>
            </remarks>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.UltraCalcOperatorFunction.LessThanOrEqual">
            <summary>
            Operator used to determine if one value is less than or equal to a second value. ("&lt;=")
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> This operator must take exactly two operands/arguments.</p>
            </remarks>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.UltraCalcOperatorFunction.LessThan">
            <summary>
            Operator used to determine if one value is less than a second value. ("&lt;")
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> This operator must take exactly two operands/arguments.</p>
            </remarks>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.UltraCalcOperatorFunction.Concatenate">
            <summary>
            Operator used to concatenate 2 strings ("&amp;")
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> This operator must take exactly two operands/arguments.</p>
            </remarks>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.UltraCalcOperatorFunction.Exponent">
            <summary>
            Operator used to raise a value to a specified power ("^")
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> This operator must take exactly two operands/arguments.</p>
            </remarks>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.UltraCalcOperatorFunction.Percent">
            <summary>
            Operator used to convert a value to a percentage ("%")
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> This operator must take exactly one operand/argument.</p>
            </remarks>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.UltraCalcOperatorFunction.UnaryMinus">
            <summary>
            Negative unary operator ("-")
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> This operator must take exactly one operand/argument.</p>
            </remarks>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.UltraCalcOperatorFunction.UnaryPlus">
            <summary>
            Positive unary operator ("+")
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> This operator must take exactly one operand/argument.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcAction">
            <summary>
            Enum used for specifying the first paramter to <see cref="M:Infragistics.Win.CalcEngine.IUltraCalcManager.PerformAction(Infragistics.Win.CalcEngine.UltraCalcAction,System.Object)"/> method.
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.UltraCalcAction.Recalc">
            <summary>
            Recalc action. The data parameter is the ticks parameter (must be long type) to the 
            Recalc method of the calc engine. The return value is a boolean indicating whether 
            there is more to recalc.
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.UltraCalcAction.AddReferenceToRecalcChain">
            <summary>
            The data parameter is the <see cref="T:Infragistics.Win.CalcEngine.IUltraCalcReference"/> instance to add to the recalc chain. 
            This action has no return value.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcReferenceEventHandler">
            <summary>
            Delegate used for an event involving a <see cref="T:Infragistics.Win.CalcEngine.UltraCalcReferenceEventArgs"/>
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.IUltraCalcManager">
            <summary>
            IUltraCalcManager interface. UltraCalcManager component implements this interface.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.IUltraCalcManager.EnsureCalculated(Infragistics.Win.CalcEngine.IUltraCalcReference,System.Boolean)">
            <summary>
            Checks to see if a reference is dirty, and optionally waits for it to be recalculated
            </summary>
            <param name="reference">Reference whose dirty state is requested</param>
            <param name="wait">Denotes whether caller wants to wait until the reference is recalculated</param>
            <returns>True if the reference is dirty</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.IUltraCalcManager.CompileFormula(Infragistics.Win.CalcEngine.IUltraCalcReference,System.String)">
            <summary>
            Compiles the specified formula. Returns an instance of IUltraCalcFormula which represents a formula. Throws NullReferenceException if baseReference or formula is null. NOTE: This method does not add the formula to the calculation network.
            </summary>
            <param name="baseReference">Base reference to use for the reference parsing. Returned formula instance will make use this reference as its base reference during parsing as well as during evaluation time to resolve relative references.</param>
            <param name="formula">The formula string.</param>
            <remarks>
            <p class="body">Returns an instance of IUltraCalcFormula. IUltraCalcFormula has information on any syntax or reference errors.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.IUltraCalcManager.CompileFormula(Infragistics.Win.CalcEngine.IUltraCalcReference,System.String,System.Boolean)">
            <summary>
            Compiles the specified formula. Returns an instance of IUltraCalcFormula which represents a formula. Throws NullReferenceException if baseReference or formula is null. NOTE: This method does not add the formula to the calculation network.
            </summary>
            <param name="baseReference">Base reference to use for the reference parsing. Returned formula instance will make use this reference as its base reference during parsing as well as during evaluation time to resolve relative references.</param>
            <param name="formula">The formula string.</param>
            <param name="suppressSyntaxErrorEvent">Pass in true to prevent the Syntax error event from firing.</param>
            <remarks>
            <p class="body">Returns an instance of IUltraCalcFormula. IUltraCalcFormula has information on any syntax or reference errors.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.IUltraCalcManager.AddFormula(Infragistics.Win.CalcEngine.IUltraCalcFormula)">
            <summary>
            Adds the specified formula to the calculation network. This method takes no action if the formula has already been added to the calculcation network. Also it throws an exception if the formula contains a syntax error. However if it contains a reference error, it still adds the formula to the calculation network. This method throws an exception if the formula was compiled using a different IUltraCalcManager.
            </summary>
            <param name="formula">The <see cref="T:Infragistics.Win.CalcEngine.IUltraCalcFormula"/> to add to the calculation network.</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.IUltraCalcManager.RemoveFormula(Infragistics.Win.CalcEngine.IUltraCalcFormula)">
            <summary>
            Removes the specified formula from the canclulation network. Takes no action if the formula doesn't exist in the calculation network.
            </summary>
            <param name="formula">The <see cref="T:Infragistics.Win.CalcEngine.IUltraCalcFormula"/> to remove from the calculation network.</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.IUltraCalcManager.NotifyValueChanged(Infragistics.Win.CalcEngine.IUltraCalcReference)">
            <summary>
            Notifies the calc manager of the change in reference' value.
            </summary>
            <param name="reference"></param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.IUltraCalcManager.RemoveReference(Infragistics.Win.CalcEngine.IUltraCalcReference)">
            <summary>
            Removes the reference and the associated formula from the calc network.
            </summary>
            <param name="reference"></param>
            <remarks>
            <p class="body"><b>RemoveReference</b> removes the specified reference from the calculation network. If the reference has a formula, the formula is also removed.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.IUltraCalcManager.RemoveRowReference(Infragistics.Win.CalcEngine.IUltraCalcReference)">
            <summary>
            Deletes the reference and the associated formula from the calc network.
            </summary>
            <param name="reference"></param>
            <remarks>
            <p class="body"><b>RemoveRowReference</b> removes the specified reference from the calculation network. This method should be used when removing the reference for an item in a collection, such as an UltraGridRow. For other (non-collection) objects, use RemoveReference. If the reference has a formula, the formula is also removed.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.IUltraCalcManager.AddReference(Infragistics.Win.CalcEngine.IUltraCalcReference)">
            <summary>
            Adds the reference and the associated formula to the calc network.
            </summary>
            <param name="reference"></param>
            <remarks>
            <p class="body"><b>AddReference</b> adds the specified reference to the calculation network. </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.IUltraCalcManager.AddRowReference(Infragistics.Win.CalcEngine.IUltraCalcReference)">
            <summary>
            Inserts the reference and the associated formula to the calc network.
            </summary>
            <param name="reference"></param>
            <remarks>
            <p class="body"><b>AddRowReference</b> adds the specified reference to the calculation network. This method should be used when adding a reference for an item in a collection, such as an UltraGridRow. For other (non-collection) objects, use AddReference.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.IUltraCalcManager.RowsCollectionReferenceSorted(Infragistics.Win.CalcEngine.IUltraCalcReference)">
            <summary>
            Notifies the Calc Manager that a Rows collection was sorted.
            </summary>
            <param name="reference"></param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.IUltraCalcManager.RowsCollectionReferenceResynched(Infragistics.Win.CalcEngine.IUltraCalcReference)">
            <summary>
            Notifies the Calc Manager that a Rows collection was resynched.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.IUltraCalcManager.RowsCollectionVisibilityChanged(Infragistics.Win.CalcEngine.IUltraCalcReference)">
            <summary>
            Notifies the Calc Manager that the visibility of part of a Rows Collection has changed.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.IUltraCalcManager.GetReference(System.String)">
            <summary>
            Returns a reference with the specified name. If no such reference exists, returns null.
            </summary>
            <param name="name">The name of the reference to locate.</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.IUltraCalcManager.AddParticipant(Infragistics.Win.CalcEngine.IUltraCalcParticipant)">
            <summary>
            Adds an IUltraCalcParticipant to the CalcManager. A Particpant must be added to the CalcManager before it can be used in any calculations.
            </summary>
            <param name="participant">An IUltraCalcParticipant to be added to the CalcManager.</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.IUltraCalcManager.RemoveParticipant(Infragistics.Win.CalcEngine.IUltraCalcParticipant)">
            <summary>
            Removes an IUltraCalcParticipant from the CalcManager. A Particpant should be removedfrom the CalcManager before it is disposed.
            </summary>
            <param name="participant">An IUltraCalcParticipant to be removed to the CalcManager.</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.IUltraCalcManager.RaiseFormulaError(Infragistics.Win.CalcEngine.IUltraCalcReference,System.Object,Infragistics.Win.CalcEngine.UltraCalcErrorValue,System.Drawing.Icon)">
            <summary>
            Used to notify the CalcManager that a calculation or reference exception has occurred.
            </summary>
            <param name="calcErrorValue">The <see cref="T:Infragistics.Win.CalcEngine.UltraCalcErrorValue"/> describing the exception.</param>
            <param name="errorIcon">The <see cref="T:System.Drawing.Icon"/> shown for an error.</param>
            <param name="errorValue">The value that caused the exception.</param>
            <param name="reference">The <see cref="T:Infragistics.Win.CalcEngine.IUltraCalcReference"/> of the element.</param>
            <returns>The <see cref="T:Infragistics.Win.CalcEngine.FormulaCalculationErrorEventArgs"/> created from the specified parameters.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.IUltraCalcManager.PerformAction(Infragistics.Win.CalcEngine.UltraCalcAction,System.Object)">
            <summary>
            Pefroms specified action. Typically there is a corresponding method on the 
            UltraCalcEngine that gets called by the implementors of this method.
            </summary>
            <param name="action">Action to perform.</param>
            <param name="data">Optional data that some actions may require.</param>
            <returns>Return value if any of the action performed.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.IUltraCalcManager.ProcessEventQueue">
            <summary>
            Processes all events in the event queue.
            </summary>
        </member>
        <member name="E:Infragistics.Win.CalcEngine.IUltraCalcManager.CalcEngineDirtyValue">
            <summary>
            Event notification when a reference is marked as dirtied.
            </summary>
        </member>
        <member name="E:Infragistics.Win.CalcEngine.IUltraCalcManager.CalcEngineRecalcValue">
            <summary>
            Event notification when the value of a reference has been calculated.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.FormulaErrorEventArgsBase">
            <summary>
            Event args for Formula Error events of an IUltraCalcManager.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.FormulaErrorEventArgsBase.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.CalcEngine.FormulaErrorEventArgsBase"/>
            </summary>
            <param name="context">Object that provides some context for the reference for which the formula error has occurred.</param>
            <param name="errorDisplayText">Error message to display</param>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.FormulaErrorEventArgsBase.Context">
            <summary>
            Gets the context for the formula error.
            </summary>
            <remarks><p class="body">The context is the target object of the formula. It could be an UltraGridCell, a Control, a NamedReference, etc.</p></remarks>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.FormulaErrorEventArgsBase.ErrorDisplayText">
            <summary>
            Returns or sets the error message to display.
            </summary>
            <remarks><p class="body">The error text to be displayed. The display of the error text will vary depending on the Context. A Control on a form will display the ErrorDisplayText as the tooltip to an ErrorProvider icon (if ErrorProviders are being used). A NamedReference will not display the ErrorDisplayText. A Grid cell will display the ErrorDisplayText in the cell, if possible.</p></remarks>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.FormulaCalculationErrorEventArgs">
            <summary>
            Event args for FormulaCalculationError or FormulaReferenceError events of an IUltraCalcManager.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.FormulaCalculationErrorEventArgs.#ctor(System.Object,System.String,System.Object,Infragistics.Win.CalcEngine.UltraCalcErrorValue,System.Drawing.Icon)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.CalcEngine.FormulaCalculationErrorEventArgs"/>
            </summary>
            <param name="context">Object for which the calculation error is occuring</param>
            <param name="errorDisplayText">Error message to display</param>
            <param name="errorIcon">Icon to display indicating that an error has occurred</param>
            <param name="errorInfo">UltraCalcErrorValue providing information about the error</param>
            <param name="errorValue">Error value that should be used to update the object whose calculation resulted in an error</param>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.FormulaCalculationErrorEventArgs.ErrorValue">
            <summary>
            Gets the UltraCalcErrorValue.
            </summary>
            <remarks>
            <p class="body">If a Calculation or Reference Error occurs during a calculation, ErrorValue can be used to specify a default value to be used for display or saving. When an error occurs in a calculation, this value will be assigned to the appropriate property of the Context object. For example, in the case of a TextBox's Text property, the property itself will be set to the error value so that it both displays in the TextBox and is saved if the Text property is bound. In the case of an UltraGrid cell, this value will not be displayed, but will be saved to the underlying data source. Objects that do not display or bind, such as a NamedReference, will ignore the ErrorValue.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.FormulaCalculationErrorEventArgs.ErrorInfo">
            <summary>
            Gets the UltraCalcErrorValue.
            </summary>
            <remarks><p class="body">Provides detailed information about the error, such as the exact type of error.</p></remarks>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.FormulaCalculationErrorEventArgs.ErrorDisplayIcon">
            <summary>
            The icon used to indicate that an error has occurred.
            </summary>
            <remarks><p class="body">The display of the icon varies depending on the context. A control on a form will show the icon as part of an ErrorProvider. NamedReferences show no icons. UltraWinGrid will not show the icon.</p></remarks>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.IUltraCalcParticipant">
            <summary>
            Interface implemented by controls that have built in formula support. For example, UltraGrid will implement this interface.
            </summary>	
        </member>
        <member name="M:Infragistics.Win.CalcEngine.IUltraCalcParticipant.GetDesignerReferences(Infragistics.Win.CalcEngine.IFormulaProvider)">
            <summary>
            Returns a tree structure of references that the formula builder uses to display a list of references in a tree that the user can use to build a formula. In the case of the UltraGrid, this method returns a hierarchical structure of bands and columns.
            </summary>
            <param name="formulaProvider">Optional formula provider instance that's being designed. This parameter can be null.</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.IUltraCalcParticipant.RecreateReference">
            <summary>
            Ask the IUltraCalcParticipant to recreate it's IUltraCalcReferences
            </summary>
            <remarks>
            <p class="body">This is neccessary when the name of the control (and therefore the reference name) changes. The UltraCalcManager will automatically call this method at Design-time when the name of the control changes.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.IUltraCalcParticipant.CalcManager">
            <summary>
            Gets and sets calc manager. The implementor should not create an instance of the UltraCalcManager component itself. The UltraCalcManager component on the form will set this property to itself
            </summary>
            <remarks><p class="body">The Set implementation of this property must call AddParticipant on the IUltraCalcManager to add itself into the CalcManager's participants collection.</p></remarks>
            <remarks><p class="body">Also, the implementor should call RemoveParticipant when it is disposed.</p></remarks>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.IUltraCalcParticipant.RootReference">
            <summary>
            The RootReference is the root IUltraCalcReference object used by the implementor.
            </summary>
            <remarks><p class="body">This property should return a root reference whose CreateReference implementation can return a given child reference based on an absolute name.</p></remarks>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.IUltraCalcParticipant.SuppressCalcSettings">
            <summary>
            Returns whether the participant should suppress the CalcSettings extender property
            </summary>
            <remarks>
            <p class="body">Return true to tell the CalcManager not to extend the participant with an UltraCalcSettings property.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.ReferenceNodeType">
            <summary>
            Enumeration used to indicate the type of object that is represented by the <see cref="T:Infragistics.Win.CalcEngine.ReferenceNode"/>
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.ReferenceNodeType.Control">
            <summary>
            A control or sub-object of a control Node
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.ReferenceNodeType.NamedReferencesGroup">
            <summary>
            The NamedReferencesGroup Node
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.ReferenceNodeType.NamedReference">
            <summary>
            A NamedReference Node
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.ReferenceNodeType.ControlsGroup">
            <summary>
            The ControlsGroup Node
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.ReferenceNodeType.NamedReferencesAllGroup">
            <summary>
            The NamedReferences "All" Group Node
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.ReferenceNodeType.NamedReferencesUnassignedGroup">
            <summary>
            The NamedReferences "Unassigned" Group Node
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.ReferenceNodeType.NamedReferencesOtherGroup">
            <summary>
            A NamedReferences "Other" Group Node
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.ReferenceNode">
            <summary>
            Classed used to provide information about the reference hierarchy
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.ReferenceNode.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.CalcEngine.ReferenceNode"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.ReferenceNode.#ctor(Infragistics.Win.CalcEngine.IUltraCalcReference,Infragistics.Win.CalcEngine.ReferenceNode[],System.Boolean)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.CalcEngine.ReferenceNode"/> with the specified reference and child references
            </summary>
            <param name="childReferences">An array of <see cref="T:Infragistics.Win.CalcEngine.ReferenceNode"/> objects representing the child references.</param>
            <param name="isDataReference">Indicates if the reference can be part of a formula.</param>
            <param name="reference">The <see cref="T:Infragistics.Win.CalcEngine.IUltraCalcReference"/> that this object represents.</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.ReferenceNode.#ctor(Infragistics.Win.CalcEngine.IUltraCalcReference,Infragistics.Win.CalcEngine.ReferenceNode[],System.Boolean,System.String)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.CalcEngine.ReferenceNode"/>
            </summary>
            <param name="childReferences">An array of <see cref="T:Infragistics.Win.CalcEngine.ReferenceNode"/> objects representing the child references.</param>
            <param name="isDataReference">Indicates if the reference can be part of a formula.</param>
            <param name="reference">The <see cref="T:Infragistics.Win.CalcEngine.IUltraCalcReference"/> that this object represents.</param>
            <param name="displayName">The name to use for displaying this reference.</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.ReferenceNode.#ctor(Infragistics.Win.CalcEngine.IUltraCalcReference,Infragistics.Win.CalcEngine.ReferenceNode[],System.Boolean,System.String,Infragistics.Win.CalcEngine.ReferenceNodeType)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.CalcEngine.ReferenceNode"/>
            </summary>
            <param name="childReferences">An array of <see cref="T:Infragistics.Win.CalcEngine.ReferenceNode"/> objects representing the child references.</param>
            <param name="isDataReference">Indicates if the reference can be part of a formula.</param>
            <param name="reference">The <see cref="T:Infragistics.Win.CalcEngine.IUltraCalcReference"/> that this object represents.</param>
            <param name="displayName">The name to use for displaying this reference.</param>
            <param name="referenceNodeType">An enumeration indicating the type of reference represented by the node.</param>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.ReferenceNode.Reference">
            <summary>
            Reference instance.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.ReferenceNode.ChildReferences">
            <summary>
            Child references.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.ReferenceNode.IsDataReference">
            <summary>
            Indicates if the reference can be part of a formula. For example, a grid 
            or a band can't be part of a formula because they don't represent values
            however a column can be part of a formula.
            </summary>		
        </member>
        <member name="P:Infragistics.Win.CalcEngine.ReferenceNode.DisplayName">
            <summary>
            Returns the name to use for displaying this reference.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.ReferenceNode.DisplayNameResolved">
            <summary>
            Returns the resolved name to use for displaying this reference.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.ReferenceNode.ReferenceNodeType">
            <summary>
            Returns or sets an enumeration indicating the type of reference represented by the node.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.IFormulaProvider">
            <summary>
            This interface needs to be implemented by objects that have Formula property and wants to have support for the formula builder. For example, UltraGridColumn implements this.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.IFormulaProvider.Formula">
            <summary>
            Gets or sets the formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.IFormulaProvider.Reference">
            <summary>
            Associated reference object. In the case of the UltraGridColumn, this will be the column reference.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.IFormulaProvider.Participant">
            <summary>
            Returns the participant. In the case of the UltraGrid, this will be the UltraGrid since it implements the IUltraCalcParticipant. Formula builder uses this to get the UltraCalcManager.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.IFormulaProvider.CalcManager">
            <summary>
            Returns the CalcManager associated with the Participant.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.IFormulaValueConverter">
            <summary>
            Interface for providing custom logic for converting formula results and the formula source values.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.IFormulaValueConverter.ConvertFromUltraCalcValue(Infragistics.Win.CalcEngine.UltraCalcValue,System.Object)">
            <summary>
            Converts the result of a formula to a value that will be assigned to the object with the formula.
            </summary>
            <param name="calcValue">Formula result.</param>
            <param name="context">This is the object with the formula. For example, a cell or a summary.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.IFormulaValueConverter.ConvertToUltraCalcValue(System.Object,System.Object)">
            <summary>
            Converts a value to be used as a source to a formula evaluation to an UltraCalcValue.
            </summary>
            <param name="value">The source value.</param>
            <param name="context">This is the object that the formula being evaluated references. For example, a cell or a summary.</param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.IFormulaProviderEx">
            <summary>
            This interface needs to be implemented by objects that support conditional formatting and need to be able to resolve a reference based on context.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.IFormulaProviderEx.GetReferenceFromContext(System.Object)">
            <summary>
            Returns an associated reference based on the context, or null if no references are found.
            </summary>        
            <param name="context">The context used to provide additioal information about the reference.</param>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.IFormulaProviderEx.FormulaDialogReferenceNode">
            <summary>
            Returns a reference node to be added to the top of the FormulaDialogReferenceNode.  Return null to do nothing.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.RefBase">
            <summary>
            This abstract base class is used to implement the <see cref="T:Infragistics.Win.CalcEngine.IUltraCalcReference"/> interface for an
            object with a complex hierarchy of referencable elements.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefBase.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.CalcEngine.RefBase"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefBase.FindRoot">
            <summary>
            Returns the Root reference of a reference hierarchy.  The root reference is used to resolve the
            fully qualifed form of a reference.  Note:  Must be overridden by the Root reference to return "this".
            </summary>
            <returns>The Root Reference</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefBase.FindItem(System.String)">
            <summary>
            Returns the named reference relative to this reference.
            </summary>
            <param name="name">The element name.</param>
            <returns>The referenced element</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefBase.FindAll(System.String)">
            <summary>
            Returns the named reference relative to this reference with scope "All".
            </summary>
            <param name="name">The element name.</param>
            <returns>The referenced element</returns>
            <seealso cref="M:Infragistics.Win.CalcEngine.RefBase.BuildReference(Infragistics.Win.CalcEngine.RefParser,System.Boolean)"/>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefBase.FindSummaryItem(System.String)">
            <summary>
            Returns the named SummaryItem reference relative to this reference.
            </summary>
            <param name="name">The element name.</param>
            <returns>The referenced element</returns>
            <seealso cref="M:Infragistics.Win.CalcEngine.RefBase.BuildReference(Infragistics.Win.CalcEngine.RefParser,System.Boolean)"/>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefBase.FindItem(System.String,System.String)">
            <summary>
            Returns the named indexed reference relative to this reference.
            </summary>
            <param name="name">The element name.</param>
            <param name="index">The index name.</param>
            <returns>The referenced element</returns>
            <seealso cref="M:Infragistics.Win.CalcEngine.RefBase.BuildReference(Infragistics.Win.CalcEngine.RefParser,System.Boolean)"/>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefBase.FindItem(System.String,System.Int32,System.Boolean)">
            <summary>
            Returns the named indexed reference relative to this reference.  If <b>isRelative</b>
            is true, then <b>index</b> is treated as a relative to this element index.  Otherwise the
            index is treated as absolute.
            </summary>
            <param name="name">The element name.</param>
            <param name="index">The index value.</param>
            <param name="isRelative">true if <b>index</b> is relative to this index</param>
            <returns>The referenced element</returns>
            <seealso cref="M:Infragistics.Win.CalcEngine.RefBase.BuildReference(Infragistics.Win.CalcEngine.RefParser,System.Boolean)"/>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefBase.FindParent">
            <summary>
            Returns a reference to this elements Parent.  Some Reference implementations (RefColumn) override 
            this to return something different than BaseParent when handling ".."
            </summary>
            <returns>The referenced element</returns>
            <seealso cref="M:Infragistics.Win.CalcEngine.RefBase.BuildReference(Infragistics.Win.CalcEngine.RefParser,System.Boolean)"/>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefBase.ScopedReferences(Infragistics.Win.CalcEngine.RefParser)">
            <summary>
            Returns a <see cref="T:Infragistics.Win.CalcEngine.IUltraCalcReferenceCollection"/> for enumerable references constrained to the specified reference.
            </summary>
            <param name="scopeRP">The constraining reference</param>
            <returns>A reference collection</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefBase.BuildReference(Infragistics.Win.CalcEngine.RefParser,System.Boolean)">
            <summary>
            Constructs a reference relative to this reference by walking all the elements of the specified parsed reference.
            If <b>forceDataRef</b> is true, then any <b>IsDataReference</b> references are forced to resolve to a specific
            data item when an incomplete identifier is specified. <b>RefLoop</b> is used to iterate over the specified 
            parsed reference.
            <p>This method must be overridden by the Root reference object to deal with external or root references.
            The Root referece object must advance past the optional control name in a Fully Qualified Reference before
            calling <b>RefLoop</b></p>
            </summary>
            <param name="buildRP">The parsed representation of the reference to construct</param>
            <param name="forceDataRef">Force resolution to a specific data item.</param>
            <returns>The specified reference</returns>
            <seealso cref="M:Infragistics.Win.CalcEngine.RefBase.RefLoop(Infragistics.Win.CalcEngine.RefBase,System.Collections.IEnumerator,System.Boolean)"/>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefBase.RefLoop(Infragistics.Win.CalcEngine.RefBase,System.Collections.IEnumerator,System.Boolean)">
            <summary>
            Constructs a reference relative to the specified starting reference by walking the specified <b>RefTuple</b>
            enumerator.  For each <b>RefTuple</b>, the next "current" reference is constucted by calling the <b>Find</b>
            method based on the scope of the <b>RefTuple</b>.
            If <b>forceDataRef</b> is true, then any <b>IsDataReference</b> references are forced to resolve to a specific
            data item when an incomplete identifier is specified. 
            </summary>
            <param name="start">The starting Reference.</param>
            <param name="tupleEnum">A <b>RefTuple</b> enumerator positioned at the starting tuple.</param>
            <param name="forceDataRef">Force resolution to a specific data item.</param>
            <returns>The specified reference</returns>
            <seealso cref="M:Infragistics.Win.CalcEngine.RefBase.FindItem(System.String)"/>
            <seealso cref="T:Infragistics.Win.CalcEngine.RefParser"/>
            <seealso cref="T:Infragistics.Win.CalcEngine.RefTuple"/>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefBase.MarkRelativeIndices(Infragistics.Win.CalcEngine.IUltraCalcReference)">
            <summary>
            For each reference tuple in this reference that has a relative index, mark the
            corresponding tuple in inReference.
            </summary>
            <param name="inReference">The Reference to be marked.</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefBase.CreateReference(System.String)">
            <summary>
            Create a new reference relative to this reference.
            </summary>
            <param name="inReference">The reference string.</param>
            <returns>The new reference.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefBase.CreateRange(System.String,System.String)">
            <summary>
            Create a Range reference relative to this reference.
            </summary>
            <param name="fromReference">The start of the range, inclusive.</param>
            <param name="toReference">The end of the range, inclusive.</param>
            <returns>A RangeReference</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefBase.ResolveReference(Infragistics.Win.CalcEngine.IUltraCalcReference,Infragistics.Win.CalcEngine.ResolveReferenceType)">
            <summary>
            Resolves a reference relative to this reference.  For example, if this
            reference is a reference to a row, and inReference is a reference to a
            column, the resolved reference is the cell reference that is the intersection
            of this row and the input column.
            </summary>
            <param name="inReference">The reference to resolve.</param>
            <param name="referenceType"></param>
            <returns>The resolved reference.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefBase.ContainsReference(Infragistics.Win.CalcEngine.IUltraCalcReference)">
            <summary>
            Returns true if this reference contains inReference
            </summary>
            <param name="inReference">The contained candidate.</param>
            <returns>true if inReference is contained by this reference.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefBase.IsSubsetReference(Infragistics.Win.CalcEngine.IUltraCalcReference)">
            <summary>
            Returns true if inReference is a proper subset of this reference
            </summary>
            <param name="inReference">The subset candidate.</param>
            <returns>true if inReference is contained by this reference.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefBase.IsSiblingReference(Infragistics.Win.CalcEngine.IUltraCalcReference)">
            <summary>
            Determines whether the given reference is a sibling of this reference
            </summary>
            <param name="reference">The reference to compare against this one</param>
            <returns>True if the reference is a sibling of the given reference</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefBase.ToString">
            <summary>
            Returns a string representation of the reference based on the reference type and absolute name.
            </summary>
            <returns>A string representation of the reference based on the reference type and absolute name.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefBase.GetChildReferences(Infragistics.Win.CalcEngine.ChildReferenceType)">
            <summary>
            Returns the child references of the reference. This method can return null.
            </summary>
            <param name="referenceType">The <see cref="T:Infragistics.Win.CalcEngine.ChildReferenceType"/> to retrieve.</param>
            <returns>An array of <see cref="T:Infragistics.Win.CalcEngine.IUltraCalcReference"/> objects that represent the child references.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefBase.CreateParsedReference">
            <summary>
            Used to create a new <see cref="T:Infragistics.Win.CalcEngine.RefParser"/> for the reference.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefBase.GetHashCode">
            <summary>
            Overridden. Default implementation returns the hash code of the normalized absolute name.
            These objects are going to be added to data structure that make use of GetHashCode and 
            Equals methods. What this means is that the normalized absolute name must not change 
            throughout the lifetime of this instance. If it does change then the overriding class 
            must override this method and return a hash code based on some other immutable property 
            of the instance.
            </summary>
            <returns>A hash code of the normalized absolute name.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefBase.Equals(System.Object)">
            <summary>
            Overriden. Default implementation returns true if the normalized absolute names of this
            reference and the passed in reference match. These objects are going to be added to data 
            structure that make use of GetHashCode and Equals methods. What this means is that the 
            normalized absolute name must not change throughout the lifetime of this instance. If it 
            does change then the overriding class must override this method and return a hash code 
            based on some other immutable property of the instance.
            </summary>
            <param name="obj">The reference to compare with this instance.</param>
            <returns>True if the normalized absolute names of this reference and the passed in reference match</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefBase.Context">
            <summary>
            Returns a context for the Reference.
            </summary>
            <remarks><p class="body">Returns a meaningful object context for the reference. This could be an UltraGridCell, UltraGridColumn, NamedReference, Control, etc.</p></remarks>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefBase.BaseParent">
            <summary>
            The RefBase Parent reference of this referenced element.  Used to navigate the element hierarchy.  If this
            referenced element is the root element, <b>BaseParent</b> returns null.  Read Only.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefBase.IsAnchored">
            <summary>
            Returns true if this reference is anchored.  An anchored reference is a direct reference to an element. 
            An unanchored reference is an indirect reference.  An indirect reference stores context dependent properties
            such as the relative name used to create the reference.  Read Only.
            </summary>
            <seealso cref="T:Infragistics.Win.CalcEngine.RefUnAnchored"/>
            <seealso cref="P:Infragistics.Win.CalcEngine.RefBase.RelativeReference"/>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefBase.IsRange">
            <summary>
            Returns true if this reference is a Range Reference.  Read Only.
            </summary>
            <seealso cref="T:Infragistics.Win.CalcEngine.RefRange"/> 
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefBase.WrappedReference">
            <summary>
            Returns the indirect reference of an UnAnchored reference.  Read only.
            </summary>
            <seealso cref="T:Infragistics.Win.CalcEngine.RefUnAnchored"/>
            <seealso cref="P:Infragistics.Win.CalcEngine.RefBase.IsAnchored"/>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefBase.ParsedReference">
            <summary>
            Gets or Sets the parsed representation of this reference.  This returns the absolute reference name.  Use
            <b>RelativeReference</b> to get the parsed representation of the string used to create this reference if this 
            reference is UnAnchored.
            </summary>
            <seealso cref="P:Infragistics.Win.CalcEngine.RefBase.IsAnchored"/>
            <seealso cref="P:Infragistics.Win.CalcEngine.RefBase.RelativeReference"/>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefBase.RelativeReference">
            <summary>
            Gets or Sets the parsed representation of the string used to create this reference if this reference
            is UnAnchored.  Use <b>AbsoluteReference</b> to get the parsed representation of the anchored reference.
            </summary>
            <seealso cref="P:Infragistics.Win.CalcEngine.RefBase.IsAnchored"/>
            <seealso cref="P:Infragistics.Win.CalcEngine.RefBase.ParsedReference"/>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefBase.AbsoluteName">
            <summary>
            The fully qualified unique name for the referenced element.  Read Only.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefBase.NormalizedAbsoluteName">
            <summary>
            Returns the normalized absolute name. Calculation engine makes use of normalized
            absolute names of references to compare two references and search for references.
            This property should return the absolute name with case insensitive parts of
            the absolute names converted to lower case.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefBase.ElementName">
            <summary>
            The unqualified name of this referenced element.  Used to construct the fully qualified name by the
            <b>AbsoluteName</b> method. Read Only.
            </summary>
            <seealso cref="P:Infragistics.Win.CalcEngine.RefBase.AbsoluteName"/>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefBase.Value">
            <summary>
            The <see cref="T:Infragistics.Win.CalcEngine.UltraCalcValue"/>, if any, associated with this Reference.  If this reference 
            does not contain a Value then a <see cref="T:Infragistics.Win.CalcEngine.UltraCalcErrorValue"/> is returned.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefBase.Formula">
            <summary>
            The <see cref="T:Infragistics.Win.CalcEngine.IUltraCalcFormula"/>, if any, associated with this Reference.  If this reference 
            can not contain a formula then null is returned.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefBase.RecalcDeferred">
            <summary>
            Flag used by the calculation engine to manage the recalculation network. 
            Denotes the reference is visible.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefBase.RecalcVisible">
            <summary>
            Flag used by the calculation engine to manage the recalculation network. 
            Denotes the reference is visible.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefBase.HasRelativeIndex">
            <summary>
            True indicates that the reference was constructed with a relative index.  Read Only.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefBase.HasAbsoluteIndex">
            <summary>
            True indicates that the reference was constructed with a relative index.  Read Only.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefBase.HasScopeAll">
            <summary>
            True indicates that the reference was constructed with a scope all index.  Read Only.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefBase.References">
            <summary>
            Return a collection of references if this Reference is enumerable.  An exception is
            thrown if this reference is not enumerable.
            </summary>
            <returns>A Reference collection.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefBase.IsEnumerable">
            <summary>
            Returns true if this reference is enumerable.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefBase.Parent">
            <summary>
            The RefBase Parent reference of this referenced element.  Used to navigate the element hierarchy.  If this
            referenced element is the root element, <b>BaseParent</b> returns null.  Read Only.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefBase.IsDataReference">
            <summary>
            Returns true if this reference is a data reference.  A data reference contains a value, such as a Grid Cell or
            a Grid SummaryValue.  Many referenced elements, such as a Grid Column or a Grid Band, do not reference a value.
            Read Only. 
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefBase.IsDisposedReference">
            <summary>
            True indicates that the reference was disposed.  Read Only.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.RefRange">
            <summary>
            RefRange is a generic Range Reference
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.RefRange.from">
            <summary>
            The start of the range, not normalized, inclusive.
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.RefRange.to">
            <summary>
            The end of the range, not normalized,  inclusive.
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.RefRange.normalizedFrom">
            <summary>
            The normalized start of the range, inclusive.
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.RefRange.normalizedTo">
            <summary>
            The normalized end of the range, inclusive.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefRange.#ctor(Infragistics.Win.CalcEngine.RefBase,Infragistics.Win.CalcEngine.RefBase)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.CalcEngine.RefRange"/>
            </summary>
            <param name="from">The start of the range, inclusive.</param>
            <param name="to">The end of the range, inclusive.</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefRange.Validate">
            <summary>
            Validates the Range.  This implementation requires that a Range is constrained to the last
            tuple in the Reference Path.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefRange.Contains(Infragistics.Win.CalcEngine.RefParser)">
            <summary>
            Returns true if targetRP is contained in this Range.
            </summary>
            <param name="targetRP">The candidate contained range.</param>
            <returns>true if targetRP is contained in this range.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefRange.CreateParsedReference">
            <summary>
            Used to create a new <see cref="T:Infragistics.Win.CalcEngine.RefParser"/> for the reference.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefRange.FindItem(System.String)">
            <summary>
            Returns the named reference relative to this reference.
            <p>This always throws an exception.  This method should never be called on a Range because 
            a Range is never created by BuildReference
            </p>
            </summary>
            <param name="name">The element name.</param>
            <returns>The referenced element</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefRange.FindAll(System.String)">
            <summary>
            Returns the named reference relative to this reference with scope "All"
            <p>This always throws an exception.  This method should never be called on a Range because 
            a Range is never created by BuildReference
            </p>
            </summary>
            <param name="name">The element name.</param>
            <returns>The referenced element</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefRange.FindSummaryItem(System.String)">
            <summary>
            Returns the named SummaryItem reference relative to this reference.
            <p>This always throws an exception.  This method should never be called on a Range because 
            a Range is never created by BuildReference
            </p>
            </summary>
            <param name="name">The element name.</param>
            <returns>The referenced element</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefRange.FindItem(System.String,System.String)">
            <summary>
            Returns the named indexed reference relative to this reference.
            <p>This always throws an exception.  This method should never be called on a Range because 
            a Range is never created by BuildReference
            </p>
            </summary>
            <param name="name">The element name.</param>
            <param name="index">The index name.</param>
            <returns>The referenced element</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefRange.FindItem(System.String,System.Int32,System.Boolean)">
            <summary>
            Returns the named indexed reference relative to this reference.  If <b>isRelative</b>
            is true, then <b>index</b> is treated as a relative to this element index.  Otherwise the
            index is treated as absolute.
            <p>This always throws an exception.  This method should never be called on a Range because 
            a Range is never created by BuildReference
            </p>
            </summary>
            <param name="name">The element name.</param>
            <param name="index">The index value.</param>
            <param name="isRelative">true if <b>index</b> is relative to this index</param>
            <returns>The referenced element</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefRange.ScopedReferences(Infragistics.Win.CalcEngine.RefParser)">
            <summary>
            Returns a <see cref="T:Infragistics.Win.CalcEngine.IUltraCalcReferenceCollection"/> for enumerable references constrained to the specified reference.
            <p>A Range returns a RefRangeCollection.
            </p>
            </summary>
            <param name="scopeRP">The constraining reference</param>
            <returns>A RefRangeCollection</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefRange.MarkRelativeIndices(Infragistics.Win.CalcEngine.IUltraCalcReference)">
            <summary>
            For each reference tuple in this reference that has a relative index, mark the
            corresponding tuple in inReference.
            </summary>
            <param name="inReference">The Reference to be marked.</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefRange.ResolveReference(Infragistics.Win.CalcEngine.IUltraCalcReference,Infragistics.Win.CalcEngine.ResolveReferenceType)">
            <summary>
            Resolves a reference relative to this reference.  For example, if this
            reference is a reference to a row, and inReference is a reference to a
            column, the resolved reference is the cell reference that is the intersection
            of this row and the input column.
            <p>ResolveReference for a Range is from.ResolveReference
            </p>
            </summary>
            <param name="inReference">The reference to resolve.</param>
            <param name="referenceType">Enumeration indicating the type of reference to resolve</param>
            <returns>The resolved reference.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefRange.ContainsReference(Infragistics.Win.CalcEngine.IUltraCalcReference)">
            <summary>
            Returns true if this Range contains inReference
            </summary>
            <param name="inReference">The contained candidate.</param>
            <returns>true if inReference is contained by this range.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefRange.ToString">
            <summary>
            Returns a string representation of the range including the class type as well as the to and from reference.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefRange.GetEnumerator">
            <summary>
            Returns an Enumerator over the Range.
            </summary>
            <returns>this IEnumerator</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefRange.FromBase">
            <summary>
            Return the From reference as a Refbase.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefRange.NormalizedFromBase">
            <summary>
            Return the Normalized From reference as a Refbase.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefRange.FromRef">
            <summary>
            Return the From reference as a <see cref="T:Infragistics.Win.CalcEngine.IUltraCalcReference"/>.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefRange.NormalizedFromRef">
            <summary>
            Return the normalized From reference as a <see cref="T:Infragistics.Win.CalcEngine.IUltraCalcReference"/>.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefRange.ToBase">
            <summary>
            Return the To reference as a Refbase.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefRange.NormalizedToBase">
            <summary>
            Return the normalized To reference as a <see cref="T:Infragistics.Win.CalcEngine.RefBase"/>.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefRange.ToRef">
            <summary>
            Return the To reference as a <see cref="T:Infragistics.Win.CalcEngine.IUltraCalcReference"/>.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefRange.NormalizedToRef">
            <summary>
            Return the normalized To reference as a <see cref="T:Infragistics.Win.CalcEngine.IUltraCalcReference"/>.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefRange.IsRange">
            <summary>
            Returns true. This reference is a Range Reference.  Read Only.
            </summary>
            <seealso cref="T:Infragistics.Win.CalcEngine.RefRange"/>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefRange.ElementName">
            <summary>
            The unqualified name of this referenced element.  Used to construct the fully 
            qualified name by the <b>AbsoluteName</b> method. Read Only.
            <p>The ElementName for a Range is from.ElementName + ":" + to.ElementName
            </p>
            </summary>
            <seealso cref="P:Infragistics.Win.CalcEngine.RefRange.AbsoluteName"/>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefRange.BaseParent">
            <summary>
            The Parent reference of this referenced element.  Used to navigate the element hierarchy.  If this
            referenced element is the root element, <b>Parent</b> returns null.  Read Only.
            <p>The Parent of a Range is this.from
            </p>
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefRange.IsDataReference">
            <summary>
            Returns true if this reference is a data reference.  A data reference contains a value, such as a Grid Cell or
            a Grid SummaryValue.  Many referenced elements, such as a Grid Column or a Grid Band, do not reference a value.
            Read Only. 
            <p>A Range is always a Data Reference.
            </p>
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefRange.AbsoluteName">
            <summary>
            The fully qualified unique name for the referenced element.  Read Only.
            <p>The AbsoluteName for a Range is from.AbsoluteName + ":" + to.AbsoluteName
            </p>
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefRange.NormalizedAbsoluteName">
            <summary>
            Returns the normalized absolute name. Calculation engine makes use normalized
            absolute names of references to compare two references and search for references.
            This property should return the absolute name with case insensitive parts of
            the absolute names converted to lower case.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefRange.HasRelativeIndex">
            <summary>
            True indicates that the reference was constructed with a relative index.  Read Only.
            <p>The HasRelativeIndex for a Range is from.HasRelativeIndex
            </p>
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefRange.References">
            <summary>
            Return a collection of references if this Reference is enumerable.  An exception is
            thrown if this reference is not enumerable.
            <p>A Range returns a RefRangeCollection.
            </p>
            </summary>
            <returns>RefRangeCollection.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefRange.IsEnumerable">
            <summary>
            Returns true. A range is enumerable.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.RefRange.RefRangeEnumerator">
            <summary>
            Enumerator for a <see cref="T:Infragistics.Win.CalcEngine.RefRange"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefRange.RefRangeEnumerator.#ctor(Infragistics.Win.CalcEngine.RefRange)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.CalcEngine.RefRange.RefRangeEnumerator"/>
            </summary>
            <param name="range">Range to enumerate</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefRange.RefRangeEnumerator.MoveNext">
            <summary>
            Sets the current reference to the next reference.  Returns false if there is no
            next reference.
            </summary>
            <returns>true if a next reference is available.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefRange.RefRangeEnumerator.Reset">
            <summary>
            Resets the enumeration to the begining.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefRange.RefRangeEnumerator.Current">
            <summary>
            Returns the current reference in the Range.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.RefTuple">
            <summary>
            This class represents a element identifier and a scope.
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.RefTuple.refName">
            <summary>
            The tuple name for reference type Identifier.
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.RefTuple.refType">
            <summary>
            The tuple reference type.
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.RefTuple.scopeIdentifier">
            <summary>
            The tuple scope Identifier for scope type Identifier.
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.RefTuple.scopeType">
            <summary>
            The tuple scope type.
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.RefTuple.scopeIndex">
            <summary>
            The tuple scope index for scope type Index or RelativeIndex.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefTuple.#ctor(Infragistics.Win.CalcEngine.RefTuple)">
            <summary>
            Cloning constructor.
            </summary>
            <param name="clone">The RefTuple to clone.</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefTuple.#ctor(System.String)">
            <summary>
            Parsing contructor.
            </summary>
            <param name="refName">The tuple in string form.</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefTuple.IsSameTuple(Infragistics.Win.CalcEngine.RefTuple)">
            <summary>
            Tuple Equivalence comparison.  True if same Type and Scope.
            </summary>
            <param name="tuple">The tuple to compare against.</param>
            <returns>true iff tuple is same type and scope as this.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefTuple.IsSameIdentifier(Infragistics.Win.CalcEngine.RefTuple)">
            <summary>
            Compares this tuple identifiers with the input tuple identifier.
            </summary>
            <param name="tuple">The input tuple.</param>
            <returns>true if the identifiers are equal.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefTuple.Contains(Infragistics.Win.CalcEngine.RefTuple)">
            <summary>
            True if this tuple contains the input tuple.  The input tuple is considered to be 
            contained if both tuples have the same identifier and if this scope contains the 
            input scope.  The input scope is contained if neither scope types are type Unknown and
            they meet one of the following conditions:
            <list>
            <item>Both tuples have SummaryValue scope.</item>
            <item>Either tuple has scope type Any.</item>
            <item>Both are type Identifier and have lexographicly equal scope identifiers.</item>
            <item>Both are the same type of index (Index or RelativeIndex) and have the same scope index.</item>
            </list>
            </summary>
            <param name="tuple">The <see cref="T:Infragistics.Win.CalcEngine.RefTuple"/> to check.</param>
            <returns>True if this tuple contains the input tuple.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefTuple.IsSubset(Infragistics.Win.CalcEngine.RefTuple)">
            <summary>
            True if the input tuple is a subset of this tuble.  The input tuple is considered to be 
            a subset if both tuples have the same identifier and if this scope entirely contains the 
            input scope.  The input scope is contained if neither scope types are type Unknown and
            they meet one of the following conditions:
            <list>
            <item>Both tuples have SummaryValue scope.</item>
            <item>This tuple has scope type Any.</item>
            <item>Both scopes are type Identifier and have lexographicly equal scope identifiers.</item>
            <item>Both scopes are the same type of index (Index or RelativeIndex) and have the same scope index.</item>
            </list>
            </summary>
            <param name="tuple">The <see cref="T:Infragistics.Win.CalcEngine.RefTuple"/> to check.</param>
            <returns>True if the input tuple is a subset of this tuble.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefTuple.IsSameScope(Infragistics.Win.CalcEngine.RefTuple)">
            <summary>
            True if if the scope of the input tuple is identical to this scope.
            </summary>
            <param name="tuple">The input tuple.</param>
            <returns>true if the scope of the input tuple is identical to this scope.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefTuple.ContainsScope(Infragistics.Win.CalcEngine.RefTuple)">
            <summary>
            True if this tuple scope contains the input tuple scope. The input scope is contained 
            if neither scope types are type Unknown and they meet one of the following conditions:
            <list>
            <item>Both tuples have SummaryValue scope.</item>
            <item>Either tuple has scope type Any.</item>
            <item>Both are type Identifier and have lexographicly equal scope identifiers.</item>
            <item>Both are the same type of index (Index or RelativeIndex) and have the same scope index.</item>
            </list>
            </summary>
            <param name="tuple"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefTuple.IsScopeSubset(Infragistics.Win.CalcEngine.RefTuple)">
            <summary>
            True if input tuple scope is entirely contained by this tuple scope. The input scope is enitrely contained 
            if neither scope types are type Unknown and they meet one of the following conditions:
            <list>
            <item>Both tuples have SummaryValue scope.</item>
            <item>This tuple has scope type Any.</item>
            <item>Both are type Identifier and have lexographicly equal scope identifiers.</item>
            <item>Both are the same type of index (Index or RelativeIndex) and have the same scope index.</item>
            </list>
            </summary>
            <param name="tuple"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefTuple.IsNumericScopeLTE(Infragistics.Win.CalcEngine.RefTuple)">
            <summary>
            True if both tuples have the same type and numeric scope type and
            this numeric index &lt;= the input tuple numeric index
            </summary>
            <param name="tuple">The tuple to test.</param>
            <returns>true iff this is &lt;= input.</returns>
            <seealso cref="M:Infragistics.Win.CalcEngine.RefTuple.IsNumericScopeGTE(Infragistics.Win.CalcEngine.RefTuple)"/>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefTuple.IsNumericScopeGTE(Infragistics.Win.CalcEngine.RefTuple)">
            <summary>
            True if both tuples have the same type and numeric scope type and
            this numeric index &gt;= the input tuple numeric index
            </summary>
            <param name="tuple">The tuple to test.</param>
            <returns>true iff this is &gt;= input.</returns>
            <seealso cref="M:Infragistics.Win.CalcEngine.RefTuple.IsNumericScopeLTE(Infragistics.Win.CalcEngine.RefTuple)"/>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefTuple.IncrementScope">
            <summary>
            Increments the scope if the scope if type Index or RelativeIndex.
            </summary>
            <returns>true if scope was incremented.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefTuple.ToString(System.Text.StringBuilder)">
            <summary>
            Appends the tuple to the specified string builder.
            </summary>		
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to append to.</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefTuple.ToString">
            <summary>
            Returns the string form of the tuple.
            </summary>
            <returns>The tuple in string form.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefTuple.Type">
            <summary>
            The tuple type.  Read Only.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefTuple.Scope">
            <summary>
            The tuple scope.  Read Only.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefTuple.Name">
            <summary>
            The tuple name for reference type Identifier. Read Only.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefTuple.Marked">
            <summary>
            Indicator that this tuple is Marked.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefTuple.Last">
            <summary>
            Indicator that this tuple is is the last tuple in a RefParser tuple path.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefTuple.NextToLast">
            <summary>
            Indicator that this tuple is is the next-to-last tuple in a RefParser tuple path.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefTuple.ScopeID">
            <summary>
            The tuple scope Identifier for scope type Identifier. Read Only.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefTuple.ScopeIndex">
            <summary>
            The tuple scope index for scope type Index or RelativeIndex. Read Only.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefTuple.IsAbsolute">
            <summary>
            A tuple is Absolute if it is of type Identifier with a scope type other than RelativeIndex.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.RefTuple.RefType">
            <summary>
            The different types of elements.
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.RefTuple.RefType.Parent">
            <summary>
            A parent reference (e.g. "..")
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.RefTuple.RefType.ExplicitThis">
            <summary>
            A self reference (e.g. ".")
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.RefTuple.RefType.Identifier">
            <summary>
            A string identifying the name of the reference.
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.RefTuple.RefType.Unknown">
            <summary>
            An unknown reference type
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.RefTuple.RefScope">
            <summary>
            The different scopes.
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.RefTuple.RefScope.Any">
            <summary>
            No scope was specified
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.RefTuple.RefScope.Index">
            <summary>
            A numeric value indicating the index of the reference
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.RefTuple.RefScope.RelativeIndex">
            <summary>
            A numeric value indicating a relative offset
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.RefTuple.RefScope.Identifier">
            <summary>
            An identifier
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.RefTuple.RefScope.SummaryValue">
            <summary>
            An empty parentheses
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.RefTuple.RefScope.All">
            <summary>
            An identifier indicating all (e.g. "(*)")
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.RefTuple.RefScope.Unknown">
            <summary>
            An unknown scope
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.RefParser">
            <summary>
            A RefParser is a parsed representation of a Reference Path.  It contains a RefTuple array 
            representing each element in the Reference Path.
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.RefParser.RefFullyQualifiedString">
            <summary>
            String used to denote the start of a fully qualified reference.
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.RefParser.RefSeperator">
            <summary>
            Character used as a Path element seperator.
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.RefParser.RefSeperatorString">
            <summary>
            String used as a Path element seperator.
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.RefParser.RefBeginScope">
            <summary>
            Character used to denote the begining of a scope.
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.RefParser.RefEndScope">
            <summary>
            Character used to denote the end of a scope.
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.RefParser.RangeSeparator">
            <summary>
            Character used to denote a range of references.
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.RefParser.RangeSeparatorWithSpaces">
            <summary>
            A space padded string representing a range.
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.RefParser.EscapeCharacter">
            <summary>
            Character used for escaping special characters. It's the \ (backward slash) character.
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.RefParser.QuotesCharacter">
            <summary>
            Character used for specifying a quoted string. It's the " (double quotes) character.
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.RefParser.NameValuePairSeparatorCharacter">
            <summary>
            Character used for separating multiple name-value pairs. It's the , (comma) character.
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.RefParser.NameValueSeparatorCharacter">
            <summary>
            Character used for separating name portion and the value portion in a name-value pair. It's the = (equal) character.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefParser.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefParser.#ctor(System.String)">
            <summary>
            Constructor. Parses the passed in string.
            </summary>
            <param name="refName">The string representation of a reference.</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefParser.#ctor(Infragistics.Win.CalcEngine.RefParser)">
            <summary>
            Clone Constructor.
            </summary>
            <param name="rp">A RefParser instance from which a clone should be created.</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefParser.MarkIndices">
            <summary>
            Determine the values of the FlagHasRelativeIndex,FlagHasAbsoluteIndex and FlagHasSummaryScope flags.
            Set the Last flag on the Last tuple.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefParser.MarkRelativeIndices(Infragistics.Win.CalcEngine.RefParser,System.Boolean)">
            <summary>
            For each tuple in this reference with a Relative Index, mark the corresponding tuple 
            in targetRP
            </summary>
            <param name="targetRP">The tuples to mark.</param>
            <param name="forceLastTuple">Forces the last tuple to be marked.</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefParser.Merge(Infragistics.Win.CalcEngine.RefParser,Infragistics.Win.CalcEngine.RefParser,System.Boolean)">
            <summary>
            Populate this RefParser by merging the input baseRP with the input mergeRP. If 
            respectMarked is true, then any tuples in mergeRP that are Marked have precedence and
            are converted to scope Any.
            </summary>
            <param name="baseRP">The base reference.</param>
            <param name="mergeRP">The reference to merge into the base.</param>
            <param name="respectMarked">if true, mergeRP tuples that are marked have precedence.</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefParser.BuildReference(Infragistics.Win.CalcEngine.RefParser,Infragistics.Win.CalcEngine.RefParser)">
            <summary>
            Populate this RefParser by merging the input baseRP with the input mergeRP. If 
            respectMarked is true, then any tuples in mergeRP that are Marked have precedence and
            are converted to scope Any.
            </summary>
            <param name="baseRP">The base reference.</param>
            <param name="mergeRP">The reference to merge into the base.</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefParser.EscapeString(System.String,System.Boolean)">
            <summary>
            Escapes all the special charactes in the specified text. If withinQuotes is true then it
            only escapes the special characters that need to be escaped within double quotes, namely 
            the '"' and '\' characters.
            </summary>
            <param name="text">Text that needs to be escaped.</param>
            <param name="withinQuotes">Whether the text is going to be enclosed in double quotes. If true then only escapes characters that need to be escaped in double quotes.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefParser.UnEscapeString(System.String)">
            <summary>
            Unescapes all the escaped charactes in the specified text.
            </summary>
            <param name="text">The text whose escaped characters should be unescaped.</param>
            <returns>A string with all escaped characters unescaped.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefParser.NormalizeEscapement(System.String,System.Boolean)">
            <summary>
            This method has the same effect as calling UnEscapeString and then calling EscapeString
            on the specified text. This ensures that the text is minimally escaped.
            </summary>
            <param name="text">The text that should be normalized.</param>
            <param name="withinQuotes">Whether the text is going to be enclosed in double quotes. If true then only escapes characters that need to be escaped in double quotes.</param>
            <returns>A string that has been unescaped and then escaped.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefParser.ParseNameValuePairs(System.String,System.String@)">
            <summary>
            Parses specified name-value pair. Examples of name-value pairs that this method parses are:
            <code>
            State = New York, City = New York
            State = "New York", City = "New York"
            State=New York,City=New York
            A\/B = C\/D (column name is A/B and value is C/D.)
            A = 10 miles\/hour, B = "20 miles/hour" (Withing double quotes only double quotes and backward slash have to be escaped.)
            P1 = 10\, 20, P2 = "10, 20"
            </code>
            Returns an array of NameValuePair objects. Note: Names and values will be unescaped and also stripped of surrounding quotes.
            </summary>
            <param name="pairs">A string containing the name-value pair.</param>
            <param name="error">A string that will be populated with an error message, should one arise.</param>
            <returns>An array of <see cref="T:Infragistics.Win.CalcEngine.RefParser.NameValuePair"/> objects.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefParser.ParseScopeHelper(System.String,Infragistics.Win.CalcEngine.RefParser.NameValuePair[]@,System.String@)">
            <summary>
            Helper method for parsing scope text. This parses name-value pairs as well as standalone
            string values. Example of a name value pair is <code>State=New York</code> where as example
            of a standalone string value is <code>New York</code>. Standalone text values are used to
            specify the scope in group-by rows. Example of a reference using standalone scope and a
            name value pair scope is <code>//ultraGrid1/Customers/State(NY)/Customers(CustomerID=ABCD)</code>.
            If the scope was name-value pairs then sets the nameValuePairs to an array of parsed name-value
            pairs. If the scope was a standalone text then sets the nonNameValuePairScope parameter.
            If there was an error, returns an error string. If there was no error, returns null.
            </summary>
            <param name="scope"></param>
            <param name="nameValuePairs"></param>
            <param name="nonNameValuePairScope"></param>
            <returns>Returns an error string if any.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefParser.Contains(Infragistics.Win.CalcEngine.RefParser)">
            <summary>
            Returns true if the input RefParser in contained by this RefParser.  The RefParser is
            contained if each RefTuple in this RefParser contains the corresponding RefTuple in the
            input RefParser.
            </summary>
            <param name="inputParsed">The contained candidate</param>
            <returns>true if inputParsed is contained by this.</returns>
            <seealso cref="M:Infragistics.Win.CalcEngine.RefTuple.Contains(Infragistics.Win.CalcEngine.RefTuple)"/>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefParser.IsSubset(Infragistics.Win.CalcEngine.RefParser)">
            <summary>
            Returns true if the input RefParser is a proper subset of this RefParser.  The RefParser is
            a proper subset if each RefTuple in this RefParser has a scope that completely contains 
            the corresponding RefTuple in the
            input RefParser.
            </summary>
            <param name="inputParsed">The subset candidate</param>
            <returns>true if inputParsed is a propersubset of this.</returns>
            <seealso cref="M:Infragistics.Win.CalcEngine.RefTuple.IsSubset(Infragistics.Win.CalcEngine.RefTuple)"/>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefParser.ToString(System.Text.StringBuilder)">
            <summary>
            Appends the string representation of the parsed reference to the specified string builder.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> onto which the string representation of this object should be appended.</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefParser.ToString">
            <summary>
            Returns a string representation of the parsed reference.
            </summary>
            <returns>A string representation of the parsed reference.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefParser.GetEnumerator">
            <summary>
            Returns the tuples IEnumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefParser.TupleCount">
            <summary>
            Return the tuple count. Read Only.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefParser.Item(System.Int32)">
            <summary>
            Tuple indexer.  Read Only.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefParser.LastTuple">
            <summary>
            Return the Last tuple or null if none available.  Read Only.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefParser.NextToLastTuple">
            <summary>
            Return the NextToLast tuple or null if none available.  Read Only.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefParser.RootName">
            <summary>
            Returns the root name. If there are no tuples, returns null.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefParser.IsFullyQualified">
            <summary>
            Returns true if the Reference is fully qualified.  Read Only.
            ex: //MyGrid/Something.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefParser.IsRoot">
            <summary>
            Returns true if the Reference is a root reference.  Read Only.
            ex: /something
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefParser.IsRelative">
            <summary>
            Returns true if the reference is not fully qualified or a root. Read Only.
            ex: total
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefParser.HasRelativeIndex">
            <summary>
            Returns true if the Reference has at least one RefTuple with a relative index.  Read Only.
            ex: Total(-1)
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefParser.HasScopeAll">
            <summary>
            Returns true if the Reference has at least one RefTuple with a scope of "All".  Read Only.
            ex: Total(*)
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefParser.HasAbsoluteIndex">
            <summary>
            Returns true if the Reference has at least one RefTuple with an absolute index.  Read Only.
            ex: Total(0)
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefParser.HasSummaryScope">
            <summary>
            Returns true if the Reference has a Summary Scope.  Read Only.
            ex: Total()
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.RefParser.NameValuePair">
            <summary>
            Class for representing a name value pair.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefParser.NameValuePair.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Unescaped name.</param>
            <param name="value">Unescaped value.</param>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefParser.NameValuePair.Name">
            <summary>
            Returns the name, unescaped.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefParser.NameValuePair.Value">
            <summary>
            Returns the value, unescaped.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefParser.NameValuePair.Tag">
            <summary>
            Gets or sets a tag value.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.RefUnAnchored">
            <summary>
            RefUnAnchored is a wrapper for a RefBase reference that keeps a parsed representation of the 
            reference string used to create the reference.  There can be multiple RefUnAnchored instances 
            wrapping the same anchored reference.
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.RefUnAnchored.baseRef">
            <summary>
            The RefBase being wrapped.
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.RefUnAnchored.relativeRP">
            <summary>
            The parsed form of the reference string used to create the reference.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefUnAnchored.#ctor(Infragistics.Win.CalcEngine.RefBase)">
            <summary>
            Constructor takes a base reference.
            </summary>
            <param name="baseRef">The base reference to wrap</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefUnAnchored.FindItem(System.String)">
            <summary>
            Returns the named reference relative to this reference.
            <p>RefUnAnchored forwards this to the base reference.
            </p>
            </summary>
            <param name="name">The element name.</param>
            <returns>The referenced element</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefUnAnchored.FindAll(System.String)">
            <summary>
            Returns the named reference relative to this reference with scope "ALL".
            <p>RefUnAnchored forwards this to the base reference.
            </p>
            </summary>
            <param name="name">The element name.</param>
            <returns>The referenced element</returns>
            <seealso cref="M:Infragistics.Win.CalcEngine.RefBase.BuildReference(Infragistics.Win.CalcEngine.RefParser,System.Boolean)"/>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefUnAnchored.FindSummaryItem(System.String)">
            <summary>
            Returns the named SummaryItem reference relative to this reference.
            <p>RefUnAnchored forwards this to the base reference.
            </p>
            </summary>
            <param name="name">The element name.</param>
            <returns>The referenced element</returns>
            <seealso cref="M:Infragistics.Win.CalcEngine.RefBase.BuildReference(Infragistics.Win.CalcEngine.RefParser,System.Boolean)"/>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefUnAnchored.FindItem(System.String,System.String)">
            <summary>
            Returns the named indexed reference relative to this reference.
            <p>RefUnAnchored forwards this to the base reference.
            </p>
            </summary>
            <param name="name">The element name.</param>
            <param name="index">The index name.</param>
            <returns>The referenced element</returns>
            <seealso cref="M:Infragistics.Win.CalcEngine.RefBase.BuildReference(Infragistics.Win.CalcEngine.RefParser,System.Boolean)"/>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefUnAnchored.FindItem(System.String,System.Int32,System.Boolean)">
            <summary>
            Returns the named indexed reference relative to this reference.  If <b>isRelative</b>
            is true, then <b>index</b> is treated as a relative to this element index.  Otherwise the
            index is treated as absolute.
            <p>RefUnAnchored forwards this to the base reference.
            </p>
            </summary>
            <param name="name">The element name.</param>
            <param name="index">The index value.</param>
            <param name="isRelative">true if <b>index</b> is relative to this index</param>
            <returns>The referenced element</returns>
            <seealso cref="M:Infragistics.Win.CalcEngine.RefBase.BuildReference(Infragistics.Win.CalcEngine.RefParser,System.Boolean)"/>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefUnAnchored.FindParent">
            <summary>
            Returns a reference to this elements Parent.
            <p>RefUnAnchored forwards this to the base reference.
            </p>
            </summary>
            <returns>The referenced element</returns>
            <seealso cref="M:Infragistics.Win.CalcEngine.RefBase.BuildReference(Infragistics.Win.CalcEngine.RefParser,System.Boolean)"/>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefUnAnchored.ScopedReferences(Infragistics.Win.CalcEngine.RefParser)">
            <summary>
            Returns a <see cref="T:Infragistics.Win.CalcEngine.IUltraCalcReferenceCollection"/> for enumerable references constrained to the specified reference.
            <p>RefUnAnchored forwards this to the base reference.
            </p>
            </summary>
            <param name="scopeRP">The constraining reference</param>
            <returns>A reference collection</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefUnAnchored.ResolveReference(Infragistics.Win.CalcEngine.IUltraCalcReference,Infragistics.Win.CalcEngine.ResolveReferenceType)">
            <summary>
            Resolves a reference relative to this reference.  For example, if this
            reference is a reference to a row, and inReference is a reference to a
            column, the resolved reference is the cell reference that is the intersection
            of this row and the input column.
            <p>RefUnAnchored forwards this to the base reference.
            </p>
            </summary>
            <param name="reference">The reference to resolve.</param>
            <param name="referenceType">Enumeration indicating the type of reference to resolve.</param>
            <returns>The resolved reference.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefUnAnchored.ContainsReference(Infragistics.Win.CalcEngine.IUltraCalcReference)">
            <summary>
            Returns true if this reference contains inReference
            <p>RefUnAnchored forwards this to the base reference.
            </p>
            </summary>
            <param name="reference">The contained candidate.</param>
            <returns>true if inReference is contained by this reference.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefUnAnchored.IsSubsetReference(Infragistics.Win.CalcEngine.IUltraCalcReference)">
            <summary>
            Returns true if inReference is a proper subset of this reference
            </summary>
            <param name="reference">The subset candidate.</param>
            <returns>true if inReference is contained by this reference.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefUnAnchored.IsSiblingReference(Infragistics.Win.CalcEngine.IUltraCalcReference)">
            <summary>
            Determines whether the given reference is a sibling of this reference
            </summary>
            <param name="reference">The reference to compare against this one</param>
            <returns>True if the reference is a sibling of the given reference</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefUnAnchored.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefUnAnchored.GetHashCode">
            <summary>
            Overridden.
            </summary>
            <returns>A hash code that identifies this instance.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.RefUnAnchored.Equals(System.Object)">
            <summary>
            Overriden.
            </summary>
            <param name="obj">The objects to test for equality.</param>
            <returns>True if the absolute name is the same as the base reference and the base implementation considers them equal.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefUnAnchored.IsUnQualifiedReference">
            <summary>
            Returns true if the relative reference is unqualified.  Read Only.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefUnAnchored.ElementName">
            <summary>
            The unqualified name of this referenced element.  Used to construct the fully qualified name by the
            <b>AbsoluteName</b> method. Read Only.
            <p>RefUnAnchored forwards this to the base reference.
            </p>
            </summary>
            <seealso cref="P:Infragistics.Win.CalcEngine.RefUnAnchored.AbsoluteName"/>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefUnAnchored.BaseParent">
            <summary>
            The RefBase Parent reference of this referenced element.  Used to navigate the element hierarchy.  If this
            referenced element is the root element, <b>BaseParent</b> returns null.  Read Only.
            </summary>
            <remarks>
            <p>RefUnAnchored forwards this to the base reference.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefUnAnchored.IsRange">
            <summary>
            Returns true if this reference is a Range Reference.  Read Only.
            <p>RefUnAnchored forwards this to the base reference.</p>
            </summary>
            <seealso cref="T:Infragistics.Win.CalcEngine.RefRange"/>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefUnAnchored.IsAnchored">
            <summary>
            Returns true if this reference is anchored.  An anchored reference is a direct reference to an element. 
            An unanchored reference is an indirect reference.  An indirect reference stores context dependent properties
            such as the relative name used to create the reference.  Read Only.
            <p>RefUnAnchored always returns false.
            </p>
            </summary>
            <seealso cref="T:Infragistics.Win.CalcEngine.RefUnAnchored"/>
            <seealso cref="P:Infragistics.Win.CalcEngine.RefUnAnchored.RelativeReference"/>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefUnAnchored.IsDataReference">
            <summary>
            Returns true if this reference is a data reference.  A data reference contains a value, such as a Grid Cell or
            a Grid SummaryValue.  Many referenced elements, such as a Grid Column or a Grid Band, do not reference a value.
            Read Only. 
            <p>RefUnAnchored forwards this to the base reference.
            </p>
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefUnAnchored.WrappedReference">
            <summary>
            Returns the indirect reference of an UnAnchored reference.  Read only.
            <p>RefUnAnchored forwards this to the base reference.
            </p>
            </summary>
            <seealso cref="T:Infragistics.Win.CalcEngine.RefUnAnchored"/>
            <seealso cref="P:Infragistics.Win.CalcEngine.RefUnAnchored.IsAnchored"/>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefUnAnchored.ParsedReference">
            <summary>
            Gets or Sets the parsed representation of this reference.  This returns the absolute reference name.  Use
            <b>RelativeReference</b> to get the parsed representation of the string used to create this reference if this 
            reference is UnAnchored.
            <p>RefUnAnchored returns a reference constructed from merging the relative reference into the base reference.
            </p>
            </summary>
            <seealso cref="P:Infragistics.Win.CalcEngine.RefUnAnchored.IsAnchored"/>
            <seealso cref="P:Infragistics.Win.CalcEngine.RefUnAnchored.RelativeReference"/>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefUnAnchored.AbsoluteName">
            <summary>
            The fully qualified unique name for the referenced element.  Read Only.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefUnAnchored.RelativeReference">
            <summary>
            Gets or Sets the parsed representation of the string used to create this reference if this reference
            is UnAnchored.  Use <b>AbsoluteReference</b> to get the parsed representation of the anchored reference.
            <p>RefUnAnchored returns the relative reference. When setting the relative reference, the merge 
            reference is constructed by merging the relative reference into the base reference.
            </p>
            </summary>
            <seealso cref="P:Infragistics.Win.CalcEngine.RefUnAnchored.IsAnchored"/>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefUnAnchored.Context">
            <summary>
            Returns a context for the Reference.
            </summary>
            <remarks><p class="body">Returns a meaningful object context for the reference. This could be an UltraGridCell, UltraGridColumn, NamedReference, Control, etc.</p></remarks>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefUnAnchored.Value">
            <summary>
            The <see cref="T:Infragistics.Win.CalcEngine.UltraCalcValue"/>, if any, associated with this Reference.  If this reference 
            does not contain a Value then a <see cref="T:Infragistics.Win.CalcEngine.UltraCalcErrorValue"/> is returned.
            <p>RefUnAnchored forwards this to the base reference.
            </p>
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefUnAnchored.Formula">
            <summary>
            The <see cref="T:Infragistics.Win.CalcEngine.IUltraCalcFormula"/>, if any, associated with this Reference.  If this reference 
            can not contain a formula then null is returned.
            <p>RefUnAnchored forwards this to the base reference.
            </p>
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefUnAnchored.RecalcVisible">
            <summary>
            Flag used by the calculation engine to manage the recalculation network. 
            Denotes the reference is visible.
            <p>RefUnAnchored forwards this to the base reference.
            </p>
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefUnAnchored.RecalcDeferred">
            <summary>
            True indicates that recalculating reference's formula can deferred until it become visible.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefUnAnchored.HasRelativeIndex">
            <summary>
            True indicates that the reference was constructed with a relative index.  Read Only.
            <p>RefUnAnchored uses the relative rp.
            </p>
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefUnAnchored.HasScopeAll">
            <summary>
            True indicates that the reference was constructed with a scope all index.  Read Only.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefUnAnchored.HasAbsoluteIndex">
            <summary>
            True indicates that the reference was constructed with a absolute index.  Read Only.
            <p>RefUnAnchored uses the relative rp.
            </p>
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefUnAnchored.References">
            <summary>
            Return a collection of references if this Reference is enumerable.  An exception is
            thrown if this reference is not enumerable.
            <p>RefUnAnchored returns the baseRef enumeration scoped to the merged reference.
            </p>
            </summary>
            <returns>A Reference collection.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefUnAnchored.IsEnumerable">
            <summary>
            Returns true if this reference is enumerable.
            <p>RefUnAnchored forwards this to the base reference.
            </p>
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.RefUnAnchored.IsDisposedReference">
            <summary>
            True indicates that the reference was disposed.  Read Only.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UCReference">
            <summary>
            Implements the IUltraCalcReference and provides methods to connect and disconnect from an underlying calculation object reference
            </summary>
            <remarks>
            <p class="body">
            UCReference wraps an internal IUltraCalcReference class instance that points to the underlying object.  That is, each method simply passes 
            the IUltraCalcReference request to the underlying reference if the object is connected, else it returns, or throws, an appropriate error.  
            UCReference has storage for the reference string and its underlying reference object.  
            <p></p>
            There are two additional methods on UCReference: Connect and Disconnect.  
            <p></p>
            Connect will attempt to obtain a reference to the object it refers to given a base reference and it's reference string by calling the base 
            reference's CreateReference method passing it the reference string.  If its successful, it will store the newly created reference and use 
            it to dispatch IUltraCalcReference requests against it.
            <p></p>
            Disconnect will simply free the internal reference object after which its IUltraCalcReference methods will deal with a disconnected state.
            <p></p>
            Virtually all references can be in a disconnected state at some point in their lifetime, therefore the CalcEngine uses UCReference instances to
            connect to all references.  That is, the UltraCalcFormulaCompiler.Compile method creates UCRefernces for the all references in the formula string.  The CalcEngine exposes 
            a <b>TopoChange</b> event that objects used to notify it of topological changes.  The TopoChange event passes a reference to the CalcEngine
            that describes the object that changed (e.g. column, row, grid, etc) along with a Create / Delete action argument.  
            <p></p>
            On Delete events, the CalcEngine will track down all formulas whose LHS is contained by the disconnected reference and delete them.  
            This will clean up the recalc chain and ancestor map of any references including sub-references under the deleted reference.  That is, 
            column formulas will be deleted when the event's deleted reference is an entire grid, or cell references that are on the recalc chain when 
            the deleted reference is a column.  The ContainsReference on the reference passed with the TopoChange event determines whether the event
            affects a given reference.  Secondly, all formulas who reference the deleted reference will be recalculated.
            <p></p>
            On Create events, the CalcEngine will track down all references contained by the created reference and call the Connect method passing in the 
            their formula's BaseReference.  This will cause the CalcReference to reconnect to the underlying reference.  Secondly, each re-connected 
            reference's ancestor's will be recalculated.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UCReference.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UCReference.#ctor(System.String)">
            <summary>
            Reference name constructor
            </summary>
            <param name="referenceName">Name of reference entered into formula used to create the underlying object reference</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UCReference.#ctor(System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.CalcEngine.UCReference"/> for a range.
            </summary>
            <param name="fromName">Start of the range</param>
            <param name="toName">End of the range</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UCReference.CreateReference(System.String)">
            <summary>
            Create a new reference relative to this reference.
            </summary>
            <param name="reference">The reference string.</param>
            <returns>The new reference.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UCReference.CreateRange(System.String,System.String)">
            <summary>
            Create a Range reference relative to this reference.
            </summary>
            <param name="fromReference">The start of the range, inclusive.</param>
            <param name="toReference">The end of the range, inclusive.</param>
            <returns>A RangeReference</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UCReference.ResolveReference(Infragistics.Win.CalcEngine.IUltraCalcReference,Infragistics.Win.CalcEngine.ResolveReferenceType)">
            <summary>
            Resolves a reference relative to this reference.  For example, if this
            reference is a reference to a row, and inReference is a reference to a
            column, the resolved reference is the cell reference that is the intersection
            of this row and the input column.
            </summary>
            <param name="reference">The reference to resolve.</param>
            <param name="referenceType"></param>
            <returns>The resolved reference.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UCReference.MarkRelativeIndices(Infragistics.Win.CalcEngine.IUltraCalcReference)">
            <summary>
            For each reference tuple in this reference that has a relative index, mark the
            corresponding tuple in inReference.
            </summary>
            <param name="reference">The Reference to be marked.</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UCReference.ContainsReference(Infragistics.Win.CalcEngine.IUltraCalcReference)">
            <summary>
            Returns true if this reference contains inReference
            </summary>
            <param name="reference">The contained candidate.</param>
            <returns>true if inReference is contained by this reference.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UCReference.IsSubsetReference(Infragistics.Win.CalcEngine.IUltraCalcReference)">
            <summary>
            Returns true if inReference is a proper subset of this reference
            </summary>
            <param name="reference">The subset candidate.</param>
            <returns>true if inReference is contained by this reference.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UCReference.IsSiblingReference(Infragistics.Win.CalcEngine.IUltraCalcReference)">
            <summary>
            Determines whether the given reference is a sibling of this reference
            </summary>
            <param name="reference">The reference to compare against this one</param>
            <returns>True if the reference is a sibling of the given reference</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UCReference.Connect(Infragistics.Win.CalcEngine.IUltraCalcReference)">
            <summary>
            Associates the <see cref="T:Infragistics.Win.CalcEngine.UCReference"/> with the specified <see cref="T:Infragistics.Win.CalcEngine.IUltraCalcReference"/>
            </summary>
            <param name="reference">New underlying reference for the instance</param>
            <returns>Returns true if the operation caused the UCReference to change so that it represents a different reference than before.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UCReference.Disconnect">
            <summary>
            Disconnects the <see cref="T:Infragistics.Win.CalcEngine.UCReference"/> from the underlying <see cref="T:Infragistics.Win.CalcEngine.IUltraCalcReference"/>
            </summary>
            <returns>Returns true if the operation caused the UCReference to change so that it represents a different reference than before.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UCReference.Reconnect(Infragistics.Win.CalcEngine.IUltraCalcReference)">
            <summary>
            Disconnects from the previous reference and connects to the specified <see cref="T:Infragistics.Win.CalcEngine.IUltraCalcReference"/>
            </summary>
            <param name="reference">New reference that should be the underlying reference for this instance</param>
            <returns>Returns true if the operation caused the UCReference to change so that it represents a different reference than before.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UCReference.GetHashCode">
            <summary>
            Overridden. Default implementation returns the hash code of the normalized absolute name.
            These objects are going to be added to data structure that make use of GetHashCode and 
            Equals methods. What this means is that the normalized absolute name must not change 
            throughout the lifetime of this instance. If it does change then the overriding class 
            must override this method and return a hash code based on some other immutable property 
            of the instance.
            </summary>
            <returns>A hash code of the normalized absolute name.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UCReference.Equals(System.Object)">
            <summary>
            Overriden. Default implementation returns true if the normalized absolute names of this
            reference and the passed in reference match. These objects are going to be added to data 
            structure that make use of GetHashCode and Equals methods. What this means is that the 
            normalized absolute name must not change throughout the lifetime of this instance. If it 
            does change then the overriding class must override this method and return a hash code 
            based on some other immutable property of the instance.
            </summary>
            <param name="obj">The object to test for equality.</param>
            <returns>True if the normalized absolute names of this instance and the passed in reference match.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UCReference.Context">
            <summary>
            Returns a context for the Reference.
            </summary>
            <remarks><p class="body">Returns a meaningful object context for the reference. This could be an UltraGridCell, UltraGridColumn, NamedReference, Control, etc.</p></remarks>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UCReference.AbsoluteName">
            <summary>
            Returns the absolute name for the reference
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UCReference.NormalizedAbsoluteName">
            <summary>
            Returns the normalized absolute name. UltraCalcEngine makes use normalized
            absolute names of references to compare two references and search for references.
            This property should return the absolute name with case insensitive parts of
            the absolute names converted to lower case.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UCReference.ElementName">
            <summary>
            The unqualified name of this referenced element.  Used to construct the fully qualified name by the
            <b>AbsoluteName</b> method. Read Only.
            </summary>
            <seealso cref="P:Infragistics.Win.CalcEngine.UCReference.AbsoluteName"/>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UCReference.Value">
            <summary>
            The <b>UltraCalcValue</b>, if any, associated with this Reference.  If this reference 
            does not contain a Value then a <b>UltraCalcErrorValue</b> is returned.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UCReference.Formula">
            <summary>
            The <b>IUltraCalcFormula</b>, if any, associated with this Reference.  If this reference 
            can not contain a formula then null is returned.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UCReference.HasRelativeIndex">
            <summary>
            Indicates if the underlying reference has a relative index.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UCReference.HasAbsoluteIndex">
            <summary>
            Indicates if the underlying reference has an absolute index.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UCReference.HasScopeAll">
            <summary>
            Indicates if the underlying reference was constructed with a scope all index.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UCReference.RecalcDeferred">
            <summary>
            Flag used by the <b>UltraCalcEngine</b> to manage the recalculation network. 
            Denotes the reference is visible.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UCReference.RecalcVisible">
            <summary>
            Flag used by the <b>UltraCalcEngine</b> to manage the recalculation network. 
            Denotes the reference is visible.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UCReference.References">
            <summary>
            Return a collection of references if this Reference is enumerable.  An exception is
            thrown if this reference is not enumerable.
            </summary>
            <returns>A Reference collection.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UCReference.IsEnumerable">
            <summary>
            Returns true if this reference is enumerable.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UCReference.IsDataReference">
            <summary>
            Returns true if this reference is a data reference.  A data reference contains a value, such as a Grid Cell or
            a Grid SummaryValue.  Many referenced elements, such as a Grid Column or a Grid Band, do not reference a value.
            Read Only. 
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UCReference.Parent">
            <summary>
            The RefBase Parent reference of this referenced element.  Used to navigate the element hierarchy.  If this
            referenced element is the root element, <b>BaseParent</b> returns null.  Read Only.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UCReference.IsDisposedReference">
            <summary>
            True indicates that the reference was disposed.  Read Only.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UCReference.Reference">
            <summary>
            Returns the underlying reference or this instance if the object is not connected.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UCReference.RootName">
            <summary>
            Returns the root name for the reference
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UCReference.IsConnected">
            <summary>
            Indicates if the UCReference is currently connected to an underlying <see cref="T:Infragistics.Win.CalcEngine.IUltraCalcReference"/>
            </summary>
        </member>
        <member name="T:Infragistics.InfragisticsFeatureAttribute">
            <summary>
            Indicates an exposed type or member which was added as part of a new feature.
            </summary>
        </member>
        <member name="M:Infragistics.InfragisticsFeatureAttribute.#ctor">
            <summary>
            Creates a new <see cref="T:Infragistics.InfragisticsFeatureAttribute"/> instance.
            </summary>
        </member>
        <member name="P:Infragistics.InfragisticsFeatureAttribute.Exclude">
            <summary>
            Gets or sets the value indicating whether member or type should be excluded from the internal feature documentation.
            </summary>
        </member>
        <member name="P:Infragistics.InfragisticsFeatureAttribute.FeatureName">
            <summary>
            Gets or sets a short name description of the feature.
            </summary>
        </member>
        <member name="P:Infragistics.InfragisticsFeatureAttribute.SubFeatureName">
            <summary>
            Gets or sets a more granular sub-feature name description of the feature.
            </summary>
        </member>
        <member name="P:Infragistics.InfragisticsFeatureAttribute.Version">
            <summary>
            Gets or sets the version in which the feature was added.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.LocalizedCategoryAttribute.GetLocalizedString(System.String)">
            <summary>
            Returns the localized category name
            </summary>
            <param name="value">Name of the category to retreive</param>
            <returns>The localized string value</returns>
        </member>
        <member name="T:Infragistics.Shared.UltraPropertyPageAttribute">
            <summary>
            Attribute class used for specifying the custom property pages of aa UltraControl.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.UltraPropertyPageAttribute.#ctor(System.String,System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="tabCaption">Caption for the tab containing the control.</param>
            <param name="ultraPropControlType">Control type to create.</param>
        </member>
        <member name="M:Infragistics.Shared.UltraPropertyPageAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="tabCaption">Caption for the tab containing the control.</param>
            <param name="ultraPropControlType">Strong name of the property page type.</param>
        </member>
        <member name="P:Infragistics.Shared.UltraPropertyPageAttribute.UltraPropertyControlType">
            <summary>
            Returns the object type.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.UltraPropertyPageAttribute.TabCaption">
            <summary>
            Returns the tabcaption for the control.
            </summary>
        </member>
        <member name="T:Infragistics.Shared.AboutDialog">
            <summary>
            About box.
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AboutDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.AboutDialog.#ctor(Infragistics.Shared.IUltraLicensedComponent)">
            <summary>
            Constructor
            </summary>
            <param name="licensedComponent">class that implements IUltraLicensedComponent<see cref="T:Infragistics.Shared.IUltraLicensedComponent"/></param>
        </member>
        <member name="M:Infragistics.Shared.AboutDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.AboutDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Infragistics.Shared.AboutDialogEditor">
            <summary>
            The propertry editor for the '(About)' property
            </summary>
        </member>
        <member name="M:Infragistics.Shared.AboutDialogEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns modal
            </summary>
            <param name="context">This parameter is not used.</param>
        </member>
        <member name="M:Infragistics.Shared.AboutDialogEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Brings up the about dialog
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that can be used to gain additional context information.</param>
            <param name="provider">An System.IServiceProvider that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
        </member>
        <member name="T:Infragistics.Shared.AssemblyVersion">
            <summary>
            Contains version information for the Infragistics assemblies.
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.MajorMinor">
            <summary>
            Major.Minor number portion of the assembly version
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.Build">
            <summary>
            Build number portion of the assembly version
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.Revision">
            <summary>
            Revision number portion of the assembly version
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.Version">
            <summary>
            Assembly version number
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.ToolBoxBitmapFolder">
            <summary>
            Location of the resources for toolbox bitmaps. 
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.CompanyName">
            <summary>
            Assembly company name
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.EndCopyrightYear">
            <summary>
            End year of assembly copyright
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.SatelliteContractVersion">
            <summary>
            The assembly version number for the satellite assemblies.
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.Configuration">
            <summary>
            The current build configuration for the assembly.
            </summary>
        </member>
        <member name="T:Infragistics.Shared.Serialization.Binder">
            <summary>
            Controls class loading and mandates what class to load.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.Serialization.Binder.BindToType(System.String,System.String)">
            <summary>
            Controls the binding of a serialized object to a type
            </summary>
            <param name="assemblyName">Specifies the Assembly name of the serialized object</param>
            <param name="typeName">Specifies the Type name of the serialized object.</param>
            <returns>The type of the object the formatter creates a new instance of.</returns>
        </member>
        <member name="T:Infragistics.Shared.ColorsCollectionBase">
            <summary>
            Summary description for WebColorsCollection.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.ColorsCollectionBase.#ctor">
            <summary>
            Constructor, initializes a new instance of <b>ColorsCollectionBase</b>.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.ColorsCollectionBase.FillColors">
            <summary>
            Routine must be implemented by derived class to fill collection
            with colors.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.ColorsCollectionBase.Add(System.Drawing.Color)">
            <summary>
            Adds a <b>color</b> to the list.
            </summary>
            <param name="color">The new color to add.<see cref="T:System.Drawing.Color"/></param>
        </member>
        <member name="M:Infragistics.Shared.ColorsCollectionBase.Insert(System.Int32,System.Drawing.Color)">
            <summary>
            Inserts a <b>color</b> into the list.
            </summary>
            <param name="index">The index to place the new color.</param>
            <param name="color">The new color to add.<see cref="T:System.Drawing.Color"/></param>
        </member>
        <member name="M:Infragistics.Shared.ColorsCollectionBase.Remove(System.Drawing.Color)">
            <summary>
            Removes a <b>color</b> from the list.
            </summary>
            <param name="color">The color to remove.<see cref="T:System.Drawing.Color"/></param>
        </member>
        <member name="M:Infragistics.Shared.ColorsCollectionBase.Contains(System.Drawing.Color)">
            <summary>
            Determines if a color is in the collection.
            </summary>
            <param name="color">The color to check.</param>
            <returns>True if the color is in the collection.</returns>
        </member>
        <member name="M:Infragistics.Shared.ColorsCollectionBase.CopyTo(System.Drawing.Color[],System.Int32)">
            <summary>
            Copies the items into the array
            </summary>
            <param name="array">Target array</param>
            <param name="index">Index where to begin copying</param>
        </member>
        <member name="M:Infragistics.Shared.ColorsCollectionBase.IndexOf(System.Drawing.Color)">
            <summary>
            Gets the index of the specified color.
            </summary>
            <param name="color">The color to check.</param>
            <returns>The index of the color.</returns>
        </member>
        <member name="P:Infragistics.Shared.ColorsCollectionBase.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
        </member>
        <member name="T:Infragistics.Shared.InfragisticsSerializable">
            <summary>
            Indicates that a class is safe to serialize as part of saving it during run-time serialization.
            </summary>
            <remarks>
            <para class="body">Some Infragistics objects have properties where an Interface can be specified. The controls will
            typically not save these objects during run-time serialization, because the interface may be
            implemented on an object that would not be appropriate to serialize, such as a Form.</para>
            <para clas="body">Specifying the InfragisticsSerializable(true) on such a class will indicate
            that the class should be saved.</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Shared.InfragisticsSerializable.#ctor(System.Boolean)">
            <summary>
            Creates a new InfragisticsSerializable attribute
            </summary>
            <param name="serializable"></param>
        </member>
        <member name="P:Infragistics.Shared.InfragisticsSerializable.Serializable">
            <summary>
            Returns whether or not the object should be serialized. 
            </summary>
            <remarks>
            <para class="body">Some Infragistics objects have properties where an Interface can be specified. The controls will
            typically not save these objects during run-time serialization, because the interface may be
            implemented on an object that would not be appropriate to serialize, such as a Form.</para>
            <para clas="body">Specifying the InfragisticsSerializable(true) on such a class will indicate
            that the class should be saved.</para>
            </remarks>
        </member>
        <member name="T:Infragistics.Shared.Serialization.TypeWrapper">
            <summary>
            Wrapper class for serializing a <see cref="T:System.Type"/> instance
            </summary>
        </member>
        <member name="M:Infragistics.Shared.Serialization.TypeWrapper.#ctor(System.Type)">
            <summary>
            Initializes a new <b>TypeWrapper</b>
            </summary>
            <param name="type">Type to serialize</param>
        </member>
        <member name="P:Infragistics.Shared.Serialization.TypeWrapper.AssemblyQualifiedName">
            <summary>
            Returns the AssemblyQualifiedName of the type
            </summary>        
        </member>
        <member name="P:Infragistics.Shared.Serialization.TypeWrapper.FullName">
            <summary>
            Returns the FullName of the type
            </summary>
        </member>
        <member name="T:Infragistics.Shared.Serialization.CursorWrapper">
            <summary>
            Wrapper class for serializing a <see cref="T:System.Windows.Forms.Cursor"/> instance
            </summary>
        </member>
        <member name="F:Infragistics.Shared.Serialization.CursorWrapper.objectValue">
            <summary>
            Cursor object or enumeration indicating the type of cursor.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.Serialization.CursorWrapper.#ctor(System.Windows.Forms.Cursor)">
            <summary>
            Initializes a new <b>CursorWrapper</b>
            </summary>
            <param name="cursor">Cursor to serialize</param>
        </member>
        <member name="P:Infragistics.Shared.Serialization.CursorWrapper.Cursor">
            <summary>
            Returns the <b>Cursor</b> object
            </summary>
        </member>
        <member name="T:Infragistics.Shared.CustomTypeDescriptorAdapter">
            <summary>
            CustomTypeDescriptorAdapter is an adapter class that implements ICustomTypeDescriptor.
            </summary>
        </member>
        <member name="F:Infragistics.Shared.CustomTypeDescriptorAdapter.component">
            <summary>
            Associated component.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.CustomTypeDescriptorAdapter.ShouldIncludeProperty(System.ComponentModel.PropertyDescriptor,System.Attribute[])">
            <summary>
            Used to determine which properties should be returned from the base <see cref="T:System.ComponentModel.ICustomTypeDescriptor"/> implementation
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> This method may not be invoked if the <see cref="M:Infragistics.Shared.CustomTypeDescriptorAdapter.GetProperties"/> method(s) are overriden.</p>
            </remarks>
            <param name="propertyDescriptor">PropertyDecriptor to be evaluated</param>
            <param name="attributes">Array of attributes passed into the <b>GetProperties</b> method or null if none were specified.</param>
            <returns>Return true by default to include the specified property.</returns>
        </member>
        <member name="M:Infragistics.Shared.CustomTypeDescriptorAdapter.WrapPropertyValue(System.Object)">
            <summary>
            Invoked when the value of the custom property descriptor is requested 
            so the property value may be wrapped by a custom type descriptor if 
            necessary.
            </summary>
            <param name="value">The value of the property descriptor</param>
            <returns>By default, <paramref name="value"/> is returned.</returns>
        </member>
        <member name="M:Infragistics.Shared.CustomTypeDescriptorAdapter.GetHashCode">
            <summary>
            Returns the hashcode of the underlying component.
            </summary>
            <returns> A hash code for the component.</returns>
        </member>
        <member name="M:Infragistics.Shared.CustomTypeDescriptorAdapter.Equals(System.Object)">
            <summary>
            Indicates if the object is equivalent to the specified object
            </summary>
            <param name="obj">Object to evaluate</param>
            <returns>A boolean indicating if it represents the same component.</returns>
        </member>
        <member name="M:Infragistics.Shared.CustomTypeDescriptorAdapter.#ctor(System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="component">The component to be described.</param>
        </member>
        <member name="M:Infragistics.Shared.CustomTypeDescriptorAdapter.GetConverter">
            <summary>
            ICustomTypeDescriptor.GetConverter implementation.
            </summary>
            <returns>A TypeConverter for the component.</returns>
        </member>
        <member name="M:Infragistics.Shared.CustomTypeDescriptorAdapter.GetEvents(System.Attribute[])">
            <summary>
            ICustomTypeDescriptor.GetEvents implementation.
            </summary>
            <param name="attributes">An array of attributes to use as a filter.</param>
            <returns>A collection of event descriptors.</returns>
        </member>
        <member name="M:Infragistics.Shared.CustomTypeDescriptorAdapter.GetEvents">
            <summary>
            ICustomTypeDescriptor.GetEvents implementation.
            </summary>
            <returns>A collection of event descriptors.</returns>
        </member>
        <member name="M:Infragistics.Shared.CustomTypeDescriptorAdapter.GetComponentName">
            <summary>
            ICustomTypeDescriptor.GetComponentName implementation.
            </summary>
            <returns>The name of the component using a TypeDescriptor.</returns>
        </member>
        <member name="M:Infragistics.Shared.CustomTypeDescriptorAdapter.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <summary>
            ICustomTypeDescriptor.GetPropertyOwner implementation.
            </summary>
            <param name="pd">This parameter is not used.</param>
            <returns>The underlying component.</returns>
        </member>
        <member name="M:Infragistics.Shared.CustomTypeDescriptorAdapter.GetAttributes">
            <summary>
            ICustomTypeDescriptor.GetAttributes implementation.
            </summary>
            <returns>A collection of attributes associated with the component.</returns>
        </member>
        <member name="M:Infragistics.Shared.CustomTypeDescriptorAdapter.GetProperties(System.Attribute[])">
            <summary>
            ICustomTypeDescriptor.GetProperties implementation.
            </summary>
            <param name="attributes">An array of attributes to use as a filter.</param>
            <returns>A collection of properties for the component.</returns>
        </member>
        <member name="M:Infragistics.Shared.CustomTypeDescriptorAdapter.GetProperties">
            <summary>
            ICustomTypeDescriptor.GetProperties implementation.
            </summary>
            <returns>A collection of properties for the component.</returns>
        </member>
        <member name="M:Infragistics.Shared.CustomTypeDescriptorAdapter.GetEditor(System.Type)">
            <summary>
            ICustomTypeDescriptor.GetEditor implementation.
            </summary>
            <param name="editorBaseType">The base type of the editor.</param>
            <returns>An editor with the specified base type.</returns>
        </member>
        <member name="M:Infragistics.Shared.CustomTypeDescriptorAdapter.GetDefaultProperty">
            <summary>
            ICustomTypeDescriptor.GetDefaultProperty implementation.
            </summary>
            <returns>The default property for the component with a custom type descriptor.</returns>
        </member>
        <member name="M:Infragistics.Shared.CustomTypeDescriptorAdapter.GetDefaultEvent">
            <summary>
            ICustomTypeDescriptor.GetDefaultEvent implementation.
            </summary>
            <returns>The default event for the component with a custom type descriptor.</returns>
        </member>
        <member name="M:Infragistics.Shared.CustomTypeDescriptorAdapter.GetClassName">
            <summary>
            ICustomTypeDescriptor.GetClassName implementation.
            </summary>
            <returns>The name of the class of the component.</returns>
        </member>
        <member name="T:Infragistics.Shared.DateTimeIncrement">
            <summary>
            Class similar to TimeSpan which provides the ability to specify a number of Year, Months, Days, etc to be used in conjunction 
            with the SpinIncrement property on the DateTime editors
            </summary>
        </member>
        <member name="M:Infragistics.Shared.DateTimeIncrement.#ctor">
            <summary>
            Instantiates a new DateTimeIncrement object with all time unit properties set to 0.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.DateTimeIncrement.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Instantiates a new DateTimeIncrement object.
            </summary>
            <param name="years">Number of years.</param>
            <param name="months">Number of months.</param>
            <param name="days">Number of days.</param>
            <param name="hours">Number of hours.</param>
            <param name="minutes">Number of minutes.</param>
            <param name="seconds">Number of seconds.</param>
            <param name="milliseconds">Number of milliseconds.</param>
        </member>
        <member name="M:Infragistics.Shared.DateTimeIncrement.Parse(System.String)">
            <summary>
            Parses a string value into a DateTimeIncrement object.
            </summary>
            <param name="value">The input string</param>
            <returns>The parsed DateTimeIncrement. 
            Returns null if null is passed.
            Returns an empty DateTimeIncrement object is string.empty is passed.</returns>
        </member>
        <member name="M:Infragistics.Shared.DateTimeIncrement.Equals(System.Object)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Returns True if they are equivalent.</returns>
        </member>
        <member name="M:Infragistics.Shared.DateTimeIncrement.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>Hash code for this object</returns>
        </member>
        <member name="M:Infragistics.Shared.DateTimeIncrement.ToString">
            <summary>
            Convert the object to a string representation.
            </summary>
            <returns>Returns the string representation</returns>
        </member>
        <member name="M:Infragistics.Shared.DateTimeIncrement.AdjustDateTime(System.Boolean,System.DateTime)">
            <summary>
            Increment/Decrements the provided DateTime by the values of the current object.
            </summary>
            <param name="up">Set to True to increment; False to decrement</param>
            <param name="date">The DateTime object used to created the new adjusted DateTime object.</param>
            <returns>Returns the adjusted DateTime. If the incrementing/decrementing goes beyond the max/min bounds of the DateTime class, return MaxValue/MinValue appropriately.</returns>
        </member>
        <member name="M:Infragistics.Shared.DateTimeIncrement.ShouldSerialize">
            <summary>
            Returns whether the object should be serialized.
            </summary>
            <returns>True if the object should be serialized</returns>
        </member>
        <member name="M:Infragistics.Shared.DateTimeIncrement.Reset">
            <summary>
            Resets all the date/time unit properties to zero.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.DateTimeIncrement.Years">
            <summary>
            Number of years
            </summary>
        </member>
        <member name="P:Infragistics.Shared.DateTimeIncrement.Months">
            <summary>
            Number of months
            </summary>
        </member>
        <member name="P:Infragistics.Shared.DateTimeIncrement.Days">
            <summary>
            Number of days.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.DateTimeIncrement.Hours">
            <summary>
            Number of hours.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.DateTimeIncrement.Minutes">
            <summary>
            Number of Minutes
            </summary>
        </member>
        <member name="P:Infragistics.Shared.DateTimeIncrement.Seconds">
            <summary>
            Number of seconds.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.DateTimeIncrement.Milliseconds">
            <summary>
            Number of milliseconds.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.DateTimeIncrement.IsZero">
            <summary>
            Determines if all the date/time unit properties are set to zero.
            </summary>
        </member>
        <member name="T:Infragistics.Shared.DateTimeIncrementTypeConverter">
            <summary>
            TypeConverter used for the DateTimeIncrement class
            </summary>
        </member>
        <member name="M:Infragistics.Shared.DateTimeIncrementTypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns true
            </summary>
            <param name="context">This parameter is not used.</param>
            <returns>True.</returns>
        </member>
        <member name="M:Infragistics.Shared.DateTimeIncrementTypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Returns a collection of property descriptors
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">An object that specifies the type of array for which to get properties.</param>
            <param name="attributes">An array of type System.Attribute that is used as a filter.</param>
            <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for this data type, or null if there are no properties.</returns>
        </member>
        <member name="M:Infragistics.Shared.DateTimeIncrementTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns true if the object can convert to that type.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType"> A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>True if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Infragistics.Shared.DateTimeIncrementTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the object to the requested type.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/> object. If null is passed, the current culture is assumed.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <param name="value">The object to convert.</param>
            <returns>An object that represents the converted value.</returns>
        </member>
        <member name="M:Infragistics.Shared.DateTimeIncrementTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns true if the object can be converted from the speficied type.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType"> A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>True if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Infragistics.Shared.DateTimeIncrementTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The object to convert</param>
            <returns>An object that represents the converted value.</returns>
        </member>
        <member name="T:Infragistics.Shared.DisposableObject">
            <summary>
               The base class Disposable maintains a boolean
               flag that keeps track of whether or not the object has
               been Disposed. It implemnets System.IDisposable and
               calls a virtual 'OnDispose' method to let the derived
               class know when the object has been Disposed.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.DisposableObject.#ctor">
            <summary>
            Initializes a new <b>DisposableObject</b>
            </summary>
        </member>
        <member name="M:Infragistics.Shared.DisposableObject.HasSamePublicKey(System.Type)">
            <summary>
            Checks if the test object is from an assembly that is
            signed with the same public key as this assembly
            </summary>
            <param name="type">The type whose public key token should be used for comparison.</param>
            <returns>True if same</returns>
        </member>
        <member name="M:Infragistics.Shared.DisposableObject.GetPublicKeyToken(System.Type)">
            <summary>
            Returns the public key token of a type's assembly.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> whose assembly is checked.</param>
            <returns>The public key token value. Either "null" or a 16 byte string.</returns>
        </member>
        <member name="M:Infragistics.Shared.DisposableObject.GetPublicKeyToken(System.Reflection.Assembly)">
            <summary>
            Returns the public key token of an assembly.
            </summary>
            <param name="assemblyToCheck">The assembly to check.</param>
            <returns>The public key token value. Either "null" or a 16 byte string.</returns>
        </member>
        <member name="M:Infragistics.Shared.DisposableObject.CloneSerializableObject(System.Runtime.Serialization.ISerializable,System.Runtime.Serialization.SerializationBinder)">
            <summary>
            Creates and returns a deep copy clone of the object
            </summary>
            <param name="source">The object to be cloned.</param>
            <param name="binder">Used to control class loading and mandate what class to load.</param>
            <returns>The cloned object</returns>
        </member>
        <member name="M:Infragistics.Shared.DisposableObject.Dispose">
            <summary>
            Called to Dispose the object
            </summary>
            <remarks><para class="note"><b>Note:</b> Derived classes should call the base implementation so that the Disposed property gets set.</para></remarks>
        </member>
        <member name="M:Infragistics.Shared.DisposableObject.VerifyNotDisposed">
            <summary>
            Will throw an ObjectDisposedException exception
            if the object has been disposed of.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.DisposableObject.OnDispose">
            <summary>
            Called when an active object is Disposed to notify a
            derived class when the object has been Disposed.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.DisposableObject.ConvertValue(System.Object,System.Type)">
            <summary>
            Returns a value converted to the specified type using the InvariantCulture.
            </summary>
            <param name="value">Value to convert</param>
            <param name="destinationType">Type that the value needs to be converted to.</param>
            <returns>If the value can be converted to the specified type, the converted value will be returned. If the value is already of that type or cannot be converted to that type, the <paramref name="value"/> will be returned; otherwise null is returned.</returns>
        </member>
        <member name="P:Infragistics.Shared.DisposableObject.Disposed">
            <summary>
            Returns true if the object has already been disposed
            </summary>
        </member>
        <member name="T:Infragistics.Shared.DisposableObjectCollectionBase">
            <summary>
            Abstract base class for collections that contain objects.  If the object
            implements the System.IDisposable interface, OnDispose is called on the 
            object in DisposeCollectionItems.
            </summary>
        </member>
        <member name="T:Infragistics.Shared.SubObjectBase">
            <summary>
               Classes that want to notify listeners when there state changes
               (e.g. when a property value is changed) derive from the
               SubObjectBase class.
            </summary>
        </member>
        <member name="F:Infragistics.Shared.SubObjectBase.TagSerializationName">
            <summary>
            Default name used to serialize the <see cref="P:Infragistics.Shared.SubObjectBase.Tag"/> property value
            </summary>
        </member>
        <member name="F:Infragistics.Shared.SubObjectBase.tagValue">
            <summary>
            The tag property can be used to logically attach another
            object or value to this object. 
            </summary>
        </member>
        <member name="M:Infragistics.Shared.SubObjectBase.OnSubObjectPropChanged(Infragistics.Shared.PropChangeInfo)">
            <summary>
            Called when another sub object that we are listening to notifies
            us that one of its properties has changed.
            </summary>
            <remarks>
            The default implementation does nothing. It should be overridden
            in the derived classes 
            </remarks>
            <param name="propChange"><see cref="T:Infragistics.Shared.PropChangeInfo"/></param>
        </member>
        <member name="M:Infragistics.Shared.SubObjectBase.OnObjectPropChanged(Infragistics.Shared.PropChangeInfo)">
            <summary>
            Called when a property of this object or another sub object that we are listening to notifies
            us that one of its properties has changed.
            </summary>
            <remarks>
            The default implementation does nothing. It should be overridden
            in the derived classes 
            <seealso cref="M:Infragistics.Shared.SubObjectBase.OnSubObjectPropChanged(Infragistics.Shared.PropChangeInfo)"/>
            </remarks>
            <param name="propChange"><see cref="T:Infragistics.Shared.PropChangeInfo"/></param>		
        </member>
        <member name="M:Infragistics.Shared.SubObjectBase.NotifyPropChange(System.Enum)">
            <summary>
            Notifies any listeners when the state of an object has changed
            </summary>
            <param name="propId">An ID that denotes the property.</param>
        </member>
        <member name="M:Infragistics.Shared.SubObjectBase.NotifyPropChange(System.Enum,Infragistics.Shared.PropChangeInfo)">
            <summary>
            Notifies any listeners when the state of an object has changed
            </summary>
            <param name="propId">An ID that denotes the property.</param>
            <param name="trigger">Optional. Used during a prop change notification to create a complete context chain of what triggered the change. </param>
        </member>
        <member name="M:Infragistics.Shared.SubObjectBase.NotifyPropChange(Infragistics.Shared.PropChangeInfo)">
            <summary>
            Notifies any listeners when the state of an object has changed. 
            </summary>
            <param name="trigger">Used during a prop change notification to create a complete context chain of what triggered the change.</param>
        </member>
        <member name="M:Infragistics.Shared.SubObjectBase.ShouldSerializeTag">
            <summary>
            Returns true if the tag value is a string or a primitive type.
            </summary>
            <returns>True if the tag value is a string or a primitive type, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Shared.SubObjectBase.ResetTag">
            <summary>
            Sets the tag value to null
            </summary>
        </member>
        <member name="M:Infragistics.Shared.SubObjectBase.InitializeTag(System.Object)">
            <summary>
            Protected method for initializing the <see cref="P:Infragistics.Shared.SubObjectBase.Tag"/> property without generating a property change notification.
            </summary>
            <param name="tagValue"><see cref="T:System.Object"/> to initialize tag to. </param>
        </member>
        <member name="M:Infragistics.Shared.SubObjectBase.OnDispose">
            Called when this object is Disposed of.
             
        </member>
        <member name="M:Infragistics.Shared.SubObjectBase.SerializeTag(System.Runtime.Serialization.SerializationInfo,System.String)">
            <summary>
            Serializes the <see cref="P:Infragistics.Shared.SubObjectBase.Tag"/> property's value into
            the specified serialization info object.
            </summary>
            <param name="info">Serialization info instance into which the tag should be serialized.</param>
            <param name="name">Name used to serialize the tag's value</param>
        </member>
        <member name="M:Infragistics.Shared.SubObjectBase.SerializeTag(System.Runtime.Serialization.SerializationInfo)">
            <summary>
            Serializes the <see cref="P:Infragistics.Shared.SubObjectBase.Tag"/> property's value into
            the specified serialization info object.
            </summary>
            <param name="info">Serialization info instance into which the tag should be serialized.</param>
        </member>
        <member name="M:Infragistics.Shared.SubObjectBase.DeserializeTag(System.Runtime.Serialization.SerializationEntry)">
            <summary>
            Deserializes the tag value from the specified entry
            </summary>
            <param name="entry">Serialization entry from which to obtain the new <see cref="P:Infragistics.Shared.SubObjectBase.Tag"/> value</param>
        </member>
        <member name="M:Infragistics.Shared.SubObjectBase.DeserializeTag(System.Runtime.Serialization.SerializationInfo,System.String)">
            <summary>
            Deserializes the value for the <see cref="P:Infragistics.Shared.SubObjectBase.Tag"/> property
            </summary>
            <param name="info">Serialization info object from which to obtain the value</param>
            <param name="name">The name associated with the value to retrieve.</param>
        </member>
        <member name="M:Infragistics.Shared.SubObjectBase.DeserializeTag(System.Runtime.Serialization.SerializationInfo)">
            <summary>
            Deserializes the value for the <see cref="P:Infragistics.Shared.SubObjectBase.Tag"/> property
            </summary>
            <param name="info">Serialization info object from which to obtain the value</param>
        </member>
        <member name="E:Infragistics.Shared.SubObjectBase.SubObjectPropChanged">
            <summary>
            Fired when a property is changed on this object or any of
            its sub objects
            </summary>
        </member>
        <member name="E:Infragistics.Shared.SubObjectBase.SubObjectDisposed">
            <summary>
            Fired when this object is disposed
            </summary>
        </member>
        <member name="P:Infragistics.Shared.SubObjectBase.SubObjectPropChangeHandler">
            <summary>
            Returns the event handler that notifies OnSubObjectPropChanged
            </summary>
        </member>
        <member name="P:Infragistics.Shared.SubObjectBase.Tag">
            <summary>
            The tag property can be used to logically attach another
            object or value to this object. 
            </summary>
        </member>
        <member name="P:Infragistics.Shared.SubObjectBase.ForceApplyResources">
            <summary>
            For Infragistics internal use only.
            </summary>
        </member>
        <member name="T:Infragistics.Shared.SubObjectBase.NotifyId">
            <summary>
            Used to identify properties during a property change notification
            </summary>
        </member>
        <member name="F:Infragistics.Shared.SubObjectBase.NotifyId.Tag">
            <summary>
            The Tag property
            </summary>
        </member>
        <member name="F:Infragistics.Shared.SubObjectBase.NotifyId.Key">
            <summary>
            Key property
            </summary>
        </member>
        <member name="M:Infragistics.Shared.DisposableObjectCollectionBase.#ctor">
            <summary>
            Constructor, initializes a new <b>DisposableObjectCollectionBase</b> class.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.DisposableObjectCollectionBase.GetItem(System.Int32)">
            <summary>
            Virtual method that returns the object at the specified index
            </summary>
            <param name="index">index of the object to retrieve.</param>
            <returns>The object at the index</returns>
        </member>
        <member name="M:Infragistics.Shared.DisposableObjectCollectionBase.DisposeCollectionItems">
            <summary>
            Calls dispose on each collection item
            </summary>
        </member>
        <member name="M:Infragistics.Shared.DisposableObjectCollectionBase.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the items from the collection into the array.
            </summary>
            <param name="array">The array to receive the itemd</param>
            <param name="index">The index to start with</param>
        </member>
        <member name="M:Infragistics.Shared.DisposableObjectCollectionBase.Contains(System.Object)">
            <summary>
            Returns true if the collection contains the instance specified.
            </summary>
            <returns>True if the object is contained within the collection.</returns>
            <remarks>
            <p class="note"><b>Note:</b> This method checks the collection for the specific 
            instance of the object that is provided. It does not check the collection for 
            an object with a particular key. If this collection is a <see cref="T:Infragistics.Shared.KeyedSubObjectsCollectionBase"/> 
            then you can use the <see cref="M:Infragistics.Shared.KeyedSubObjectsCollectionBase.Exists(System.String)"/> method 
            to see if an item exists in the collection with the specified key.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Shared.DisposableObjectCollectionBase.IndexOf(System.Object)">
            <summary>
            Returns the index of the object in the collection
            </summary>
            <param name="obj">The object whose presence should be checked in the collection.</param>
            <returns>The index of the object in the collection.</returns>
        </member>
        <member name="M:Infragistics.Shared.DisposableObjectCollectionBase.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            IEnumerable Interface Implementation
            returns a type safe enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Shared.DisposableObjectCollectionBase.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.DisposableObjectCollectionBase.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ArrayList is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:Infragistics.Shared.DisposableObjectCollectionBase.IsReadOnly">
            <summary>
            Returns true if the collection is read-only
            </summary>
        </member>
        <member name="P:Infragistics.Shared.DisposableObjectCollectionBase.InitialCapacity">
            <summary>
            Abstract property that specifies the initial capacity
            of the collection
            </summary>
        </member>
        <member name="P:Infragistics.Shared.DisposableObjectCollectionBase.Count">
            <summary>
            Returns the number of items in the collection
            </summary>
        </member>
        <member name="P:Infragistics.Shared.DisposableObjectCollectionBase.List">
            <summary>
            The list that contains the item references 
            </summary>
        </member>
        <member name="T:Infragistics.Shared.DisposableObjectEnumeratorBase">
            <summary>
            A base class that implements the IEnumerator interface 
            </summary>
        </member>
        <member name="M:Infragistics.Shared.DisposableObjectEnumeratorBase.#ctor(Infragistics.Shared.DisposableObjectCollectionBase)">
            <summary>
            Constructor 
            </summary>
        </member>
        <member name="M:Infragistics.Shared.DisposableObjectEnumeratorBase.MoveNext">
            <summary>
            Implements the IEnumerator.MoveNext method 
            </summary>
        </member>
        <member name="M:Infragistics.Shared.DisposableObjectEnumeratorBase.Reset">
            <summary>
            Implements the IEnumerator.Reset method. Sets the position to
            before the first item in the collection
            </summary>
        </member>
        <member name="P:Infragistics.Shared.DisposableObjectEnumeratorBase.System#Collections#IEnumerator#Current">
            <summary>
            Returns the current object being enumerated
            </summary>
        </member>
        <member name="T:Infragistics.Win.DropDownListBox">
            <summary>
            Listbox used for displaying a dropdown from a UITypeEditor.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DropDownListBox.#ctor(System.Object[],System.Object,System.Boolean)">
            <summary>
            Constructor, initializes a new instance of <b>DropDownListBox</b> class.
            </summary>
            <param name="items">Array of items used to populate the listbox.</param>
            <param name="defaultItem">Item to select by default.</param>
            <param name="sorted">True if the items should be sorted by default</param>
        </member>
        <member name="M:Infragistics.Win.DropDownListBox.#ctor(System.Object[],System.Object)">
            <summary>
            Constructor, initializes a new instance of <b>DropDownListBox</b> class.
            </summary>
            <param name="items">Array of items used to populate the listbox.</param>
            <param name="defaultItem">Item to select by default.</param>
        </member>
        <member name="M:Infragistics.Win.DropDownListBox.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Overriden. Used to indicate that the enter key is used by the control.
            </summary>
            <param name="keyData">The <see cref="T:System.Windows.Forms.Keys"/> to check.</param>
            <returns>True if the key should be passed to the control.</returns>
        </member>
        <member name="M:Infragistics.Win.DropDownListBox.OnClick(System.EventArgs)">
            <summary>
            Overriden. Used to intercept when the user selects an item as opposed to
            when the event fires during population of the list.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> of the event.</param>
        </member>
        <member name="M:Infragistics.Win.DropDownListBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Overriden. Used to intercept when the user pressing the enter key.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.KeyEventArgs"/> of the event.</param>
        </member>
        <member name="P:Infragistics.Win.DropDownListBox.WasItemClicked">
            <summary>
            Indicates if an item was selected.
            </summary>
        </member>
        <member name="T:Infragistics.Shared.EventHandlerDictionary">
            <summary>
            Class used to manage a list of delegates. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.EventHandlerDictionary.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Shared.EventHandlerDictionary"/>
            </summary>
        </member>
        <member name="M:Infragistics.Shared.EventHandlerDictionary.#ctor(System.Int32)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Shared.EventHandlerDictionary"/>
            </summary>
            <param name="initialSize">Approximate number of items that the list will contain</param>
        </member>
        <member name="M:Infragistics.Shared.EventHandlerDictionary.AddHandler(System.Object,System.Delegate)">
            <summary>
            Adds a delegate to the list
            </summary>
            <param name="key">The object that owns the event</param>
            <param name="value">The delegate to add to the list</param>
        </member>
        <member name="M:Infragistics.Shared.EventHandlerDictionary.AddHandlers(Infragistics.Shared.EventHandlerDictionary)">
            <summary>
            Copies over the event handlers from the specified source into this instance, clearing any existing event handlers.
            </summary>
            <param name="source">The source from which the event handlers should be copied.</param>
        </member>
        <member name="M:Infragistics.Shared.EventHandlerDictionary.RemoveHandler(System.Object,System.Delegate)">
            <summary>
            Removes a delegate from the list
            </summary>
            <param name="key">Object that owns the event</param>
            <param name="value">Delegate to remove</param>
        </member>
        <member name="M:Infragistics.Shared.EventHandlerDictionary.OnDispose">
            <summary>
            Invoked when the object is disposed.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.EventHandlerDictionary.Item(System.Object)">
            <summary>
            Returns the <see cref="T:System.Delegate"/> with the specified key.
            </summary>
        </member>
        <member name="T:Infragistics.Shared.EventManagerBase">
            <summary>
            Abstract base class for managing a control's events. It maintains an
            enabled flag for each event as well as a nested 'in progress' count.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.EventManagerBase.#ctor(System.Int32)">
            <summary>
            Constructor intitializes a new instance of the <b>EventManagerBase</b> class.
            </summary>
            <param name="eventCount">The total number of events</param>
        </member>
        <member name="M:Infragistics.Shared.EventManagerBase.InProgress(System.Int32)">
            <summary>
            Returns true if the event is in progress (in progress count > 0)
            </summary>
            <param name="eventIndex">index of the event to check.</param>
            <returns>True if event in progress, false otherwise.</returns>
        </member>
        <member name="M:Infragistics.Shared.EventManagerBase.IncrementInProgress(System.Int32)">
            <summary>
            Increments the in progress count
            </summary>
            <param name="eventIndex">index of the event to increment</param>
        </member>
        <member name="M:Infragistics.Shared.EventManagerBase.DecrementInProgress(System.Int32)">
            <summary>
            Decrements the in progress count
            </summary>
            <param name="eventIndex">index of the event to decrement</param>
        </member>
        <member name="M:Infragistics.Shared.EventManagerBase.IsEnabled(System.Int32)">
            <summary>
            Returns true if the event is enabled
            </summary>
            <param name="eventIndex">Index of the event to check.</param>
            <returns>True if enabled, false otherwise.</returns>
        </member>
        <member name="M:Infragistics.Shared.EventManagerBase.IsEnabled(System.Int32[])">
            <summary>
            Returns false if any event is disabled
            </summary>
            <param name="eventIndexes">multiple indices to check</param>
            <returns>True if and only if all events are enabled, false otherwise.</returns>
        </member>
        <member name="M:Infragistics.Shared.EventManagerBase.SetEnabled(System.Int32,System.Boolean)">
            <summary>
            Sets a specific event enabled or disabled.
            </summary>
            <param name="eventIndex">Index of the event to enable/disable</param>
            <param name="enabled">True to enable the event, false to disable it.</param>
        </member>
        <member name="M:Infragistics.Shared.EventManagerBase.SetEnabled(System.Int32[],System.Boolean)">
            <summary>
            Sets an array of events enabled or disabled.
            </summary>
            <param name="eventIndexes">Indices of the events to change.</param>
            <param name="enabled">True to enable the event, false to disable it.</param>
        </member>
        <member name="P:Infragistics.Shared.EventManagerBase.AllEventsEnabled">
            <summary>
            The get returns true if and only if all events are enabled. The set
            makes all events enabled or disabled
            </summary>
        </member>
        <member name="T:Infragistics.Shared.ExpandableCollectionConverter">
            <summary>
            Type converter for providing an expandable collection
            </summary>
        </member>
        <member name="M:Infragistics.Shared.ExpandableCollectionConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Indicates that this object returns properties.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <returns>True</returns>
        </member>
        <member name="M:Infragistics.Shared.ExpandableCollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Return the PropertyDescriptor for the object's properties.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="value">Value whose properties should be returned</param>
            <param name="attributes">Attributes used to limit the properties returned</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Shared.ExpandableCollectionConverter.GetItemName(System.Int32,System.Object,System.Int32)">
            <summary>
            Returns the string representation of the specified item
            </summary>
            <param name="index">Index of the item in the collection</param>
            <param name="item">Item</param>
            <param name="count">Total number of items in the collection</param>
            <returns>A string representation of the object</returns>
        </member>
        <member name="T:Infragistics.Shared.CollectionItemPropertyDescriptor">
            <summary>
            PropertyDescriptor for an item in an expandable collection
            </summary>
        </member>
        <member name="M:Infragistics.Shared.CollectionItemPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            Indicates if the property can be reset.
            </summary>
            <param name="component">The component to test for reset capability.</param>
            <returns>True if resetting the component changes its value; otherwise, false.</returns>
        </member>
        <member name="M:Infragistics.Shared.CollectionItemPropertyDescriptor.GetValue(System.Object)">
            <summary>
            Returns the value for this property.
            </summary>
            <param name="component">The component with the property for which to retrieve the value.</param>
            <returns>The value of a property for a given component.</returns>
        </member>
        <member name="M:Infragistics.Shared.CollectionItemPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            Called when the property is to be reset.
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:Infragistics.Shared.CollectionItemPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the component to a new value.
            </summary>
            <param name="component">The component with the property value that is to be set.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Infragistics.Shared.CollectionItemPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            Indicates whether the property needs to be persisted.
            </summary>
            <param name="component">The component with the property to be examined for persistence.</param>
            <returns>True if the property should be persisted; otherwise, false.</returns>
        </member>
        <member name="P:Infragistics.Shared.CollectionItemPropertyDescriptor.Category">
            <summary>
            Gets the name of the category to which the member belongs.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.CollectionItemPropertyDescriptor.ComponentType">
            <summary>
            The type of component the property is bound to.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.CollectionItemPropertyDescriptor.IsReadOnly">
            <summary>
            Indicates if the property is read-only.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.CollectionItemPropertyDescriptor.PropertyType">
            <summary>
            The type of the property.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.CollectionItemPropertyDescriptor.Index">
            <summary>
            Index of the item in the collection.
            </summary>
        </member>
        <member name="T:Infragistics.Shared.FlagsEnumUITypeEditor">
            <summary>
            UITypeEditor used to allow selection of values from a flag enumeration - i.e. an enumeration which has a <see cref="T:System.FlagsAttribute"/> on it.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.FlagsEnumUITypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Used to determine the type of UIEditor that will be displayed.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <returns>UITypeEditorEditStyle specifying the type of UIEditor.</returns>
        </member>
        <member name="M:Infragistics.Shared.FlagsEnumUITypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Used to edit the value and convert the value as needed.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="provider">IServiceProvider</param>
            <param name="value">Current value</param>
            <returns>Edited value.</returns>
        </member>
        <member name="M:Infragistics.Shared.FlagsEnumUITypeEditor.UpdateCheckBoxes(System.Type,System.Windows.Forms.CheckedListBox,System.Int64,System.Boolean)">
            <summary>
            Called whenever an item is checked or unchecked in the checked list box used for editing
            the flagged enum.
            </summary>
            <param name="enumType">The type of the flagged enum.</param>
            <param name="list">The associated list of items.</param>
            <param name="bitsToCheck">The bit representation of the value that should be checked.</param>
            <param name="add">Specifies whether to check an item if its bits are checked.</param>
        </member>
        <member name="T:Infragistics.Shared.ISelectableItem">
            <summary>
            ISelectableItem is implemented by any sub object that can
            be selected and/or activated
            (e.g. a cell, row, header etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Shared.ISelectableItem.IsSelected">
            <summary>
            True if the item is currently selected (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Shared.ISelectableItem.IsSelectable">
            <summary>
            True if the item is selectable (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Shared.ISelectableItem.IsDraggable">
            <summary>
            True if the item is Draggable (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Shared.ISelectableItem.IsTabStop">
            <summary>
            True if this item is a tab stop
            </summary>
        </member>
        <member name="T:Infragistics.Shared.IUltraLicensedComponent">
            <summary>
            Interface implemented by Infragistics licensed componenents
            and controls.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.IUltraLicensedComponent.License">
            <summary>
            Returns the component's license object (read-only) 
            </summary>
        </member>
        <member name="T:Infragistics.Shared.IKeyedSubObject">
            <summary>
            Interface used by sub objects that will be part of a keyed collection (where each item can be accessed either through a zero based index or a string key.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.IKeyedSubObject.OnRemovedFromCollection(Infragistics.Shared.KeyedSubObjectsCollectionBase)">
            <summary>
            Called when this object is being removed from the passed
            in collection. 
            </summary>
            <param name="primaryCollection">The collection from which this object was removed.</param>
        </member>
        <member name="M:Infragistics.Shared.IKeyedSubObject.OnAddedToCollection(Infragistics.Shared.KeyedSubObjectsCollectionBase)">
            <summary>
            Called when this object is being added to the passed
            in collection. 
            </summary>
            <param name="primaryCollection">The collection to which the object is being added.</param>
        </member>
        <member name="P:Infragistics.Shared.IKeyedSubObject.Key">
            <summary>
            The key to use to access this item in the collection
            </summary>
        </member>
        <member name="T:Infragistics.Shared.IKeyedSubObjectEx">
            <summary>
            Interface used by sub objects that cache an interned lowercase version of their key to optimize key comparisons.
            </summary>
            <seealso cref="T:Infragistics.Shared.IKeyedSubObject"/>
        </member>
        <member name="P:Infragistics.Shared.IKeyedSubObjectEx.KeyLowercaseInterned">
            <summary>
            Returns an interned lowercase version of the string (read-only).
            </summary>
            <remarks>
            <p class="body">The returned string is used to optimize case insensitive comparisons.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.Shared.KeyedSubObjectBase">
            <summary>
            Abstract base class which implements IKeyedSubObject for sub objects
            that will be part of a keyed collection (where each item can be accessed
            either through a zero based index or a string key) 
            </summary>
            <seealso cref="T:Infragistics.Shared.SubObjectBase"/>
            <seealso cref="T:Infragistics.Shared.IKeyedSubObjectEx"/>
        </member>
        <member name="M:Infragistics.Shared.KeyedSubObjectBase.#ctor">
            <summary>
            Constructor, initializes new instance of <b>KeyedSubObjectBase</b> class.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.KeyedSubObjectBase.#ctor(System.String)">
            <summary>
            Constructor, initializes new instance of <b>KeyedSubObjectBase</b> class.
            </summary>
            <param name="key">Unique Key for the new item.</param>
        </member>
        <member name="M:Infragistics.Shared.KeyedSubObjectBase.ShouldSerializeKey">
            <summary>
            Returns true if the key needs to be serialized (not null )
            </summary>
        </member>
        <member name="M:Infragistics.Shared.KeyedSubObjectBase.ResetKey">
            <summary>
            Sets the key back to null
            </summary>
        </member>
        <member name="M:Infragistics.Shared.KeyedSubObjectBase.OnRemovedFromCollection(Infragistics.Shared.KeyedSubObjectsCollectionBase)">
            <summary>
            Called when this object is being removed from the passed
            in collection. The default implementation nulls out the
            primaryCollection if the passed in collection matches
            </summary>
            <param name="primaryCollection"><see cref="T:Infragistics.Shared.KeyedSubObjectsCollectionBase"/></param>
        </member>
        <member name="M:Infragistics.Shared.KeyedSubObjectBase.OnAddedToCollection(Infragistics.Shared.KeyedSubObjectsCollectionBase)">
            <summary>
            Called when this object is being added to the passed
            in collection. The default implementation sets the internal
            primaryCollection reference if it hasn't already been set
            </summary>
            <param name="primaryCollection"><see cref="T:Infragistics.Shared.KeyedSubObjectsCollectionBase"/></param>
        </member>
        <member name="M:Infragistics.Shared.KeyedSubObjectBase.Infragistics#Shared#IKeyedSubObject#OnAddedToCollection(Infragistics.Shared.KeyedSubObjectsCollectionBase)">
            <summary>
            Called when this object is being added to the passed
            in collection.
            </summary>
            <param name="primaryCollection"><see cref="T:Infragistics.Shared.KeyedSubObjectsCollectionBase"/></param>
        </member>
        <member name="M:Infragistics.Shared.KeyedSubObjectBase.Infragistics#Shared#IKeyedSubObject#OnRemovedFromCollection(Infragistics.Shared.KeyedSubObjectsCollectionBase)">
            <summary>
            Called when this object is being removed to the passed
            in collection.
            </summary>
            <param name="primaryCollection"><see cref="T:Infragistics.Shared.KeyedSubObjectsCollectionBase"/></param>
        </member>
        <member name="M:Infragistics.Shared.KeyedSubObjectBase.ResetInternedKey">
            <summary>
            Clears the stored interned copy of the key.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.KeyedSubObjectBase.Key">
            <summary>
            The Key of the item in its collection.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.KeyedSubObjectBase.PrimaryCollection">
            <summary>
            The primary collection that owns this object
            </summary>
        </member>
        <member name="P:Infragistics.Shared.KeyedSubObjectBase.Infragistics#Shared#IKeyedSubObjectEx#KeyLowercaseInterned">
            <summary>
            Returns a cached lowercase version of the string (read-only).
            </summary>
            <remarks>The returned string can be used to optimize case insensitive comparisons.</remarks>
        </member>
        <member name="P:Infragistics.Shared.KeyedSubObjectBase.KeyLowercaseInterned">
            <summary>
            Returns the interned lowercase key used during key comparisons.
            </summary>
        </member>
        <member name="T:Infragistics.Shared.KeyedSubObjectsCollectionBase">
            <summary>
            Abstract base class for keyed collections 
            </summary>
        </member>
        <member name="T:Infragistics.Shared.SubObjectsCollectionBase">
            <summary>
            Abstract base class for collections withouit keys 
            </summary>
        </member>
        <member name="M:Infragistics.Shared.SubObjectsCollectionBase.#ctor">
            <summary>
            Constructor, initializes a new instance of the <b>SubObjectsCollectionBase</b> class.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.SubObjectsCollectionBase.CreateArray">
            <summary>
            Virtual method used by the All 'get' method to
            create the array it returns.
            </summary>
            <returns>The newly created object array</returns>
            <remarks>This is normally overridden in a derived class to allocate a type safe array.</remarks>
        </member>
        <member name="M:Infragistics.Shared.SubObjectsCollectionBase.InternalAdd(Infragistics.Shared.SubObjectBase)">
            <summary>
            Appends the object to the collection
            </summary>
            <param name="obj"><see cref="T:Infragistics.Shared.SubObjectBase"/> to add to the collection.</param>
            <returns>Index of the added item.</returns>
        </member>
        <member name="M:Infragistics.Shared.SubObjectsCollectionBase.InternalInsert(System.Int32,Infragistics.Shared.SubObjectBase)">
            <summary>
            Appends the object to the collection
            </summary>
            <param name="index">Item insertion index.</param>
            <param name="obj"><see cref="T:Infragistics.Shared.SubObjectBase"/> to insert into the collection.</param>
        </member>
        <member name="M:Infragistics.Shared.SubObjectsCollectionBase.InternalClear">
            <summary>
            Clears the collection
            </summary>
        </member>
        <member name="M:Infragistics.Shared.SubObjectsCollectionBase.InternalRemove(Infragistics.Shared.SubObjectBase)">
            <summary>
            Removes an item from the collection
            </summary>
            <param name="value">Item to remove</param>
        </member>
        <member name="M:Infragistics.Shared.SubObjectsCollectionBase.InternalRemove(System.Int32)">
            <summary>
            Removes an item from the collection
            </summary>
            <param name="index">Index of the item to remove.</param>
        </member>
        <member name="P:Infragistics.Shared.SubObjectsCollectionBase.All">
            <summary>
            The collection as an array of objects
            </summary>
        </member>
        <member name="M:Infragistics.Shared.KeyedSubObjectsCollectionBase.#ctor">
            <summary>
            Constructor, initializes a new instance of the <b>KeyedSubObjectsCollectionBase</b> class.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.KeyedSubObjectsCollectionBase.IndexOf(System.String)">
            <summary>
            Returns the index of the item in the collection that has the
            passed in key or -1 if no item is found.
            </summary>
            <param name="key">The key of the item whose index is to be returned.</param>
            <returns>The index of the item in the collection that has the passed in key, or -1 if no item is found.</returns>
        </member>
        <member name="M:Infragistics.Shared.KeyedSubObjectsCollectionBase.GetItem(System.String)">
            <summary>
            Returns the object with the passed in key
            </summary>
            <param name="key">The key of the item whose index is to be returned.</param>
            <returns>The index of the item in the collection that has the passed in key, or -1 if no item is found.</returns>
        </member>
        <member name="M:Infragistics.Shared.KeyedSubObjectsCollectionBase.Exists(System.String)">
            <summary>
            Returns true if an object with this key is already
            in the collection. Note, if key is null or a zero
            length string this method returns false
            </summary>
            <param name="key">Key of item to test for.</param>
            <returns>True if item exists, false otherwise.</returns>
        </member>
        <member name="M:Infragistics.Shared.KeyedSubObjectsCollectionBase.ValidateKey(System.String)">
            <summary>
            Validates that the key is a valid key for this collection.
            </summary>
            <param name="key">The key to check</param>
            <exception cref="T:System.ArgumentException">Key already exists.</exception>
            <exception cref="T:System.ArgumentException">Key required.</exception>
        </member>
        <member name="M:Infragistics.Shared.KeyedSubObjectsCollectionBase.ValidateKey(System.String,Infragistics.Shared.IKeyedSubObject)">
            <summary>
            Validates that the key is a valid key for this collection.
            </summary>
            <param name="key">The key to check</param>
            <param name="ignoreObject">Don't throw an exception if the key matches this item.</param>
            <exception cref="T:System.ArgumentException">Key already exists.</exception>
            <exception cref="T:System.ArgumentException">Key required.</exception>
        </member>
        <member name="M:Infragistics.Shared.KeyedSubObjectsCollectionBase.ValidateKeyDoesNotExist(System.String)">
            <summary>
            Validates that the key doesn't already exist.
            </summary>
            <param name="key">The key to check</param>
            <exception cref="T:System.ArgumentException">Key already exists.</exception>
        </member>
        <member name="M:Infragistics.Shared.KeyedSubObjectsCollectionBase.ValidateKeyDoesNotExist(System.String,Infragistics.Shared.IKeyedSubObject)">
            <summary>
            Validates that the key doesn't already exist.
            </summary>
            <param name="key">The key to check</param>
            <param name="ignoreObject">Don't throw an exception if the key matches this item.</param>
            <exception cref="T:System.ArgumentException">Key already exists.</exception>
        </member>
        <member name="M:Infragistics.Shared.KeyedSubObjectsCollectionBase.CreateArray">
            <summary>
            Virtual method used by the All 'get' method to
            create the array it returns.
            </summary>
            <returns>The newly created object array</returns>
            <remarks>This is normally overridden in a derived class to allocate a type safe array.</remarks>
        </member>
        <member name="M:Infragistics.Shared.KeyedSubObjectsCollectionBase.CopyTo(Infragistics.Shared.IKeyedSubObject[],System.Int32)">
            <summary>
            Copies the items into the array
            </summary>
            <param name="array">Target array</param>
            <param name="index">Index where to begin copying</param>
        </member>
        <member name="M:Infragistics.Shared.KeyedSubObjectsCollectionBase.Contains(Infragistics.Shared.IKeyedSubObject)">
            <summary>
            Returns true if the collection contains this item
            </summary>
            <param name="value">Item to check for.</param>
            <returns>True if item exists, false if item does not exist.</returns>
        </member>
        <member name="M:Infragistics.Shared.KeyedSubObjectsCollectionBase.IndexOf(Infragistics.Shared.IKeyedSubObject)">
            <summary>
            Returns the index of the item in the collection
            </summary>
            <param name="value">Item to check for.</param>
            <returns>The index of the item in the collection that has the passed in key, or -1 if no item is found.</returns>
        </member>
        <member name="M:Infragistics.Shared.KeyedSubObjectsCollectionBase.InternalAdd(Infragistics.Shared.IKeyedSubObject)">
            <summary>
            Appends the object to the collection
            </summary>
            <param name="obj">Item to Add.</param>
            <returns>Index of the newly added item.</returns>
        </member>
        <member name="M:Infragistics.Shared.KeyedSubObjectsCollectionBase.InternalInsert(System.Int32,Infragistics.Shared.IKeyedSubObject)">
            <summary>
            Inserts an object into the collection
            </summary>
            <param name="index">The zero based index at which value should be inserted.</param>
            <param name="value">Item to insert.</param>
        </member>
        <member name="M:Infragistics.Shared.KeyedSubObjectsCollectionBase.InternalClear">
            <summary>
            Clears the collection
            </summary>
        </member>
        <member name="M:Infragistics.Shared.KeyedSubObjectsCollectionBase.InternalRemove(Infragistics.Shared.IKeyedSubObject)">
            <summary>
            Removes an item from the collection
            </summary>
            <param name="value">Item to remove.</param>
        </member>
        <member name="M:Infragistics.Shared.KeyedSubObjectsCollectionBase.InternalRemoveAt(System.Int32)">
            <summary>
            Removes an item from the collection
            </summary>
            <param name="index">Index of the item to remove.</param>
        </member>
        <member name="M:Infragistics.Shared.KeyedSubObjectsCollectionBase.GetItemUsingCachedKeys(System.String,System.Boolean)">
            <summary>
            Returns the object with the passed in key using the cached keys dictionary
            </summary>
            <param name="key">The key of the item whose index is to be returned.</param>
            <param name="throwException">true to throw an exception if the item is not found; false to simply return null when the item is not found.</param>
            <returns>The index of the item in the collection that has the passed in key, or -1 if no item is found.</returns>
        </member>
        <member name="M:Infragistics.Shared.KeyedSubObjectsCollectionBase.OnKeyChanging(Infragistics.Shared.IKeyedSubObject,System.String,System.String)">
            <summary>
            Notifies the collection that the key of an item has changed. 
            </summary>
            <param name="item">The item whose key has changed.</param>
            <param name="oldKey">The old key of the item.</param>
            <param name="newKey">The new key of the item.</param>
        </member>
        <member name="M:Infragistics.Shared.KeyedSubObjectsCollectionBase.OnListChanged">
            <summary>
            Notifies that KeyedSubObjectCollectionBase that the list has changed. 
            </summary>
            <remarks>This signals that a change has been made to the list. The collection needs to know if the list is changed so it can rebuild the cached list of keys when <see cref="P:Infragistics.Shared.KeyedSubObjectsCollectionBase.CacheKeys"/> is true.</remarks>
        </member>
        <member name="M:Infragistics.Shared.KeyedSubObjectsCollectionBase.ValidateKeyDoesNotExistUsingCachedKeys(System.String,Infragistics.Shared.IKeyedSubObject)">
            <summary>
            Validates that the key doesn't already exist.
            </summary>
            <param name="key">The key to check</param>
            <param name="ignoreObject">Don't throw an exception if the key matches this item.</param>
            <exception cref="T:System.ArgumentException">Key already exists.</exception>
        </member>
        <member name="P:Infragistics.Shared.KeyedSubObjectsCollectionBase.AllowDuplicateKeys">
            <summary>
            Returns true if the collection allows 2 or more items to have the same key value.
            </summary>
            <remarks>
            This does not apply to items whose keys are null or empty. There can always be multiple items with null or empty keys unless the <see cref="P:Infragistics.Shared.KeyedSubObjectsCollectionBase.AllowEmptyKeys"/> property returns false.
            </remarks>
        </member>
        <member name="P:Infragistics.Shared.KeyedSubObjectsCollectionBase.AllowEmptyKeys">
            <summary>
            Returns true if the collection allows items to be added that do not have key values.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.KeyedSubObjectsCollectionBase.AllowMultipleEmptyKeys">
            <summary>
            Returns true if the collection allows multiple items to be added that do not have key values.
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> This property is only used when <see cref="P:Infragistics.Shared.KeyedSubObjectsCollectionBase.AllowEmptyKeys"/> returns true.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Shared.KeyedSubObjectsCollectionBase.All">
            <summary>
            The collection as an array of objects
            </summary>
        </member>
        <member name="P:Infragistics.Shared.KeyedSubObjectsCollectionBase.InternStrings">
            <summary>
            Indicates whether to use string internment during key comparisons involving
            <see cref="T:Infragistics.Shared.IKeyedSubObjectEx"/> instances.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.KeyedSubObjectsCollectionBase.PreventSerialization">
            <summary>
            Return true to prevent the CodeDomSerializer for this collection
            from serializing its contents.  The default implementation returns false.
            </summary>
            <remarks>
            Most derived collection would want to return true if there are no items
            </remarks>
        </member>
        <member name="P:Infragistics.Shared.KeyedSubObjectsCollectionBase.CacheKeys">
            <summary>
            Determines whether to use a dictionary to store the keys and objects.
            </summary>
            <remarks>
            <para class="body">Returning true will make the collection try to use caching to store a dictionary of keys and objects.</para>
            <para class="body">This can greatly improve the performance of the collection; specifically the <see cref="M:Infragistics.Shared.KeyedSubObjectsCollectionBase.GetItem(System.String)"/>, <see cref="M:Infragistics.Shared.KeyedSubObjectsCollectionBase.Exists(System.String)"/>, and <see cref="M:Infragistics.Shared.KeyedSubObjectsCollectionBase.ValidateKeyDoesNotExist(System.String)"/> methods. It has no effect on <see cref="M:Infragistics.Shared.KeyedSubObjectsCollectionBase.IndexOf(System.String,System.Boolean)"/>.</para>
            <para class="body">Caching will not work if AllowDuplicateKeys returns true.</para>
            <para class="body">This property should always return the same value. The return value should never change for the life of the collection.</para>
            <para class="body">When caching is enabled, if the derived class modifies the List directly, then it must call <see cref="M:Infragistics.Shared.KeyedSubObjectsCollectionBase.OnListChanged"/> to notify the collection that the cached list needs to be rebuilt.</para>
            </remarks>
        </member>
        <member name="T:Infragistics.Shared.Serialization.ObjectStreamer">
            <summary>
            Serializable class for serializing the properties of another object.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.Serialization.ObjectStreamer.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Shared.Serialization.ObjectStreamer"/>
            </summary>
        </member>
        <member name="M:Infragistics.Shared.Serialization.ObjectStreamer.#ctor(System.Int32)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Shared.Serialization.ObjectStreamer"/>
            </summary>
            <param name="initialCapacity">Initial capacity for the <see cref="P:Infragistics.Shared.Serialization.ObjectStreamer.Dictionary"/></param>
        </member>
        <member name="M:Infragistics.Shared.Serialization.ObjectStreamer.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Shared.Serialization.ObjectStreamer"/> with the specified assembly name to use when serializing the object.
            </summary>
            <param name="assemblyName">Assembly name to use when serializing the object.</param>
        </member>
        <member name="M:Infragistics.Shared.Serialization.ObjectStreamer.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Shared.Serialization.ObjectStreamer"/> with the specified assembly name to use when serializing the object.
            </summary>
            <param name="assemblyName">Assembly name to use when serializing the object.</param>
            <param name="initialCapacity">Initial capacity for the <see cref="P:Infragistics.Shared.Serialization.ObjectStreamer.Dictionary"/></param>
        </member>
        <member name="M:Infragistics.Shared.Serialization.ObjectStreamer.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor used during deserialization to initialize a new <see cref="T:Infragistics.Shared.Serialization.ObjectStreamer"/> object
            with the serialized property values.
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:Infragistics.Shared.Serialization.ObjectStreamer.GetValue(System.Object)">
            <summary>
            Gets the Value of an item in the dictionary.		
            </summary>
            <param name="key">The key of the dictionary entry</param>
            <returns>If the dictionary contains a value, it will be returned normally. If the dictionary contains a SerializationEntry, then it returns the SerializationEntry.Value.</returns>
        </member>
        <member name="P:Infragistics.Shared.Serialization.ObjectStreamer.Dictionary">
            <summary>
            Returns the dictionary containing the properties to serialize.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.Serialization.ObjectStreamer.AssemblyName">
            <summary>
            Returns the assembly name used to serialize/deserialize the object.
            </summary>
        </member>
        <member name="T:Infragistics.Shared.Serialization.ObjectWrapper">
            <summary>
            Wrapper class for serializing the value of a property
            whose type is object and whose value is a simple type.
            </summary>
        </member>
        <member name="F:Infragistics.Shared.Serialization.ObjectWrapper.objectValue">
            <summary>
            The serialized object value
            </summary>
        </member>
        <member name="M:Infragistics.Shared.Serialization.ObjectWrapper.#ctor(System.Object)">
            <summary>
            Initializes a new <b>ObjectWrapper</b>
            </summary>
            <param name="value">Simple object type to serialize.</param>
            <remarks>
            A <see cref="T:System.NotSupportedException"/> is thrown if the value
            is not a simple type such as string, DateTime, DBNull or
            primitives (e.g. int, float, etc.).
            </remarks>
        </member>
        <member name="M:Infragistics.Shared.Serialization.ObjectWrapper.ToString">
            <summary>
            Returns a string representation of the structure
            </summary>
            <returns>A string containing the class name, as well
            as the wrapped object's type and to string.</returns>
        </member>
        <member name="P:Infragistics.Shared.Serialization.ObjectWrapper.Value">
            <summary>
            Returns the wrapped object
            </summary>
        </member>
        <member name="T:Infragistics.Shared.PrimitiveTypeUITypeEditor">
            <summary>
            The editor for a property of type <see cref="T:System.Object"/>.
            </summary>
            <remarks>
            <p>Provides a dropdown list of primitive types (e.g. string, int, datetime etc.).</p>
            <p>When a new type is selected, the editor will attempt to convert the existing property value to that type.</p>
            <p>If the conversion fails the property will be set to a default value appropriate for the selected type.</p>
            <p></p>
            <p>The editor is specified as the <see cref="T:System.ComponentModel.EditorAttribute"/> for a property of type <see cref="T:System.Object"/>.</p>
            <p>Normally the <see cref="T:Infragistics.Shared.PrimitiveTypeConverter"/> should be also specified as the corresponding <see cref="T:System.ComponentModel.TypeConverterAttribute"/> for the property.</p>
            </remarks>
            <seealso cref="T:Infragistics.Shared.PrimitiveTypeConverter"/>
            <seealso cref="T:System.Drawing.Design.UITypeEditor"/>
        </member>
        <member name="M:Infragistics.Shared.PrimitiveTypeUITypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Used to edit the value and convert the value as needed.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="provider">IServiceProvider</param>
            <param name="value">Current value</param>
            <returns>Edited value.</returns>
        </member>
        <member name="M:Infragistics.Shared.PrimitiveTypeUITypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Used to determine the type of UIEditor that will be displayed.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <returns>UITypeEditorEditStyle specifying the type of UIEditor.</returns>
        </member>
        <member name="M:Infragistics.Shared.PrimitiveTypeUITypeEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Indicates if the a small representation of the value is rendered in the property grid.
            </summary>
            <param name="context">Context information about the property to render</param>
            <returns>True to indicate that a value will be rendered</returns>
        </member>
        <member name="M:Infragistics.Shared.PrimitiveTypeUITypeEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
            <summary>
            Invoked when a small representation of the value should be rendered.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Infragistics.Shared.PrimitiveTypeUITypeEditor.InitializeListBox(System.Windows.Forms.ListBox)">
            <summary>
            Invoked when the listbox used to display the enum values is created.
            </summary>
            <param name="listbox"><see cref="T:System.Windows.Forms.ListBox"/></param>
        </member>
        <member name="M:Infragistics.Shared.PrimitiveTypeUITypeEditor.IsTypeSupported(System.Type)">
            <summary>
            Returns true if the type is supported and should be added to the drodpwn list.
            </summary>
            <param name="type">The type to check.</param>
        </member>
        <member name="M:Infragistics.Shared.PrimitiveTypeUITypeEditor.OnDrawItem(System.Object,System.Windows.Forms.DrawItemEventArgs)">
            <summary>
            Invoked when the item in the listbox should be rendered
            </summary>
            <param name="sender">Object invoking the event</param>
            <param name="e">Draw item event arguments</param>
        </member>
        <member name="M:Infragistics.Shared.PrimitiveTypeUITypeEditor.PaintIndicator(Infragistics.Shared.PrimitiveTypeUITypeEditor.TypeListBoxEntry,System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Used to paint the representation of the enum value
            </summary>
            <param name="entry">Enumeration value to render</param>
            <param name="rect">Location to render into</param>
            <param name="g">Graphics object</param>
        </member>
        <member name="M:Infragistics.Shared.PrimitiveTypeUITypeEditor.TypeListBoxEntry.ToString">
            <summary>
            Returns the Name of the underlying type.
            </summary>
        </member>
        <member name="T:Infragistics.Shared.PrimitiveTypeConverter">
            <summary>
            The type converter for properties that use the <see cref="T:Infragistics.Shared.PrimitiveTypeUITypeEditor"/>.
            </summary>
            <seealso cref="T:Infragistics.Shared.PrimitiveTypeUITypeEditor"/>
            <seealso cref="T:System.ComponentModel.TypeConverter"/>
        </member>
        <member name="M:Infragistics.Shared.PrimitiveTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines if the object can convert from the source type
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns><b>true</b> if this converter can perform the conversion; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Infragistics.Shared.PrimitiveTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns true if the object can convert to that type.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns><b>true</b> if this converter can perform the conversion; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Infragistics.Shared.PrimitiveTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from the value.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>An <see cref="T:System.Object"/> that represents the converted value.</returns>
        </member>
        <member name="M:Infragistics.Shared.PrimitiveTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the object to the requested type.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/> object. If a null reference (Nothing in Visual Basic) is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert. </param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the value parameter to. </param>
            <returns>An <see cref="T:System.Object"/> that represents the converted value.</returns>
        </member>
        <member name="T:Infragistics.Shared.ResourceCustomizer">
            <summary>
            Class used to provide the ability to customize resource strings.
            </summary>
            <remarks>
            <p>There is an instance of this class exposed by the <see cref="T:Infragistics.Shared.ResourceCustomizer"/> property of the Resources object exposed by each Infragistics.Win assembly.</p>
            <p>It allows for customization/substitution of strings that would normally be loaded from resources.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Shared.ResourceCustomizer.GetCustomizedString(System.String)">
            <summary>
            Gets the customized string identified by the specified string resource name.
            </summary>
            <param name="name">Name of the string resource that was customized.</param>
            <returns>The customized string or nulll if the resoource wasn't customized.</returns>
            <seealso cref="M:Infragistics.Shared.ResourceCustomizer.ResetAllCustomizedStrings"/>
            <seealso cref="M:Infragistics.Shared.ResourceCustomizer.ResetCustomizedString(System.String)"/>
            <seealso cref="M:Infragistics.Shared.ResourceCustomizer.SetCustomizedString(System.String,System.String)"/>
        </member>
        <member name="M:Infragistics.Shared.ResourceCustomizer.ResetAllCustomizedStrings">
            <summary>
            Clears all strings customized by calls to <see cref="M:Infragistics.Shared.ResourceCustomizer.SetCustomizedString(System.String,System.String)"/> method.
            </summary>
            <seealso cref="M:Infragistics.Shared.ResourceCustomizer.SetCustomizedString(System.String,System.String)"/>
            <seealso cref="M:Infragistics.Shared.ResourceCustomizer.ResetCustomizedString(System.String)"/>
        </member>
        <member name="M:Infragistics.Shared.ResourceCustomizer.ResetCustomizedString(System.String)">
            <summary>
            Resets a customized string identified by the specified string resource name so that it will load from the resource file.
            </summary>
            <param name="name">Name of the string resource to customize.</param>
            <seealso cref="M:Infragistics.Shared.ResourceCustomizer.SetCustomizedString(System.String,System.String)"/>
        </member>
        <member name="M:Infragistics.Shared.ResourceCustomizer.SetCustomizedString(System.String,System.String)">
            <summary>
            Sets a customized string identified by the specified string resource name.
            </summary>
            <param name="name">Name of the string resource to customize.</param>
            <param name="customizedText">The customized string. If null this has the same effect as calling <see cref="M:Infragistics.Shared.ResourceCustomizer.ResetCustomizedString(System.String)"/></param>
            <seealso cref="M:Infragistics.Shared.ResourceCustomizer.ResetAllCustomizedStrings"/>
            <seealso cref="M:Infragistics.Shared.ResourceCustomizer.ResetCustomizedString(System.String)"/>
        </member>
        <member name="P:Infragistics.Shared.ResourceCustomizer.CustomizedStringsVersion">
            <summary>
            For internal infrastructure use. This number is incremented every time a 
            customized string is modified.
            </summary>
        </member>
        <member name="T:Infragistics.Shared.Resources">
            <summary>
            Exposes a <see cref="T:Infragistics.Shared.ResourceCustomizer"/> instance for this assembly. 
            </summary>
            <seealso cref="P:Infragistics.Shared.Resources.Customizer"/> 
            <seealso cref="T:Infragistics.Shared.ResourceCustomizer"/> 
        </member>
        <member name="M:Infragistics.Shared.Resources.GetString(System.String,System.Object[])">
            <summary>
            Returns the resource string using the specified name and default culture.
            </summary>
            <param name="name">Name of the string resource to return.</param>
            <param name="args">Arguments supplied to the string.Format method when formatting the string.</param>
        </member>
        <member name="M:Infragistics.Shared.Resources.GetString(System.String)">
            <summary>
            Returns the resource string using the specified resource name and default culture. The string is then formatted using the arguments specified.
            </summary>
            <param name="name">Name of the string resource to return.</param>
        </member>
        <member name="M:Infragistics.Shared.Resources.GetObject(System.String)">
            <summary>
            Returns the resource object using the specified name.
            </summary>
            <param name="name">Name of the resource item</param>
            <returns>An object containing the specified resource</returns>
        </member>
        <member name="P:Infragistics.Shared.Resources.Customizer">
            <summary>
            Returns the <see cref="T:Infragistics.Shared.ResourceCustomizer"/> for this assembly.
            </summary>
            <seealso cref="T:Infragistics.Shared.ResourceCustomizer"/> 
        </member>
        <member name="T:Infragistics.Shared.SparseCollectionBase">
            <summary>
            Abstract base class for collections that contain objects.  If the object
            implements the System.IDisposable interface, OnDispose is called on the 
            object in DisposeCollectionItems.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.SparseCollectionBase.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.SparseCollectionBase.GetItem(System.Int32)">
            <summary>
            Virtual method that returns the object at the specified index
            </summary>
            <param name="index">index of the object to retrieve.</param>
            <returns>The object at the index</returns>
        </member>
        <member name="M:Infragistics.Shared.SparseCollectionBase.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the items from the collection into the array.
            </summary>
            <param name="array">The array to receive the itemd</param>
            <param name="index">The index to start with</param>		
        </member>
        <member name="M:Infragistics.Shared.SparseCollectionBase.Contains(System.Object)">
            <summary>
            Returns true if the collection contains the object
            </summary>
            <returns>True if the collection contains the object, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Shared.SparseCollectionBase.IndexOf(System.Object)">
            <summary>
            Returns the index of the object in the collection
            </summary>
            <param name="obj">The object whose index should be determined.</param>
            <returns>The index of the object in the collection, or -1 if the object is not found.</returns>
        </member>
        <member name="M:Infragistics.Shared.SparseCollectionBase.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            IEnumerable Interface Implementation
            returns a type safe enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Shared.SparseCollectionBase.CreateArray">
            <summary>
            Virtual method used by the All 'get' method to
            create the array it returns.
            </summary>
            <returns>The newly created object array</returns>
            <remarks>This is normally overridden in a derived class to allocate a type safe array.</remarks>
        </member>
        <member name="M:Infragistics.Shared.SparseCollectionBase.InternalAdd(System.Object)">
            <summary>
            Appends the object to the collection
            </summary>
            <param name="obj">Item to add to the collection.</param>
            <returns>Index of the added item.</returns>
        </member>
        <member name="M:Infragistics.Shared.SparseCollectionBase.InternalInsert(System.Int32,System.Object)">
            <summary>
            Appends the object to the collection
            </summary>
            <param name="index">Item insertion index.</param>
            <param name="obj">Item to insert into the collection.</param>
        </member>
        <member name="M:Infragistics.Shared.SparseCollectionBase.InternalClear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.SparseCollectionBase.InternalRemove(System.Object)">
            <summary>
            Removes an item from the collection
            </summary>
            <param name="item">Item to remove</param>
        </member>
        <member name="M:Infragistics.Shared.SparseCollectionBase.InternalRemove(System.Int32)">
            <summary>
            Removes an item from the collection
            </summary>
            <param name="index">Index of the item to remove.</param>
        </member>
        <member name="M:Infragistics.Shared.SparseCollectionBase.InternalAddRange(System.Collections.ICollection)">
            <summary>
            Adds items in the specified collection to this collection.
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Infragistics.Shared.SparseCollectionBase.Sort(System.Collections.IComparer)">
            <summary>
            Sorts the collection according to the specified comparer.
            </summary>
            <param name="comparer">The comparer for comparing items in the collection.</param>
        </member>
        <member name="P:Infragistics.Shared.SparseCollectionBase.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.SparseCollectionBase.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ArrayList is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:Infragistics.Shared.SparseCollectionBase.IsReadOnly">
            <summary>
            Returns true if the collection is read-only
            </summary>
        </member>
        <member name="P:Infragistics.Shared.SparseCollectionBase.Count">
            <summary>
            Returns the number of items in the collection
            </summary>
        </member>
        <member name="P:Infragistics.Shared.SparseCollectionBase.All">
            <summary>
            The collection as an array of objects
            </summary>
        </member>
        <member name="T:Infragistics.Shared.PropChangeInfo">
            <summary>
            <p>The PropChangeInfo structure contains the context information
            for a state change. It is passed into the SubObjectPropChanged event.</p>
            <p></p>
            <p>It also allows us to chain relavent context information 
               about a property change so the a listener can get information 
               as granular as it wants to determine what it should do when
               an object's state changes. </p>
            </summary>
        </member>
        <member name="M:Infragistics.Shared.PropChangeInfo.#ctor(System.Object,System.Enum,Infragistics.Shared.PropChangeInfo)">
            <summary>
            Constructor
            </summary>
            <param name="source">The object whose state has changed</param>
            <param name="propId">A code that can bbe used to identify the property that has changed</param>
            <param name="trigger">If the change occurred in a sub object this is the PropChangeInfo from that notification</param>
        </member>
        <member name="M:Infragistics.Shared.PropChangeInfo.FindPropId(System.Enum)">
            <summary>
            Searches for a specific propId up the trigger chain.
            </summary>
            <param name="propId">The property to look for</param>
            <returns>A propId if found up the trigger change, otherwise null.</returns>
        </member>
        <member name="M:Infragistics.Shared.PropChangeInfo.FindSource(System.Type)">
            <summary>
            Searches for a specific source up the trigger chain.
            </summary>
            <param name="type">The type of the source object to look for</param>
            <returns>Source object that matches the type passed in.</returns>
        </member>
        <member name="M:Infragistics.Shared.PropChangeInfo.ToString">
            <summary>
            Returns a description of the property change including
            the entire trigger chain
            </summary>
            <returns>Returns a description of the property change including the entire trigger chain</returns>
        </member>
        <member name="M:Infragistics.Shared.PropChangeInfo.FindTrigger(System.Object)">
            <summary>
            Searches for a specific PropChangeInfo up the trigger chain based on the specified source object. Passing
            in null will return the root trigger element.
            </summary>
            <param name="source">Source object to locate.</param>
            <returns>The propChangeinfo trigger associated with the source or null if the specified source
            was not in the trigger chain.</returns>
        </member>
        <member name="P:Infragistics.Shared.PropChangeInfo.Trigger">
            <summary>
            The trigger property returns an interface if this change
            was triggered by a change notification from another object.
            Otherwise, it returns null. 
            </summary>
            	<remarks> 
            	<p>There may be several of these state changes forming a chain.
            	For example, if a Cell's Appearance's backcolor property
            	changes, the Appearance object will fire an event notifying
            	any of its listeners, in this case the Cell object, that a
            	state change has occurred (passing null for the trigger
            	and the propId relating to BackColor).</p>
            <p></p>
            	<p>When the Cell gets the state change notification it will
            	do whatever it needs to do and will forward the Appearance's
            	PropChangeInfo as the trigger and the propId idntifying the
            	Appearance property to notify all of its listeners, 
            	in this case perhaps the corresponding row.</p> 
            <p></p>
            	<p>Then the row will do the same (using the propId identifying 
            	its Cell property). This process will continue until the main
            	object is reached or there are no listeners.</p>
            <p></p>
            	<p>The advantage of this approach is that we have created
            	efficient notification infrastructure that can supply 
            	detailed context information (as granular as the 
            	listener may want) with little overhead.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Shared.PropChangeInfo.Source">
            <summary>
            The source is the object whose state has changed
            </summary>
        </member>
        <member name="P:Infragistics.Shared.PropChangeInfo.PropId">
            <summary>
            PropId is a code that can be used to identify the property
            that has been changed.
            </summary>
        </member>
        <member name="T:Infragistics.Shared.SubObjectPropChangeEventHandler">
            <summary>
            A delegate for property change notification events
            </summary>
        </member>
        <member name="T:Infragistics.Shared.SubObjectDisposedEventHandler">
            <summary>
            A delegate for dispose notification events
            </summary>
        </member>
        <member name="T:Infragistics.Shared.SystemColorsCollection">
            <summary>
            A collection of SystemColors.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.SystemColorsCollection.#ctor">
            <summary>
            Constructor, initializes a new instance of the <b>SystemColorsCollection</b> class.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.SystemColorsCollection.FillColors">
            <summary>
            Fills the collection with the system colors
            </summary>
        </member>
        <member name="P:Infragistics.Shared.SystemColorsCollection.Default">
            <summary>
            Returns a static instance of the SystemColorsCollection class.
            </summary>
        </member>
        <member name="T:Infragistics.Shared.UITypeEditorListBase">
            <summary>
            Base class for a UITypeEditor that provides a list
            </summary>
            <remarks>
            <p>Provides a dropdown list of items</p>	
            </remarks>
        </member>
        <member name="M:Infragistics.Shared.UITypeEditorListBase.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Used to edit the value and convert the value as needed.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="provider">IServiceProvider</param>
            <param name="value">Current value</param>
            <returns>Edited value.</returns>
        </member>
        <member name="M:Infragistics.Shared.UITypeEditorListBase.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Used to determine the type of UIEditor that will be displayed.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <returns>UITypeEditorEditStyle specifying the type of UIEditor.</returns>
        </member>
        <member name="M:Infragistics.Shared.UITypeEditorListBase.InitializeListBox(System.Windows.Forms.ListBox)">
            <summary>
            Invoked when the listbox used to display the enum values is created.
            </summary>
            <param name="listbox"><see cref="T:System.Windows.Forms.ListBox"/></param>
        </member>
        <member name="M:Infragistics.Shared.UITypeEditorListBase.GetListItems(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object,System.Object@)">
            <summary>
            Returns the set of items to show on the list.
            </summary>
            <param name="context">An ITypeDescriptorContext that can be used to gain additional context information.</param>
            <param name="provider">An IServiceProvider that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <param name="currentEntry"></param>
            <returns>An array of objects containing the list items.</returns>
        </member>
        <member name="M:Infragistics.Shared.UITypeEditorListBase.ValidateEditItem(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object,System.Object)">
            <summary>
            Validates an item selected by the user on the list and returns it.
            </summary>
            <param name="context">An ITypeDescriptorContext that can be used to gain additional context information.</param>
            <param name="provider">An IServiceProvider that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <param name="selectedEntry"></param>
            <returns>An array of objects containing the list items.</returns>
        </member>
        <member name="T:Infragistics.Shared.Serialization.ICodeDomSerializable">
            <summary>
            Interface used for receiving design time serialization and deserialization notifications
            </summary>
        </member>
        <member name="M:Infragistics.Shared.Serialization.ICodeDomSerializable.AfterDeserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager)">
            <summary>
            Invoked after the object has been deserialized from a series of code dom statements
            </summary>
            <param name="manager">Object that manages the design time serialization</param>
        </member>
        <member name="M:Infragistics.Shared.Serialization.ICodeDomSerializable.BeforeSerialize(Infragistics.Shared.Serialization.CodeDomSerializationInfo)">
            <summary>
            Invoked before an object is serialized to code dom statements.
            </summary>
            <param name="serializationInfo">Provides information about the serialization info. The <see cref="P:Infragistics.Shared.Serialization.CodeDomSerializationInfo.Handled"/> property can be set to true to prevent the base serializer from being used to create the object graph.</param>
        </member>
        <member name="M:Infragistics.Shared.Serialization.ICodeDomSerializable.AfterSerialize(Infragistics.Shared.Serialization.CodeDomSerializationInfo)">
            <summary>
            Invoked after an object is serialized to code dom statements
            </summary>
        </member>
        <member name="T:Infragistics.Shared.Serialization.ICodeDomSerializableEX">
            <summary>
            Interface used for receiving design time serialization and deserialization notifications including
            notifications when the manager has completed the serialization process.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.Serialization.ICodeDomSerializableEX.AfterDeserializationCompleted(System.ComponentModel.Design.Serialization.IDesignerSerializationManager)">
            <summary>
            Invoked when a notification is received from the designer serialization manager
            that the deserialization has been completed.
            </summary>
            <param name="manager">Associated designer serialization manager</param>
        </member>
        <member name="M:Infragistics.Shared.Serialization.ICodeDomSerializableEX.AfterSerializationCompleted(System.ComponentModel.Design.Serialization.IDesignerSerializationManager)">
            <summary>
            Invoked when a notification is received from the designer serialization manager
            that the serialization has been completed.
            </summary>
            <param name="manager">Associated designer serialization manager</param>
        </member>
        <member name="T:Infragistics.Shared.Serialization.CodeDomSerializationInfo">
            <summary>
            Provides information about the serialization of an object at design time
            </summary>
        </member>
        <member name="M:Infragistics.Shared.Serialization.CodeDomSerializationInfo.#ctor(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
            <summary>
            Initializes a new <b>CodeDomSerializationInfo</b>
            </summary>
            <param name="manager">Designer serialization manager</param>
            <param name="serializer">Base code dom serializer class</param>
        </member>
        <member name="P:Infragistics.Shared.Serialization.CodeDomSerializationInfo.SerializationManager">
            <summary>
            Returns the designer serialization manager used to perform the serialization operation
            </summary>
        </member>
        <member name="P:Infragistics.Shared.Serialization.CodeDomSerializationInfo.Serializer">
            <summary>
            Returns the base code dom serializer used to serialize the object
            </summary>
        </member>
        <member name="P:Infragistics.Shared.Serialization.CodeDomSerializationInfo.Handled">
            <summary>
            Indicates if the base serializer was/should be invoked.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.Serialization.CodeDomSerializationInfo.CodeObject">
            <summary>
            Gets/sets the code object representing the code dom statements for the serialized object.
            </summary>
        </member>
        <member name="T:Infragistics.Shared.IUltraComponent">
            <summary>
            IUltraComponent Interface
            </summary>
        </member>
        <member name="P:Infragistics.Shared.IUltraComponent.DesignerChangeNotificationsEnabled">
            <summary>
            Returns or set whether the component sends Design-time property change notifications
            </summary>
        </member>
        <member name="T:Infragistics.Shared.UltraLicense">
            <summary>
            The license object for Infragistics components and controls
            </summary>
        </member>
        <member name="M:Infragistics.Shared.UltraLicense.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="P:Infragistics.Shared.UltraLicense.ProductInfo">
            <summary>
            Returns the product info object
            </summary>
        </member>
        <member name="P:Infragistics.Shared.UltraLicense.ComponentName">
            <summary>
            Returns the display name of the component (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Shared.UltraLicense.LicenseKey">
            <summary>
            Returns the license key (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Shared.UltraLicense.LicenseKeyForDisplay">
            <summary>
            Returns the license key, without any license option tokens (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Shared.UltraLicense.LicenseOptions">
            <summary>
            Returns the additional licensed options for this instance (e.g., Office2007UI)
            </summary>
        </member>
        <member name="T:Infragistics.Shared.LicenseOptions">
            <summary>
            Contains bitflags which describe any additional options
            for which the associated product is licensed; e.g., Office2007UI
            </summary>
        </member>
        <member name="F:Infragistics.Shared.LicenseOptions.None">
            <summary>
            No additional license options.
            </summary>
        </member>
        <member name="F:Infragistics.Shared.LicenseOptions.Office2007UI">
            <summary>
            Licensed to use the Office2007 user interface features.
            </summary>
        </member>
        <member name="F:Infragistics.Shared.LicenseOptions.All">
            <summary>
            Licensed to use all optional features.
            </summary>
        </member>
        <member name="T:Infragistics.Shared.UltraLicenseBaseAttribute">
            <summary>
            The abstract base class for our license attribues
            </summary>
        </member>
        <member name="M:Infragistics.Shared.UltraLicenseBaseAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Shared.UltraLicenseBaseAttribute"/> class
            </summary>
            <param name="componentName">The name of the component that will be displayed in the about dialog.</param>
        </member>
        <member name="M:Infragistics.Shared.UltraLicenseBaseAttribute.GetLicensedWithProducts">
            <summary>
            Returns an array of UltraProductInfoBase objects.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.UltraLicenseBaseAttribute.ComponentName">
            <summary>
            Returns the display name of the component (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Shared.UltraLicenseProvider">
            <summary>
            Base class for licensing
            </summary>
        </member>
        <member name="M:Infragistics.Shared.UltraLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
            <summary>
            Overriden to return a beta license object
            </summary>
            <param name="allowExceptions">Whether to throw exceptions when an invalid key is found.</param>
            <param name="context">A System.ComponentModel.LicenseContext that specifies where you can use the licensed object.</param>
            <param name="instance">An object that is requesting the license.</param>
            <param name="type">A type that represents the component requesting the license.</param>
            <returns>The BetaLicense object</returns>
        </member>
        <member name="T:Infragistics.Shared.UltraObjectPropertiesPage">
            <summary>
            Summary description for ObjectProperties control.
            </summary>
        </member>
        <member name="T:Infragistics.Shared.UltraPropertyPageBase">
            <summary>
            Base class for all UltraControlBase wizards.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.UltraPropertyPageBase.InitializeControl(System.Object)">
            <summary>
            Initializes the custom property control with the specified object.
            </summary>
            <param name="baseObject">Object used to initialize the property control.</param>
        </member>
        <member name="M:Infragistics.Shared.UltraPropertyPageBase.ApplyChanges">
            <summary>
            Method invoked when the apply button has been pressed.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.UltraPropertyPageBase.Dirty">
            <summary>
            Invoked when the control is dirtied.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.UltraPropertyPageBase.OnDirtyStateChanged(System.EventArgs)">
            <summary>
            Used to invoke the <see cref="E:Infragistics.Shared.UltraPropertyPageBase.DirtyStateChanged"/> event.
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:Infragistics.Shared.UltraPropertyPageBase.Clean">
            <summary>
            Invoked when the control is no longer dirty.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.UltraPropertyPageBase.CancelChanges">
            <summary>
            Invoked when the changes should be reversed
            </summary>
        </member>
        <member name="M:Infragistics.Shared.UltraPropertyPageBase.SaveState">
            <summary>
            Invoked before the dialog is closed so that state information may
            be persisted.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.UltraPropertyPageBase.IsDirty">
            <summary>
            Property to determine if the control is dirty.
            </summary>
        </member>
        <member name="E:Infragistics.Shared.UltraPropertyPageBase.DirtyStateChanged">
            <summary>
            Event raised when the control's dirty state changes.
            </summary>
        </member>
        <member name="E:Infragistics.Shared.UltraPropertyPageBase.StateDirtied">
            <summary>
            Event raised when the control is dirtied.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.UltraObjectPropertiesPage.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Shared.UltraObjectPropertiesPage.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="obj">object to initialize the property page</param>
        </member>
        <member name="M:Infragistics.Shared.UltraObjectPropertiesPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">Specifies whether the object should dispose of its managed and unmanaged resources.</param>
        </member>
        <member name="M:Infragistics.Shared.UltraObjectPropertiesPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.UltraObjectPropertiesPage.ApplyChanges">
            <summary>
            Method invoked when the apply button has been pressed.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.UltraObjectPropertiesPage.InitializeControl(System.Object)">
            <summary>
            Initializes the custom property control with the specified object.
            </summary>
            <param name="baseObject">Object used to initialize the property control.</param>
        </member>
        <member name="M:Infragistics.Shared.UltraObjectPropertiesPage.SaveState">
            <summary>
            Invoked before the dialog is closed so that state information may
            be persisted.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.UltraObjectPropertiesPage.RefreshProperties">
            <summary>
            Refreshes the properties displayed in the property grid.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.UltraObjectPropertiesPage.IncludeBaseObject">
            <summary>
            Determines whether the base object is displayed in the tree.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.UltraObjectPropertiesPage.PropertyGridToolbarVisible">
            <summary>
            Determines if the PropertyGrid displays its toolbar.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.UltraObjectPropertiesPage.PropertyGridHelpVisible">
            <summary>
            Determines if the PropertyGrid displays help text for the selected property.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.UltraObjectPropertiesPage.DirtyObjectTypeDescriptorAdapter.ShouldIncludeProperty(System.ComponentModel.PropertyDescriptor,System.Attribute[])">
            <summary>
            Used to determine which properties should be returned from the base <see cref="T:System.ComponentModel.ICustomTypeDescriptor"/> implementation
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> This method may not be invoked if the <see cref="M:Infragistics.Shared.CustomTypeDescriptorAdapter.GetProperties"/> method(s) are overriden.</p>
            </remarks>
            <param name="propertyDescriptor">PropertyDecriptor to be evaluated</param>
            <param name="attributes">Array of attributes passed into the <b>GetProperties</b> method or null if none were specified.</param>
            <returns>Return true by default to include the specified property.</returns>
        </member>
        <member name="M:Infragistics.Shared.UltraObjectPropertiesPage.DirtyObjectTypeDescriptorAdapter.WrapPropertyValue(System.Object)">
            <summary>
            Invoked when the value of the custom property descriptor is requested 
            so the property value may be wrapped by a custom type descriptor if 
            necessary.
            </summary>
            <param name="value">The value of the property descriptor</param>
            <returns>By default, <paramref name="value"/> is returned.</returns>
        </member>
        <member name="T:Infragistics.Shared.SurrogatePropertySerializerAttribute">
            <summary>
            Attribute class used for specifying the custom property pages of aa UltraControl.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.SurrogatePropertySerializerAttribute.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Shared.SurrogatePropertySerializerAttribute"/>
            </summary>
            <param name="serializableProperty">Name of the property that serializes the value for the property with this attribute.</param>
        </member>
        <member name="P:Infragistics.Shared.SurrogatePropertySerializerAttribute.PropertyName">
            <summary>
            Returns the name of the property that serializes the value for this property.
            </summary>
        </member>
        <member name="T:Infragistics.Shared.LicenseStatus">
            <summary>
            An enumerator that describes the status of the license
            </summary>
        </member>
        <member name="F:Infragistics.Shared.LicenseStatus.Unchecked">
            <summary>
            The license verification logic hasn't run yet
            </summary>
        </member>
        <member name="F:Infragistics.Shared.LicenseStatus.UnableToLocateLicenseAssembly">
            <summary>
            The license file could not be located.
            </summary>
        </member>
        <member name="F:Infragistics.Shared.LicenseStatus.InsufficientSecurityPermissions">
            <summary>
            Unable to determine license status due to security permission restrictions.
            </summary>
        </member>
        <member name="F:Infragistics.Shared.LicenseStatus.RegKeyNotFound">
            <summary>
            Couldn't find the necessary registry keys
            </summary>
        </member>
        <member name="F:Infragistics.Shared.LicenseStatus.CDKeyInvalid">
            <summary>
            Foound an invalid CDkey
            </summary>
        </member>
        <member name="F:Infragistics.Shared.LicenseStatus.BetaExpired">
            <summary>
            The beta period has expired
            </summary>
        </member>
        <member name="F:Infragistics.Shared.LicenseStatus.BetaValid">
            <summary>
            The beta period has not expired
            </summary>
        </member>
        <member name="F:Infragistics.Shared.LicenseStatus.TrialExpired">
            <summary>
            The trial period has expired
            </summary>
        </member>
        <member name="F:Infragistics.Shared.LicenseStatus.ActivationGracePeriodExpired">
            <summary>
            The activation grace period has expired.
            </summary>
        </member>
        <member name="F:Infragistics.Shared.LicenseStatus.CDKeyValid">
            <summary>
            A valid CDKey was found
            </summary>
        </member>
        <member name="F:Infragistics.Shared.LicenseStatus.TrialValid">
            <summary>
            The trial period has not expired
            </summary>
        </member>
        <member name="F:Infragistics.Shared.LicenseStatus.ActivationGracePeriodValid">
            <summary>
            The activation grace period has not expired.
            </summary>
        </member>
        <member name="F:Infragistics.Shared.LicenseStatus.Licensed">
            <summary>
            The component is fully licensed
            </summary>
        </member>
        <member name="T:Infragistics.Shared.ProductType">
            <summary>
            An enumerator that describes the product type.
            </summary>
        </member>
        <member name="F:Infragistics.Shared.ProductType.WinFormsComponent">
            <summary>
            The product is a winforms component.
            </summary>
        </member>
        <member name="F:Infragistics.Shared.ProductType.WebFormsComponent">
            <summary>
            The product is a webforms component.
            </summary>
        </member>
        <member name="F:Infragistics.Shared.ProductType.WpfComponent">
            <summary>
            The product is a WPF component.
            </summary>
        </member>
        <member name="T:Infragistics.Shared.UltraProductInfoBase">
            <summary>
            Abstract base class that holds product info.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.UltraProductInfoBase.IsKeyValid(System.String)">
            <summary>
            Checks the validaity of the key
            </summary>
            <param name="key">The key to check.</param>
            <returns>True if the key is valid</returns>
        </member>
        <member name="M:Infragistics.Shared.UltraProductInfoBase.GetStatusText">
            <summary>
            Returns a string to be displayed in the about box for the status.
            </summary>
            <returns>The string to display in the about box for the status.</returns>        
        </member>
        <member name="M:Infragistics.Shared.UltraProductInfoBase.GetKeyText">
            <summary>
            Returns the string used to represent the product key in a UI, taking into account localized values.
            </summary>
            <returns>A string used to represent the product key.</returns>
        </member>
        <member name="P:Infragistics.Shared.UltraProductInfoBase.Expiration">
            <summary>
            Returns the expiration description.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.UltraProductInfoBase.RequiresActivation">
            <summary>
            Returns the expiration date.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.UltraProductInfoBase.ProductName">
            <summary>
            Returns the product name
            </summary>
        </member>
        <member name="P:Infragistics.Shared.UltraProductInfoBase.Expired">
            <summary>
            Returns true if the license has expired (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Shared.UltraProductInfoBase.Status">
            <summary>
            Returns the statuc of the license
            </summary>
        </member>
        <member name="P:Infragistics.Shared.UltraProductInfoBase.Key">
            <summary>
            Returns the Key 
            </summary>
        </member>
        <member name="P:Infragistics.Shared.UltraProductInfoBase.CompanyName">
            <summary>
            Returns the company name
            </summary>
        </member>
        <member name="P:Infragistics.Shared.UltraProductInfoBase.UserName">
            <summary>
            Returns the user name
            </summary>
        </member>
        <member name="P:Infragistics.Shared.UltraProductInfoBase.Type">
            <summary>
            Returns the product type
            </summary>
        </member>
        <member name="T:Infragistics.Shared.BetaProductInfo">
            <summary>
            ProductInfo used when a product is in beta.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.BetaProductInfo.#ctor(System.String,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Shared.BetaProductInfo"/> class
            </summary>
            <param name="productName">The product name to display in the about dialog</param>
            <param name="expirationDate">The expiration date of the beta.</param>
        </member>
        <member name="M:Infragistics.Shared.BetaProductInfo.#ctor(System.String,System.DateTime,Infragistics.Shared.ProductType)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Shared.BetaProductInfo"/> class
            </summary>
            <param name="productName">The product name to display in the about dialog</param>
            <param name="expirationDate">The expiration date of the beta.</param>
            <param name="productType">The type of product represented by the product info - e.g. WinForms, ASP.Net, WPF</param>
        </member>
        <member name="M:Infragistics.Shared.BetaProductInfo.IsKeyValid(System.String)">
            <summary>
            Checks the validity of the key
            </summary>
            <returns>True if the key is valid</returns>
        </member>
        <member name="P:Infragistics.Shared.BetaProductInfo.Expiration">
            <summary>
            Returns the expiration description.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.BetaProductInfo.RequiresActivation">
            <summary>
            Returns the expiration date.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.BetaProductInfo.Status">
            <summary>
            Returns the statuc of the license
            </summary>
        </member>
        <member name="P:Infragistics.Shared.BetaProductInfo.Key">
            <summary>
            Returns the Key 
            </summary>
        </member>
        <member name="P:Infragistics.Shared.BetaProductInfo.CompanyName">
            <summary>
            Returns the company name
            </summary>
        </member>
        <member name="P:Infragistics.Shared.BetaProductInfo.UserName">
            <summary>
            Returns the user name
            </summary>
        </member>
        <member name="P:Infragistics.Shared.BetaProductInfo.Expired">
            <summary>
            Returns true if the license has expired (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Shared.UltraProductInfo">
            <summary>
            ProductInfo used when after a product has been released.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.UltraProductInfo.#ctor(System.String,System.String,System.String,System.Guid,System.Boolean,System.Byte,System.Byte)">
            <summary>
            Contructor
            </summary>
            <param name="productName">The product name for the about dialog</param>
            <param name="regKeyProductName">The reg key root product name</param>
            <param name="codePrefix">must be 4 characters long</param>
            <param name="id">the id</param>
            <param name="requiresActivation">True if activation is required.</param>
            <param name="majorVersion">Major version of the product.</param>
            <param name="minorVersion">Minor version of the product.</param>
        </member>
        <member name="M:Infragistics.Shared.UltraProductInfo.#ctor(System.String,System.String,System.String,System.Guid,System.Boolean,Infragistics.Shared.ProductType,System.Byte,System.Byte)">
            <summary>
            Contructor
            </summary>
            <param name="productName">The product name for the about dialog</param>
            <param name="regKeyProductName">The reg key root product name</param>
            <param name="codePrefix">must be 4 characters long</param>
            <param name="id">the id</param>
            <param name="requiresActivation">True if activation is required.</param>
            <param name="productType">The type of product</param>
            <param name="majorVersion">Major version of the product.</param>
            <param name="minorVersion">Minor version of the product.</param>
        </member>
        <member name="M:Infragistics.Shared.UltraProductInfo.IsKeyValid(System.String)">
            <summary>
            Checks the validity of the key
            </summary>
            <returns>True if the key is valid</returns>
        </member>
        <member name="M:Infragistics.Shared.UltraProductInfo.GetExpirationDate(System.Int32)">
            <summary>
            Returns the expiration date based on the number of usage days remaining.
            </summary>
            <param name="usageDaysRemaining">Number of usage days remaining.</param>
            <returns>Expiration date for the product.</returns>
        </member>
        <member name="M:Infragistics.Shared.UltraProductInfo.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.UltraProductInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current Object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current Object.</param>
            <returns>true if the specified see cref="System.Object"/&gt; is equal to the current Object; otherwise, false.</returns>
        </member>
        <member name="P:Infragistics.Shared.UltraProductInfo.Expiration">
            <summary>
            Returns the expiration description.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.UltraProductInfo.RequiresActivation">
            <summary>
            Returns the expiration date.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.UltraProductInfo.Status">
            <summary>
            Returns the statuc of the license
            </summary>
        </member>
        <member name="P:Infragistics.Shared.UltraProductInfo.Key">
            <summary>
            Returns the Key 
            </summary>
        </member>
        <member name="P:Infragistics.Shared.UltraProductInfo.CompanyName">
            <summary>
            Returns the company name
            </summary>
        </member>
        <member name="P:Infragistics.Shared.UltraProductInfo.UserName">
            <summary>
            Returns the user name
            </summary>
        </member>
        <member name="P:Infragistics.Shared.UltraProductInfo.RegKeyProductName">
            <summary>
            Returns the product name.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.UltraProductInfo.Expired">
            <summary>
            Returns true if the license has expired (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Shared.UnlicensedProductInfo">
            <summary>
            ProductInfo used for product that does not require licensing.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.UnlicensedProductInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Shared.UnlicensedProductInfo"/> class
            </summary>
            <param name="productName">The product name to display in the about dialog</param>
        </member>
        <member name="M:Infragistics.Shared.UnlicensedProductInfo.#ctor(System.String,Infragistics.Shared.ProductType)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Shared.UnlicensedProductInfo"/> class
            </summary>
            <param name="productName">The product name to display in the about dialog</param>
            <param name="productType">The type of product.</param>
        </member>
        <member name="M:Infragistics.Shared.UnlicensedProductInfo.IsKeyValid(System.String)">
            <summary>
            Checks the validity of the key
            </summary>
            <returns>True if the key is valid</returns>
        </member>
        <member name="P:Infragistics.Shared.UnlicensedProductInfo.Expiration">
            <summary>
            Returns the expiration.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.UnlicensedProductInfo.RequiresActivation">
            <summary>
            Returns the expiration date.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.UnlicensedProductInfo.Status">
            <summary>
            Returns the statuc of the license
            </summary>
        </member>
        <member name="P:Infragistics.Shared.UnlicensedProductInfo.Key">
            <summary>
            Returns the Key 
            </summary>
        </member>
        <member name="P:Infragistics.Shared.UnlicensedProductInfo.CompanyName">
            <summary>
            Returns the company name
            </summary>
        </member>
        <member name="P:Infragistics.Shared.UnlicensedProductInfo.UserName">
            <summary>
            Returns the user name
            </summary>
        </member>
        <member name="P:Infragistics.Shared.UnlicensedProductInfo.Expired">
            <summary>
            Returns true if the license has expired (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Shared.UltraPropertyPageDialog">
            <summary>
            Summary description for UltraPropertyPageDialog .
            </summary>
        </member>
        <member name="F:Infragistics.Shared.UltraPropertyPageDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.UltraPropertyPageDialog.#ctor">
            <summary>
            Constructor, initializes a new instance of <b>UltraPropertyPageDialog</b>.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.UltraPropertyPageDialog.#ctor(System.Object)">
            <summary>
            Constructor, initializes a new instance of <b>UltraPropertyPageDialog</b>.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.UltraPropertyPageDialog.InitializeDialog(System.Object)">
            <summary>
            Initializes the custom property dialog with the specified object.
            </summary>
            <param name="obj">The object to be displayed in the property dialog.</param>
        </member>
        <member name="M:Infragistics.Shared.UltraPropertyPageDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:Infragistics.Shared.UltraPropertyPageDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.UltraPropertyPageDialog.OnClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Invoked when the form is about to close
            </summary>
            <param name="e"><see cref="T:System.ComponentModel.CancelEventArgs"/></param>
        </member>
        <member name="M:Infragistics.Shared.UltraPropertyPageDialog.OnLoad(System.EventArgs)">
            <summary>
            Invoked when the form has been loaded.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/></param>
        </member>
        <member name="T:Infragistics.Shared.UltraPropPagePropertyGrid">
            <summary>
            A class derived from PropertyGrid that uses the supplied component's <b>Site</b> property to provide design time services. 
            </summary>
            <remarks>The services supplied by the component are required by some type editors.</remarks>
        </member>
        <member name="M:Infragistics.Shared.UltraPropPagePropertyGrid.#ctor">
            <summary>
            Constructor, initializes a new instance of the <b>UltraPropPagePropertyGrid</b> class.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.UltraPropPagePropertyGrid.#ctor(System.ComponentModel.IComponent)">
            <summary>
            Contructor
            </summary>
            <param name="component">The component whose <b>Site</b> propety will be used to supply services.</param>
        </member>
        <member name="M:Infragistics.Shared.UltraPropPagePropertyGrid.Initialize(System.ComponentModel.IComponent)">
            <summary>
            Initializes the component. The property grid will use the component to supply services at design time. 
            </summary>
            <param name="component">The component whose <b>Site</b> propety will be used to supply services.</param>
            <seealso cref="M:Infragistics.Shared.UltraPropPagePropertyGrid.GetService(System.Type)"/>
        </member>
        <member name="M:Infragistics.Shared.UltraPropPagePropertyGrid.GetService(System.Type)">
            <summary>
            Returns the requested service from the component's site.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <seealso cref="M:Infragistics.Shared.UltraPropPagePropertyGrid.Initialize(System.ComponentModel.IComponent)"/>
        </member>
        <member name="M:Infragistics.Shared.UltraPropPagePropertyGrid.Dispose(System.Boolean)">
            <summary>
            Invoked when the property grid is disposed
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Infragistics.Shared.UltraPropPagePropertyGridWithEventsTab">
            <summary>
            A Property Grid derived from UltraPropPagePropertyGrid that provides support for an events tab.
            Objects briwsed with this property gri must support IComponent.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.UltraPropPagePropertyGridWithEventsTab.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Shared.UltraPropPagePropertyGridWithEventsTab.#ctor(System.ComponentModel.Component)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Shared.UltraPropPagePropertyGridWithEventsTab.CreatePropertyTab(System.Type)">
            <summary>
            CreatePropertyTab method
            </summary>
            <param name="tabType">The type of tab that should be created.</param>
            <returns>A property tab of the requested type.</returns>
        </member>
        <member name="M:Infragistics.Shared.UltraPropPagePropertyGridWithEventsTab.OnSelectedObjectsChanged(System.EventArgs)">
            <summary>
            OnSelectedObjectsChanged method.
            </summary>
            <param name="e">An EventArgs object that contains the event data.</param>
        </member>
        <member name="P:Infragistics.Shared.UltraPropPagePropertyGridWithEventsTab.ShowEventsTab">
            <summary>
            Returns/sets whether or not to show the events tab.
            </summary>
        </member>
        <member name="T:Infragistics.Shared.Serialization.Utils">
            <summary>
            Utility class containing static helper functions
            </summary>
        </member>
        <member name="M:Infragistics.Shared.Serialization.Utils.ConvertToString(System.Object,System.Boolean)">
            <summary>
            Converts a value to a string.
            </summary>
            <param name="value">Value to convert</param>
            <param name="useCurrentCulture">If true, uses the current culture, otherwise, the invariant culture is used.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:Infragistics.Shared.Serialization.Utils.ConvertToString(System.Object,System.String,System.Boolean)">
            <summary>
            Converts a value to a string.
            </summary>
            <param name="value">Value to convert</param>
            <param name="format">The format string.</param>
            <param name="useCurrentCulture">If true, uses the current culture, otherwise, the invariant culture is used.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:Infragistics.Shared.Serialization.Utils.ConvertToString(System.Object,System.IFormatProvider)">
            <summary>
            Converts a value to a string.
            </summary>
            <param name="value">Value to convert</param>
            <param name="formatProvider">The format provider to use for the conversion.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:Infragistics.Shared.Serialization.Utils.ConvertToString(System.Object,System.String,System.IFormatProvider)">
            <summary>
            Converts a value to a string.
            </summary>
            <param name="value">Value to convert</param>
            <param name="format">The format string.</param>
            <param name="formatProvider">The format provider to use for the conversion.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:Infragistics.Shared.Serialization.Utils.ConvertValue(System.Object,System.Type)">
            <summary>
            Returns a value converted to the specified type using the InvariantCulture.
            </summary>
            <param name="value">Value to convert</param>
            <param name="destinationType">Type that the value needs to be converted to.</param>
            <returns>If the value can be converted to the specified type, the converted value will be returned. If the value is already of that type or cannot be converted to that type, the <paramref name="value"/> will be returned; otherwise null is returned.</returns>
        </member>
        <member name="M:Infragistics.Shared.Serialization.Utils.ConvertValue(System.Object,System.Type,System.Boolean)">
            <summary>
            Returns a value converted to the specified type using the InvariantCulture or CurrentCulture.
            </summary>
            <param name="value">Value to convert</param>
            <param name="destinationType">Type that the value needs to be converted to.</param>
            <param name="useCurrentCulture">If true, uses the current culture, otherwise, the invariant culture is used.</param>
            <returns>If the value can be converted to the specified type, the converted value will be returned. If the value is already of that type or cannot be converted to that type, the <paramref name="value"/> will be returned; otherwise null is returned.</returns>
        </member>
        <member name="M:Infragistics.Shared.Serialization.Utils.ConvertValue(System.Object,System.Type,System.Globalization.CultureInfo)">
            <summary>
            Returns a value converted to the specified type using the specified CultureInfo.
            </summary>
            <param name="value">Value to convert</param>
            <param name="destinationType">Type that the value needs to be converted to.</param>
            <param name="culture">The culture to use for the conversion. If null will use the curent culture.</param>
            <returns>If the value can be converted to the specified type, the converted value will be returned. If the value is already of that type or cannot be converted to that type, the <paramref name="value"/> will be returned; otherwise null is returned.</returns>
        </member>
        <member name="M:Infragistics.Shared.Serialization.Utils.ConvertEnum(System.Object,System.Enum)">
            <summary>
            Used to convert an object value to an enum of the specified type.
            </summary>
            <param name="value">Object to convert</param>
            <param name="defaultValue">Default value - the enum type is derived from the value and this value is when an invalid value is specified.</param>
            <returns>The value converted to an enum of the same type as the default value or the default value itself is returned if the value is invalid for the specified enum type</returns>
            <remarks>
            The value is verified to be a defined enum value for the specified enum type so
            this method should not be used where the enum type is a flagged enumeration
            since the IsDefined method of Enum will return false when a combined bit
            value is specified.
            </remarks>
        </member>
        <member name="M:Infragistics.Shared.Serialization.Utils.IsSimpleType(System.Object)">
            <summary>
            Indicates if the object value is a simple type.
            </summary>
            <param name="value">Object to check</param>
            <returns>True for non null values where the object type
            is a string, Decimal, DateTime, DBNull or primitive type.</returns>
        </member>
        <member name="M:Infragistics.Shared.Serialization.Utils.IsSimpleType(System.Type)">
            <summary>
            Indicates if the object value is a simple type.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True where the object type is a string, Decimal, DateTime, DBNull or primitive type.</returns>
        </member>
        <member name="M:Infragistics.Shared.Serialization.Utils.IsSafelySerializable(System.Object)">
            <summary>
            Indicates if the object may be safely serializable.
            </summary>
            <param name="value">Object to check</param>
            <returns>True if the value is a simple non-null type</returns>
        </member>
        <member name="M:Infragistics.Shared.Serialization.Utils.IsSafelySerializable(System.Type)">
            <summary>
            Indicates if the object may be safely serializable.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the value is a simple non-null type</returns>
        </member>
        <member name="M:Infragistics.Shared.Serialization.Utils.IsSafelyInfragisticsSerializable(System.Type)">
            <summary>
            Indicates if the object may be safely serializable at run-time.
            </summary>
            <param name="type">The type to check.</param>
            <remarks>
            <para class="body">This method differs from IsSafelySerializable in that it also checks for the InfragisticsSerializable attribute. This means that a developer must explicitly opt-in to allow the object to be saved.</para>
            </remarks>
            <returns>True if the value is a simple non-null type</returns>
        </member>
        <member name="M:Infragistics.Shared.Serialization.Utils.SerializeObjectProperty(System.Runtime.Serialization.SerializationInfo,System.String,System.Object)">
            <summary>
            Serializes the specified object into the SerializationInfo object
            </summary>
            <param name="info">Serialization info instance into which the value should be serialized.</param>
            <param name="name">Name used to serialize the object value</param>
            <param name="value">Value to serialize. Only objects that return true from <see cref="M:Infragistics.Shared.Serialization.Utils.IsSafelySerializable(System.Object)"/> will be serialized.</param>
        </member>
        <member name="M:Infragistics.Shared.Serialization.Utils.DeserializeObjectProperty(System.Runtime.Serialization.SerializationInfo,System.String)">
            <summary>
            Deserializes the specified object from the serialization info object
            </summary>
            <param name="info">Serialization info instance into which the value should be serialized.</param>
            <param name="name">Name used to serialize the object value</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="M:Infragistics.Shared.Serialization.Utils.DeserializeObjectProperty(System.Runtime.Serialization.SerializationEntry)">
            <summary>
            Deserializes the specified object from a SerializationEntry.
            </summary>
            <param name="entry">Entry used to obtain the object to deserialize</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="M:Infragistics.Shared.Serialization.Utils.SerializeProperty(System.Runtime.Serialization.SerializationInfo,System.String,System.Object)">
            <summary>
            Serializes the specified property value into the SerializationInfo object
            </summary>
            <param name="info">Serialization info instance into which the value should be serialized.</param>
            <param name="name">Name used to serialize the object value</param>
            <param name="value">Value to serialize.</param>
        </member>
        <member name="M:Infragistics.Shared.Serialization.Utils.DeserializeProperty(System.Runtime.Serialization.SerializationEntry,System.Type,System.Object)">
            <summary>
            Deserializes the specified property from the SerializationEntry object.
            </summary>
            <param name="entry">Entry used to obtain the object to deserialize</param>
            <param name="destinationType">Type that the value needs to be converted to.</param>
            <param name="defaultValue">The default value will be returned if the de-serialization and type conversion fails.</param>
            <returns>The deserialized object</returns>
            <remarks>If the data can't be de-serialized into the <b>destinationType</b> then no error is throw and the <b>defaultValue</b> is returned.</remarks>
        </member>
        <member name="M:Infragistics.Shared.Serialization.Utils.DeserializeProperty(System.Runtime.Serialization.SerializationEntry,System.Type,System.Object,System.Boolean@)">
            <summary>
            Deserializes the specified property from the SerializationEntry object.
            </summary>
            <param name="entry">Entry used to obtain the object to deserialize</param>
            <param name="destinationType">Type that the value needs to be converted to.</param>
            <param name="defaultValue">The default value will be returned if the de-serialization and type conversion fails.</param>
            <param name="succeeded">Will be set to <b>True</b> if the de-serialization succeeded.</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="T:Infragistics.Shared.WebColorsCollection">
            <summary>
            A collection of the Web colors shown in a color picker.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.WebColorsCollection.#ctor">
            <summary>
            Constructs a new instance of the <b>WebColorsCollection</b> class.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.WebColorsCollection.FillColors">
            <summary>
            Fills the collection with the web colors
            </summary>
        </member>
        <member name="P:Infragistics.Shared.WebColorsCollection.Default">
            <summary>
            Returns a static instance of the WebColorsCollection class.
            </summary>
        </member>
        <member name="T:Infragistics.Shared.XPItemColor">
            <summary>
            Calculates the XP style color scheme from current user 
            settings. The constructor checks the users screen to see if
            it supports high color or not. It then calculates out ALL
            of the calculated colors in one shot. Lastly it hooks up a listener
            so that it can re-initialize the colors if the user changes the
            color scheme or display depth(BPP). If the security permissions
            on the machine do not permit us to check color depth, we default
            to high color.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.XPItemColor.#cctor">
            <summary>
            Constructor, initializes a new instance of the <b>XPItemColor</b> class.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.XPItemColor.ColorFromHLS(System.Single,System.Single,System.Single)">
            <summary>
            Creates a valid Color based on HLS values.
            Similar to dotnet's ColorFromARGB
            </summary>
            <param name="hue">Hue</param>
            <param name="luminance">Luminance</param>
            <param name="saturation">Saturation</param>
            <returns>Color based on HLS</returns>
        </member>
        <member name="P:Infragistics.Shared.XPItemColor.HighColor">
            <summary>
            Returns current color mode. 
            True = High Color, 16bit or greater.
            False = Low Color, Less than 16bit.
            </summary>
        </member>
        <member name="P:Infragistics.Shared.XPItemColor.ToolBar">
            <summary>
            Returns XP style Toolbar color
            </summary>
        </member>
        <member name="P:Infragistics.Shared.XPItemColor.MenuBar">
            <summary>
            Returns XP style MenuBar color
            </summary>
        </member>
        <member name="P:Infragistics.Shared.XPItemColor.HighlightBorder">
            <summary>
            Returns XP style Highlight Border color
            </summary>
        </member>
        <member name="P:Infragistics.Shared.XPItemColor.HighlightMouseOver">
            <summary>
            Returns XP style Highlight MouseOver color
            </summary>
        </member>
        <member name="P:Infragistics.Shared.XPItemColor.HighlightMouseDown">
            <summary>
            Returns XP style Highlight MouseDown color
            </summary>
        </member>
        <member name="P:Infragistics.Shared.XPItemColor.MenuDroppedBorder">
            <summary>
            Returns XP style Menu Dropped Border color
            </summary>
        </member>
        <member name="P:Infragistics.Shared.XPItemColor.MenuIconArea">
            <summary>
            Returns XP style Menu Icon Area color
            </summary>
        </member>
        <member name="P:Infragistics.Shared.XPItemColor.MenuIconAreaExpanded">
            <summary>
            Returns XP style Menu Icon Area Expanded color
            </summary>
        </member>
        <member name="P:Infragistics.Shared.XPItemColor.MenuDroppedBackColor">
            <summary>
            Returns XP style Menu Dropped background color
            </summary>
        </member>
        <member name="P:Infragistics.Shared.XPItemColor.FloaterBorder">
            <summary>
            Returns XP style Floating Toolbar Border color
            </summary>
        </member>
        <member name="P:Infragistics.Shared.XPItemColor.FloaterCaption">
            <summary>
            Returns XP style Floating Toolbar Caption background color
            </summary>
        </member>
        <member name="P:Infragistics.Shared.XPItemColor.DisabledToolShadow">
            <summary>
            Returns XP style Disabled Tool color
            </summary>
        </member>
        <member name="P:Infragistics.Shared.XPItemColor.ToolSeparator">
            <summary>
            Returns XP style Tool Separator color
            </summary>
        </member>
        <member name="P:Infragistics.Shared.XPItemColor.HighlightStateToolPressed">
            <summary>
            Returns XP style Highlight state tool pressed color
            </summary>
        </member>
        <member name="P:Infragistics.Shared.XPItemColor.RaisedPictureShadow">
            <summary>
            Returns XP style Floating Toolbar Border color
            </summary>
        </member>
    </members>
</doc>
